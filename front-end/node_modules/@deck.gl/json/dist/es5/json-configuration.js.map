{"version":3,"sources":["../../src/json-configuration.js"],"names":["isObject","value","JSONConfiguration","constructor","configurations","typeKey","TYPE_KEY","functionKey","FUNCTION_KEY","log","console","classes","reactComponents","enumerations","constants","functions","convertFunction","parseExpressionString","preProcessClassProps","Class","props","postProcessConvertedJson","json","configuration","merge","key","Object","assign","validate"],"mappings":";;;;;;;;;AACA;;AACA;;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,KAAK,IAAIA,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAApD;;AAEe,MAAMC,iBAAN,CAAwB;AACrCC,EAAAA,WAAW,CAAC,GAAGC,cAAJ,EAAoB;AAE7B,SAAKC,OAAL,GAAeC,wBAAf;AACA,SAAKC,WAAL,GAAmBC,4BAAnB;AACA,SAAKC,GAAL,GAAWC,OAAX;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AAEA,SAAKC,eAAL,GAAuBC,8BAAvB;;AACA,SAAKC,oBAAL,GAA4B,CAACC,KAAD,EAAQC,KAAR,KAAkBA,KAA9C;;AACA,SAAKC,wBAAL,GAAgCC,IAAI,IAAIA,IAAxC;;AAEA,SAAK,MAAMC,aAAX,IAA4BnB,cAA5B,EAA4C;AAC1C,WAAKoB,KAAL,CAAWD,aAAX;AACD;AACF;;AAEDC,EAAAA,KAAK,CAACD,aAAD,EAAgB;AACnB,SAAK,MAAME,GAAX,IAAkBF,aAAlB,EAAiC;AAC/B,cAAQE,GAAR;AAEE,aAAK,QAAL;AACA,aAAK,OAAL;AACEC,UAAAA,MAAM,CAACC,MAAP,CAAc,KAAKhB,OAAnB,EAA4BY,aAAa,CAACE,GAAD,CAAzC;AACA;;AACF;AAEE,cAAIA,GAAG,IAAI,IAAX,EAAiB;AACf,kBAAMxB,KAAK,GAAGsB,aAAa,CAACE,GAAD,CAA3B;AACA,iBAAKA,GAAL,IAAYzB,QAAQ,CAAC,KAAKyB,GAAL,CAAD,CAAR,GAAsBC,MAAM,CAACC,MAAP,CAAc,KAAKF,GAAL,CAAd,EAAyBxB,KAAzB,CAAtB,GAAwDA,KAApE;AACD;;AAXL;AAaD;AACF;;AAED2B,EAAAA,QAAQ,CAACL,aAAD,EAAgB;AACtB,yBAAO,CAAC,KAAKlB,OAAN,IAAiB,OAAO,KAAKA,OAAZ,KAAwB,QAAhD;AACA,yBAAOL,QAAQ,CAAC,KAAKW,OAAN,CAAf;AACA,WAAO,IAAP;AACD;;AA3CoC","sourcesContent":["// TODO - default parsing code should not be part of the configuration.\nimport parseExpressionString from './helpers/parse-expression-string';\nimport assert from './utils/assert';\n\nimport {TYPE_KEY, FUNCTION_KEY} from './syntactic-sugar';\n\nconst isObject = value => value && typeof value === 'object';\n\nexport default class JSONConfiguration {\n  constructor(...configurations) {\n    // Initialize config with default values\n    this.typeKey = TYPE_KEY;\n    this.functionKey = FUNCTION_KEY;\n    this.log = console; // eslint-disable-line\n    this.classes = {};\n    this.reactComponents = {};\n    this.enumerations = {};\n    this.constants = {};\n    this.functions = {};\n    // TODO - this needs to be simpler, function conversion should be built in\n    this.convertFunction = parseExpressionString;\n    this.preProcessClassProps = (Class, props) => props;\n    this.postProcessConvertedJson = json => json;\n\n    for (const configuration of configurations) {\n      this.merge(configuration);\n    }\n  }\n\n  merge(configuration) {\n    for (const key in configuration) {\n      switch (key) {\n        // DEPRECATED = For backwards compatibility, add views and layers to classes;\n        case 'layers':\n        case 'views':\n          Object.assign(this.classes, configuration[key]);\n          break;\n        default:\n          // Store configuration as root fields (this.classes, ...)\n          if (key in this) {\n            const value = configuration[key];\n            this[key] = isObject(this[key]) ? Object.assign(this[key], value) : value;\n          }\n      }\n    }\n  }\n\n  validate(configuration) {\n    assert(!this.typeKey || typeof this.typeKey === 'string');\n    assert(isObject(this.classes));\n    return true;\n  }\n}\n"],"file":"json-configuration.js"}