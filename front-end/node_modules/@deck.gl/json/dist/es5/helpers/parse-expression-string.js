"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseExpressionString;

var _get = require("../utils/get");

var _expressionEval = _interopRequireDefault(require("expression-eval"));

const cachedExpressionMap = {
  '-': object => object
};

function parseExpressionString(propValue, configuration) {
  if (propValue in cachedExpressionMap) {
    return cachedExpressionMap[propValue];
  }

  let func;

  const ast = _expressionEval.default.parse(propValue);

  if (!ast.right && !ast.left && ast.type === 'Identifier') {
    func = row => {
      return (0, _get.get)(row, propValue);
    };
  } else {
    traverse(ast, node => {
      if (node.type === 'CallExpression') {
        throw new Error('Function calls not allowed in JSON expressions');
      }
    });

    func = row => {
      return _expressionEval.default.eval(ast, row);
    };
  }

  cachedExpressionMap[propValue] = func;
  return func;
}

function traverse(node, visitor) {
  if (Array.isArray(node)) {
    node.forEach(element => traverse(element, visitor));
  } else if (node && typeof node === 'object') {
    if (node.type) {
      visitor(node);
    }

    for (const key in node) {
      traverse(node[key], visitor);
    }
  }
}
//# sourceMappingURL=parse-expression-string.js.map