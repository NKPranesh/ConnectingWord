{"version":3,"sources":["../../../src/lib/deck-renderer.js"],"names":["TRACE_RENDER_LAYERS","DeckRenderer","constructor","gl","layerFilter","drawPickingColors","drawLayersPass","DrawLayersPass","pickLayersPass","PickLayersPass","renderCount","_needsRedraw","renderBuffers","lastPostProcessEffect","setProps","props","renderLayers","opts","layerPass","effects","target","Framebuffer","getDefaultFramebuffer","_preRender","outputBuffer","renderStats","render","_postRender","needsRedraw","clearRedrawFlags","redraw","finalize","buffer","delete","length","effect","preRender","postRender","_resizeRenderBuffers","push","resize","params","inputBuffer","swapBuffer"],"mappings":"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","sourcesContent":["import debug from '../debug';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport {Framebuffer} from '@luma.gl/core';\n\nconst TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';\n\nexport default class DeckRenderer {\n  constructor(gl) {\n    this.gl = gl;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n    this.renderBuffers = [];\n    this.lastPostProcessEffect = null;\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props && this.layerFilter !== props.layerFilter) {\n      this.layerFilter = props.layerFilter;\n      this._needsRedraw = 'layerFilter changed';\n    }\n\n    if ('drawPickingColors' in props && this.drawPickingColors !== props.drawPickingColors) {\n      this.drawPickingColors = props.drawPickingColors;\n      this._needsRedraw = 'drawPickingColors changed';\n    }\n  }\n\n  /*\n    target,\n    layers,\n    viewports,\n    onViewportActive,\n    views,\n    redrawReason,\n    clearCanvas,\n    effects,\n    pass,\n    stats\n  */\n  renderLayers(opts) {\n    const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n\n    opts.layerFilter = opts.layerFilter || this.layerFilter;\n    opts.effects = opts.effects || [];\n    opts.target = opts.target || Framebuffer.getDefaultFramebuffer(this.gl);\n\n    this._preRender(opts.effects, opts);\n\n    const outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : opts.target;\n    const renderStats = layerPass.render({...opts, target: outputBuffer});\n\n    this._postRender(opts.effects, opts);\n\n    this.renderCount++;\n\n    debug(TRACE_RENDER_LAYERS, this, renderStats, opts);\n  }\n\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  finalize() {\n    const {renderBuffers} = this;\n    for (const buffer of renderBuffers) {\n      buffer.delete();\n    }\n    renderBuffers.length = 0;\n  }\n\n  // Private\n  _preRender(effects, opts) {\n    let lastPostProcessEffect = null;\n\n    for (const effect of effects) {\n      effect.preRender(this.gl, opts);\n      if (effect.postRender) {\n        lastPostProcessEffect = effect;\n      }\n    }\n\n    if (lastPostProcessEffect) {\n      this._resizeRenderBuffers();\n    }\n    this.lastPostProcessEffect = lastPostProcessEffect;\n  }\n\n  _resizeRenderBuffers() {\n    const {renderBuffers} = this;\n    if (renderBuffers.length === 0) {\n      renderBuffers.push(new Framebuffer(this.gl), new Framebuffer(this.gl));\n    }\n    for (const buffer of renderBuffers) {\n      buffer.resize();\n    }\n  }\n\n  _postRender(effects, opts) {\n    const {renderBuffers} = this;\n    const params = {\n      inputBuffer: renderBuffers[0],\n      swapBuffer: renderBuffers[1],\n      target: null\n    };\n    for (const effect of effects) {\n      if (effect.postRender) {\n        if (effect === this.lastPostProcessEffect) {\n          params.target = opts.target;\n          effect.postRender(this.gl, params);\n          break;\n        }\n        const buffer = effect.postRender(this.gl, params);\n        params.inputBuffer = buffer;\n        params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];\n      }\n    }\n  }\n}\n"],"file":"deck-renderer.js"}