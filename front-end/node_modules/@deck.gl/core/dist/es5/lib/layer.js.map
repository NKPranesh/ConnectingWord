{"version":3,"sources":["../../../src/lib/layer.js"],"names":["TRACE_CHANGE_FLAG","TRACE_INITIALIZE","TRACE_UPDATE","TRACE_FINALIZE","TRACE_MATCHED","MAX_PICKING_COLOR_CACHE_SIZE","EMPTY_ARRAY","Object","freeze","areViewportsEqual","oldViewport","viewport","equals","pickingColorCache","Uint8ClampedArray","defaultProps","data","type","value","async","dataComparator","_dataDiff","__diff","compare","optional","dataTransform","onDataLoad","onError","fetch","url","propName","layer","loaders","loadOptions","signal","resourceManager","context","getLoadOptions","props","inResourceManager","contains","add","resourceId","persistent","subscribe","onChange","internalState","reloadAsyncProp","consumerId","id","requestId","updateTriggers","visible","pickable","opacity","min","max","onHover","onClick","onDragStart","onDrag","onDragEnd","coordinateSystem","COORDINATE_SYSTEM","DEFAULT","coordinateOrigin","modelMatrix","wrapLongitude","positionFormat","colorFormat","parameters","transitions","extensions","getPolygonOffset","layerIndex","highlightedObjectIndex","autoHighlight","highlightColor","Layer","Component","toString","className","constructor","layerName","name","raiseError","error","message","setState","updateObject","setChangeFlags","stateChanged","assign","state","setNeedsRedraw","redraw","needsRedraw","setNeedsUpdate","layerManager","String","needsUpdate","getNeedsRedraw","opts","clearRedrawFlags","_getNeedsRedraw","hasUniformTransition","shouldUpdateState","_getUpdateParams","uniformTransitions","active","isLoaded","isAsyncPropLoading","isPickable","getModels","models","model","getAttributeManager","attributeManager","getCurrentLayer","project","xyz","worldPosition","x","y","z","pixelProjectionMatrix","length","unproject","xy","projectPosition","use64bitPositions","LNGLAT","CARTESIAN","info","pickingEvent","nullPickingColor","encodePickingColor","i","target","decodePickingColor","color","Uint8Array","i1","i2","i3","index","initializeState","Error","getShaders","shaders","extension","call","oldProps","changeFlags","propsOrDataChanged","updateState","dataChanged","Array","isArray","dataRange","invalidateAll","neededPickingBuffer","needPickingBuffer","pickingColors","instancePickingColors","attributes","pickingColorsAttribute","constant","invalidate","finalizeState","delete","finalize","unsubscribe","clear","draw","getPickingInfo","mode","object","activateViewport","viewportChanged","isComposite","_update","invalidateAttribute","diffReason","updateAttributes","changedAttributes","_setModelAttributes","_updateAttributes","numInstances","getNumInstances","startIndices","getStartIndices","update","buffers","ignoreUnknownAttributes","getChangedAttributes","clearChangedFlags","_updateAttributeTransition","updateTransition","_updateUniformTransition","propsInTransition","create","key","defineProperty","calculateInstancePickingColors","attribute","cacheSize","Math","floor","usesPickingColorCache","log","warn","typedArrayManager","allocate","size","copy","maxCount","newCacheSize","pickingColor","subarray","excludeAttributes","userData","shaderAttributes","getShaderAttributes","setAttributes","disablePickingIndex","objectIndex","_disablePickingIndex","colors","start","getVertexOffset","end","buffer","subData","offset","restorePickingColors","updateSubBuffer","startOffset","undefined","_initialize","_initState","propsChanged","extensionsChanged","_updateState","stateNeedsUpdate","currentProps","currentViewport","updateParams","oldModels","gl","modelChanged","_updateModules","_renderLayers","setInstanceCount","clearChangeFlags","resetOldProps","_finalize","drawLayer","moduleParameters","uniforms","pow","setModuleParameters","offsets","polygonOffset","getChangeFlags","flags","flagChanged","concat","updateTriggersChanged","somethingChanged","diffProps","newProps","transitionsChanged","validateProps","updateModuleSettings","updateAutoHighlight","_updateAutoHighlight","pickingModuleParameters","pickingSelectedColor","picked","pickingHighlightColor","forceUpdate","Number","isInteger","getOldProps","attributeManagerNeedsRedraw","_getAttributeManager","AttributeManager","stats","timeline","isFinite","addInstanced","noAlloc","LayerState","get","deprecated","UniformTransitionManager","onAsyncPropUpdated","_onAsyncPropUpdated","bind","setAsyncProps","_transferState","oldLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable react/no-direct-mutation-state */\nimport {COORDINATE_SYSTEM} from './constants';\nimport AttributeManager from './attribute/attribute-manager';\nimport UniformTransitionManager from './uniform-transition-manager';\nimport {diffProps, validateProps} from '../lifecycle/props';\nimport {count} from '../utils/count';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport GL from '@luma.gl/constants';\nimport {withParameters, setParameters} from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport memoize from '../utils/memoize';\nimport {mergeShaders} from '../utils/shader';\nimport {projectPosition, getWorldPosition} from '../shaderlib/project/project-functions';\nimport typedArrayManager from '../utils/typed-array-manager';\n\nimport Component from '../lifecycle/component';\nimport LayerState from './layer-state';\n\nimport {worldToPixels} from '@math.gl/web-mercator';\n\nimport {load} from '@loaders.gl/core';\n\nconst TRACE_CHANGE_FLAG = 'layer.changeFlag';\nconst TRACE_INITIALIZE = 'layer.initialize';\nconst TRACE_UPDATE = 'layer.update';\nconst TRACE_FINALIZE = 'layer.finalize';\nconst TRACE_MATCHED = 'layer.matched';\n\nconst MAX_PICKING_COLOR_CACHE_SIZE = 2 ** 24 - 1;\n\nconst EMPTY_ARRAY = Object.freeze([]);\n\n// Only compare the same two viewports once\nconst areViewportsEqual = memoize(({oldViewport, viewport}) => {\n  return oldViewport.equals(viewport);\n});\n\nlet pickingColorCache = new Uint8ClampedArray(0);\n\nconst defaultProps = {\n  // data: Special handling for null, see below\n  data: {type: 'data', value: EMPTY_ARRAY, async: true},\n  dataComparator: null,\n  _dataDiff: {type: 'function', value: data => data && data.__diff, compare: false, optional: true},\n  dataTransform: {type: 'function', value: null, compare: false, optional: true},\n  onDataLoad: {type: 'function', value: null, compare: false, optional: true},\n  onError: {type: 'function', value: null, compare: false, optional: true},\n  fetch: {\n    type: 'function',\n    value: (url, {propName, layer, loaders, loadOptions, signal}) => {\n      const {resourceManager} = layer.context;\n      loadOptions = loadOptions || layer.getLoadOptions();\n      loaders = loaders || layer.props.loaders;\n      if (signal) {\n        loadOptions = {\n          ...loadOptions,\n          fetch: {\n            ...loadOptions?.fetch,\n            signal\n          }\n        };\n      }\n\n      let inResourceManager = resourceManager.contains(url);\n\n      if (!inResourceManager && !loadOptions) {\n        // If there is no layer-specific load options, then attempt to cache this resource in the data manager\n        resourceManager.add({resourceId: url, data: load(url, loaders), persistent: false});\n        inResourceManager = true;\n      }\n      if (inResourceManager) {\n        return resourceManager.subscribe({\n          resourceId: url,\n          onChange: data => layer.internalState.reloadAsyncProp(propName, data),\n          consumerId: layer.id,\n          requestId: propName\n        });\n      }\n\n      return load(url, loaders, loadOptions);\n    },\n    compare: false\n  },\n  updateTriggers: {}, // Update triggers: a core change detection mechanism in deck.gl\n\n  visible: true,\n  pickable: false,\n  opacity: {type: 'number', min: 0, max: 1, value: 1},\n\n  onHover: {type: 'function', value: null, compare: false, optional: true},\n  onClick: {type: 'function', value: null, compare: false, optional: true},\n  onDragStart: {type: 'function', value: null, compare: false, optional: true},\n  onDrag: {type: 'function', value: null, compare: false, optional: true},\n  onDragEnd: {type: 'function', value: null, compare: false, optional: true},\n\n  coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n  coordinateOrigin: {type: 'array', value: [0, 0, 0], compare: true},\n  modelMatrix: {type: 'array', value: null, compare: true, optional: true},\n  wrapLongitude: false,\n  positionFormat: 'XYZ',\n  colorFormat: 'RGBA',\n\n  parameters: {},\n  transitions: null,\n  extensions: [],\n  loaders: {type: 'array', value: [], optional: true, compare: true},\n\n  // Offset depth based on layer index to avoid z-fighting.\n  // Negative values pull layer towards the camera\n  // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm\n  getPolygonOffset: {\n    type: 'function',\n    value: ({layerIndex}) => [0, -layerIndex * 100],\n    compare: false\n  },\n\n  // Selection/Highlighting\n  highlightedObjectIndex: -1,\n  autoHighlight: false,\n  highlightColor: {type: 'accessor', value: [0, 0, 128, 128]}\n};\n\nexport default class Layer extends Component {\n  toString() {\n    const className = this.constructor.layerName || this.constructor.name;\n    return `${className}({id: '${this.props.id}'})`;\n  }\n\n  raiseError(error, message) {\n    if (message) {\n      error.message = `${message}: ${error.message}`;\n    }\n    if (!this.props.onError?.(error)) {\n      this.context?.onError?.(error, this);\n    }\n  }\n\n  // Public API\n\n  // Updates selected state members and marks the object for redraw\n  setState(updateObject) {\n    this.setChangeFlags({stateChanged: true});\n    Object.assign(this.state, updateObject);\n    this.setNeedsRedraw();\n  }\n\n  // Sets the redraw flag for this layer, will trigger a redraw next animation frame\n  setNeedsRedraw(redraw = true) {\n    if (this.internalState) {\n      this.internalState.needsRedraw = redraw;\n    }\n  }\n\n  // This layer needs a deep update\n  setNeedsUpdate() {\n    this.context.layerManager.setNeedsUpdate(String(this));\n    this.internalState.needsUpdate = true;\n  }\n\n  // Checks state of attributes and model\n  getNeedsRedraw(opts = {clearRedrawFlags: false}) {\n    return this._getNeedsRedraw(opts);\n  }\n\n  // Checks if layer attributes needs updating\n  needsUpdate() {\n    // Call subclass lifecycle method\n    return (\n      this.internalState.needsUpdate ||\n      this.hasUniformTransition() ||\n      this.shouldUpdateState(this._getUpdateParams())\n    );\n    // End lifecycle method\n  }\n\n  hasUniformTransition() {\n    return this.internalState.uniformTransitions.active;\n  }\n\n  get isLoaded() {\n    return this.internalState && !this.internalState.isAsyncPropLoading();\n  }\n\n  get wrapLongitude() {\n    return this.props.wrapLongitude;\n  }\n\n  // Returns true if the layer is pickable and visible.\n  isPickable() {\n    return this.props.pickable && this.props.visible;\n  }\n\n  // Return an array of models used by this layer, can be overriden by layer subclass\n  getModels() {\n    return this.state && (this.state.models || (this.state.model ? [this.state.model] : []));\n  }\n\n  getAttributeManager() {\n    return this.internalState && this.internalState.attributeManager;\n  }\n\n  // Returns the most recent layer that matched to this state\n  // (When reacting to an async event, this layer may no longer be the latest)\n  getCurrentLayer() {\n    return this.internalState && this.internalState.layer;\n  }\n\n  // Returns the default parse options for async props\n  getLoadOptions() {\n    return this.props.loadOptions;\n  }\n\n  // PROJECTION METHODS\n\n  // Projects a point with current map state (lat, lon, zoom, pitch, bearing)\n  // From the current layer's coordinate system to screen\n  project(xyz) {\n    const {viewport} = this.context;\n    const worldPosition = getWorldPosition(xyz, {\n      viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n    const [x, y, z] = worldToPixels(worldPosition, viewport.pixelProjectionMatrix);\n    return xyz.length === 2 ? [x, y] : [x, y, z];\n  }\n\n  // Note: this does not reverse `project`.\n  // Always unprojects to the viewport's coordinate system\n  unproject(xy) {\n    const {viewport} = this.context;\n    return viewport.unproject(xy);\n  }\n\n  projectPosition(xyz) {\n    return projectPosition(xyz, {\n      viewport: this.context.viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n  }\n\n  use64bitPositions() {\n    const {coordinateSystem} = this.props;\n    return (\n      coordinateSystem === COORDINATE_SYSTEM.DEFAULT ||\n      coordinateSystem === COORDINATE_SYSTEM.LNGLAT ||\n      coordinateSystem === COORDINATE_SYSTEM.CARTESIAN\n    );\n  }\n\n  // Event handling\n  onHover(info, pickingEvent) {\n    if (this.props.onHover) {\n      return this.props.onHover(info, pickingEvent);\n    }\n    return false;\n  }\n\n  onClick(info, pickingEvent) {\n    if (this.props.onClick) {\n      return this.props.onClick(info, pickingEvent);\n    }\n    return false;\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  // @return {Array} - a black color\n  nullPickingColor() {\n    return [0, 0, 0];\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  encodePickingColor(i, target = []) {\n    target[0] = (i + 1) & 255;\n    target[1] = ((i + 1) >> 8) & 255;\n    target[2] = (((i + 1) >> 8) >> 8) & 255;\n    return target;\n  }\n\n  // Returns the index corresponding to a picking color that doesn't match any subfeature\n  // @param {Uint8Array} color - color array to be decoded\n  // @return {Array} - the decoded picking color\n  decodePickingColor(color) {\n    assert(color instanceof Uint8Array);\n    const [i1, i2, i3] = color;\n    // 1 was added to seperate from no selection\n    const index = i1 + i2 * 256 + i3 * 65536 - 1;\n    return index;\n  }\n\n  // //////////////////////////////////////////////////\n  // LIFECYCLE METHODS, overridden by the layer subclasses\n\n  // Called once to set up the initial state\n  // App can create WebGL resources\n  initializeState() {\n    throw new Error(`Layer ${this} has not defined initializeState`);\n  }\n\n  getShaders(shaders) {\n    for (const extension of this.props.extensions) {\n      shaders = mergeShaders(shaders, extension.getShaders.call(this, extension));\n    }\n    return shaders;\n  }\n\n  // Let's layer control if updateState should be called\n  shouldUpdateState({oldProps, props, context, changeFlags}) {\n    return changeFlags.propsOrDataChanged;\n  }\n\n  // Default implementation, all attributes will be invalidated and updated\n  // when data changes\n  /* eslint-disable-next-line complexity */\n  updateState({oldProps, props, context, changeFlags}) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.dataChanged && attributeManager) {\n      const {dataChanged} = changeFlags;\n      if (Array.isArray(dataChanged)) {\n        // is partial update\n        for (const dataRange of dataChanged) {\n          attributeManager.invalidateAll(dataRange);\n        }\n      } else {\n        attributeManager.invalidateAll();\n      }\n    }\n\n    const neededPickingBuffer = oldProps.highlightedObjectIndex >= 0 || oldProps.pickable;\n    const needPickingBuffer = props.highlightedObjectIndex >= 0 || props.pickable;\n    if (neededPickingBuffer !== needPickingBuffer && attributeManager) {\n      const {pickingColors, instancePickingColors} = attributeManager.attributes;\n      const pickingColorsAttribute = pickingColors || instancePickingColors;\n      if (pickingColorsAttribute) {\n        if (needPickingBuffer && pickingColorsAttribute.constant) {\n          pickingColorsAttribute.constant = false;\n          attributeManager.invalidate(pickingColorsAttribute.id);\n        }\n        if (!pickingColorsAttribute.value && !needPickingBuffer) {\n          pickingColorsAttribute.constant = true;\n          pickingColorsAttribute.value = [0, 0, 0];\n        }\n      }\n    }\n  }\n\n  // Called once when layer is no longer matched and state will be discarded\n  // App can destroy WebGL resources here\n  finalizeState() {\n    for (const model of this.getModels()) {\n      model.delete();\n    }\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.finalize();\n    }\n    this.context.resourceManager.unsubscribe({consumerId: this.id});\n    this.internalState.uniformTransitions.clear();\n    this.internalState.finalize();\n  }\n\n  // If state has a model, draw it with supplied uniforms\n  draw(opts) {\n    for (const model of this.getModels()) {\n      model.draw(opts);\n    }\n  }\n\n  // called to populate the info object that is passed to the event handler\n  // @return null to cancel event\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n\n    if (index >= 0) {\n      // If props.data is an indexable array, get the object\n      if (Array.isArray(this.props.data)) {\n        info.object = this.props.data[index];\n      }\n    }\n\n    return info;\n  }\n\n  // END LIFECYCLE METHODS\n  // //////////////////////////////////////////////////\n\n  // INTERNAL METHODS\n  activateViewport(viewport) {\n    const oldViewport = this.internalState.viewport;\n    this.internalState.viewport = viewport;\n\n    if (!oldViewport || !areViewportsEqual({oldViewport, viewport})) {\n      this.setChangeFlags({viewportChanged: true});\n\n      if (this.isComposite) {\n        if (this.needsUpdate()) {\n          // Composite layers may add/remove sublayers on viewport change\n          // Because we cannot change the layers list during a draw cycle, we don't want to update sublayers right away\n          // This will not call update immediately, but mark the layerManager as needs update on the next frame\n          this.setNeedsUpdate();\n        }\n      } else {\n        this._update();\n      }\n    }\n  }\n\n  // Default implementation of attribute invalidation, can be redefined\n  invalidateAttribute(name = 'all', diffReason = '') {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    if (name === 'all') {\n      attributeManager.invalidateAll();\n    } else {\n      attributeManager.invalidate(name);\n    }\n  }\n\n  updateAttributes(changedAttributes) {\n    for (const model of this.getModels()) {\n      this._setModelAttributes(model, changedAttributes);\n    }\n  }\n\n  // Calls attribute manager to update any WebGL attributes\n  _updateAttributes(props) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    // Figure out data length\n    const numInstances = this.getNumInstances(props);\n    const startIndices = this.getStartIndices(props);\n\n    attributeManager.update({\n      data: props.data,\n      numInstances,\n      startIndices,\n      props,\n      transitions: props.transitions,\n      buffers: props.data.attributes,\n      context: this,\n      // Don't worry about non-attribute props\n      ignoreUnknownAttributes: true\n    });\n\n    const changedAttributes = attributeManager.getChangedAttributes({clearChangedFlags: true});\n    this.updateAttributes(changedAttributes);\n  }\n\n  // Update attribute transitions. This is called in drawLayer, no model updates required.\n  _updateAttributeTransition() {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.updateTransition();\n    }\n  }\n\n  // Update uniform (prop) transitions. This is called in updateState, may result in model updates.\n  _updateUniformTransition() {\n    const {uniformTransitions} = this.internalState;\n    if (uniformTransitions.active) {\n      // clone props\n      const propsInTransition = uniformTransitions.update();\n      const props = Object.create(this.props);\n      for (const key in propsInTransition) {\n        Object.defineProperty(props, key, {value: propsInTransition[key]});\n      }\n      return props;\n    }\n    return this.props;\n  }\n\n  calculateInstancePickingColors(attribute, {numInstances}) {\n    if (attribute.constant) {\n      return;\n    }\n\n    // calculateInstancePickingColors always generates the same sequence.\n    // pickingColorCache saves the largest generated sequence for reuse\n    const cacheSize = Math.floor(pickingColorCache.length / 3);\n\n    // Record when using the picking buffer cache, so that layers can always point at the most recently allocated cache\n    this.internalState.usesPickingColorCache = true;\n\n    if (cacheSize < numInstances) {\n      if (numInstances > MAX_PICKING_COLOR_CACHE_SIZE) {\n        log.warn(\n          'Layer has too many data objects. Picking might not be able to distinguish all objects.'\n        )();\n      }\n\n      pickingColorCache = typedArrayManager.allocate(pickingColorCache, numInstances, {\n        size: 3,\n        copy: true,\n        maxCount: Math.max(numInstances, MAX_PICKING_COLOR_CACHE_SIZE)\n      });\n\n      // If the attribute is larger than the cache, resize the cache and populate the missing chunk\n      const newCacheSize = Math.floor(pickingColorCache.length / 3);\n      const pickingColor = [];\n      for (let i = cacheSize; i < newCacheSize; i++) {\n        this.encodePickingColor(i, pickingColor);\n        pickingColorCache[i * 3 + 0] = pickingColor[0];\n        pickingColorCache[i * 3 + 1] = pickingColor[1];\n        pickingColorCache[i * 3 + 2] = pickingColor[2];\n      }\n    }\n\n    attribute.value = pickingColorCache.subarray(0, numInstances * 3);\n  }\n\n  _setModelAttributes(model, changedAttributes) {\n    const attributeManager = this.getAttributeManager();\n    const excludeAttributes = model.userData.excludeAttributes || {};\n    const shaderAttributes = attributeManager.getShaderAttributes(\n      changedAttributes,\n      excludeAttributes\n    );\n\n    model.setAttributes(shaderAttributes);\n  }\n\n  // Sets the picking color at the specified index to null picking color. Used for multi-depth picking.\n  // This method may be overriden by layer implementations\n  disablePickingIndex(objectIndex) {\n    this._disablePickingIndex(objectIndex);\n  }\n\n  _disablePickingIndex(objectIndex) {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    const start = colors.getVertexOffset(objectIndex);\n    const end = colors.getVertexOffset(objectIndex + 1);\n\n    // Fill the sub buffer with 0s\n    colors.buffer.subData({\n      data: new Uint8Array(end - start),\n      offset: start // 1 byte per element\n    });\n  }\n\n  restorePickingColors() {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n    // The picking color cache may have been freed and then reallocated. This ensures we read from the currently allocated cache.\n    if (\n      this.internalState.usesPickingColorCache &&\n      colors.value.buffer !== pickingColorCache.buffer\n    ) {\n      colors.value = pickingColorCache.subarray(0, colors.value.length);\n    }\n    colors.updateSubBuffer({startOffset: 0});\n  }\n\n  // Deduces numer of instances. Intention is to support:\n  // - Explicit setting of numInstances\n  // - Auto-deduction for ES6 containers that define a size member\n  // - Auto-deduction for Classic Arrays via the built-in length attribute\n  // - Auto-deduction via arrays\n  getNumInstances(props) {\n    props = props || this.props;\n\n    // First Check if app has provided an explicit value\n    if (props.numInstances !== undefined) {\n      return props.numInstances;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.numInstances !== undefined) {\n      return this.state.numInstances;\n    }\n\n    // Use container library to get a count for any ES6 container or object\n    return count(props.data);\n  }\n\n  // Buffer layout describes how many attribute values are packed for each data object\n  // The default (null) is one value each object.\n  // Some data formats (e.g. paths, polygons) have various length. Their buffer layout\n  //  is in the form of [L0, L1, L2, ...]\n  getStartIndices(props) {\n    props = props || this.props;\n\n    // First Check if startIndices is provided as an explicit value\n    if (props.startIndices !== undefined) {\n      return props.startIndices;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.startIndices) {\n      return this.state.startIndices;\n    }\n\n    return null;\n  }\n\n  // LAYER MANAGER API\n  // Should only be called by the deck.gl LayerManager class\n\n  // Called by layer manager when a new layer is found\n  /* eslint-disable max-statements */\n  _initialize() {\n    debug(TRACE_INITIALIZE, this);\n\n    this._initState();\n\n    // Call subclass lifecycle methods\n    this.initializeState(this.context);\n    // Initialize extensions\n    for (const extension of this.props.extensions) {\n      extension.initializeState.call(this, this.context, extension);\n    }\n    // End subclass lifecycle methods\n\n    // initializeState callback tends to clear state\n    this.setChangeFlags({\n      dataChanged: true,\n      propsChanged: true,\n      viewportChanged: true,\n      extensionsChanged: true\n    });\n\n    this._updateState();\n  }\n\n  // Called by layer manager\n  // if this layer is new (not matched with an existing layer) oldProps will be empty object\n  _update() {\n    // Call subclass lifecycle method\n    const stateNeedsUpdate = this.needsUpdate();\n    // End lifecycle method\n    debug(TRACE_UPDATE, this, stateNeedsUpdate);\n\n    if (stateNeedsUpdate) {\n      this._updateState();\n    }\n  }\n\n  // Common code for _initialize and _update\n  _updateState() {\n    const currentProps = this.props;\n    const currentViewport = this.context.viewport;\n    const propsInTransition = this._updateUniformTransition();\n    this.internalState.propsInTransition = propsInTransition;\n    // Overwrite this.context.viewport during update to use the last activated viewport on this layer\n    // In multi-view applications, a layer may only be drawn in one of the views\n    // Which would make the \"active\" viewport different from the shared context\n    this.context.viewport = this.internalState.viewport || currentViewport;\n    // Overwrite this.props during update to use in-transition prop values\n    this.props = propsInTransition;\n\n    try {\n      const updateParams = this._getUpdateParams();\n      const oldModels = this.getModels();\n\n      // Safely call subclass lifecycle methods\n      if (this.context.gl) {\n        this.updateState(updateParams);\n      } else {\n        try {\n          this.updateState(updateParams);\n        } catch (error) {\n          // ignore error if gl context is missing\n        }\n      }\n      // Execute extension updates\n      for (const extension of this.props.extensions) {\n        extension.updateState.call(this, updateParams, extension);\n      }\n\n      const modelChanged = this.getModels()[0] !== oldModels[0];\n      this._updateModules(updateParams, modelChanged);\n      // End subclass lifecycle methods\n\n      if (this.isComposite) {\n        // Render or update previously rendered sublayers\n        this._renderLayers(updateParams);\n      } else {\n        this.setNeedsRedraw();\n        // Add any subclass attributes\n        this._updateAttributes(this.props);\n\n        // Note: Automatic instance count update only works for single layers\n        if (this.state.model) {\n          this.state.model.setInstanceCount(this.getNumInstances());\n        }\n      }\n    } finally {\n      // Restore shared context\n      this.context.viewport = currentViewport;\n      this.props = currentProps;\n      this.clearChangeFlags();\n      this.internalState.needsUpdate = false;\n      this.internalState.resetOldProps();\n    }\n  }\n  /* eslint-enable max-statements */\n\n  // Called by manager when layer is about to be disposed\n  // Note: not guaranteed to be called on application shutdown\n  _finalize() {\n    debug(TRACE_FINALIZE, this);\n\n    // Call subclass lifecycle method\n    this.finalizeState(this.context);\n    // Finalize extensions\n    for (const extension of this.props.extensions) {\n      extension.finalizeState.call(this, extension);\n    }\n  }\n\n  // Calculates uniforms\n  drawLayer({moduleParameters = null, uniforms = {}, parameters = {}}) {\n    this._updateAttributeTransition();\n\n    const currentProps = this.props;\n    // Overwrite this.props during redraw to use in-transition prop values\n    // `internalState.propsInTransition` could be missing if `updateState` failed\n    this.props = this.internalState.propsInTransition || currentProps;\n\n    const {opacity} = this.props;\n    // apply gamma to opacity to make it visually \"linear\"\n    uniforms.opacity = Math.pow(opacity, 1 / 2.2);\n\n    try {\n      // TODO/ib - hack move to luma Model.draw\n      if (moduleParameters) {\n        this.setModuleParameters(moduleParameters);\n      }\n\n      // Apply polygon offset to avoid z-fighting\n      // TODO - move to draw-layers\n      const {getPolygonOffset} = this.props;\n      const offsets = (getPolygonOffset && getPolygonOffset(uniforms)) || [0, 0];\n\n      setParameters(this.context.gl, {polygonOffset: offsets});\n\n      // Call subclass lifecycle method\n      withParameters(this.context.gl, parameters, () => {\n        const opts = {moduleParameters, uniforms, parameters, context: this.context};\n\n        // extensions\n        for (const extension of this.props.extensions) {\n          extension.draw.call(this, opts, extension);\n        }\n\n        this.draw(opts);\n      });\n    } finally {\n      this.props = currentProps;\n    }\n\n    // End lifecycle method\n  }\n\n  // Helper methods\n  getChangeFlags() {\n    return this.internalState.changeFlags;\n  }\n\n  // Dirty some change flags, will be handled by updateLayer\n  /* eslint-disable complexity */\n  setChangeFlags(flags) {\n    const {changeFlags} = this.internalState;\n\n    /* eslint-disable no-fallthrough, max-depth */\n    for (const key in flags) {\n      if (flags[key]) {\n        let flagChanged = false;\n        switch (key) {\n          case 'dataChanged':\n            // changeFlags.dataChanged may be `false`, a string (reason) or an array of ranges\n            if (Array.isArray(changeFlags[key])) {\n              changeFlags[key] = Array.isArray(flags[key])\n                ? changeFlags[key].concat(flags[key])\n                : flags[key];\n              flagChanged = true;\n            }\n\n          default:\n            if (!changeFlags[key]) {\n              changeFlags[key] = flags[key];\n              flagChanged = true;\n            }\n        }\n        if (flagChanged) {\n          debug(TRACE_CHANGE_FLAG, this, key, flags);\n        }\n      }\n    }\n    /* eslint-enable no-fallthrough, max-depth */\n\n    // Update composite flags\n    const propsOrDataChanged =\n      changeFlags.dataChanged ||\n      changeFlags.updateTriggersChanged ||\n      changeFlags.propsChanged ||\n      changeFlags.extensionsChanged;\n    changeFlags.propsOrDataChanged = propsOrDataChanged;\n    changeFlags.somethingChanged =\n      propsOrDataChanged || flags.viewportChanged || flags.stateChanged;\n  }\n  /* eslint-enable complexity */\n\n  // Clear all changeFlags, typically after an update\n  clearChangeFlags() {\n    this.internalState.changeFlags = {\n      // Primary changeFlags, can be strings stating reason for change\n      dataChanged: false,\n      propsChanged: false,\n      updateTriggersChanged: false,\n      viewportChanged: false,\n      stateChanged: false,\n      extensionsChanged: false,\n\n      // Derived changeFlags\n      propsOrDataChanged: false,\n      somethingChanged: false\n    };\n  }\n\n  // Compares the layers props with old props from a matched older layer\n  // and extracts change flags that describe what has change so that state\n  // can be update correctly with minimal effort\n  diffProps(newProps, oldProps) {\n    const changeFlags = diffProps(newProps, oldProps);\n\n    // iterate over changedTriggers\n    if (changeFlags.updateTriggersChanged) {\n      for (const key in changeFlags.updateTriggersChanged) {\n        if (changeFlags.updateTriggersChanged[key]) {\n          this.invalidateAttribute(key);\n        }\n      }\n    }\n\n    // trigger uniform transitions\n    if (changeFlags.transitionsChanged) {\n      for (const key in changeFlags.transitionsChanged) {\n        // prop changed and transition is enabled\n        this.internalState.uniformTransitions.add(\n          key,\n          oldProps[key],\n          newProps[key],\n          newProps.transitions[key]\n        );\n      }\n    }\n\n    return this.setChangeFlags(changeFlags);\n  }\n\n  // Called by layer manager to validate props (in development)\n  validateProps() {\n    validateProps(this.props);\n  }\n\n  setModuleParameters(moduleParameters) {\n    for (const model of this.getModels()) {\n      model.updateModuleSettings(moduleParameters);\n    }\n  }\n\n  updateAutoHighlight(info) {\n    if (this.props.autoHighlight) {\n      this._updateAutoHighlight(info);\n    }\n  }\n\n  // May be overriden by classes\n  _updateAutoHighlight(info) {\n    const pickingModuleParameters = {\n      pickingSelectedColor: info.picked ? info.color : null\n    };\n    const {highlightColor} = this.props;\n    if (info.picked && typeof highlightColor === 'function') {\n      pickingModuleParameters.pickingHighlightColor = highlightColor(info);\n    }\n    this.setModuleParameters(pickingModuleParameters);\n    // setModuleParameters does not trigger redraw\n    this.setNeedsRedraw();\n  }\n\n  // PRIVATE METHODS\n  _updateModules({props, oldProps}, forceUpdate) {\n    // Picking module parameters\n    const {autoHighlight, highlightedObjectIndex, highlightColor} = props;\n    if (\n      forceUpdate ||\n      oldProps.autoHighlight !== autoHighlight ||\n      oldProps.highlightedObjectIndex !== highlightedObjectIndex ||\n      oldProps.highlightColor !== highlightColor\n    ) {\n      const parameters = {};\n      if (!autoHighlight) {\n        parameters.pickingSelectedColor = null;\n      }\n      if (Array.isArray(highlightColor)) {\n        parameters.pickingHighlightColor = highlightColor;\n      }\n\n      // highlightedObjectIndex will overwrite any settings from auto highlighting.\n      if (Number.isInteger(highlightedObjectIndex)) {\n        parameters.pickingSelectedColor =\n          highlightedObjectIndex >= 0 ? this.encodePickingColor(highlightedObjectIndex) : null;\n      }\n\n      this.setModuleParameters(parameters);\n    }\n  }\n\n  _getUpdateParams() {\n    return {\n      props: this.props,\n      oldProps: this.internalState.getOldProps(),\n      context: this.context,\n      changeFlags: this.internalState.changeFlags\n    };\n  }\n\n  // Checks state of attributes and model\n  _getNeedsRedraw(opts) {\n    // this method may be called by the render loop as soon a the layer\n    // has been created, so guard against uninitialized state\n    if (!this.internalState) {\n      return false;\n    }\n\n    let redraw = false;\n    redraw = redraw || (this.internalState.needsRedraw && this.id);\n    this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;\n\n    // TODO - is attribute manager needed? - Model should be enough.\n    const attributeManager = this.getAttributeManager();\n    const attributeManagerNeedsRedraw = attributeManager && attributeManager.getNeedsRedraw(opts);\n    redraw = redraw || attributeManagerNeedsRedraw;\n\n    return redraw;\n  }\n\n  // Create new attribute manager\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats,\n      timeline: this.context.timeline\n    });\n  }\n\n  _initState() {\n    assert(!this.internalState && !this.state); // finalized layer cannot be reused\n    assert(isFinite(this.props.coordinateSystem)); // invalid coordinateSystem\n\n    const attributeManager = this._getAttributeManager();\n\n    if (attributeManager) {\n      // All instanced layers get instancePickingColors attribute by default\n      // Their shaders can use it to render a picking scene\n      // TODO - this slightly slows down non instanced layers\n      attributeManager.addInstanced({\n        instancePickingColors: {\n          type: GL.UNSIGNED_BYTE,\n          size: 3,\n          noAlloc: true,\n          update: this.calculateInstancePickingColors\n        }\n      });\n    }\n\n    this.internalState = new LayerState({\n      attributeManager,\n      layer: this\n    });\n    this.clearChangeFlags(); // populate this.internalState.changeFlags\n\n    this.state = {};\n    // for backwards compatibility with older layers\n    // TODO - remove in next release\n    /* eslint-disable accessor-pairs */\n    Object.defineProperty(this.state, 'attributeManager', {\n      get: () => {\n        log.deprecated('layer.state.attributeManager', 'layer.getAttributeManager()');\n        return attributeManager;\n      }\n    });\n    /* eslint-enable accessor-pairs */\n\n    this.internalState.layer = this;\n    this.internalState.uniformTransitions = new UniformTransitionManager(this.context.timeline);\n    this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n  }\n\n  // Called by layer manager to transfer state from an old layer\n  _transferState(oldLayer) {\n    debug(TRACE_MATCHED, this, this === oldLayer);\n\n    const {state, internalState} = oldLayer;\n\n    if (this === oldLayer) {\n      return;\n    }\n\n    // Move internalState\n    this.internalState = internalState;\n    this.internalState.layer = this;\n\n    // Move state\n    this.state = state;\n    // We keep the state ref on old layers to support async actions\n    // oldLayer.state = null;\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n\n    this.diffProps(this.props, this.internalState.getOldProps());\n  }\n\n  _onAsyncPropUpdated() {\n    this.diffProps(this.props, this.internalState.getOldProps());\n    this.setNeedsUpdate();\n  }\n}\n\nLayer.layerName = 'Layer';\nLayer.defaultProps = defaultProps;\n"],"file":"layer.js"}