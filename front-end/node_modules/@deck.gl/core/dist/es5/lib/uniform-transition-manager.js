"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _attributeTransitionUtils = require("./attribute/attribute-transition-utils");

var _cpuInterpolationTransition = _interopRequireDefault(require("../transitions/cpu-interpolation-transition"));

var _cpuSpringTransition = _interopRequireDefault(require("../transitions/cpu-spring-transition"));

var _log = _interopRequireDefault(require("../utils/log"));

const TRANSITION_TYPES = {
  interpolation: _cpuInterpolationTransition.default,
  spring: _cpuSpringTransition.default
};

class UniformTransitionManager {
  constructor(timeline) {
    this.transitions = new Map();
    this.timeline = timeline;
  }

  get active() {
    return this.transitions.size > 0;
  }

  add(key, fromValue, toValue, settings) {
    const {
      transitions
    } = this;

    if (transitions.has(key)) {
      const transition = transitions.get(key);
      const {
        value = transition.settings.fromValue
      } = transition;
      fromValue = value;
      this.remove(key);
    }

    settings = (0, _attributeTransitionUtils.normalizeTransitionSettings)(settings);

    if (!settings) {
      return;
    }

    const TransitionType = TRANSITION_TYPES[settings.type];

    if (!TransitionType) {
      _log.default.error("unsupported transition type '".concat(settings.type, "'"))();

      return;
    }

    const transition = new TransitionType(this.timeline);
    transition.start({ ...settings,
      fromValue,
      toValue
    });
    transitions.set(key, transition);
  }

  remove(key) {
    const {
      transitions
    } = this;

    if (transitions.has(key)) {
      transitions.get(key).cancel();
      transitions.delete(key);
    }
  }

  update() {
    const propsInTransition = {};

    for (const [key, transition] of this.transitions) {
      transition.update();
      propsInTransition[key] = transition.value;

      if (!transition.inProgress) {
        this.remove(key);
      }
    }

    return propsInTransition;
  }

  clear() {
    for (const key of this.transitions.keys()) {
      this.remove(key);
    }
  }

}

exports.default = UniformTransitionManager;
//# sourceMappingURL=uniform-transition-manager.js.map