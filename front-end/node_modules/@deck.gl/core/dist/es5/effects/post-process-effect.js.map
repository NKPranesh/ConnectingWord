{"version":3,"sources":["../../../src/effects/post-process-effect.js"],"names":["PostProcessEffect","Effect","constructor","module","props","id","name","postRender","gl","params","passes","createPasses","target","inputBuffer","outputBuffer","swapBuffer","index","length","render","switchBuffer","cleanup","pass","delete","moduleSettings","filter","sampler","fs","getFragmentShaderForRenderPass","ScreenPass","map","idn","FILTER_FS_TEMPLATE","func","SAMPLER_FS_TEMPLATE"],"mappings":"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","sourcesContent":["import Effect from '../lib/effect';\nimport ScreenPass from '../passes/screen-pass';\nimport {normalizeShaderModule} from '@luma.gl/core';\n\nexport default class PostProcessEffect extends Effect {\n  constructor(module, props = {}) {\n    super(props);\n    this.id = `${module.name}-pass`;\n    normalizeShaderModule(module);\n    this.module = module;\n  }\n\n  postRender(gl, params) {\n    if (!this.passes) {\n      this.passes = createPasses(gl, this.module, this.id, this.props);\n    }\n\n    const {target} = params;\n    let inputBuffer = params.inputBuffer;\n    let outputBuffer = params.swapBuffer;\n\n    for (let index = 0; index < this.passes.length; index++) {\n      if (target && index === this.passes.length - 1) {\n        outputBuffer = target;\n      }\n      this.passes[index].render({inputBuffer, outputBuffer});\n      const switchBuffer = outputBuffer;\n      outputBuffer = inputBuffer;\n      inputBuffer = switchBuffer;\n    }\n    return inputBuffer;\n  }\n\n  cleanup() {\n    if (this.passes) {\n      for (const pass of this.passes) {\n        pass.delete();\n      }\n      this.passes = null;\n    }\n  }\n}\n\nfunction createPasses(gl, module, id, moduleSettings) {\n  if (module.filter || module.sampler) {\n    const fs = getFragmentShaderForRenderPass(module);\n    const pass = new ScreenPass(gl, {\n      id,\n      module,\n      fs,\n      moduleSettings\n    });\n    return [pass];\n  }\n\n  const passes = module.passes || [];\n  return passes.map((pass, index) => {\n    const fs = getFragmentShaderForRenderPass(module, pass);\n    const idn = `${id}-${index}`;\n\n    return new ScreenPass(gl, {\n      id: idn,\n      module,\n      fs,\n      moduleSettings\n    });\n  });\n}\n\nconst FILTER_FS_TEMPLATE = func => `\\\nuniform sampler2D texture;\nuniform vec2 texSize;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n\n  gl_FragColor = texture2D(texture, texCoord);\n  gl_FragColor = ${func}(gl_FragColor, texSize, texCoord);\n}\n`;\n\nconst SAMPLER_FS_TEMPLATE = func => `\\\nuniform sampler2D texture;\nuniform vec2 texSize;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n\n  gl_FragColor = ${func}(texture, texSize, texCoord);\n}\n`;\n\nfunction getFragmentShaderForRenderPass(module, pass = module) {\n  if (pass.filter) {\n    const func = typeof pass.filter === 'string' ? pass.filter : `${module.name}_filterColor`;\n    return FILTER_FS_TEMPLATE(func);\n  }\n\n  if (pass.sampler) {\n    const func = typeof pass.sampler === 'string' ? pass.sampler : `${module.name}_sampleColor`;\n    return SAMPLER_FS_TEMPLATE(func);\n  }\n\n  // console.error(`${module.name} no fragment shader generated`);\n  return null;\n}\n"],"file":"post-process-effect.js"}