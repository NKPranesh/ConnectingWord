{"version":3,"sources":["../../../src/passes/shadow-pass.js"],"names":["ShadowPass","LayersPass","constructor","gl","props","shadowMap","Texture2D","width","height","parameters","depthBuffer","Renderbuffer","format","fbo","Framebuffer","id","attachments","render","params","target","depthRange","depthTest","blend","clearColor","viewport","viewports","pixelRatio","resize","pass","shouldDrawLayer","layer","shadowEnabled","getModuleParameters","drawToShadowMap","delete"],"mappings":";;;;;;;;;AAAA;;AACA;;AAQe,MAAMA,UAAN,SAAyBC,mBAAzB,CAAoC;AACjDC,EAAAA,WAAW,CAACC,EAAD,EAAKC,KAAL,EAAY;AACrB,UAAMD,EAAN,EAAUC,KAAV;AAGA,SAAKC,SAAL,GAAiB,IAAIC,eAAJ,CAAcH,EAAd,EAAkB;AACjCI,MAAAA,KAAK,EAAE,CAD0B;AAEjCC,MAAAA,MAAM,EAAE,CAFyB;AAGjCC,MAAAA,UAAU,EAAE;AACV,qBADU;AAEV,qBAFU;AAGV,sBAHU;AAIV;AAJU;AAHqB,KAAlB,CAAjB;AAWA,SAAKC,WAAL,GAAmB,IAAIC,kBAAJ,CAAiBR,EAAjB,EAAqB;AACtCS,MAAAA,MAAM,OADgC;AAEtCL,MAAAA,KAAK,EAAE,CAF+B;AAGtCC,MAAAA,MAAM,EAAE;AAH8B,KAArB,CAAnB;AAMA,SAAKK,GAAL,GAAW,IAAIC,iBAAJ,CAAgBX,EAAhB,EAAoB;AAC7BY,MAAAA,EAAE,EAAE,WADyB;AAE7BR,MAAAA,KAAK,EAAE,CAFsB;AAG7BC,MAAAA,MAAM,EAAE,CAHqB;AAI7BQ,MAAAA,WAAW,EAAE;AACX,iBAAwB,KAAKX,SADlB;AAGX,iBAAuB,KAAKK;AAHjB;AAJgB,KAApB,CAAX;AAUD;;AAEDO,EAAAA,MAAM,CAACC,MAAD,EAAS;AACb,UAAMC,MAAM,GAAG,KAAKN,GAApB;AAEA,8BACE,KAAKV,EADP,EAEE;AACEiB,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADd;AAEEC,MAAAA,SAAS,EAAE,IAFb;AAGEC,MAAAA,KAAK,EAAE,KAHT;AAIEC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAJd,KAFF,EAQE,MAAM;AACJ,YAAMC,QAAQ,GAAGN,MAAM,CAACO,SAAP,CAAiB,CAAjB,CAAjB;AACA,YAAMC,UAAU,GAAG,4BAAiB,KAAKvB,EAAtB,CAAnB;AACA,YAAMI,KAAK,GAAGiB,QAAQ,CAACjB,KAAT,GAAiBmB,UAA/B;AACA,YAAMlB,MAAM,GAAGgB,QAAQ,CAAChB,MAAT,GAAkBkB,UAAjC;;AACA,UAAInB,KAAK,KAAKY,MAAM,CAACZ,KAAjB,IAA0BC,MAAM,KAAKW,MAAM,CAACX,MAAhD,EAAwD;AACtDW,QAAAA,MAAM,CAACQ,MAAP,CAAc;AAACpB,UAAAA,KAAD;AAAQC,UAAAA;AAAR,SAAd;AACD;;AAED,YAAMS,MAAN,CAAa,EAAC,GAAGC,MAAJ;AAAYC,QAAAA,MAAZ;AAAoBS,QAAAA,IAAI,EAAE;AAA1B,OAAb;AACD,KAlBH;AAoBD;;AAEDC,EAAAA,eAAe,CAACC,KAAD,EAAQ;AACrB,WAAOA,KAAK,CAAC1B,KAAN,CAAY2B,aAAZ,KAA8B,KAArC;AACD;;AAEDC,EAAAA,mBAAmB,GAAG;AACpB,WAAO;AACLC,MAAAA,eAAe,EAAE;AADZ,KAAP;AAGD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKrB,GAAT,EAAc;AACZ,WAAKA,GAAL,CAASqB,MAAT;AACA,WAAKrB,GAAL,GAAW,IAAX;AACD;;AAED,QAAI,KAAKR,SAAT,EAAoB;AAClB,WAAKA,SAAL,CAAe6B,MAAf;AACA,WAAK7B,SAAL,GAAiB,IAAjB;AACD;;AAED,QAAI,KAAKK,WAAT,EAAsB;AACpB,WAAKA,WAAL,CAAiBwB,MAAjB;AACA,WAAKxB,WAAL,GAAmB,IAAnB;AACD;AACF;;AApFgD","sourcesContent":["import {default as LayersPass} from './layers-pass';\nimport {\n  Framebuffer,\n  Texture2D,\n  Renderbuffer,\n  withParameters,\n  cssToDeviceRatio\n} from '@luma.gl/core';\n\nexport default class ShadowPass extends LayersPass {\n  constructor(gl, props) {\n    super(gl, props);\n\n    // The shadowMap texture\n    this.shadowMap = new Texture2D(gl, {\n      width: 1,\n      height: 1,\n      parameters: {\n        [gl.TEXTURE_MIN_FILTER]: gl.LINEAR,\n        [gl.TEXTURE_MAG_FILTER]: gl.LINEAR,\n        [gl.TEXTURE_WRAP_S]: gl.CLAMP_TO_EDGE,\n        [gl.TEXTURE_WRAP_T]: gl.CLAMP_TO_EDGE\n      }\n    });\n\n    this.depthBuffer = new Renderbuffer(gl, {\n      format: gl.DEPTH_COMPONENT16,\n      width: 1,\n      height: 1\n    });\n\n    this.fbo = new Framebuffer(gl, {\n      id: 'shadowmap',\n      width: 1,\n      height: 1,\n      attachments: {\n        [gl.COLOR_ATTACHMENT0]: this.shadowMap,\n        // Depth attachment has to be specified for depth test to work\n        [gl.DEPTH_ATTACHMENT]: this.depthBuffer\n      }\n    });\n  }\n\n  render(params) {\n    const target = this.fbo;\n\n    withParameters(\n      this.gl,\n      {\n        depthRange: [0, 1],\n        depthTest: true,\n        blend: false,\n        clearColor: [1, 1, 1, 1]\n      },\n      () => {\n        const viewport = params.viewports[0];\n        const pixelRatio = cssToDeviceRatio(this.gl);\n        const width = viewport.width * pixelRatio;\n        const height = viewport.height * pixelRatio;\n        if (width !== target.width || height !== target.height) {\n          target.resize({width, height});\n        }\n\n        super.render({...params, target, pass: 'shadow'});\n      }\n    );\n  }\n\n  shouldDrawLayer(layer) {\n    return layer.props.shadowEnabled !== false;\n  }\n\n  getModuleParameters() {\n    return {\n      drawToShadowMap: true\n    };\n  }\n\n  delete() {\n    if (this.fbo) {\n      this.fbo.delete();\n      this.fbo = null;\n    }\n\n    if (this.shadowMap) {\n      this.shadowMap.delete();\n      this.shadowMap = null;\n    }\n\n    if (this.depthBuffer) {\n      this.depthBuffer.delete();\n      this.depthBuffer = null;\n    }\n  }\n}\n"],"file":"shadow-pass.js"}