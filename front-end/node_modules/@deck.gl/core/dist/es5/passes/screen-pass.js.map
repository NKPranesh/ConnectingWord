{"version":3,"sources":["../../../src/passes/screen-pass.js"],"names":["ScreenPass","Pass","constructor","gl","props","module","fs","id","model","ClipSpace","modules","render","params","viewport","drawingBufferWidth","drawingBufferHeight","framebuffer","outputBuffer","clearColor","_renderPass","delete","inputBuffer","color","draw","moduleSettings","uniforms","texture","texSize","width","height","parameters","depthWrite","depthTest"],"mappings":";;;;;;;;;AAMA;;AACA;;AAEe,MAAMA,UAAN,SAAyBC,aAAzB,CAA8B;AAC3CC,EAAAA,WAAW,CAACC,EAAD,EAAKC,KAAK,GAAG,EAAb,EAAiB;AAC1B,UAAMD,EAAN,EAAUC,KAAV;AACA,UAAM;AAACC,MAAAA,MAAD;AAASC,MAAAA,EAAT;AAAaC,MAAAA;AAAb,QAAmBH,KAAzB;AACA,SAAKI,KAAL,GAAa,IAAIC,eAAJ,CAAcN,EAAd,EAAkB;AAACI,MAAAA,EAAD;AAAKD,MAAAA,EAAL;AAASI,MAAAA,OAAO,EAAE,CAACL,MAAD;AAAlB,KAAlB,CAAb;AACD;;AAEDM,EAAAA,MAAM,CAACC,MAAD,EAAS;AACb,UAAMT,EAAE,GAAG,KAAKA,EAAhB;AAEA,6BAAcA,EAAd,EAAkB;AAACU,MAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAOV,EAAE,CAACW,kBAAV,EAA8BX,EAAE,CAACY,mBAAjC;AAAX,KAAlB;AAEA,8BAAeZ,EAAf,EAAmB;AAACa,MAAAA,WAAW,EAAEJ,MAAM,CAACK,YAArB;AAAmCC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAA/C,KAAnB,EAAiF,MAC/E,KAAKC,WAAL,CAAiBhB,EAAjB,EAAqBS,MAArB,CADF;AAGD;;AAEDQ,EAAAA,MAAM,GAAG;AACP,SAAKZ,KAAL,CAAWY,MAAX;AACA,SAAKZ,KAAL,GAAa,IAAb;AACD;;AAUDW,EAAAA,WAAW,CAAChB,EAAD,EAAK;AAACkB,IAAAA,WAAD;AAAcJ,IAAAA;AAAd,GAAL,EAAkC;AAC3C,qBAAMd,EAAN,EAAU;AAACmB,MAAAA,KAAK,EAAE;AAAR,KAAV;AACA,SAAKd,KAAL,CAAWe,IAAX,CAAgB;AACdC,MAAAA,cAAc,EAAE,KAAKpB,KAAL,CAAWoB,cADb;AAEdC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,OAAO,EAAEL,WADD;AAERM,QAAAA,OAAO,EAAE,CAACN,WAAW,CAACO,KAAb,EAAoBP,WAAW,CAACQ,MAAhC;AAFD,OAFI;AAMdC,MAAAA,UAAU,EAAE;AACVC,QAAAA,UAAU,EAAE,KADF;AAEVC,QAAAA,SAAS,EAAE;AAFD;AANE,KAAhB;AAWD;;AA3C0C","sourcesContent":["//\n// A base render pass.\n//\n// Attribution: This class and the multipass system were inspired by\n// the THREE.js EffectComposer and *Pass classes\n\nimport {ClipSpace, setParameters, withParameters, clear} from '@luma.gl/core';\nimport Pass from './pass';\n\nexport default class ScreenPass extends Pass {\n  constructor(gl, props = {}) {\n    super(gl, props);\n    const {module, fs, id} = props;\n    this.model = new ClipSpace(gl, {id, fs, modules: [module]});\n  }\n\n  render(params) {\n    const gl = this.gl;\n\n    setParameters(gl, {viewport: [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]});\n\n    withParameters(gl, {framebuffer: params.outputBuffer, clearColor: [0, 0, 0, 0]}, () =>\n      this._renderPass(gl, params)\n    );\n  }\n\n  delete() {\n    this.model.delete();\n    this.model = null;\n  }\n\n  // Private methods\n\n  /**\n   * Renders the pass.\n   * This is an abstract method that should be overridden.\n   * @param {Framebuffer} inputBuffer - Frame buffer that contains the result of the previous pass\n   * @param {Framebuffer} outputBuffer - Frame buffer that serves as the output render target\n   */\n  _renderPass(gl, {inputBuffer, outputBuffer}) {\n    clear(gl, {color: true});\n    this.model.draw({\n      moduleSettings: this.props.moduleSettings,\n      uniforms: {\n        texture: inputBuffer,\n        texSize: [inputBuffer.width, inputBuffer.height]\n      },\n      parameters: {\n        depthWrite: false,\n        depthTest: false\n      }\n    });\n  }\n}\n"],"file":"screen-pass.js"}