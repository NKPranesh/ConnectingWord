{"version":3,"sources":["../../../src/viewports/viewport.js"],"names":["DEGREES_TO_RADIANS","Math","PI","IDENTITY","ZERO_VECTOR","DEFAULT_ZOOM","DEFAULT_DISTANCE_SCALES","unitsPerMeter","metersPerUnit","Viewport","constructor","opts","id","x","y","width","height","displayName","_frustumPlanes","_initViewMatrix","_initProjectionMatrix","_initPixelMatrices","equals","bind","project","unproject","projectPosition","unprojectPosition","projectFlat","unprojectFlat","metersPerPixel","distanceScales","scale","projectionMode","isGeospatial","zoom","PROJECTION_MODE","WEB_MERCATOR","WEB_MERCATOR_AUTO_OFFSET","viewport","projectionMatrix","viewMatrix","xyz","topLeft","worldPosition","coord","pixelProjectionMatrix","y2","length","targetZ","z","targetZWorld","pixelUnprojectionMatrix","X","Y","Z","Number","isFinite","getBounds","options","unprojectOption","topRight","bottomLeft","bottomRight","min","max","getDistanceScales","coordinateOrigin","longitude","latitude","highPrecision","containsPixel","getFrustumPlanes","near","Object","assign","viewProjectionMatrix","panByPosition","coords","pixel","getCameraPosition","cameraPosition","getCameraDirection","cameraDirection","getCameraUp","cameraUp","_createProjectionMatrix","orthographic","fovyRadians","aspect","focalDistance","far","Matrix4","fovy","perspective","position","modelMatrix","log2","pow","Vector3","meterOffset","transformVector","center","_getCenterInWorld","viewMatrixUncentered","multiplyRight","translate","negate","commonPosition","add","vpm","mat4","multiply","viewMatrixInverse","invert","viewportMatrix","log","warn"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport log from '../utils/log';\nimport {createMat4, getCameraPosition, getFrustumPlanes} from '../utils/math-utils';\n\nimport {Matrix4, Vector3, equals} from 'math.gl';\nimport * as mat4 from 'gl-matrix/mat4';\n\nimport {\n  getDistanceScales,\n  getMeterZoom,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  pixelsToWorld\n} from '@math.gl/web-mercator';\n\nimport {PROJECTION_MODE} from '../lib/constants';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nconst IDENTITY = createMat4();\n\nconst ZERO_VECTOR = [0, 0, 0];\n\nconst DEFAULT_ZOOM = 0;\n\nconst DEFAULT_DISTANCE_SCALES = {\n  unitsPerMeter: [1, 1, 1],\n  metersPerUnit: [1, 1, 1]\n};\n\nexport default class Viewport {\n  /**\n   * @classdesc\n   * Manages coordinate system transformations for deck.gl.\n   *\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  constructor(opts = {}) {\n    const {\n      id = null,\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = 1,\n      height = 1\n    } = opts;\n\n    this.id = id || this.constructor.displayName || 'viewport';\n\n    this.x = x;\n    this.y = y;\n    // Silently allow apps to send in w,h = 0,0\n    this.width = width || 1;\n    this.height = height || 1;\n    this._frustumPlanes = {};\n\n    this._initViewMatrix(opts);\n    this._initProjectionMatrix(opts);\n    this._initPixelMatrices();\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n  }\n\n  get metersPerPixel() {\n    return this.distanceScales.metersPerUnit[2] / this.scale;\n  }\n\n  get projectionMode() {\n    if (this.isGeospatial) {\n      return this.zoom < 12\n        ? PROJECTION_MODE.WEB_MERCATOR\n        : PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET;\n    }\n    return PROJECTION_MODE.IDENTITY;\n  }\n\n  // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n  equals(viewport) {\n    if (!(viewport instanceof Viewport)) {\n      return false;\n    }\n    if (this === viewport) {\n      return true;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      viewport.scale === this.scale &&\n      equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      equals(viewport.viewMatrix, this.viewMatrix)\n    );\n    // TODO - check distance scales?\n  }\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @return {Array} - [x, y] or [x, y, z] in top left coords\n   */\n  project(xyz, {topLeft = true} = {}) {\n    const worldPosition = this.projectPosition(xyz);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, {topLeft = true, targetZ} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition(xyz) {\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n    return [X, Y, Z];\n  }\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   * @param {Array} lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return {Array} [x,y] coordinates.\n   */\n  projectFlat(xyz) {\n    if (this.isGeospatial) {\n      return lngLatToWorld(xyz);\n    }\n    return xyz;\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   * @param {object|Vector} xy - object with {x,y} members\n   *  representing point on projected map plane\n   * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xyz) {\n    if (this.isGeospatial) {\n      return worldToLngLat(xyz);\n    }\n    return xyz;\n  }\n\n  getBounds(options = {}) {\n    const unprojectOption = {targetZ: options.z || 0};\n\n    const topLeft = this.unproject([0, 0], unprojectOption);\n    const topRight = this.unproject([this.width, 0], unprojectOption);\n    const bottomLeft = this.unproject([0, this.height], unprojectOption);\n    const bottomRight = this.unproject([this.width, this.height], unprojectOption);\n\n    return [\n      Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),\n      Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]),\n      Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),\n      Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1])\n    ];\n  }\n\n  getDistanceScales(coordinateOrigin = null) {\n    if (coordinateOrigin) {\n      return getDistanceScales({\n        longitude: coordinateOrigin[0],\n        latitude: coordinateOrigin[1],\n        highPrecision: true\n      });\n    }\n    return this.distanceScales;\n  }\n\n  containsPixel({x, y, width = 1, height = 1}) {\n    return (\n      x < this.x + this.width &&\n      this.x < x + width &&\n      y < this.y + this.height &&\n      this.y < y + height\n    );\n  }\n\n  // Extract frustum planes in common space\n  getFrustumPlanes() {\n    if (this._frustumPlanes.near) {\n      return this._frustumPlanes;\n    }\n\n    Object.assign(this._frustumPlanes, getFrustumPlanes(this.viewProjectionMatrix));\n\n    return this._frustumPlanes;\n  }\n\n  // EXPERIMENTAL METHODS\n\n  /**\n   * Needed by panning and linear transition\n   * Pan the viewport to place a given world coordinate at screen point [x, y]\n   *\n   * @param {Array} coords - world coordinates\n   * @param {Array} pixel - [x,y] coordinates on screen\n   * @return {Object} props of the new viewport\n   */\n  panByPosition(coords, pixel) {\n    return null;\n  }\n\n  getCameraPosition() {\n    return this.cameraPosition;\n  }\n\n  getCameraDirection() {\n    return this.cameraDirection;\n  }\n\n  getCameraUp() {\n    return this.cameraUp;\n  }\n\n  // INTERNAL METHODS\n\n  _createProjectionMatrix({orthographic, fovyRadians, aspect, focalDistance, near, far}) {\n    return orthographic\n      ? new Matrix4().orthographic({fovy: fovyRadians, aspect, focalDistance, near, far})\n      : new Matrix4().perspective({fovy: fovyRadians, aspect, near, far});\n  }\n\n  /* eslint-disable complexity, max-statements */\n  _initViewMatrix(opts) {\n    const {\n      // view matrix\n      viewMatrix = IDENTITY,\n\n      longitude = null, // Anchor: lng lat zoom makes viewport work w/ geospatial coordinate systems\n      latitude = null,\n      zoom = null,\n\n      position = null, // Anchor position offset (in meters for geospatial viewports)\n      modelMatrix = null, // A model matrix to be applied to position, to match the layer props API\n      focalDistance = 1, // Only needed for orthographic views\n\n      distanceScales = null\n    } = opts;\n\n    // Check if we have a geospatial anchor\n    this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);\n\n    this.zoom = zoom;\n    if (!Number.isFinite(this.zoom)) {\n      this.zoom = this.isGeospatial\n        ? getMeterZoom({latitude}) + Math.log2(focalDistance)\n        : DEFAULT_ZOOM;\n    }\n    const scale = Math.pow(2, this.zoom);\n    this.scale = scale;\n\n    // Calculate distance scales if lng/lat/zoom are provided\n    this.distanceScales = this.isGeospatial\n      ? getDistanceScales({latitude, longitude})\n      : distanceScales || DEFAULT_DISTANCE_SCALES;\n\n    this.focalDistance = focalDistance;\n\n    this.distanceScales.metersPerUnit = new Vector3(this.distanceScales.metersPerUnit);\n    this.distanceScales.unitsPerMeter = new Vector3(this.distanceScales.unitsPerMeter);\n\n    this.position = ZERO_VECTOR;\n    this.meterOffset = ZERO_VECTOR;\n    if (position) {\n      // Apply model matrix if supplied\n      this.position = position;\n      this.modelMatrix = modelMatrix;\n      this.meterOffset = modelMatrix ? modelMatrix.transformVector(position) : position;\n    }\n\n    if (this.isGeospatial) {\n      // Determine camera center\n      this.longitude = longitude;\n      this.latitude = latitude;\n      this.center = this._getCenterInWorld({longitude, latitude});\n    } else {\n      this.center = position ? this.projectPosition(position) : [0, 0, 0];\n    }\n    this.viewMatrixUncentered = viewMatrix;\n    // Make a centered version of the matrix for projection modes without an offset\n    this.viewMatrix = new Matrix4()\n      // Apply the uncentered view matrix\n      .multiplyRight(this.viewMatrixUncentered)\n      // And center it\n      .translate(new Vector3(this.center || ZERO_VECTOR).negate());\n  }\n  /* eslint-enable complexity, max-statements */\n\n  _getCenterInWorld({longitude, latitude}) {\n    const {meterOffset, distanceScales} = this;\n\n    // Make a centered version of the matrix for projection modes without an offset\n    const center = new Vector3(this.projectPosition([longitude, latitude, 0]));\n\n    if (meterOffset) {\n      const commonPosition = new Vector3(meterOffset)\n        // Convert to pixels in current zoom\n        .scale(distanceScales.unitsPerMeter);\n      center.add(commonPosition);\n    }\n\n    return center;\n  }\n\n  _initProjectionMatrix(opts) {\n    const {\n      // Projection matrix\n      projectionMatrix = null,\n\n      // Projection matrix parameters, used if projectionMatrix not supplied\n      orthographic = false,\n      fovyRadians,\n      fovy = 75,\n      near = 0.1, // Distance of near clipping plane\n      far = 1000, // Distance of far clipping plane\n      focalDistance = 1\n    } = opts;\n\n    this.projectionMatrix =\n      projectionMatrix ||\n      this._createProjectionMatrix({\n        orthographic,\n        fovyRadians: fovyRadians || fovy * DEGREES_TO_RADIANS,\n        aspect: this.width / this.height,\n        focalDistance,\n        near,\n        far\n      });\n  }\n\n  _initPixelMatrices() {\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, this.projectionMatrix);\n    mat4.multiply(vpm, vpm, this.viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // console.log('VPM', this.viewMatrix, this.projectionMatrix, this.viewProjectionMatrix);\n\n    // Calculate inverse view matrix\n    this.viewMatrixInverse = mat4.invert([], this.viewMatrix) || this.viewMatrix;\n\n    // Decompose camera parameters\n    this.cameraPosition = getCameraPosition(this.viewMatrixInverse);\n\n    /*\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n\n    // matrix for conversion from world location to screen (pixel) coordinates\n    const viewportMatrix = createMat4(); // matrix from NDC to viewport.\n    const pixelProjectionMatrix = createMat4(); // matrix from world space to viewport.\n    mat4.scale(viewportMatrix, viewportMatrix, [this.width / 2, -this.height / 2, 1]);\n    mat4.translate(viewportMatrix, viewportMatrix, [1, -1, 0]);\n    mat4.multiply(pixelProjectionMatrix, viewportMatrix, this.viewProjectionMatrix);\n    this.pixelProjectionMatrix = pixelProjectionMatrix;\n    this.viewportMatrix = viewportMatrix;\n\n    this.pixelUnprojectionMatrix = mat4.invert(createMat4(), this.pixelProjectionMatrix);\n    if (!this.pixelUnprojectionMatrix) {\n      log.warn('Pixel project matrix not invertible')();\n      // throw new Error('Pixel project matrix not invertible');\n    }\n  }\n}\n\nViewport.displayName = 'Viewport';\n"],"file":"viewport.js"}