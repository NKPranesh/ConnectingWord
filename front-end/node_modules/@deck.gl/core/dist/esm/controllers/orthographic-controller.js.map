{"version":3,"sources":["../../../src/controllers/orthographic-controller.js"],"names":["clamp","Controller","OrbitState","OrthographicState","constructor","props","zoomAxis","_applyConstraints","maxZoom","minZoom","zoom","Array","isArray","_calculateNewZoom","scale","startZoom","_viewportProps","deltaZoom","Math","log2","newZoomX","newZoomY","z","min","max","OrthographicController","dragMode","_onPanRotate","event","linearTransitionProps"],"mappings":"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","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\nimport {OrbitState} from './orbit-controller';\n\nclass OrthographicState extends OrbitState {\n  constructor(props) {\n    super(props);\n\n    this.zoomAxis = props.zoomAxis || 'all';\n  }\n\n  _applyConstraints(props) {\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = Array.isArray(zoom)\n      ? [clamp(zoom[0], minZoom, maxZoom), clamp(zoom[1], minZoom, maxZoom)]\n      : clamp(zoom, minZoom, maxZoom);\n    return props;\n  }\n\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    if (!startZoom && startZoom !== 0) {\n      startZoom = this._viewportProps.zoom;\n    }\n    let deltaZoom = Math.log2(scale);\n    if (Array.isArray(startZoom)) {\n      let [newZoomX, newZoomY] = startZoom;\n      switch (this.zoomAxis) {\n        case 'X':\n          // Scale x only\n          newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n          break;\n        case 'Y':\n          // Scale y only\n          newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n          break;\n        default:\n          // Lock aspect ratio\n          let z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z < minZoom) {\n            deltaZoom += minZoom - z;\n          }\n          z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z > maxZoom) {\n            deltaZoom += maxZoom - z;\n          }\n          newZoomX += deltaZoom;\n          newZoomY += deltaZoom;\n      }\n      return [newZoomX, newZoomY];\n    }\n    // Ignore `zoomAxis`\n    // `LinearTransitionInterpolator` does not support interpolation between a number and an array\n    // So if zoom is a number (legacy use case), new zoom still has to be a number\n    return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n  }\n}\n\nexport default class OrthographicController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(OrthographicState, props);\n  }\n\n  _onPanRotate(event) {\n    // No rotation in orthographic view\n    return false;\n  }\n\n  get linearTransitionProps() {\n    return ['target', 'zoom'];\n  }\n}\n"],"file":"orthographic-controller.js"}