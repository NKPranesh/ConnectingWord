{"version":3,"sources":["../../../src/viewports/web-mercator-viewport.js"],"names":["Viewport","pixelsToWorld","getViewMatrix","addMetersToLngLat","getProjectionParameters","altitudeToFovy","fovyToAltitude","fitBounds","getBounds","vec2","Matrix4","TILE_SIZE","EARTH_CIRCUMFERENCE","DEGREES_TO_RADIANS","Math","PI","unitsPerMeter","latitude","latCosine","cos","WebMercatorViewport","constructor","opts","longitude","zoom","pitch","bearing","nearZMultiplier","farZMultiplier","orthographic","projectionMatrix","repeat","worldOffset","legacyMeterSizes","width","height","altitude","scale","pow","fovy","projectionParameters","viewMatrixUncentered","viewOffset","translate","multiplyLeft","viewMatrix","focalDistance","_subViewports","_pseudoMeters","Object","freeze","subViewports","length","bounds","minOffset","floor","maxOffset","ceil","x","offsetViewport","push","projectPosition","xyz","X","Y","projectFlat","Z","unprojectPosition","unprojectFlat","lngLatZ","panByPosition","coords","pixel","fromLocation","pixelUnprojectionMatrix","toLocation","add","negate","newCenter","center","options","corners","z","min","max","displayName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// View and Projection Matrix calculations for mapbox-js style\n// map view properties\nimport Viewport from './viewport';\n\nimport {\n  pixelsToWorld,\n  getViewMatrix,\n  addMetersToLngLat,\n  getProjectionParameters,\n  altitudeToFovy,\n  fovyToAltitude,\n  fitBounds,\n  getBounds\n} from '@math.gl/web-mercator';\n\n// TODO - import from math.gl\nimport * as vec2 from 'gl-matrix/vec2';\nimport {Matrix4} from 'math.gl';\n\nconst TILE_SIZE = 512;\nconst EARTH_CIRCUMFERENCE = 40.03e6;\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction unitsPerMeter(latitude) {\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;\n}\n\nexport default class WebMercatorViewport extends Viewport {\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  /* eslint-disable complexity, max-statements */\n  constructor(opts = {}) {\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 11,\n      pitch = 0,\n      bearing = 0,\n      nearZMultiplier = 0.1,\n      farZMultiplier = 1.01,\n      orthographic = false,\n      projectionMatrix,\n\n      repeat = false,\n      worldOffset = 0,\n\n      // backward compatibility\n      // TODO: remove in v9\n      legacyMeterSizes = false\n    } = opts;\n\n    let {width, height, altitude = 1.5} = opts;\n    const scale = Math.pow(2, zoom);\n\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    let fovy;\n    let projectionParameters = null;\n    if (projectionMatrix) {\n      altitude = projectionMatrix[5] / 2;\n      fovy = altitudeToFovy(altitude);\n    } else {\n      if (opts.fovy) {\n        fovy = opts.fovy;\n        altitude = fovyToAltitude(fovy);\n      } else {\n        fovy = altitudeToFovy(altitude);\n      }\n      projectionParameters = getProjectionParameters({\n        width,\n        height,\n        pitch,\n        fovy,\n        nearZMultiplier,\n        farZMultiplier\n      });\n    }\n\n    // The uncentered matrix allows us two move the center addition to the\n    // shader (cheap) which gives a coordinate system that has its center in\n    // the layer's center position. This makes rotations and other modelMatrx\n    // transforms much more useful.\n    let viewMatrixUncentered = getViewMatrix({\n      height,\n      pitch,\n      bearing,\n      scale,\n      altitude\n    });\n\n    if (worldOffset) {\n      const viewOffset = new Matrix4().translate([512 * worldOffset, 0, 0]);\n      viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);\n    }\n\n    super({\n      ...opts,\n      // x, y,\n      width,\n      height,\n\n      // view matrix\n      viewMatrix: viewMatrixUncentered,\n      longitude,\n      latitude,\n      zoom,\n\n      // projection matrix parameters\n      ...projectionParameters,\n      fovy,\n      focalDistance: altitude\n    });\n\n    // Save parameters\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n\n    this.orthographic = orthographic;\n\n    this._subViewports = repeat ? [] : null;\n    this._pseudoMeters = legacyMeterSizes;\n\n    Object.freeze(this);\n  }\n  /* eslint-enable complexity, max-statements */\n\n  get subViewports() {\n    if (this._subViewports && !this._subViewports.length) {\n      // Cache sub viewports so that we only calculate them once\n      const bounds = this.getBounds();\n\n      const minOffset = Math.floor((bounds[0] + 180) / 360);\n      const maxOffset = Math.ceil((bounds[2] - 180) / 360);\n\n      for (let x = minOffset; x <= maxOffset; x++) {\n        const offsetViewport = x\n          ? new WebMercatorViewport({\n              ...this,\n              worldOffset: x\n            })\n          : this;\n        this._subViewports.push(offsetViewport);\n      }\n    }\n    return this._subViewports;\n  }\n\n  projectPosition(xyz) {\n    if (this._pseudoMeters) {\n      // Backward compatibility\n      return super.projectPosition(xyz);\n    }\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * unitsPerMeter(xyz[1]);\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    if (this._pseudoMeters) {\n      // Backward compatibility\n      return super.unprojectPosition(xyz);\n    }\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) / unitsPerMeter(Y);\n    return [X, Y, Z];\n  }\n\n  /**\n   * Add a meter delta to a base lnglat coordinate, returning a new lnglat array\n   *\n   * Note: Uses simple linear approximation around the viewport center\n   * Error increases with size of offset (roughly 1% per 100km)\n   *\n   * @param {[Number,Number]|[Number,Number,Number]) lngLatZ - base coordinate\n   * @param {[Number,Number]|[Number,Number,Number]) xyz - array of meter deltas\n   * @return {[Number,Number]|[Number,Number,Number]) array of [lng,lat,z] deltas\n   */\n  addMetersToLngLat(lngLatZ, xyz) {\n    return addMetersToLngLat(lngLatZ, xyz);\n  }\n\n  panByPosition(coords, pixel) {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(coords);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    const [longitude, latitude] = this.unprojectFlat(newCenter);\n    return {longitude, latitude};\n  }\n\n  getBounds(options = {}) {\n    const corners = getBounds(this, options.z || 0);\n\n    return [\n      Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n      Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]),\n      Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n      Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])\n    ];\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param {Array} bounds - [[lon, lat], [lon, lat]]\n   * @param {Number} [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param {Array} [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds({width, height, bounds, ...options});\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n}\n\nWebMercatorViewport.displayName = 'WebMercatorViewport';\n"],"file":"web-mercator-viewport.js"}