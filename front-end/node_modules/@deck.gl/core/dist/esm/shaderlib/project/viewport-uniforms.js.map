{"version":3,"sources":["../../../../src/shaderlib/project/viewport-uniforms.js"],"names":["mat4","vec4","COORDINATE_SYSTEM","PROJECTION_MODE","memoize","ZERO_VECTOR","VECTOR_TO_POINT_MATRIX","IDENTITY_MATRIX","DEFAULT_PIXELS_PER_UNIT2","DEFAULT_COORDINATE_ORIGIN","getMemoizedViewportUniforms","calculateViewportUniforms","getOffsetOrigin","viewport","coordinateSystem","coordinateOrigin","shaderCoordinateOrigin","geospatialOrigin","offsetMode","LNGLAT_OFFSETS","METER_OFFSETS","isGeospatial","Math","fround","longitude","latitude","projectionMode","WEB_MERCATOR","LNGLAT","CARTESIAN","WEB_MERCATOR_AUTO_OFFSET","center","unprojectPosition","IDENTITY","position","map","GLOBE","calculateMatrixAndOffset","viewMatrixUncentered","projectionMatrix","viewMatrix","viewProjectionMatrix","projectionCenter","originCommon","cameraPosCommon","cameraPosition","projectPosition","transformMat4","multiply","getUniformsFromViewport","devicePixelRatio","modelMatrix","DEFAULT","autoWrapLongitude","uniforms","project_uWrapLongitude","project_uModelMatrix","distanceScales","getDistanceScales","viewportSize","width","height","focalDistance","project_uCoordinateSystem","project_uProjectionMode","project_uCoordinateOrigin","project_uCommonOrigin","slice","project_uCenter","project_uPseudoMeters","Boolean","_pseudoMeters","project_uViewportSize","project_uDevicePixelRatio","project_uFocalDistance","project_uCommonUnitsPerMeter","unitsPerMeter","project_uCommonUnitsPerWorldUnit","project_uCommonUnitsPerWorldUnit2","project_uScale","scale","project_uViewProjectionMatrix","project_uCameraPosition","distanceScalesAtOrigin","unitsPerMeter2","unitsPerDegree","unitsPerDegree2"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/* eslint-disable complexity */\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec4 from 'gl-matrix/vec4';\n\nimport {COORDINATE_SYSTEM, PROJECTION_MODE} from '../../lib/constants';\n\nimport memoize from '../../utils/memoize';\n\n// To quickly set a vector to zero\nconst ZERO_VECTOR = [0, 0, 0, 0];\n// 4x4 matrix that drops 4th component of vector\nconst VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nconst DEFAULT_PIXELS_PER_UNIT2 = [0, 0, 0];\nconst DEFAULT_COORDINATE_ORIGIN = [0, 0, 0];\n\nconst getMemoizedViewportUniforms = memoize(calculateViewportUniforms);\n\nexport function getOffsetOrigin(\n  viewport,\n  coordinateSystem,\n  coordinateOrigin = DEFAULT_COORDINATE_ORIGIN\n) {\n  let shaderCoordinateOrigin = coordinateOrigin;\n  let geospatialOrigin;\n  let offsetMode = true;\n\n  if (\n    coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS ||\n    coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS\n  ) {\n    geospatialOrigin = coordinateOrigin;\n  } else {\n    geospatialOrigin = viewport.isGeospatial\n      ? [Math.fround(viewport.longitude), Math.fround(viewport.latitude), 0]\n      : null;\n  }\n\n  switch (viewport.projectionMode) {\n    case PROJECTION_MODE.WEB_MERCATOR:\n      if (\n        coordinateSystem === COORDINATE_SYSTEM.LNGLAT ||\n        coordinateSystem === COORDINATE_SYSTEM.CARTESIAN\n      ) {\n        geospatialOrigin = [0, 0, 0];\n        offsetMode = false;\n      }\n      break;\n\n    case PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET:\n      if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        // viewport center in world space\n        shaderCoordinateOrigin = geospatialOrigin;\n      } else if (coordinateSystem === COORDINATE_SYSTEM.CARTESIAN) {\n        // viewport center in common space\n        shaderCoordinateOrigin = [\n          Math.fround(viewport.center[0]),\n          Math.fround(viewport.center[1]),\n          0\n        ];\n        // Geospatial origin (wgs84) must match shaderCoordinateOrigin (common)\n        geospatialOrigin = viewport.unprojectPosition(shaderCoordinateOrigin);\n        shaderCoordinateOrigin[0] -= coordinateOrigin[0];\n        shaderCoordinateOrigin[1] -= coordinateOrigin[1];\n        shaderCoordinateOrigin[2] -= coordinateOrigin[2];\n      }\n      break;\n\n    case PROJECTION_MODE.IDENTITY:\n      shaderCoordinateOrigin = viewport.position.map(Math.fround);\n      break;\n\n    case PROJECTION_MODE.GLOBE:\n      offsetMode = false;\n      geospatialOrigin = null;\n      break;\n\n    default:\n      // Unknown projection mode\n      offsetMode = false;\n  }\n\n  shaderCoordinateOrigin[2] = shaderCoordinateOrigin[2] || 0;\n\n  return {geospatialOrigin, shaderCoordinateOrigin, offsetMode};\n}\n\n// The code that utilizes Matrix4 does the same calculation as their mat4 counterparts,\n// has lower performance but provides error checking.\nfunction calculateMatrixAndOffset(viewport, coordinateSystem, coordinateOrigin) {\n  const {viewMatrixUncentered, projectionMatrix} = viewport;\n  let {viewMatrix, viewProjectionMatrix} = viewport;\n\n  let projectionCenter = ZERO_VECTOR;\n  let originCommon = ZERO_VECTOR;\n  let cameraPosCommon = viewport.cameraPosition;\n  const {geospatialOrigin, shaderCoordinateOrigin, offsetMode} = getOffsetOrigin(\n    viewport,\n    coordinateSystem,\n    coordinateOrigin\n  );\n\n  if (offsetMode) {\n    // Calculate transformed projectionCenter (using 64 bit precision JS)\n    // This is the key to offset mode precision\n    // (avoids doing this addition in 32 bit precision in GLSL)\n    originCommon = viewport.projectPosition(geospatialOrigin || shaderCoordinateOrigin);\n\n    cameraPosCommon = [\n      cameraPosCommon[0] - originCommon[0],\n      cameraPosCommon[1] - originCommon[1],\n      cameraPosCommon[2] - originCommon[2]\n    ];\n\n    originCommon[3] = 1;\n\n    // projectionCenter = new Matrix4(viewProjectionMatrix)\n    //   .transformVector([positionPixels[0], positionPixels[1], 0.0, 1.0]);\n    projectionCenter = vec4.transformMat4([], originCommon, viewProjectionMatrix);\n\n    // Always apply uncentered projection matrix if available (shader adds center)\n    viewMatrix = viewMatrixUncentered || viewMatrix;\n\n    // Zero out 4th coordinate (\"after\" model matrix) - avoids further translations\n    // viewMatrix = new Matrix4(viewMatrixUncentered || viewMatrix)\n    //   .multiplyRight(VECTOR_TO_POINT_MATRIX);\n    viewProjectionMatrix = mat4.multiply([], projectionMatrix, viewMatrix);\n    viewProjectionMatrix = mat4.multiply([], viewProjectionMatrix, VECTOR_TO_POINT_MATRIX);\n  }\n\n  return {\n    viewMatrix,\n    viewProjectionMatrix,\n    projectionCenter,\n    originCommon,\n    cameraPosCommon,\n    shaderCoordinateOrigin,\n    geospatialOrigin\n  };\n}\n\n/**\n * Returns uniforms for shaders based on current projection\n * includes: projection matrix suitable for shaders\n *\n * TODO - Ensure this works with any viewport, not just WebMercatorViewports\n *\n * @param {WebMercatorViewport} viewport -\n * @return {Float32Array} - 4x4 projection matrix that can be used in shaders\n */\nexport function getUniformsFromViewport({\n  viewport,\n  devicePixelRatio = 1,\n  modelMatrix = null,\n  // Match Layer.defaultProps\n  coordinateSystem = COORDINATE_SYSTEM.DEFAULT,\n  coordinateOrigin,\n  autoWrapLongitude = false\n} = {}) {\n  if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n    coordinateSystem = viewport.isGeospatial\n      ? COORDINATE_SYSTEM.LNGLAT\n      : COORDINATE_SYSTEM.CARTESIAN;\n  }\n\n  const uniforms = getMemoizedViewportUniforms({\n    viewport,\n    devicePixelRatio,\n    coordinateSystem,\n    coordinateOrigin\n  });\n\n  uniforms.project_uWrapLongitude = autoWrapLongitude;\n  uniforms.project_uModelMatrix = modelMatrix || IDENTITY_MATRIX;\n\n  return uniforms;\n}\n\nfunction calculateViewportUniforms({\n  viewport,\n  devicePixelRatio,\n  coordinateSystem,\n  coordinateOrigin\n}) {\n  const {\n    projectionCenter,\n    viewProjectionMatrix,\n    originCommon,\n    cameraPosCommon,\n    shaderCoordinateOrigin,\n    geospatialOrigin\n  } = calculateMatrixAndOffset(viewport, coordinateSystem, coordinateOrigin);\n\n  // Calculate projection pixels per unit\n  const distanceScales = viewport.getDistanceScales();\n\n  const viewportSize = [viewport.width * devicePixelRatio, viewport.height * devicePixelRatio];\n\n  // Distance at which screen pixels are projected.\n  // Used to scale sizes in clipspace to match screen pixels.\n  // When using Viewport class's default projection matrix, this yields 1 for orthographic\n  // and `viewport.focalDistance` for perspective views\n  const focalDistance =\n    vec4.transformMat4([], [0, 0, -viewport.focalDistance, 1], viewport.projectionMatrix)[3] || 1;\n\n  const uniforms = {\n    // Projection mode values\n    project_uCoordinateSystem: coordinateSystem,\n    project_uProjectionMode: viewport.projectionMode,\n    project_uCoordinateOrigin: shaderCoordinateOrigin,\n    project_uCommonOrigin: originCommon.slice(0, 3),\n    project_uCenter: projectionCenter,\n\n    // Backward compatibility\n    // TODO: remove in v9\n    project_uPseudoMeters: Boolean(viewport._pseudoMeters),\n\n    // Screen size\n    project_uViewportSize: viewportSize,\n    project_uDevicePixelRatio: devicePixelRatio,\n\n    project_uFocalDistance: focalDistance,\n    project_uCommonUnitsPerMeter: distanceScales.unitsPerMeter,\n    project_uCommonUnitsPerWorldUnit: distanceScales.unitsPerMeter,\n    project_uCommonUnitsPerWorldUnit2: DEFAULT_PIXELS_PER_UNIT2,\n    project_uScale: viewport.scale, // This is the mercator scale (2 ** zoom)\n\n    project_uViewProjectionMatrix: viewProjectionMatrix,\n\n    // This is for lighting calculations\n    project_uCameraPosition: cameraPosCommon\n  };\n\n  if (geospatialOrigin) {\n    const distanceScalesAtOrigin = viewport.getDistanceScales(geospatialOrigin);\n    switch (coordinateSystem) {\n      case COORDINATE_SYSTEM.METER_OFFSETS:\n        uniforms.project_uCommonUnitsPerWorldUnit = distanceScalesAtOrigin.unitsPerMeter;\n        uniforms.project_uCommonUnitsPerWorldUnit2 = distanceScalesAtOrigin.unitsPerMeter2;\n        break;\n\n      case COORDINATE_SYSTEM.LNGLAT:\n      case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n        if (!viewport._pseudoMeters) {\n          uniforms.project_uCommonUnitsPerMeter = distanceScalesAtOrigin.unitsPerMeter;\n        }\n        uniforms.project_uCommonUnitsPerWorldUnit = distanceScalesAtOrigin.unitsPerDegree;\n        uniforms.project_uCommonUnitsPerWorldUnit2 = distanceScalesAtOrigin.unitsPerDegree2;\n        break;\n\n      // a.k.a \"preprojected\" positions\n      case COORDINATE_SYSTEM.CARTESIAN:\n        uniforms.project_uCommonUnitsPerWorldUnit = [1, 1, distanceScalesAtOrigin.unitsPerMeter[2]];\n        uniforms.project_uCommonUnitsPerWorldUnit2 = [\n          0,\n          0,\n          distanceScalesAtOrigin.unitsPerMeter2[2]\n        ];\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return uniforms;\n}\n"],"file":"viewport-uniforms.js"}