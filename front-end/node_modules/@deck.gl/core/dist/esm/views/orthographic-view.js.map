{"version":3,"sources":["../../../src/views/orthographic-view.js"],"names":["View","Viewport","Matrix4","pixelsToWorld","vec2","OrthographicController","viewMatrix","lookAt","eye","getProjectionMatrix","width","height","near","far","ortho","left","right","bottom","top","OrthographicViewport","constructor","props","zoom","target","flipY","zoomX","Array","isArray","zoomY","zoom_","Math","min","scale","pow","longitude","position","clone","projectionMatrix","scaleX","scaleY","distanceScales","unitsPerMeter","metersPerUnit","projectFlat","X","Y","unprojectFlat","x","y","panByPosition","coords","pixel","fromLocation","pixelUnprojectionMatrix","toLocation","translate","add","negate","newCenter","center","OrthographicView","type","controller","_getControllerProps","displayName"],"mappings":"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","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\n\nimport {Matrix4} from 'math.gl';\nimport {pixelsToWorld} from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\nimport OrthographicController from '../controllers/orthographic-controller';\n\nconst viewMatrix = new Matrix4().lookAt({eye: [0, 0, 1]});\n\nfunction getProjectionMatrix({width, height, near, far}) {\n  // Make sure Matrix4.ortho doesn't crash on 0 width/height\n  width = width || 1;\n  height = height || 1;\n\n  return new Matrix4().ortho({\n    left: -width / 2,\n    right: width / 2,\n    bottom: -height / 2,\n    top: height / 2,\n    near,\n    far\n  });\n}\n\nclass OrthographicViewport extends Viewport {\n  constructor(props) {\n    const {\n      width,\n      height,\n      near = 0.1,\n      far = 1000,\n      zoom = 0,\n      target = [0, 0, 0],\n      flipY = true\n    } = props;\n    const zoomX = Array.isArray(zoom) ? zoom[0] : zoom;\n    const zoomY = Array.isArray(zoom) ? zoom[1] : zoom;\n    const zoom_ = Math.min(zoomX, zoomY);\n    const scale = Math.pow(2, zoom_);\n\n    super({\n      ...props,\n      // in case viewState contains longitude/latitude values,\n      // make sure that the base Viewport class does not treat this as a geospatial viewport\n      longitude: null,\n      position: target,\n      viewMatrix: viewMatrix.clone().scale([scale, scale * (flipY ? -1 : 1), scale]),\n      projectionMatrix: getProjectionMatrix({width, height, near, far}),\n      zoom: zoom_\n    });\n\n    if (zoomX !== zoomY) {\n      const scaleX = Math.pow(2, zoomX);\n      const scaleY = Math.pow(2, zoomY);\n\n      this.distanceScales = {\n        unitsPerMeter: [scaleX / scale, scaleY / scale, 1],\n        metersPerUnit: [scale / scaleX, scale / scaleY, 1]\n      };\n    }\n  }\n\n  projectFlat([X, Y]) {\n    const {unitsPerMeter} = this.distanceScales;\n    return [X * unitsPerMeter[0], Y * unitsPerMeter[1]];\n  }\n\n  unprojectFlat([x, y]) {\n    const {metersPerUnit} = this.distanceScales;\n    return [x * metersPerUnit[0], y * metersPerUnit[1]];\n  }\n\n  /* Needed by LinearInterpolator */\n  panByPosition(coords, pixel) {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(coords);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return {target: newCenter};\n  }\n}\n\nexport default class OrthographicView extends View {\n  constructor(props) {\n    super({\n      ...props,\n      type: OrthographicViewport\n    });\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: OrthographicController\n    });\n  }\n}\n\nOrthographicView.displayName = 'OrthographicView';\n"],"file":"orthographic-view.js"}