import { getParameters, setParameters, withParameters } from '@luma.gl/core';
import { createDeckInstance, destroyDeckInstance, getViewPropsFromOverlay, getViewPropsFromCoordinateTransformer } from './utils';

const HIDE_ALL_LAYERS = () => false;

const GL_STATE = {
  depthMask: true,
  depthTest: true,
  blend: true,
  blendFunc: [770, 771, 1, 771],
  blendEquation: 32774
};
export default class GoogleMapsOverlay {
  constructor(props) {
    this.props = {};
    this._map = null;
    this.setProps(props);
  }

  setMap(map) {
    if (map === this._map) {
      return;
    }

    if (this._map) {
      this._overlay.setMap(null);

      this._map = null;
    }

    if (map) {
      this._map = map;
      const {
        UNINITIALIZED
      } = google.maps.RenderingType;
      const renderingType = map.getRenderingType();

      if (renderingType !== UNINITIALIZED) {
        this._createOverlay(map);
      } else {
        map.addListener('renderingtype_changed', () => {
          this._createOverlay(map);
        });
      }
    }
  }

  setProps(props) {
    Object.assign(this.props, props);

    if (this._deck) {
      if (props.style) {
        Object.assign(this._deck.canvas.parentElement.style, props.style);
        props.style = null;
      }

      this._deck.setProps(props);
    }
  }

  pickObject(params) {
    return this._deck && this._deck.pickObject(params);
  }

  pickMultipleObjects(params) {
    return this._deck && this._deck.pickMultipleObjects(params);
  }

  pickObjects(params) {
    return this._deck && this._deck.pickObjects(params);
  }

  finalize() {
    this.setMap(null);

    if (this._deck) {
      destroyDeckInstance(this._deck);
      this._deck = null;
    }
  }

  _createOverlay(map) {
    const {
      VECTOR,
      UNINITIALIZED
    } = google.maps.RenderingType;
    const renderingType = map.getRenderingType();

    if (renderingType === UNINITIALIZED) {
      return;
    }

    const isVectorMap = renderingType === VECTOR && google.maps.WebglOverlayView;
    const OverlayView = isVectorMap ? google.maps.WebglOverlayView : google.maps.OverlayView;
    const overlay = new OverlayView();

    if (isVectorMap) {
      overlay.onAdd = () => {};

      overlay.onContextLost = this._onContextLost.bind(this);
      overlay.onContextRestored = this._onContextRestored.bind(this);
      overlay.onDraw = this._onDrawVector.bind(this);
    } else {
      overlay.onAdd = this._onAdd.bind(this);
      overlay.draw = this._onDrawRaster.bind(this);
    }

    overlay.onRemove = this._onRemove.bind(this);
    this._overlay = overlay;

    this._overlay.setMap(map);
  }

  _onAdd() {
    this._deck = createDeckInstance(this._map, this._overlay, this._deck, this.props);
  }

  _onContextRestored(gl) {
    const _customRender = () => {
      this._overlay.requestRedraw();
    };

    const deck = createDeckInstance(this._map, this._overlay, this._deck, {
      gl,
      _customRender,
      ...this.props
    });
    this._deck = deck;

    deck.animationLoop._renderFrame = () => {
      const ab = gl.getParameter(34964);
      withParameters(gl, {}, () => {
        deck.animationLoop.onRender();
      });
      gl.bindBuffer(34962, ab);
    };
  }

  _onContextLost() {
    if (this._deck) {
      destroyDeckInstance(this._deck);
      this._deck = null;
    }
  }

  _onRemove() {
    this._deck.setProps({
      layerFilter: HIDE_ALL_LAYERS
    });
  }

  _onDrawRaster() {
    const deck = this._deck;
    const {
      width,
      height,
      left,
      top,
      zoom,
      pitch,
      latitude,
      longitude
    } = getViewPropsFromOverlay(this._map, this._overlay);
    const canSyncWithGoogleMaps = pitch === 0;
    const parentStyle = deck.canvas.parentElement.style;
    parentStyle.left = "".concat(left, "px");
    parentStyle.top = "".concat(top, "px");
    deck.setProps({
      width,
      height,
      viewState: {
        latitude,
        longitude,
        zoom,
        repeat: true
      },
      layerFilter: canSyncWithGoogleMaps ? this.props.layerFilter : HIDE_ALL_LAYERS
    });
    deck.redraw();
  }

  _onDrawVector(gl, coordinateTransformer) {
    if (!this._deck || !this._map) {
      return;
    }

    const deck = this._deck;
    deck.setProps({ ...getViewPropsFromCoordinateTransformer(this._map, coordinateTransformer)
    });

    if (deck.layerManager) {
      const _framebuffer = getParameters(gl, 36006);

      deck.setProps({
        _framebuffer
      });
      deck.needsRedraw({
        clearRedrawFlags: true
      });
      setParameters(gl, {
        viewport: [0, 0, gl.canvas.width, gl.canvas.height],
        scissor: [0, 0, gl.canvas.width, gl.canvas.height],
        stencilFunc: [519, 0, 255, 519, 0, 255]
      });
      withParameters(gl, GL_STATE, () => {
        deck._drawLayers('google-vector', {
          clearCanvas: false
        });
      });
    }
  }

}
//# sourceMappingURL=google-maps-overlay.js.map