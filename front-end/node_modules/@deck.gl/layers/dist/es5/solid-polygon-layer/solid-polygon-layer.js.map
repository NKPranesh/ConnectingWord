{"version":3,"sources":["../../../src/solid-polygon-layer/solid-polygon-layer.js"],"names":["DEFAULT_COLOR","defaultProps","filled","extruded","wireframe","_normalize","_windingOrder","elevationScale","type","min","value","getPolygon","f","polygon","getElevation","getFillColor","getLineColor","material","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","SolidPolygonLayer","Layer","getShaders","vs","vsTop","vsSide","fs","defines","RING_WINDING_ORDER_CW","props","modules","project32","gouraudLighting","picking","wrapLongitude","initializeState","gl","viewport","context","coordinateSystem","isGeospatial","COORDINATE_SYSTEM","DEFAULT","LNGLAT","setState","numInstances","polygonTesselator","PolygonTesselator","preproject","projectFlat","fp64","use64bitPositions","IndexType","FEATURES","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","remove","add","indices","size","isIndexed","update","calculateIndices","positions","transition","accessor","calculatePositions","shaderAttributes","vertexOffset","divisor","instancePositions","nextPositions","vertexValid","calculateVertexValid","elevations","instanceElevations","fillColors","alias","colorFormat","normalized","defaultValue","instanceFillColors","lineColors","instanceLineColors","pickingColors","object","index","target","encodePickingColor","__source","instancePickingColors","getPickingInfo","params","info","data","find","d","disablePickingIndex","objectIndex","i","_disablePickingIndex","draw","uniforms","topModel","sideModel","state","renderUniforms","Boolean","setInstanceCount","instanceCount","setUniforms","setDrawMode","isWireframe","setVertexCount","vertexCount","updateState","updateParams","updateGeometry","oldProps","changeFlags","regenerateModels","extensionsChanged","models","forEach","model","delete","_getModels","invalidateAll","geometryConfigChanged","dataChanged","updateTriggersChanged","all","buffers","attributes","normalize","geometryBuffer","getGeometry","positionFormat","resolution","startIndices","vertexStarts","id","shaders","NON_INSTANCED_MODEL","Model","drawMode","vertexPositions","Float32Array","isSideVertex","geometry","Geometry","isInstanced","userData","excludeAttributes","filter","attribute","indexStarts","get","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, hasFeatures, FEATURES} from '@luma.gl/core';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport PolygonTesselator from './polygon-tesselator';\n\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  filled: true,\n  // Whether to extrude\n  extruded: false,\n  // Whether to draw a GL.LINES wireframe of the polygon\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n\n  // elevation multiplier\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // Accessor for polygon geometry\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Accessor for extrusion height\n  getElevation: {type: 'accessor', value: 1000},\n  // Accessor for colors\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // Optional settings for 'lighting' shader module\n  material: true\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer extends Layer {\n  getShaders(type) {\n    return super.getShaders({\n      vs: type === 'top' ? vsTop : vsSide,\n      fs,\n      defines: {\n        RING_WINDING_ORDER_CW: !this.props._normalize && this.props._windingOrder === 'CCW' ? 0 : 1\n      },\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const {gl, viewport} = this.context;\n    let {coordinateSystem} = this.props;\n    if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n      coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n    }\n\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        // Lnglat coordinates are usually projected non-linearly, which affects tesselation results\n        // Provide a preproject function if the coordinates are in lnglat\n        preproject: coordinateSystem === COORDINATE_SYSTEM.LNGLAT && viewport.projectFlat,\n        fp64: this.use64bitPositions(),\n        IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n\n    attributeManager.remove(['instancePickingColors']);\n\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {size: 1, isIndexed: true, update: this.calculateIndices, noAlloc},\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          positions: {\n            vertexOffset: 0,\n            divisor: 0\n          },\n          instancePositions: {\n            vertexOffset: 0,\n            divisor: 1\n          },\n          nextPositions: {\n            vertexOffset: 1,\n            divisor: 1\n          }\n        }\n      },\n      vertexValid: {\n        size: 1,\n        divisor: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        shaderAttributes: {\n          elevations: {\n            divisor: 0\n          },\n          instanceElevations: {\n            divisor: 1\n          }\n        }\n      },\n      fillColors: {\n        alias: 'colors',\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          fillColors: {\n            divisor: 0\n          },\n          instanceFillColors: {\n            divisor: 1\n          }\n        }\n      },\n      lineColors: {\n        alias: 'colors',\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          lineColors: {\n            divisor: 0\n          },\n          instanceLineColors: {\n            divisor: 1\n          }\n        }\n      },\n      pickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value),\n        shaderAttributes: {\n          pickingColors: {\n            divisor: 0\n          },\n          instancePickingColors: {\n            divisor: 1\n          }\n        }\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = data.find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  disablePickingIndex(objectIndex) {\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({uniforms}) {\n    const {extruded, filled, wireframe, elevationScale} = this.props;\n    const {topModel, sideModel, polygonTesselator} = this.state;\n\n    const renderUniforms = {\n      ...uniforms,\n      extruded: Boolean(extruded),\n      elevationScale\n    };\n\n    // Note: the order is important\n    if (sideModel) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.setUniforms(renderUniforms);\n      if (wireframe) {\n        sideModel.setDrawMode(GL.LINE_STRIP);\n        sideModel.setUniforms({isWireframe: true}).draw();\n      }\n      if (filled) {\n        sideModel.setDrawMode(GL.TRIANGLE_FAN);\n        sideModel.setUniforms({isWireframe: false}).draw();\n      }\n    }\n\n    if (topModel) {\n      topModel.setVertexCount(polygonTesselator.vertexCount);\n      topModel.setUniforms(renderUniforms).draw();\n    }\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps, changeFlags} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      changeFlags.extensionsChanged ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      this.state.models?.forEach(model => model.delete());\n\n      this.setState(this._getModels(this.context.gl));\n      attributeManager.invalidateAll();\n    }\n  }\n\n  updateGeometry({props, oldProps, changeFlags}) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      const {polygonTesselator} = this.state;\n      const buffers = props.data.attributes || {};\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        normalize: props._normalize,\n        geometryBuffer: buffers.getPolygon,\n        buffers,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        fp64: this.use64bitPositions(),\n        dataChanged: changeFlags.dataChanged\n      });\n\n      this.setState({\n        numInstances: polygonTesselator.instanceCount,\n        startIndices: polygonTesselator.vertexStarts\n      });\n\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }\n\n  _getModels(gl) {\n    const {id, filled, extruded} = this.props;\n\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      const shaders = this.getShaders('top');\n      shaders.defines.NON_INSTANCED_MODEL = 1;\n\n      topModel = new Model(gl, {\n        ...shaders,\n        id: `${id}-top`,\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          vertexPositions: new Float32Array([0, 1])\n        },\n        uniforms: {\n          isWireframe: false,\n          isSideVertex: false\n        },\n        vertexCount: 0,\n        isIndexed: true\n      });\n    }\n    if (extruded) {\n      sideModel = new Model(gl, {\n        ...this.getShaders('side'),\n        id: `${id}-side`,\n        geometry: new Geometry({\n          drawMode: GL.LINES,\n          vertexCount: 4,\n          attributes: {\n            // top right - top left - bootom left - bottom right\n            vertexPositions: {\n              size: 2,\n              value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])\n            }\n          }\n        }),\n        instanceCount: 0,\n        isInstanced: 1\n      });\n\n      sideModel.userData.excludeAttributes = {indices: true};\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  calculateIndices(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.indexStarts;\n    attribute.value = polygonTesselator.get('indices');\n  }\n\n  calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.vertexStarts;\n    attribute.value = polygonTesselator.get('positions');\n  }\n\n  calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n}\n\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;\n"],"file":"solid-polygon-layer.js"}