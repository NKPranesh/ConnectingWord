{"version":3,"sources":["../../../src/column-layer/column-layer.js"],"names":["DEFAULT_COLOR","defaultProps","diskResolution","type","min","value","vertices","radius","angle","offset","coverage","max","elevationScale","radiusUnits","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","extruded","wireframe","filled","stroked","getPosition","x","position","getFillColor","getLineColor","getLineWidth","getElevation","material","getColor","deprecatedFor","ColumnLayer","Layer","getShaders","vs","fs","modules","project32","gouraudLighting","picking","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceElevations","instanceFillColors","props","colorFormat","length","normalized","defaultValue","instanceLineColors","instanceStrokeWidths","updateState","oldProps","changeFlags","regenerateModels","extensionsChanged","gl","context","state","model","delete","_getModel","invalidateAll","_updateGeometry","getGeometry","hasThinkness","geometry","ColumnGeometry","height","nradial","meanVertexDistance","i","p","d","Math","sqrt","setState","edgeDistance","cos","PI","Model","id","isInstanced","fillVertexCount","attributes","POSITION","wireframeVertexCount","indices","setProps","draw","uniforms","setUniforms","UNIT","widthUnits","widthScale","widthMinPixels","widthMaxPixels","isIndexed","setVertexCount","setDrawMode","isStroke","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model} from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\n\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  diskResolution: {type: 'number', min: 4, value: 20},\n  vertices: null,\n  radius: {type: 'number', min: 0, value: 1000},\n  angle: {type: 'number', value: 0},\n  offset: {type: 'array', value: [0, 0]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  radiusUnits: 'meters',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n  getElevation: {type: 'accessor', value: 1000},\n  material: true,\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\nexport default class ColumnLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, gouraudLighting, picking]});\n  }\n\n  /**\n   * DeckGL calls initializeState when GL context is available\n   * Essentially a deferred constructor\n   */\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const regenerateModels = changeFlags.extensionsChanged;\n\n    if (regenerateModels) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (\n      regenerateModels ||\n      props.diskResolution !== oldProps.diskResolution ||\n      props.vertices !== oldProps.vertices ||\n      (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)\n    ) {\n      this._updateGeometry(props);\n    }\n  }\n\n  getGeometry(diskResolution, vertices, hasThinkness) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: hasThinkness ? 2 : 0,\n      vertices,\n      nradial: diskResolution\n    });\n\n    let meanVertexDistance = 0;\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n\n    return geometry;\n  }\n\n  _getModel(gl) {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      isInstanced: true\n    });\n  }\n\n  _updateGeometry({diskResolution, vertices, extruded, stroked}) {\n    const geometry = this.getGeometry(diskResolution, vertices, extruded || stroked);\n\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n      wireframeVertexCount: geometry.indices.value.length\n    });\n\n    this.state.model.setProps({geometry});\n  }\n\n  draw({uniforms}) {\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      radiusUnits,\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const {model, fillVertexCount, wireframeVertexCount, edgeDistance} = this.state;\n\n    model.setUniforms(uniforms).setUniforms({\n      radius,\n      angle: (angle / 180) * Math.PI,\n      offset,\n      extruded,\n      coverage,\n      elevationScale,\n      edgeDistance,\n      radiusUnits: UNIT[radiusUnits],\n      widthUnits: UNIT[lineWidthUnits],\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels\n    });\n\n    // When drawing 3d: draw wireframe first so it doesn't get occluded by depth test\n    if (extruded && wireframe) {\n      model.setProps({isIndexed: true});\n      model\n        .setVertexCount(wireframeVertexCount)\n        .setDrawMode(GL.LINES)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n    if (filled) {\n      model.setProps({isIndexed: false});\n      model\n        .setVertexCount(fillVertexCount)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: false})\n        .draw();\n    }\n    // When drawing 2d: draw fill before stroke so that the outline is always on top\n    if (!extruded && stroked) {\n      model.setProps({isIndexed: false});\n      // The width of the stroke is achieved by flattening the side of the cylinder.\n      // Skip the last 1/3 of the vertices which is the top.\n      model\n        .setVertexCount((fillVertexCount * 2) / 3)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n  }\n}\n\nColumnLayer.layerName = 'ColumnLayer';\nColumnLayer.defaultProps = defaultProps;\n"],"file":"column-layer.js"}