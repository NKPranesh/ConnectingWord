{"version":3,"sources":["../../../src/polygon-layer/polygon-layer.js"],"names":["defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","elevationScale","wireframe","_normalize","_windingOrder","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","getPolygon","type","value","f","polygon","getFillColor","getLineColor","getLineWidth","getElevation","material","PolygonLayer","CompositeLayer","initializeState","state","paths","props","getLineDashArray","log","removed","updateState","oldProps","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","Array","isArray","slice","pathsDiff","map","dataRange","data","getIndex","p","__source","index","replace","_getPaths","setState","positionFormat","positionSize","startRow","endRow","iterable","objectInfo","object","Polygon","normalize","holeIndices","positions","i","length","path","push","getSubLayerRow","renderLayers","_dataDiff","transitions","lineDashJustified","updateTriggers","FillLayer","getSubLayerClass","SolidPolygonLayer","StrokeLayer","PathLayer","polygonLayer","shouldRenderSubLayer","getSubLayerProps","id","lineColors","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","jointRounded","miterLimit","dashJustified","_pathType","getWidth","getColor","getPath","getSubLayerAccessor","getDashArray","x","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, createIterable, log} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport {replaceInRange} from '../utils';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point, line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\nexport default class PolygonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      paths: []\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n      const paths = this.state.paths.slice();\n      const pathsDiff = changeFlags.dataChanged.map(dataRange =>\n        replaceInRange({\n          data: paths,\n          getIndex: p => p.__source.index,\n          dataRange,\n          replace: this._getPaths(dataRange)\n        })\n      );\n      this.setState({paths, pathsDiff});\n    } else if (geometryChanged) {\n      this.setState({\n        paths: this._getPaths(),\n        pathsDiff: null\n      });\n    }\n  }\n\n  _getPaths(dataRange = {}) {\n    const {data, getPolygon, positionFormat, _normalize} = this.props;\n    const paths = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n    const {startRow, endRow} = dataRange;\n\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      let polygon = getPolygon(object, objectInfo);\n      if (_normalize) {\n        polygon = Polygon.normalize(polygon, positionSize);\n      }\n      const {holeIndices} = polygon;\n      const positions = polygon.positions || polygon;\n\n      if (holeIndices) {\n        // split the positions array into `holeIndices.length + 1` rings\n        // holeIndices[-1] falls back to 0\n        // holeIndices[holeIndices.length] falls back to positions.length\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.slice(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n          paths.push(this.getSubLayerRow({path}, object, objectInfo.index));\n        }\n      } else {\n        paths.push(this.getSubLayerRow({path: positions}, object, objectInfo.index));\n      }\n    }\n    return paths;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    // Layer composition props\n    const {\n      data,\n      _dataDiff,\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      _normalize,\n      _windingOrder,\n      elevationScale,\n      transitions,\n      positionFormat\n    } = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n\n    const {paths, pathsDiff} = this.state;\n\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      this.shouldRenderSubLayer('fill', paths) &&\n      new FillLayer(\n        {\n          _dataDiff,\n          extruded,\n          elevationScale,\n\n          filled,\n          wireframe,\n          _normalize,\n          _windingOrder,\n\n          getElevation,\n          getFillColor,\n          getLineColor: extruded && wireframe ? getLineColor : defaultLineColor,\n\n          material,\n          transitions\n        },\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: {\n            getPolygon: updateTriggers.getPolygon,\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            // using a legacy API to invalid lineColor attributes\n            // if (extruded && wireframe) has changed\n            lineColors: extruded && wireframe,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          positionFormat,\n          getPolygon\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('stroke', paths) &&\n      new StrokeLayer(\n        {\n          _dataDiff: pathsDiff && (() => pathsDiff),\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          jointRounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          // Already normalized\n          _pathType: 'loop',\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray)\n        },\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n          positionFormat,\n          getPath: x => x.path\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n\nPolygonLayer.layerName = 'PolygonLayer';\nPolygonLayer.defaultProps = defaultProps;\n"],"file":"polygon-layer.js"}