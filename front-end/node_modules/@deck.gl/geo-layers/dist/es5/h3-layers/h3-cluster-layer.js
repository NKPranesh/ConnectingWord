"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _h3Js = require("h3-js");

var _core = require("@deck.gl/core");

var _layers = require("@deck.gl/layers");

const defaultProps = { ..._layers.PolygonLayer.defaultProps,
  getHexagons: {
    type: 'accessor',
    value: d => d.hexagons
  }
};

class H3ClusterLayer extends _core.CompositeLayer {
  updateState({
    props,
    oldProps,
    changeFlags
  }) {
    if (changeFlags.dataChanged || changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagons) {
      const {
        data,
        getHexagons
      } = props;
      const polygons = [];
      const {
        iterable,
        objectInfo
      } = (0, _core.createIterable)(data);

      for (const object of iterable) {
        objectInfo.index++;
        const hexagons = getHexagons(object, objectInfo);
        const multiPolygon = (0, _h3Js.h3SetToMultiPolygon)(hexagons, true);

        for (const polygon of multiPolygon) {
          polygons.push(this.getSubLayerRow({
            polygon
          }, object, objectInfo.index));
        }
      }

      this.setState({
        polygons
      });
    }
  }

  renderLayers() {
    const {
      elevationScale,
      extruded,
      wireframe,
      filled,
      stroked,
      lineWidthScale,
      lineWidthMinPixels,
      lineWidthMaxPixels,
      lineJointRounded,
      lineMiterLimit,
      lineDashJustified,
      material,
      getFillColor,
      getLineColor,
      getLineWidth,
      getLineDashArray,
      getElevation,
      transitions,
      updateTriggers
    } = this.props;
    const SubLayerClass = this.getSubLayerClass('cluster-region', _layers.PolygonLayer);
    return new SubLayerClass({
      filled,
      wireframe,
      extruded,
      elevationScale,
      stroked,
      lineWidthScale,
      lineWidthMinPixels,
      lineWidthMaxPixels,
      lineJointRounded,
      lineMiterLimit,
      lineDashJustified,
      material,
      transitions,
      getFillColor: this.getSubLayerAccessor(getFillColor),
      getLineColor: this.getSubLayerAccessor(getLineColor),
      getLineWidth: this.getSubLayerAccessor(getLineWidth),
      getLineDashArray: this.getSubLayerAccessor(getLineDashArray),
      getElevation: this.getSubLayerAccessor(getElevation)
    }, this.getSubLayerProps({
      id: 'cluster-region',
      updateTriggers
    }), {
      data: this.state.polygons,
      getPolygon: d => d.polygon
    });
  }

}

exports.default = H3ClusterLayer;
H3ClusterLayer.defaultProps = defaultProps;
H3ClusterLayer.layerName = 'H3ClusterLayer';
//# sourceMappingURL=h3-cluster-layer.js.map