{"version":3,"sources":["../../../src/h3-layers/h3-cluster-layer.js"],"names":["defaultProps","PolygonLayer","getHexagons","type","value","d","hexagons","H3ClusterLayer","CompositeLayer","updateState","props","oldProps","changeFlags","dataChanged","updateTriggers","data","polygons","iterable","objectInfo","object","index","multiPolygon","polygon","push","getSubLayerRow","setState","renderLayers","elevationScale","extruded","wireframe","filled","stroked","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","lineJointRounded","lineMiterLimit","lineDashJustified","material","getFillColor","getLineColor","getLineWidth","getLineDashArray","getElevation","transitions","SubLayerClass","getSubLayerClass","getSubLayerAccessor","getSubLayerProps","id","state","getPolygon","layerName"],"mappings":"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","sourcesContent":["import {h3SetToMultiPolygon} from 'h3-js';\n\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport {PolygonLayer} from '@deck.gl/layers';\n\nconst defaultProps = {\n  ...PolygonLayer.defaultProps,\n  getHexagons: {type: 'accessor', value: d => d.hexagons}\n};\n\nexport default class H3ClusterLayer extends CompositeLayer {\n  updateState({props, oldProps, changeFlags}) {\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagons)\n    ) {\n      const {data, getHexagons} = props;\n      const polygons = [];\n\n      const {iterable, objectInfo} = createIterable(data);\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexagons = getHexagons(object, objectInfo);\n        const multiPolygon = h3SetToMultiPolygon(hexagons, true);\n\n        for (const polygon of multiPolygon) {\n          polygons.push(this.getSubLayerRow({polygon}, object, objectInfo.index));\n        }\n      }\n\n      this.setState({polygons});\n    }\n  }\n\n  renderLayers() {\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      material,\n\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      transitions,\n      updateTriggers\n    } = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('cluster-region', PolygonLayer);\n\n    return new SubLayerClass(\n      {\n        filled,\n        wireframe,\n\n        extruded,\n        elevationScale,\n\n        stroked,\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels,\n        lineJointRounded,\n        lineMiterLimit,\n        lineDashJustified,\n\n        material,\n        transitions,\n\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        getLineWidth: this.getSubLayerAccessor(getLineWidth),\n        getLineDashArray: this.getSubLayerAccessor(getLineDashArray),\n        getElevation: this.getSubLayerAccessor(getElevation)\n      },\n      this.getSubLayerProps({\n        id: 'cluster-region',\n        updateTriggers\n      }),\n      {\n        data: this.state.polygons,\n        getPolygon: d => d.polygon\n      }\n    );\n  }\n}\n\nH3ClusterLayer.defaultProps = defaultProps;\nH3ClusterLayer.layerName = 'H3ClusterLayer';\n"],"file":"h3-cluster-layer.js"}