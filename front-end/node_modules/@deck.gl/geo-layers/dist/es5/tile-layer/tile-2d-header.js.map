{"version":3,"sources":["../../../src/tile-layer/tile-2d-header.js"],"names":["Tile2DHeader","constructor","x","y","z","isVisible","isSelected","parent","children","content","_loaderId","_isLoaded","_isCancelled","_needsReload","data","isLoading","_loader","then","isLoaded","Boolean","needsReload","byteLength","result","Number","isFinite","log","error","_loadData","getData","requestScheduler","onLoad","onError","bbox","loaderId","_abortController","AbortController","signal","requestToken","scheduleRequest","tile","done","tileData","err","undefined","loadData","opts","setNeedsReload","abort"],"mappings":"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","sourcesContent":["/* eslint-env browser */\nimport {log} from '@deck.gl/core';\n\nexport default class Tile2DHeader {\n  constructor({x, y, z}) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.isVisible = false;\n    this.isSelected = false;\n    this.parent = null;\n    this.children = [];\n\n    this.content = null;\n\n    this._loaderId = 0;\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n  }\n\n  get data() {\n    return this.isLoading ? this._loader.then(() => this.data) : this.content;\n  }\n\n  get isLoaded() {\n    return this._isLoaded && !this._needsReload;\n  }\n\n  get isLoading() {\n    return Boolean(this._loader) && !this._isCancelled;\n  }\n\n  get needsReload() {\n    return this._needsReload || this._isCancelled;\n  }\n\n  get byteLength() {\n    const result = this.content ? this.content.byteLength : 0;\n    if (!Number.isFinite(result)) {\n      log.error('byteLength not defined in tile data')();\n    }\n    return result;\n  }\n\n  /* eslint-disable max-statements */\n  async _loadData({getData, requestScheduler, onLoad, onError}) {\n    const {x, y, z, bbox} = this;\n    const loaderId = this._loaderId;\n\n    this._abortController = new AbortController(); // eslint-disable-line no-undef\n    const {signal} = this._abortController;\n\n    const requestToken = await requestScheduler.scheduleRequest(this, tile => {\n      return tile.isSelected ? 1 : -1;\n    });\n\n    if (!requestToken) {\n      this._isCancelled = true;\n      return;\n    }\n    // A tile can be cancelled while being scheduled\n    if (this._isCancelled) {\n      requestToken.done();\n      return;\n    }\n\n    let tileData = null;\n    let error;\n    try {\n      tileData = await getData({x, y, z, bbox, signal});\n    } catch (err) {\n      error = err || true;\n    } finally {\n      requestToken.done();\n    }\n\n    // If loadData has been called with a newer version, discard the result from this operation\n    if (loaderId !== this._loaderId) {\n      return;\n    }\n    // Clear the `isLoading` flag\n    this._loader = undefined;\n    // Rewrite tile content with the result of getTileData if successful, or `null` in case of\n    // error or cancellation\n    this.content = tileData;\n    // If cancelled, do not invoke the callbacks\n    // Consider it loaded if we tried to cancel but `getTileData` still returned data\n    if (this._isCancelled && !tileData) {\n      this._isLoaded = false;\n      return;\n    }\n    this._isLoaded = true;\n    this._isCancelled = false;\n\n    if (error) {\n      onError(error, this);\n    } else {\n      onLoad(this);\n    }\n  }\n  /* eslint-enable max-statements */\n\n  loadData(opts) {\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n    this._loaderId++;\n    this._loader = this._loadData(opts);\n    return this._loader;\n  }\n\n  setNeedsReload() {\n    if (this.isLoading) {\n      this.abort();\n      this._loader = undefined;\n    }\n    this._needsReload = true;\n  }\n\n  abort() {\n    if (this.isLoaded) {\n      return;\n    }\n\n    this._isCancelled = true;\n    this._abortController.abort();\n  }\n}\n"],"file":"tile-2d-header.js"}