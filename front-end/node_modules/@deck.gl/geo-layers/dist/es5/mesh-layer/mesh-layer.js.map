{"version":3,"sources":["../../../src/mesh-layer/mesh-layer.js"],"names":["validateGeometryAttributes","attributes","hasColorAttribute","COLOR_0","colors","constant","value","Float32Array","uvRegions","defaultProps","pbrMaterial","type","featureIds","optional","_MeshLayer","SimpleMeshLayer","getShaders","shaders","modules","push","pbr","vs","fs","initializeState","props","state","attributeManager","add","featureIdsPickingColors","size","noAlloc","update","calculateFeatureIdsPickingColors","updateState","oldProps","changeFlags","updatePbrMaterialUniforms","draw","opts","model","setUniforms","u_Camera","getUniforms","project_uCameraPosition","u_pickFeatureIds","Boolean","getModel","mesh","id","materialParser","parseMaterial","Model","context","gl","geometry","defines","parameters","isInstanced","uniforms","unlit","pbrMetallicRoughness","baseColorTexture","GLTFMaterialParser","NORMAL","normals","TEXCOORD_0","texCoords","material","pbrDebug","imageBasedLightingEnvironment","lights","useTangents","attribute","Uint8ClampedArray","length","pickingColor","index","encodePickingColor","layerName"],"mappings":"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","sourcesContent":["import {GLTFMaterialParser} from '@luma.gl/experimental';\nimport {Model, pbr} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\n\nimport vs from './mesh-layer-vertex.glsl';\nimport fs from './mesh-layer-fragment.glsl';\n\nfunction validateGeometryAttributes(attributes) {\n  const hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  if (!hasColorAttribute) {\n    attributes.colors = {constant: true, value: new Float32Array([1, 1, 1])};\n  }\n  if (!attributes.uvRegions) {\n    attributes.uvRegions = {constant: true, value: new Float32Array([0, 0, 1, 1])};\n  }\n}\n\nconst defaultProps = {\n  // PBR material object. _lighting must be pbr for this to work\n  pbrMaterial: {type: 'object', value: null},\n  featureIds: {type: 'array', value: null, optional: true}\n};\n\nexport default class _MeshLayer extends SimpleMeshLayer {\n  getShaders() {\n    const shaders = super.getShaders();\n    const modules = shaders.modules;\n    modules.push(pbr);\n    return {...shaders, vs, fs};\n  }\n\n  initializeState() {\n    const {featureIds} = this.props;\n    super.initializeState();\n\n    if (featureIds) {\n      this.state.attributeManager.add({\n        featureIdsPickingColors: {\n          type: GL.UNSIGNED_BYTE,\n          size: 3,\n          noAlloc: true,\n          update: this.calculateFeatureIdsPickingColors\n        }\n      });\n    }\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (props.pbrMaterial !== oldProps.pbrMaterial) {\n      this.updatePbrMaterialUniforms(props.pbrMaterial);\n    }\n  }\n\n  draw(opts) {\n    const {featureIds} = this.props;\n    if (!this.state.model) {\n      return;\n    }\n    this.state.model.setUniforms({\n      // Needed for PBR (TODO: find better way to get it)\n      u_Camera: this.state.model.getUniforms().project_uCameraPosition,\n      u_pickFeatureIds: Boolean(featureIds)\n    });\n\n    super.draw(opts);\n  }\n\n  getModel(mesh) {\n    const {id, pbrMaterial} = this.props;\n    const materialParser = this.parseMaterial(pbrMaterial, mesh);\n    const shaders = this.getShaders();\n    validateGeometryAttributes(mesh.attributes);\n    const model = new Model(this.context.gl, {\n      ...this.getShaders(),\n      id,\n      geometry: mesh,\n      defines: {...shaders.defines, ...materialParser?.defines},\n      parameters: materialParser?.parameters,\n      isInstanced: true\n    });\n\n    return model;\n  }\n\n  updatePbrMaterialUniforms(pbrMaterial) {\n    const {model} = this.state;\n    if (model) {\n      const {mesh} = this.props;\n      const materialParser = this.parseMaterial(pbrMaterial, mesh);\n      model.setUniforms(materialParser.uniforms);\n    }\n  }\n\n  parseMaterial(pbrMaterial, mesh) {\n    const unlit = Boolean(\n      pbrMaterial.pbrMetallicRoughness && pbrMaterial.pbrMetallicRoughness.baseColorTexture\n    );\n    const materialParser = new GLTFMaterialParser(this.context.gl, {\n      attributes: {NORMAL: mesh.attributes.normals, TEXCOORD_0: mesh.attributes.texCoords},\n      material: {unlit, ...pbrMaterial},\n      pbrDebug: false,\n      imageBasedLightingEnvironment: null,\n      lights: true,\n      useTangents: false\n    });\n    return materialParser;\n  }\n\n  calculateFeatureIdsPickingColors(attribute) {\n    const {featureIds} = this.props;\n    const value = new Uint8ClampedArray(featureIds.length * attribute.size);\n\n    const pickingColor = [];\n    for (let index = 0; index < featureIds.length; index++) {\n      this.encodePickingColor(featureIds[index], pickingColor);\n\n      value[index * 3] = pickingColor[0];\n      value[index * 3 + 1] = pickingColor[1];\n      value[index * 3 + 2] = pickingColor[2];\n    }\n\n    attribute.value = value;\n  }\n}\n\n_MeshLayer.layerName = '_MeshLayer';\n_MeshLayer.defaultProps = defaultProps;\n"],"file":"mesh-layer.js"}