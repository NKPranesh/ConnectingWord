{"version":3,"sources":["../../../src/screen-grid-layer/screen-grid-layer.js"],"names":["defaultProps","ScreenGridCellLayer","getPosition","type","value","d","position","getWeight","gpuAggregation","aggregation","POSITION_ATTRIBUTE_NAME","DIMENSIONS","data","props","weights","accessors","ScreenGridLayer","GridAggregationLayer","initializeState","gl","context","isSupported","setState","supported","log","error","id","dimensions","getCellSize","cellSizePixels","count","size","operation","AGGREGATION_OPERATION","SUM","needMax","maxTexture","projectPoints","subLayerData","attributes","positionAttributeName","posOffset","translation","attributeManager","getAttributeManager","add","accessor","fp64","use64bitPositions","shouldUpdateState","changeFlags","state","somethingChanged","updateState","opts","renderLayers","numRow","numCol","updateTriggers","aggregationBuffer","CellLayerClass","getSubLayerClass","getSubLayerProps","instanceCounts","numInstances","finalizeState","maxBuffer","delete","getPickingInfo","info","mode","index","gpuGridAggregator","aggregationResults","getData","object","GPUGridAggregator","getAggregationData","pixelIndex","updateResults","aggregationData","maxData","setData","setImageData","updateAggregationState","cellSize","cellSizeChanged","oldProps","viewportChanged","warn","gpuAggregationChanged","positionsChanged","isAttributeChanged","aggregationDataDirty","isAggregationDirty","compareAll","dimension","aggregationWeightsDirty","viewport","width","height","Math","ceil","allocateResources","scaling","gridOffset","xOffset","yOffset","_updateAccessors","_resetResults","getValue","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION, getValueFunc} from '../utils/aggregation-operation-utils';\nimport ScreenGridCellLayer from './screen-grid-cell-layer';\nimport GridAggregationLayer from '../grid-aggregation-layer';\nimport {getFloatTexture} from '../utils/resource-utils.js';\n\nconst defaultProps = {\n  ...ScreenGridCellLayer.defaultProps,\n  getPosition: {type: 'accessor', value: d => d.position},\n  getWeight: {type: 'accessor', value: 1},\n\n  gpuAggregation: true,\n  aggregation: 'SUM'\n};\n\nconst POSITION_ATTRIBUTE_NAME = 'positions';\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSizePixels']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\n\nexport default class ScreenGridLayer extends GridAggregationLayer {\n  initializeState() {\n    const {gl} = this.context;\n    if (!ScreenGridCellLayer.isSupported(gl)) {\n      // max aggregated value is sampled from a float texture\n      this.setState({supported: false});\n      log.error(`ScreenGridLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeState({\n      dimensions: DIMENSIONS,\n      getCellSize: props => props.cellSizePixels\n    });\n    const weights = {\n      count: {\n        size: 1,\n        operation: AGGREGATION_OPERATION.SUM,\n        needMax: true,\n        maxTexture: getFloatTexture(gl, {id: `${this.id}-max-texture`})\n      }\n    };\n    this.setState({\n      supported: true,\n      projectPoints: true, // aggregation in screen space\n      weights,\n      subLayerData: {attributes: {}},\n      maxTexture: weights.count.maxTexture,\n      positionAttributeName: 'positions',\n      posOffset: [0, 0],\n      translation: [1, -1]\n    });\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      // this attribute is used in gpu aggregation path only\n      count: {size: 3, accessor: 'getWeight'}\n    });\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return this.state.supported && changeFlags.somethingChanged;\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n  }\n\n  renderLayers() {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {maxTexture, numRow, numCol, weights} = this.state;\n    const {updateTriggers} = this.props;\n    const {aggregationBuffer} = weights.count;\n    const CellLayerClass = this.getSubLayerClass('cells', ScreenGridCellLayer);\n\n    return new CellLayerClass(\n      this.props,\n      this.getSubLayerProps({\n        id: 'cell-layer',\n        updateTriggers\n      }),\n      {\n        data: {attributes: {instanceCounts: aggregationBuffer}},\n        maxTexture,\n        numInstances: numRow * numCol\n      }\n    );\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    const {aggregationBuffer, maxBuffer, maxTexture} = this.state;\n\n    aggregationBuffer?.delete();\n    maxBuffer?.delete();\n    maxTexture?.delete();\n  }\n\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n    if (index >= 0) {\n      const {gpuGridAggregator, gpuAggregation, weights} = this.state;\n      // Get count aggregation results\n      const aggregationResults = gpuAggregation\n        ? gpuGridAggregator.getData('count')\n        : weights.count;\n\n      // Each instance (one cell) is aggregated into single pixel,\n      // Get current instance's aggregation details.\n      info.object = GPUGridAggregator.getAggregationData({\n        pixelIndex: index,\n        ...aggregationResults\n      });\n    }\n\n    return info;\n  }\n\n  // Aggregation Overrides\n\n  updateResults({aggregationData, maxData}) {\n    const {count} = this.state.weights;\n    count.aggregationData = aggregationData;\n    count.aggregationBuffer.setData({data: aggregationData});\n    count.maxData = maxData;\n    count.maxTexture.setImageData({data: maxData});\n  }\n\n  /* eslint-disable complexity, max-statements */\n  updateAggregationState(opts) {\n    const cellSize = opts.props.cellSizePixels;\n    const cellSizeChanged = opts.oldProps.cellSizePixels !== cellSize;\n    const {viewportChanged} = opts.changeFlags;\n    let gpuAggregation = opts.props.gpuAggregation;\n    if (this.state.gpuAggregation !== opts.props.gpuAggregation) {\n      if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n        log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n        gpuAggregation = false;\n      }\n    }\n    const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n    this.setState({\n      gpuAggregation\n    });\n\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n\n    const {dimensions} = this.state;\n    const {data, weights} = dimensions;\n    const aggregationDataDirty =\n      positionsChanged ||\n      gpuAggregationChanged ||\n      viewportChanged ||\n      this.isAggregationDirty(opts, {\n        compareAll: gpuAggregation, // check for all (including extentions props) when using gpu aggregation\n        dimension: data\n      });\n    const aggregationWeightsDirty = this.isAggregationDirty(opts, {dimension: weights});\n\n    this.setState({\n      aggregationDataDirty,\n      aggregationWeightsDirty\n    });\n\n    const {viewport} = this.context;\n\n    if (viewportChanged || cellSizeChanged) {\n      const {width, height} = viewport;\n      const numCol = Math.ceil(width / cellSize);\n      const numRow = Math.ceil(height / cellSize);\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        // transformation from clipspace to screen(pixel) space\n        scaling: [width / 2, -height / 2, 1],\n\n        gridOffset: {xOffset: cellSize, yOffset: cellSize},\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    if (aggregationWeightsDirty) {\n      this._updateAccessors(opts);\n    }\n    if (aggregationDataDirty || aggregationWeightsDirty) {\n      this._resetResults();\n    }\n  }\n  /* eslint-enable complexity, max-statements */\n\n  // Private\n\n  _updateAccessors(opts) {\n    const {getWeight, aggregation, data} = opts.props;\n    const {count} = this.state.weights;\n    if (count) {\n      count.getWeight = getWeight;\n      count.operation = AGGREGATION_OPERATION[aggregation];\n    }\n    this.setState({getValue: getValueFunc(aggregation, getWeight, {data})});\n  }\n\n  _resetResults() {\n    const {count} = this.state.weights;\n    if (count) {\n      count.aggregationData = null;\n    }\n  }\n}\n\nScreenGridLayer.layerName = 'ScreenGridLayer';\nScreenGridLayer.defaultProps = defaultProps;\n"],"file":"screen-grid-layer.js"}