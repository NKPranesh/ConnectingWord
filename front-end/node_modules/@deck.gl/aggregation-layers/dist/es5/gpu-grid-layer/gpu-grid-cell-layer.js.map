{"version":3,"sources":["../../../src/gpu-grid-layer/gpu-grid-cell-layer.js"],"names":["COLOR_DATA_UBO_INDEX","ELEVATION_DATA_UBO_INDEX","defaultProps","colorDomain","colorRange","defaultColorRange","elevationDomain","elevationRange","elevationScale","type","min","value","gridSize","gridOrigin","gridOffset","cellSize","max","offset","coverage","extruded","material","GPUGridCellLayer","Layer","getShaders","vs","fs","modules","project32","gouraudLighting","picking","fp64arithmetic","initializeState","gl","context","attributeManager","getAttributeManager","addInstanced","colors","size","noAlloc","elevations","model","_getModel","_setupUniformBuffer","setState","Model","id","props","geometry","CubeGeometry","isInstanced","draw","uniforms","colorMaxMinBuffer","elevationMaxMinBuffer","gridOriginLow","gridOffsetLow","domainUniforms","getDomainUniforms","bindUniformBuffers","state","setUniforms","unbindUniformBuffers","bind","target","index","unbind","colorDomainValid","elevationDomainValid","programHandle","program","handle","colorIndex","getUniformBlockIndex","elevationIndex","uniformBlockBinding","layerName"],"mappings":";;;;;;;;;AAoBA;;AAEA;;AACA;;AACA;;AAEA;;AACA;;AAEA,MAAMA,oBAAoB,GAAG,CAA7B;AACA,MAAMC,wBAAwB,GAAG,CAAjC;AAEA,MAAMC,YAAY,GAAG;AAEnBC,EAAAA,WAAW,EAAE,IAFM;AAGnBC,EAAAA,UAAU,EAAEC,6BAHO;AAMnBC,EAAAA,eAAe,EAAE,IANE;AAOnBC,EAAAA,cAAc,EAAE,CAAC,CAAD,EAAI,IAAJ,CAPG;AAQnBC,EAAAA,cAAc,EAAE;AAACC,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,KAAK,EAAE;AAAhC,GARG;AAWnBC,EAAAA,QAAQ,EAAE;AAACH,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,GAAG,EAAE,CAArB;AAAwBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;AAA/B,GAXS;AAYnBE,EAAAA,UAAU,EAAE;AAACJ,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,GAAG,EAAE,CAArB;AAAwBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;AAA/B,GAZO;AAanBG,EAAAA,UAAU,EAAE;AAACL,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,GAAG,EAAE,CAArB;AAAwBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;AAA/B,GAbO;AAenBI,EAAAA,QAAQ,EAAE;AAACN,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,GAAG,EAAE,CAAtB;AAAyBM,IAAAA,GAAG,EAAE,IAA9B;AAAoCL,IAAAA,KAAK,EAAE;AAA3C,GAfS;AAgBnBM,EAAAA,MAAM,EAAE;AAACR,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,GAAG,EAAE,CAArB;AAAwBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;AAA/B,GAhBW;AAiBnBO,EAAAA,QAAQ,EAAE;AAACT,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,GAAG,EAAE,CAAtB;AAAyBM,IAAAA,GAAG,EAAE,CAA9B;AAAiCL,IAAAA,KAAK,EAAE;AAAxC,GAjBS;AAkBnBQ,EAAAA,QAAQ,EAAE,IAlBS;AAoBnBC,EAAAA,QAAQ,EAAE;AApBS,CAArB;;AAuBe,MAAMC,gBAAN,SAA+BC,WAA/B,CAAqC;AAClDC,EAAAA,UAAU,GAAG;AACX,WAAO,MAAMA,UAAN,CAAiB;AACtBC,MAAAA,EAAE,EAAFA,+BADsB;AAEtBC,MAAAA,EAAE,EAAFA,iCAFsB;AAGtBC,MAAAA,OAAO,EAAE,CAACC,eAAD,EAAYC,qBAAZ,EAA6BC,aAA7B,EAAsCC,2BAAtC;AAHa,KAAjB,CAAP;AAKD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,UAAM;AAACC,MAAAA;AAAD,QAAO,KAAKC,OAAlB;AACA,UAAMC,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;AACAD,IAAAA,gBAAgB,CAACE,YAAjB,CAA8B;AAC5BC,MAAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAE,CADA;AAENC,QAAAA,OAAO,EAAE;AAFH,OADoB;AAK5BC,MAAAA,UAAU,EAAE;AACVF,QAAAA,IAAI,EAAE,CADI;AAEVC,QAAAA,OAAO,EAAE;AAFC;AALgB,KAA9B;;AAUA,UAAME,KAAK,GAAG,KAAKC,SAAL,CAAeV,EAAf,CAAd;;AACA,SAAKW,mBAAL,CAAyBF,KAAzB;;AACA,SAAKG,QAAL,CAAc;AAACH,MAAAA;AAAD,KAAd;AACD;;AAEDC,EAAAA,SAAS,CAACV,EAAD,EAAK;AACZ,WAAO,IAAIa,YAAJ,CAAUb,EAAV,EAAc,EACnB,GAAG,KAAKT,UAAL,EADgB;AAEnBuB,MAAAA,EAAE,EAAE,KAAKC,KAAL,CAAWD,EAFI;AAGnBE,MAAAA,QAAQ,EAAE,IAAIC,mBAAJ,EAHS;AAInBC,MAAAA,WAAW,EAAE;AAJM,KAAd,CAAP;AAMD;;AAEDC,EAAAA,IAAI,CAAC;AAACC,IAAAA;AAAD,GAAD,EAAa;AACf,UAAM;AACJrC,MAAAA,QADI;AAEJE,MAAAA,MAFI;AAGJE,MAAAA,QAHI;AAIJX,MAAAA,cAJI;AAKJU,MAAAA,QALI;AAMJN,MAAAA,QANI;AAOJC,MAAAA,UAPI;AAQJC,MAAAA,UARI;AASJP,MAAAA,cATI;AAUJ8C,MAAAA,iBAVI;AAWJC,MAAAA;AAXI,QAYF,KAAKP,KAZT;AAcA,UAAMQ,aAAa,GAAG,CAAC,uBAAY1C,UAAU,CAAC,CAAD,CAAtB,CAAD,EAA6B,uBAAYA,UAAU,CAAC,CAAD,CAAtB,CAA7B,CAAtB;AACA,UAAM2C,aAAa,GAAG,CAAC,uBAAY1C,UAAU,CAAC,CAAD,CAAtB,CAAD,EAA6B,uBAAYA,UAAU,CAAC,CAAD,CAAtB,CAA7B,CAAtB;AACA,UAAM2C,cAAc,GAAG,KAAKC,iBAAL,EAAvB;AACA,UAAMtD,UAAU,GAAG,uCAAsB,KAAK2C,KAAL,CAAW3C,UAAjC,CAAnB;AACA,SAAKuD,kBAAL,CAAwBN,iBAAxB,EAA2CC,qBAA3C;AACA,SAAKM,KAAL,CAAWnB,KAAX,CACGoB,WADH,CACeT,QADf,EAEGS,WAFH,CAEeJ,cAFf,EAGGI,WAHH,CAGe;AACX9C,MAAAA,QADW;AAEXE,MAAAA,MAFW;AAGXE,MAAAA,QAHW;AAIXX,MAAAA,cAJW;AAKXU,MAAAA,QALW;AAMXN,MAAAA,QANW;AAOXC,MAAAA,UAPW;AAQX0C,MAAAA,aARW;AASXzC,MAAAA,UATW;AAUX0C,MAAAA,aAVW;AAWXpD,MAAAA,UAXW;AAYXG,MAAAA;AAZW,KAHf,EAiBG4C,IAjBH;AAkBA,SAAKW,oBAAL,CAA0BT,iBAA1B,EAA6CC,qBAA7C;AACD;;AAEDK,EAAAA,kBAAkB,CAACN,iBAAD,EAAoBC,qBAApB,EAA2C;AAC3DD,IAAAA,iBAAiB,CAACU,IAAlB,CAAuB;AAACC,MAAAA,MAAM,OAAP;AAA4BC,MAAAA,KAAK,EAAEjE;AAAnC,KAAvB;AACAsD,IAAAA,qBAAqB,CAACS,IAAtB,CAA2B;AAACC,MAAAA,MAAM,OAAP;AAA4BC,MAAAA,KAAK,EAAEhE;AAAnC,KAA3B;AACD;;AAED6D,EAAAA,oBAAoB,CAACT,iBAAD,EAAoBC,qBAApB,EAA2C;AAC7DD,IAAAA,iBAAiB,CAACa,MAAlB,CAAyB;AAACF,MAAAA,MAAM,OAAP;AAA4BC,MAAAA,KAAK,EAAEjE;AAAnC,KAAzB;AACAsD,IAAAA,qBAAqB,CAACY,MAAtB,CAA6B;AAACF,MAAAA,MAAM,OAAP;AAA4BC,MAAAA,KAAK,EAAEhE;AAAnC,KAA7B;AACD;;AAEDyD,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAACvD,MAAAA,WAAD;AAAcG,MAAAA;AAAd,QAAiC,KAAKyC,KAA5C;AACA,UAAMU,cAAc,GAAG,EAAvB;;AACA,QAAItD,WAAW,KAAK,IAApB,EAA0B;AACxBsD,MAAAA,cAAc,CAACU,gBAAf,GAAkC,IAAlC;AACAV,MAAAA,cAAc,CAACtD,WAAf,GAA6BA,WAA7B;AACD,KAHD,MAGO;AACLsD,MAAAA,cAAc,CAACU,gBAAf,GAAkC,KAAlC;AACD;;AACD,QAAI7D,eAAe,KAAK,IAAxB,EAA8B;AAC5BmD,MAAAA,cAAc,CAACW,oBAAf,GAAsC,IAAtC;AACAX,MAAAA,cAAc,CAACnD,eAAf,GAAiCA,eAAjC;AACD,KAHD,MAGO;AACLmD,MAAAA,cAAc,CAACW,oBAAf,GAAsC,KAAtC;AACD;;AACD,WAAOX,cAAP;AACD;;AAEDd,EAAAA,mBAAmB,CAACF,KAAD,EAAQ;AACzB,UAAMT,EAAE,GAAG,KAAKC,OAAL,CAAaD,EAAxB;AACA,UAAMqC,aAAa,GAAG5B,KAAK,CAAC6B,OAAN,CAAcC,MAApC;AAEA,UAAMC,UAAU,GAAGxC,EAAE,CAACyC,oBAAH,CAAwBJ,aAAxB,EAAuC,WAAvC,CAAnB;AACA,UAAMK,cAAc,GAAG1C,EAAE,CAACyC,oBAAH,CAAwBJ,aAAxB,EAAuC,eAAvC,CAAvB;AACArC,IAAAA,EAAE,CAAC2C,mBAAH,CAAuBN,aAAvB,EAAsCG,UAAtC,EAAkDxE,oBAAlD;AACAgC,IAAAA,EAAE,CAAC2C,mBAAH,CAAuBN,aAAvB,EAAsCK,cAAtC,EAAsDzE,wBAAtD;AACD;;AAjHiD;;;AAoHpDoB,gBAAgB,CAACuD,SAAjB,GAA6B,kBAA7B;AACAvD,gBAAgB,CAACnB,YAAjB,GAAgCA,YAAhC","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, fp64LowPart, project32, gouraudLighting, picking} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, CubeGeometry} from '@luma.gl/core';\nimport {fp64arithmetic} from '@luma.gl/shadertools';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\n\nimport vs from './gpu-grid-cell-layer-vertex.glsl';\nimport fs from './gpu-grid-cell-layer-fragment.glsl';\n\nconst COLOR_DATA_UBO_INDEX = 0;\nconst ELEVATION_DATA_UBO_INDEX = 1;\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // grid\n  gridSize: {type: 'array', min: 0, value: [1, 1]},\n  gridOrigin: {type: 'array', min: 0, value: [0, 0]},\n  gridOffset: {type: 'array', min: 0, value: [0, 0]},\n\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  offset: {type: 'array', min: 0, value: [1, 1]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  extruded: true,\n\n  material: true // Use lighting module defaults\n};\n\nexport default class GPUGridCellLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, gouraudLighting, picking, fp64arithmetic]\n    });\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      colors: {\n        size: 4,\n        noAlloc: true\n      },\n      elevations: {\n        size: 4,\n        noAlloc: true\n      }\n    });\n    const model = this._getModel(gl);\n    this._setupUniformBuffer(model);\n    this.setState({model});\n  }\n\n  _getModel(gl) {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new CubeGeometry(),\n      isInstanced: true\n    });\n  }\n\n  draw({uniforms}) {\n    const {\n      cellSize,\n      offset,\n      extruded,\n      elevationScale,\n      coverage,\n      gridSize,\n      gridOrigin,\n      gridOffset,\n      elevationRange,\n      colorMaxMinBuffer,\n      elevationMaxMinBuffer\n    } = this.props;\n\n    const gridOriginLow = [fp64LowPart(gridOrigin[0]), fp64LowPart(gridOrigin[1])];\n    const gridOffsetLow = [fp64LowPart(gridOffset[0]), fp64LowPart(gridOffset[1])];\n    const domainUniforms = this.getDomainUniforms();\n    const colorRange = colorRangeToFlatArray(this.props.colorRange);\n    this.bindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer);\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms(domainUniforms)\n      .setUniforms({\n        cellSize,\n        offset,\n        extruded,\n        elevationScale,\n        coverage,\n        gridSize,\n        gridOrigin,\n        gridOriginLow,\n        gridOffset,\n        gridOffsetLow,\n        colorRange,\n        elevationRange\n      })\n      .draw();\n    this.unbindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer);\n  }\n\n  bindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer) {\n    colorMaxMinBuffer.bind({target: GL.UNIFORM_BUFFER, index: COLOR_DATA_UBO_INDEX});\n    elevationMaxMinBuffer.bind({target: GL.UNIFORM_BUFFER, index: ELEVATION_DATA_UBO_INDEX});\n  }\n\n  unbindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer) {\n    colorMaxMinBuffer.unbind({target: GL.UNIFORM_BUFFER, index: COLOR_DATA_UBO_INDEX});\n    elevationMaxMinBuffer.unbind({target: GL.UNIFORM_BUFFER, index: ELEVATION_DATA_UBO_INDEX});\n  }\n\n  getDomainUniforms() {\n    const {colorDomain, elevationDomain} = this.props;\n    const domainUniforms = {};\n    if (colorDomain !== null) {\n      domainUniforms.colorDomainValid = true;\n      domainUniforms.colorDomain = colorDomain;\n    } else {\n      domainUniforms.colorDomainValid = false;\n    }\n    if (elevationDomain !== null) {\n      domainUniforms.elevationDomainValid = true;\n      domainUniforms.elevationDomain = elevationDomain;\n    } else {\n      domainUniforms.elevationDomainValid = false;\n    }\n    return domainUniforms;\n  }\n\n  _setupUniformBuffer(model) {\n    const gl = this.context.gl;\n    const programHandle = model.program.handle;\n\n    const colorIndex = gl.getUniformBlockIndex(programHandle, 'ColorData');\n    const elevationIndex = gl.getUniformBlockIndex(programHandle, 'ElevationData');\n    gl.uniformBlockBinding(programHandle, colorIndex, COLOR_DATA_UBO_INDEX);\n    gl.uniformBlockBinding(programHandle, elevationIndex, ELEVATION_DATA_UBO_INDEX);\n  }\n}\n\nGPUGridCellLayer.layerName = 'GPUGridCellLayer';\nGPUGridCellLayer.defaultProps = defaultProps;\n"],"file":"gpu-grid-cell-layer.js"}