"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBounds = getBounds;
exports.boundsContain = boundsContain;
exports.packVertices = packVertices;
exports.scaleToAspectRatio = scaleToAspectRatio;
exports.getTextureCoordinates = getTextureCoordinates;
exports.getTextureParams = getTextureParams;

var _core = require("@luma.gl/core");

function getBounds(points) {
  const x = points.map(p => p[0]);
  const y = points.map(p => p[1]);
  const xMin = Math.min.apply(null, x);
  const xMax = Math.max.apply(null, x);
  const yMin = Math.min.apply(null, y);
  const yMax = Math.max.apply(null, y);
  return [xMin, yMin, xMax, yMax];
}

function boundsContain(currentBounds, targetBounds) {
  if (targetBounds[0] >= currentBounds[0] && targetBounds[2] <= currentBounds[2] && targetBounds[1] >= currentBounds[1] && targetBounds[3] <= currentBounds[3]) {
    return true;
  }

  return false;
}

const scratchArray = new Float32Array(12);

function packVertices(points, dimensions = 2) {
  let index = 0;

  for (const point of points) {
    for (let i = 0; i < dimensions; i++) {
      scratchArray[index++] = point[i] || 0;
    }
  }

  return scratchArray;
}

function scaleToAspectRatio(boundingBox, width, height) {
  const [xMin, yMin, xMax, yMax] = boundingBox;
  const currentWidth = xMax - xMin;
  const currentHeight = yMax - yMin;
  let newWidth = currentWidth;
  let newHeight = currentHeight;

  if (currentWidth / currentHeight < width / height) {
    newWidth = width / height * currentHeight;
  } else {
    newHeight = height / width * currentWidth;
  }

  if (newWidth < width) {
    newWidth = width;
    newHeight = height;
  }

  const xCenter = (xMax + xMin) / 2;
  const yCenter = (yMax + yMin) / 2;
  return [xCenter - newWidth / 2, yCenter - newHeight / 2, xCenter + newWidth / 2, yCenter + newHeight / 2];
}

function getTextureCoordinates(point, bounds) {
  const [xMin, yMin, xMax, yMax] = bounds;
  return [(point[0] - xMin) / (xMax - xMin), (point[1] - yMin) / (yMax - yMin)];
}

function getTextureParams({
  gl,
  floatTargetSupport
}) {
  return {
    format: (0, _core.isWebGL2)(gl) ? 34836 : 6408,
    type: floatTargetSupport ? 5126 : 5121
  };
}
//# sourceMappingURL=heatmap-layer-utils.js.map