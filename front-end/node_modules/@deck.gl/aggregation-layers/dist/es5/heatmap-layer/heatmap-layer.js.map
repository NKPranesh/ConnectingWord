{"version":3,"sources":["../../../src/heatmap-layer/heatmap-layer.js"],"names":["RESOLUTION","TEXTURE_OPTIONS","mipmaps","parameters","dataFormat","DEFAULT_COLOR_DOMAIN","AGGREGATION_MODE","SUM","MEAN","defaultProps","getPosition","type","value","x","position","getWeight","intensity","min","radiusPixels","max","colorRange","defaultColorRange","threshold","colorDomain","optional","aggregation","weightsTextureSize","debounceTimeout","REQUIRED_FEATURES","FEATURES","BLEND_EQUATION_MINMAX","TEXTURE_FLOAT","DIMENSIONS","data","props","HeatmapLayer","AggregationLayer","initializeState","gl","context","setState","supported","log","error","id","_setupTextureParams","_setupAttributes","_setupResources","shouldUpdateState","changeFlags","somethingChanged","updateState","opts","state","_updateHeatmapState","oldProps","_getChangeFlags","dataChanged","viewportChanged","boundsChanged","_updateBounds","_updateTextureRenderingBounds","clearTimeout","updateTimer","isWeightMapDirty","viewportZoomChanged","_debouncedUpdateWeightmap","_updateColorTexture","_updateWeightmap","zoom","viewport","renderLayers","weightsTexture","triPositionBuffer","triTexCoordBuffer","maxWeightsTexture","colorTexture","updateTriggers","TriangleLayerClass","getSubLayerClass","TriangleLayer","getSubLayerProps","coordinateSystem","COORDINATE_SYSTEM","DEFAULT","attributes","positions","texCoords","vertexCount","maxTexture","aggregationMode","texture","finalizeState","weightsTransform","maxWeightTransform","delete","_getAttributeManager","AttributeManager","stats","dimensions","isAttributeChanged","isAggregationDirty","compareAll","dimension","_createTextures","textureSize","format","Texture2D","width","height","attributeManager","getAttributeManager","add","size","accessor","weights","positionAttributeName","Math","floatTargetSupport","COLOR_ATTACHMENT_RGBA32F","weightsScale","warn","getShaders","vs","vs_max","_fs","fs_max","weights_vs","weights_fs","_createWeightsTransform","shaders","Transform","elementCount","_targetTexture","_targetTextureVarying","weightsTransformShaders","maxWeightsTransformShaders","_sourceTextures","inTexture","Buffer","byteLength","updateShaders","shaderOptions","_updateMaxWeightValue","run","blend","depthTest","blendFunc","blendEquation","forceUpdate","viewportCorners","unproject","map","p","fround","visibleWorldBounds","newState","worldBounds","scaledCommonBounds","_worldToCommonBounds","_commonToWorldBounds","LNGLAT","normalizedCommonBounds","subData","textureBounds","projectPosition","colors","Uint8Array","setImageData","length","commonBounds","useLayerCoordinateSystem","metersPerPixel","distanceScales","metersPerUnit","uniforms","textureWidth","update","getNumInstances","clearRenderTarget","getAttributes","moduleSettings","getModuleSettings","setParameters","fromTimer","setTimeout","bind","minLong","minLat","maxLong","maxLat","offsetMode","LNGLAT_OFFSETS","METER_OFFSETS","offsetOriginCommon","coordinateOrigin","scale","bottomLeftCommon","topRightCommon","xMin","yMin","xMax","yMax","bottomLeftWorld","unprojectPosition","topRightWorld","slice","concat","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global setTimeout clearTimeout */\nimport GL from '@luma.gl/constants';\nimport {\n  getBounds,\n  boundsContain,\n  packVertices,\n  scaleToAspectRatio,\n  getTextureCoordinates,\n  getTextureParams\n} from './heatmap-layer-utils';\nimport {Buffer, Texture2D, Transform, getParameters, FEATURES, hasFeatures} from '@luma.gl/core';\nimport {AttributeManager, COORDINATE_SYSTEM, log} from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer from '../aggregation-layer';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport weights_vs from './weights-vs.glsl';\nimport weights_fs from './weights-fs.glsl';\nimport vs_max from './max-vs.glsl';\nimport fs_max from './max-fs.glsl';\n\nconst RESOLUTION = 2; // (number of common space pixels) / (number texels)\nconst TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: {\n    [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n    [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n  },\n  dataFormat: GL.RGBA\n};\nconst DEFAULT_COLOR_DOMAIN = [0, 0];\nconst AGGREGATION_MODE = {\n  SUM: 0,\n  MEAN: 1\n};\n\nconst defaultProps = {\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: 1},\n  intensity: {type: 'number', min: 0, value: 1},\n  radiusPixels: {type: 'number', min: 1, max: 100, value: 50},\n  colorRange: defaultColorRange,\n  threshold: {type: 'number', min: 0, max: 1, value: 0.05},\n  colorDomain: {type: 'array', value: null, optional: true},\n  // 'SUM' or 'MEAN'\n  aggregation: 'SUM',\n  weightsTextureSize: {type: 'number', min: 128, max: 2048, value: 2048},\n  debounceTimeout: {type: 'number', min: 0, max: 1000, value: 500}\n};\n\nconst REQUIRED_FEATURES = [\n  FEATURES.BLEND_EQUATION_MINMAX, // max weight calculation\n  FEATURES.TEXTURE_FLOAT // weight-map as texture\n  // FEATURES.FLOAT_BLEND, // implictly supported when TEXTURE_FLOAT is supported\n];\n\nconst DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\n\nexport default class HeatmapLayer extends AggregationLayer {\n  initializeState() {\n    const {gl} = this.context;\n    if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n      this.setState({supported: false});\n      log.error(`HeatmapLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeState(DIMENSIONS);\n    this.setState({supported: true, colorDomain: DEFAULT_COLOR_DOMAIN});\n    this._setupTextureParams();\n    this._setupAttributes();\n    this._setupResources();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    // Need to be updated when viewport changes\n    return changeFlags.somethingChanged;\n  }\n\n  /* eslint-disable max-statements,complexity */\n  updateState(opts) {\n    if (!this.state.supported) {\n      return;\n    }\n    super.updateState(opts);\n    this._updateHeatmapState(opts);\n  }\n\n  _updateHeatmapState(opts) {\n    const {props, oldProps} = opts;\n    const changeFlags = this._getChangeFlags(opts);\n\n    if (changeFlags.dataChanged || changeFlags.viewportChanged) {\n      // if data is changed, do not debounce and immediately update the weight map\n      changeFlags.boundsChanged = this._updateBounds(changeFlags.dataChanged);\n      this._updateTextureRenderingBounds();\n    }\n\n    if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n      // Update weight map immediately\n      clearTimeout(this.state.updateTimer);\n      this.setState({isWeightMapDirty: true});\n    } else if (changeFlags.viewportZoomChanged) {\n      // Update weight map when zoom stops\n      this._debouncedUpdateWeightmap();\n    }\n\n    if (props.colorRange !== oldProps.colorRange) {\n      this._updateColorTexture(opts);\n    }\n\n    if (this.state.isWeightMapDirty) {\n      this._updateWeightmap();\n    }\n\n    this.setState({zoom: opts.context.viewport.zoom});\n  }\n\n  renderLayers() {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {\n      weightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      maxWeightsTexture,\n      colorTexture,\n      colorDomain\n    } = this.state;\n    const {updateTriggers, intensity, threshold, aggregation} = this.props;\n\n    const TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n\n    return new TriangleLayerClass(\n      this.getSubLayerProps({\n        id: 'triangle-layer',\n        updateTriggers\n      }),\n      {\n        // position buffer is filled with world coordinates generated from viewport.unproject\n        // i.e. LNGLAT if geospatial, CARTESIAN otherwise\n        coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture,\n        aggregationMode: AGGREGATION_MODE[aggregation] || 0,\n        texture: weightsTexture,\n        intensity,\n        threshold,\n        colorDomain\n      }\n    );\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    const {\n      weightsTransform,\n      weightsTexture,\n      maxWeightTransform,\n      maxWeightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      colorTexture,\n      updateTimer\n    } = this.state;\n    weightsTransform?.delete();\n    weightsTexture?.delete();\n    maxWeightTransform?.delete();\n    maxWeightsTexture?.delete();\n    triPositionBuffer?.delete();\n    triTexCoordBuffer?.delete();\n    colorTexture?.delete();\n    updateTimer && clearTimeout(updateTimer);\n  }\n\n  // PRIVATE\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _getChangeFlags(opts) {\n    const changeFlags = {};\n    const {dimensions} = this.state;\n    changeFlags.dataChanged =\n      this.isAttributeChanged() || // if any attribute is changed\n      this.isAggregationDirty(opts, {\n        compareAll: true,\n        dimension: dimensions.data\n      });\n    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n\n    const {zoom} = this.state;\n    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n      changeFlags.viewportZoomChanged = true;\n    }\n\n    return changeFlags;\n  }\n\n  _createTextures() {\n    const {gl} = this.context;\n    const {textureSize, format, type} = this.state;\n\n    this.setState({\n      weightsTexture: new Texture2D(gl, {\n        width: textureSize,\n        height: textureSize,\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      }),\n      maxWeightsTexture: new Texture2D(gl, {format, type, ...TEXTURE_OPTIONS}) // 1 X 1 texture,\n    });\n  }\n\n  _setupAttributes() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, type: GL.DOUBLE, accessor: 'getPosition'},\n      weights: {size: 1, accessor: 'getWeight'}\n    });\n    this.setState({positionAttributeName: 'positions'});\n  }\n\n  _setupTextureParams() {\n    const {gl} = this.context;\n    const {weightsTextureSize} = this.props;\n\n    const textureSize = Math.min(weightsTextureSize, getParameters(gl, gl.MAX_TEXTURE_SIZE));\n    const floatTargetSupport = hasFeatures(gl, FEATURES.COLOR_ATTACHMENT_RGBA32F);\n    const {format, type} = getTextureParams({gl, floatTargetSupport});\n    const weightsScale = floatTargetSupport ? 1 : 1 / 255;\n    this.setState({textureSize, format, type, weightsScale});\n    if (!floatTargetSupport) {\n      log.warn(\n        `HeatmapLayer: ${\n          this.id\n        } rendering to float texture not supported, fallingback to low precession format`\n      )();\n    }\n  }\n\n  getShaders(type) {\n    return super.getShaders(\n      type === 'max-weights-transform'\n        ? {\n            vs: vs_max,\n            _fs: fs_max\n          }\n        : {\n            vs: weights_vs,\n            _fs: weights_fs\n          }\n    );\n  }\n\n  _createWeightsTransform(shaders = {}) {\n    const {gl} = this.context;\n    let {weightsTransform} = this.state;\n    const {weightsTexture} = this.state;\n    weightsTransform?.delete();\n\n    weightsTransform = new Transform(gl, {\n      id: `${this.id}-weights-transform`,\n      elementCount: 1,\n      _targetTexture: weightsTexture,\n      _targetTextureVarying: 'weightsTexture',\n      ...shaders\n    });\n    this.setState({weightsTransform});\n  }\n\n  _setupResources() {\n    const {gl} = this.context;\n    this._createTextures();\n    const {textureSize, weightsTexture, maxWeightsTexture} = this.state;\n\n    const weightsTransformShaders = this.getShaders('weights-transform');\n    this._createWeightsTransform(weightsTransformShaders);\n\n    const maxWeightsTransformShaders = this.getShaders('max-weights-transform');\n    const maxWeightTransform = new Transform(gl, {\n      id: `${this.id}-max-weights-transform`,\n      _sourceTextures: {\n        inTexture: weightsTexture\n      },\n      _targetTexture: maxWeightsTexture,\n      _targetTextureVarying: 'outTexture',\n      ...maxWeightsTransformShaders,\n      elementCount: textureSize * textureSize\n    });\n\n    this.setState({\n      weightsTexture,\n      maxWeightsTexture,\n      maxWeightTransform,\n      zoom: null,\n      triPositionBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 3}\n      }),\n      triTexCoordBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 2}\n      })\n    });\n  }\n\n  // overwrite super class method to update transform model\n  updateShaders(shaderOptions) {\n    // sahder params (modules, injects) changed, update model object\n    this._createWeightsTransform(shaderOptions);\n  }\n\n  _updateMaxWeightValue() {\n    const {maxWeightTransform} = this.state;\n    maxWeightTransform.run({\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.MAX\n      }\n    });\n  }\n\n  // Computes world bounds area that needs to be processed for generate heatmap\n  _updateBounds(forceUpdate = false) {\n    const {viewport} = this.context;\n\n    // Unproject all 4 corners of the current screen coordinates into world coordinates (lng/lat)\n    // Takes care of viewport has non zero bearing/pitch (i.e axis not aligned with world coordiante system)\n    const viewportCorners = [\n      viewport.unproject([0, 0]),\n      viewport.unproject([viewport.width, 0]),\n      viewport.unproject([viewport.width, viewport.height]),\n      viewport.unproject([0, viewport.height])\n    ].map(p => p.map(Math.fround));\n\n    // #1: get world bounds for current viewport extends\n    const visibleWorldBounds = getBounds(viewportCorners); // TODO: Change to visible bounds\n\n    const newState = {visibleWorldBounds, viewportCorners};\n    let boundsChanged = false;\n\n    if (\n      forceUpdate ||\n      !this.state.worldBounds ||\n      !boundsContain(this.state.worldBounds, visibleWorldBounds)\n    ) {\n      // #2 : convert world bounds to common (Flat) bounds\n      // #3 : extend common bounds to match aspect ratio with viewport\n      const scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n      // #4 :convert aligned common bounds to world bounds\n      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n      // Clip webmercator projection limits\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n        worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n        worldBounds[0] = Math.max(worldBounds[0], -360);\n        worldBounds[2] = Math.min(worldBounds[2], 360);\n      }\n\n      // #5: now convert world bounds to common using Layer's coordiante system and origin\n      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n\n      newState.worldBounds = worldBounds;\n      newState.normalizedCommonBounds = normalizedCommonBounds;\n\n      boundsChanged = true;\n    }\n    this.setState(newState);\n    return boundsChanged;\n  }\n\n  _updateTextureRenderingBounds() {\n    // Just render visible portion of the texture\n    const {\n      triPositionBuffer,\n      triTexCoordBuffer,\n      normalizedCommonBounds,\n      viewportCorners\n    } = this.state;\n\n    const {viewport} = this.context;\n\n    triPositionBuffer.subData(packVertices(viewportCorners, 3));\n\n    const textureBounds = viewportCorners.map(p =>\n      getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds)\n    );\n    triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n  }\n\n  _updateColorTexture(opts) {\n    const {colorRange} = opts.props;\n    let {colorTexture} = this.state;\n    const colors = colorRangeToFlatArray(colorRange, false, Uint8Array);\n\n    if (colorTexture) {\n      colorTexture.setImageData({\n        data: colors,\n        width: colorRange.length\n      });\n    } else {\n      colorTexture = new Texture2D(this.context.gl, {\n        data: colors,\n        width: colorRange.length,\n        height: 1,\n        ...TEXTURE_OPTIONS\n      });\n    }\n    this.setState({colorTexture});\n  }\n\n  _updateWeightmap() {\n    const {radiusPixels, colorDomain, aggregation} = this.props;\n    const {weightsTransform, worldBounds, textureSize, weightsTexture, weightsScale} = this.state;\n    this.state.isWeightMapDirty = false;\n\n    // convert world bounds to common using Layer's coordiante system and origin\n    const commonBounds = this._worldToCommonBounds(worldBounds, {\n      useLayerCoordinateSystem: true\n    });\n\n    if (colorDomain && aggregation === 'SUM') {\n      // scale color domain to weight per pixel\n      const {viewport} = this.context;\n      const metersPerPixel =\n        (viewport.distanceScales.metersPerUnit[2] * (commonBounds[2] - commonBounds[0])) /\n        textureSize;\n      this.state.colorDomain = colorDomain.map(x => x * metersPerPixel * weightsScale);\n    } else {\n      this.state.colorDomain = colorDomain || DEFAULT_COLOR_DOMAIN;\n    }\n\n    const uniforms = {\n      radiusPixels,\n      commonBounds,\n      textureWidth: textureSize,\n      weightsScale\n    };\n    // Attribute manager sets data array count as instaceCount on model\n    // we need to set that as elementCount on 'weightsTransform'\n    weightsTransform.update({\n      elementCount: this.getNumInstances()\n    });\n    weightsTransform.run({\n      uniforms,\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.FUNC_ADD\n      },\n      clearRenderTarget: true,\n      attributes: this.getAttributes(),\n      moduleSettings: this.getModuleSettings()\n    });\n    this._updateMaxWeightValue();\n\n    // reset filtering parameters (TODO: remove once luma issue#1193 is fixed)\n    weightsTexture.setParameters({\n      [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n      [GL.TEXTURE_MIN_FILTER]: GL.LINEAR\n    });\n  }\n\n  _debouncedUpdateWeightmap(fromTimer = false) {\n    let {updateTimer} = this.state;\n    const {debounceTimeout} = this.props;\n\n    if (fromTimer) {\n      updateTimer = null;\n      // update\n      this._updateBounds(true);\n      this._updateTextureRenderingBounds();\n      this.setState({isWeightMapDirty: true});\n    } else {\n      this.setState({isWeightMapDirty: false});\n      clearTimeout(updateTimer);\n      updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), debounceTimeout);\n    }\n\n    this.setState({updateTimer});\n  }\n\n  // input: worldBounds: [minLong, minLat, maxLong, maxLat]\n  // input: opts.useLayerCoordinateSystem : layers coordiante system is used\n  // optput: commonBounds: [minX, minY, maxX, maxY] scaled to fit the current texture\n  _worldToCommonBounds(worldBounds, opts = {}) {\n    const {useLayerCoordinateSystem = false} = opts;\n    const [minLong, minLat, maxLong, maxLat] = worldBounds;\n    const {viewport} = this.context;\n    const {textureSize} = this.state;\n    const {coordinateSystem} = this.props;\n\n    const offsetMode =\n      useLayerCoordinateSystem &&\n      (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS ||\n        coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS);\n    const offsetOriginCommon = offsetMode\n      ? viewport.projectPosition(this.props.coordinateOrigin)\n      : [0, 0];\n    const size = (textureSize * RESOLUTION) / viewport.scale;\n\n    let bottomLeftCommon;\n    let topRightCommon;\n\n    // Y-axis is flipped between World and Common bounds\n    if (useLayerCoordinateSystem && !offsetMode) {\n      bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n      topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n    } else {\n      bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n      topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n    }\n    // Ignore z component\n    return scaleToAspectRatio(\n      [\n        bottomLeftCommon[0] - offsetOriginCommon[0],\n        bottomLeftCommon[1] - offsetOriginCommon[1],\n        topRightCommon[0] - offsetOriginCommon[0],\n        topRightCommon[1] - offsetOriginCommon[1]\n      ],\n      size,\n      size\n    );\n  }\n\n  // input commonBounds: [xMin, yMin, xMax, yMax]\n  // output worldBounds: [minLong, minLat, maxLong, maxLat]\n  _commonToWorldBounds(commonBounds) {\n    const [xMin, yMin, xMax, yMax] = commonBounds;\n    const {viewport} = this.context;\n    const bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n    const topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n\n    return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n  }\n}\n\nHeatmapLayer.layerName = 'HeatmapLayer';\nHeatmapLayer.defaultProps = defaultProps;\n"],"file":"heatmap-layer.js"}