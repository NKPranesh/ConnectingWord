"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _core = require("@deck.gl/core");

var _core2 = require("@luma.gl/core");

var _propUtils = require("./utils/prop-utils");

class AggregationLayer extends _core.CompositeLayer {
  initializeState(dimensions) {
    super.initializeState();
    this.setState({
      ignoreProps: (0, _propUtils.filterProps)(this.constructor._propTypes, dimensions.data.props),
      dimensions
    });
  }

  updateState(opts) {
    super.updateState(opts);
    const {
      changeFlags
    } = opts;

    if (changeFlags.extensionsChanged) {
      const shaders = this.getShaders({});

      if (shaders && shaders.defines) {
        shaders.defines.NON_INSTANCED_MODEL = 1;
      }

      this.updateShaders(shaders);
    }

    this._updateAttributes(opts.props);
  }

  updateAttributes(changedAttributes) {
    this.setState({
      changedAttributes
    });
  }

  getAttributes() {
    return this.getAttributeManager().getShaderAttributes();
  }

  getModuleSettings() {
    const {
      viewport,
      mousePosition,
      gl
    } = this.context;
    const moduleSettings = Object.assign(Object.create(this.props), {
      viewport,
      mousePosition,
      pickingActive: 0,
      devicePixelRatio: (0, _core2.cssToDeviceRatio)(gl)
    });
    return moduleSettings;
  }

  updateShaders(shaders) {}

  isAggregationDirty(updateOpts, params = {}) {
    const {
      props,
      oldProps,
      changeFlags
    } = updateOpts;
    const {
      compareAll = false,
      dimension
    } = params;
    const {
      ignoreProps
    } = this.state;
    const {
      props: dataProps,
      accessors = []
    } = dimension;
    const {
      updateTriggersChanged
    } = changeFlags;

    if (changeFlags.dataChanged) {
      return true;
    }

    if (updateTriggersChanged) {
      if (updateTriggersChanged.all) {
        return true;
      }

      for (const accessor of accessors) {
        if (updateTriggersChanged[accessor]) {
          return true;
        }
      }
    }

    if (compareAll) {
      if (changeFlags.extensionsChanged) {
        return true;
      }

      return (0, _core._compareProps)({
        oldProps,
        newProps: props,
        ignoreProps,
        propTypes: this.constructor._propTypes
      });
    }

    for (const name of dataProps) {
      if (props[name] !== oldProps[name]) {
        return true;
      }
    }

    return false;
  }

  isAttributeChanged(name) {
    const {
      changedAttributes
    } = this.state;

    if (!name) {
      return !isObjectEmpty(changedAttributes);
    }

    return changedAttributes && changedAttributes[name] !== undefined;
  }

  _getAttributeManager() {
    return new _core.AttributeManager(this.context.gl, {
      id: this.props.id,
      stats: this.context.stats
    });
  }

}

exports.default = AggregationLayer;

function isObjectEmpty(obj) {
  let isEmpty = true;

  for (const key in obj) {
    isEmpty = false;
    break;
  }

  return isEmpty;
}

AggregationLayer.layerName = 'AggregationLayer';
//# sourceMappingURL=aggregation-layer.js.map