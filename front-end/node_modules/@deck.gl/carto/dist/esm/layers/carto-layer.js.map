{"version":3,"sources":["../../../src/layers/carto-layer.js"],"names":["CompositeLayer","log","MVTLayer","GeoJsonLayer","getData","getDataV2","API_VERSIONS","MAP_TYPES","getDefaultCredentials","defaultProps","data","type","onDataLoad","value","compare","onDataError","optional","credentials","connection","geoColumn","columns","CartoLayer","initializeState","state","apiVersion","isLoaded","getSubLayers","length","_checkProps","props","localCreds","assert","Object","values","includes","V1","V2","QUERY","TILESET","V3","TABLE","Array","isArray","updateState","oldProps","changeFlags","shouldUpdateData","dataChanged","JSON","stringify","setState","_updateData","source","localConfig","err","renderLayers","updateTriggers","layer","getSubLayerProps","id","layerName"],"mappings":"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","sourcesContent":["import {CompositeLayer, log} from '@deck.gl/core';\nimport {MVTLayer} from '@deck.gl/geo-layers';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {getData, getDataV2, API_VERSIONS} from '../api';\nimport {MAP_TYPES} from '../api/maps-api-common';\nimport {getDefaultCredentials} from '../config';\n\nconst defaultProps = {\n  // (String, required): data resource to load. table name, sql query or tileset name.\n  data: null,\n  // (Enum (MAP_TYPES), required)\n  type: null,\n  onDataLoad: {type: 'function', value: data => {}, compare: false},\n  onDataError: {type: 'function', value: null, compare: false, optional: true},\n\n  // override carto credentials for the layer, set to null to read from default\n  credentials: null,\n\n  /*********************/\n  /* API v3 PARAMETERS */\n  /**********************/\n  // (String, required): connection name at CARTO platform\n  connection: null,\n\n  // (String, optional): name of the `geo_column` in the CARTO platform. Use this override the default column ('geom'), from which the geometry information should be fetched.\n  geoColumn: null,\n\n  // (Array<String>, optional): names of columns to fetch. By default, all columns are fetched.\n  columns: {type: 'array', value: null}\n};\n\nexport default class CartoLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      data: null,\n      apiVersion: null\n    };\n  }\n\n  get isLoaded() {\n    return this.getSubLayers().length > 0 && super.isLoaded;\n  }\n\n  _checkProps(props) {\n    const {type, credentials, connection, geoColumn, columns} = props;\n    const localCreds = {...getDefaultCredentials(), ...credentials};\n    const {apiVersion} = localCreds;\n\n    log.assert(\n      Object.values(API_VERSIONS).includes(apiVersion),\n      `Invalid apiVersion ${apiVersion}. Use API_VERSIONS enum.`\n    );\n\n    if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n      log.assert(\n        type === MAP_TYPES.QUERY || type === MAP_TYPES.TILESET,\n        `Invalid type ${type}. Use type MAP_TYPES.QUERY or MAP_TYPES.TILESET for apiVersion ${apiVersion}`\n      );\n      log.assert(!connection, `Connection prop is not supported for apiVersion ${apiVersion}`);\n      log.assert(!geoColumn, `geoColumn prop is not supported for apiVersion ${apiVersion}`);\n      log.assert(!columns, `columns prop is not supported for apiVersion ${apiVersion}`);\n    } else if (apiVersion === API_VERSIONS.V3) {\n      log.assert(connection, 'Missing mandatory connection parameter');\n      log.assert(\n        Object.values(MAP_TYPES).includes(type),\n        `Invalid type ${type}. Use MAP_TYPES enum.`\n      );\n      if (type !== MAP_TYPES.TABLE) {\n        log.assert(!geoColumn, `geoColumn prop is only supported for type ${MAP_TYPES.TABLE}`);\n        log.assert(!columns, `columns prop is only supported for type ${MAP_TYPES.TABLE}`);\n      }\n      if (columns) {\n        log.assert(Array.isArray(columns), 'columns prop must be an Array');\n      }\n    }\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    this._checkProps(props);\n    const shouldUpdateData =\n      changeFlags.dataChanged ||\n      props.connection !== oldProps.connection ||\n      props.geoColumn !== oldProps.geoColumn ||\n      JSON.stringify(props.columns) !== JSON.stringify(oldProps.columns) ||\n      props.type !== oldProps.type ||\n      JSON.stringify(props.credentials) !== JSON.stringify(oldProps.credentials);\n\n    if (shouldUpdateData) {\n      this.setState({data: null, apiVersion: null});\n      this._updateData();\n    }\n  }\n\n  async _updateData() {\n    try {\n      const {type, data: source, connection, credentials, geoColumn, columns} = this.props;\n      const localConfig = {...getDefaultCredentials(), ...credentials};\n      const {apiVersion} = localConfig;\n\n      let data;\n\n      if (apiVersion === API_VERSIONS.V3) {\n        data = await getData({\n          type,\n          source,\n          connection,\n          credentials,\n          geoColumn,\n          columns\n        });\n      } else if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n        data = await getDataV2({type, source, credentials});\n      } else {\n        log.assert(`Unknow apiVersion ${apiVersion}. Use API_VERSIONS enum.`);\n      }\n\n      this.setState({data, apiVersion});\n      this.props.onDataLoad(data);\n    } catch (err) {\n      if (this.props.onDataError) {\n        this.props.onDataError(err);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  renderLayers() {\n    const {data, apiVersion} = this.state;\n    const {type} = this.props;\n\n    if (!data) return null;\n\n    const {updateTriggers} = this.props;\n\n    let layer;\n\n    if (\n      apiVersion === API_VERSIONS.V1 ||\n      apiVersion === API_VERSIONS.V2 ||\n      type === MAP_TYPES.TILESET\n    ) {\n      layer = MVTLayer;\n    } else {\n      layer = GeoJsonLayer;\n    }\n\n    const props = {...this.props};\n    delete props.data;\n\n    // eslint-disable-next-line new-cap\n    return new layer(\n      props,\n      this.getSubLayerProps({\n        id: `carto-${layer.layerName}`,\n        data,\n        updateTriggers\n      })\n    );\n  }\n}\n\nCartoLayer.layerName = 'CartoLayer';\nCartoLayer.defaultProps = defaultProps;\n"],"file":"carto-layer.js"}