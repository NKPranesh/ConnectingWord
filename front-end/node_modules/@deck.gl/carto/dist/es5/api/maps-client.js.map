{"version":3,"sources":["../../../src/api/maps-client.js"],"names":["CONNECTIONS","BIGQUERY","CARTO","BUFFER_SIZE","TILE_EXTENT","getDataV2","type","source","credentials","defaultCredentials","apiVersion","localCreds","defaultClassicCredentials","mapsUrl","DEFAULT_MAPS_URL_FORMAT","url","connection","API_VERSIONS","V1","mapConfig","createMapConfig","buildURLMapsAPIv1","layergroup","request","metadata","tilejson","vector","V2","buildURLMapsAPIv2","Error","response","fetch","headers","Accept","error","json","ok","dealWithError","status","username","apiKey","e","JSON","stringify","errors","initURLParameters","encodedApiKey","encodedClient","parameters","cfg","join","mapsApiType","MAP_TYPES","QUERY","replace","DEFAULT_USER_COMPONENT_IN_URL","DEFAULT_REGION_COMPONENT_IN_URL","region","sql","version","buffersize","mvt","layers","options","vector_extent"],"mappings":"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","sourcesContent":["/**\n * Maps API Client for Maps API v1 and Maps API v2\n */\nimport {defaultClassicCredentials, getDefaultCredentials} from '../config';\nimport {\n  API_VERSIONS,\n  DEFAULT_MAPS_URL_FORMAT,\n  DEFAULT_REGION_COMPONENT_IN_URL,\n  DEFAULT_USER_COMPONENT_IN_URL,\n  encodeParameter,\n  MAP_TYPES\n} from './maps-api-common';\n\nexport const CONNECTIONS = {\n  BIGQUERY: 'bigquery',\n  CARTO: 'carto'\n};\n\nconst BUFFER_SIZE = 16;\nconst TILE_EXTENT = 4096;\n\n/**\n * Obtain a TileJson from Maps API v1 and v2\n */\nexport async function getDataV2({type, source, credentials}) {\n  const defaultCredentials = getDefaultCredentials();\n  const apiVersion = (credentials && credentials.apiVersion) || defaultCredentials.apiVersion;\n  // Only pick up default credentials if they have been defined for\n  // correct API version\n  const localCreds = {\n    ...defaultClassicCredentials,\n    ...(defaultCredentials.apiVersion === apiVersion && defaultCredentials),\n    ...credentials\n  };\n\n  if (!localCreds.mapsUrl) {\n    localCreds.mapsUrl = DEFAULT_MAPS_URL_FORMAT[apiVersion];\n  }\n\n  let url;\n\n  const connection = type === 'tileset' ? CONNECTIONS.BIGQUERY : CONNECTIONS.CARTO;\n\n  switch (apiVersion) {\n    case API_VERSIONS.V1:\n      // Maps API v1\n      const mapConfig = createMapConfig(source);\n      url = buildURLMapsAPIv1({mapConfig, credentials: localCreds});\n      const layergroup = await request({url, credentials: localCreds});\n      return layergroup.metadata.tilejson.vector;\n\n    case API_VERSIONS.V2:\n      // Maps API v2\n      url = buildURLMapsAPIv2({connection, type, source, credentials: localCreds});\n      return await request({url, credentials: localCreds});\n\n    default:\n      throw new Error(\n        `Invalid maps API version. It shoud be ${API_VERSIONS.V1} or ${API_VERSIONS.V2}`\n      );\n  }\n}\n\n/**\n * Request against Maps API\n */\nasync function request({url, credentials}) {\n  let response;\n\n  try {\n    /* global fetch */\n    /* eslint no-undef: \"error\" */\n    response = await fetch(url, {\n      headers: {\n        Accept: 'application/json'\n      }\n    });\n  } catch (error) {\n    throw new Error(`Failed to connect to Maps API: ${error}`);\n  }\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    dealWithError({response, json, credentials});\n  }\n\n  return json;\n}\n\n/**\n * Display proper message from Maps API error\n */\nfunction dealWithError({response, json, credentials}) {\n  switch (response.status) {\n    case 401:\n      throw new Error(\n        `Unauthorized access to Maps API: invalid combination of user ('${\n          credentials.username\n        }') and apiKey ('${credentials.apiKey}')`\n      );\n    case 403:\n      throw new Error(\n        `Unauthorized access to dataset: the provided apiKey('${\n          credentials.apiKey\n        }') doesn't provide access to the requested data`\n      );\n\n    default:\n      const e =\n        credentials.apiVersion === API_VERSIONS.V1 ? JSON.stringify(json.errors) : json.error;\n      throw new Error(e);\n  }\n}\n\nfunction initURLParameters(credentials) {\n  const encodedApiKey = encodeParameter('api_key', credentials.apiKey);\n  const encodedClient = encodeParameter('client', `deck-gl-carto`);\n  return [encodedApiKey, encodedClient];\n}\n\n/**\n * Build a URL with all required parameters\n */\nfunction buildURLMapsAPIv1({mapConfig, credentials}) {\n  const parameters = initURLParameters(credentials);\n  const cfg = JSON.stringify(mapConfig);\n  return `${mapsUrl(credentials)}?${parameters.join('&')}&${encodeParameter('config', cfg)}`;\n}\n\nfunction buildURLMapsAPIv2({connection, type, source, credentials}) {\n  const parameters = initURLParameters(credentials);\n  // Query type is mapped to 'sql' at maps api v1\n  const mapsApiType = type === MAP_TYPES.QUERY ? 'sql' : type;\n  let url = `${mapsUrl(credentials)}/${connection}/${mapsApiType}?`;\n  url += `${encodeParameter('source', source)}&format=tilejson&${parameters.join('&')}`;\n  return url;\n}\n\n/**\n * Prepare a url valid for the specified user\n */\nfunction mapsUrl(credentials) {\n  return credentials.mapsUrl\n    .replace(DEFAULT_USER_COMPONENT_IN_URL, credentials.username)\n    .replace(DEFAULT_REGION_COMPONENT_IN_URL, credentials.region);\n}\n\nfunction createMapConfig(sql) {\n  return {\n    version: '1.3.1',\n    buffersize: {\n      mvt: BUFFER_SIZE\n    },\n    layers: [\n      {\n        type: 'mapnik',\n        options: {\n          sql,\n          vector_extent: TILE_EXTENT\n        }\n      }\n    ]\n  };\n}\n"],"file":"maps-client.js"}