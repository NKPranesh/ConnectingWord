"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapInstantiation = mapInstantiation;
exports.fetchLayerData = fetchLayerData;
exports.getData = getData;

var _config = require("../config");

var _mapsApiCommon = require("./maps-api-common");

var _core = require("@deck.gl/core");

const MAX_GET_LENGTH = 2048;

async function request({
  method,
  url,
  format,
  accessToken,
  body
}) {
  let response;
  const headers = {
    Accept: 'application/json'
  };

  if (accessToken) {
    headers.Authorization = "Bearer ".concat(accessToken);
  }

  if (method === 'POST') {
    headers['Content-Type'] = 'application/json';
  }

  try {
    response = await fetch(url, {
      method,
      headers,
      body
    });
  } catch (error) {
    throw new Error("Failed to connect to Maps API: ".concat(error));
  }

  if (format === _mapsApiCommon.FORMATS.NDJSON) {
    return response;
  }

  const json = await response.json();

  if (!response.ok) {
    dealWithError({
      response,
      error: json.error
    });
  }

  return json.rows ? json.rows : json;
}

function dealWithError({
  response,
  error
}) {
  switch (response.status) {
    case 400:
      throw new Error("Bad request. ".concat(error));

    case 401:
    case 403:
      throw new Error("Unauthorized access. ".concat(error));

    default:
      throw new Error(error);
  }
}

function getParameters({
  type,
  source,
  geoColumn,
  columns,
  schema
}) {
  const parameters = [(0, _mapsApiCommon.encodeParameter)('client', 'deck-gl-carto')];

  if (schema) {
    parameters.push((0, _mapsApiCommon.encodeParameter)('schema', true));
  }

  const sourceName = type === _mapsApiCommon.MAP_TYPES.QUERY ? 'q' : 'name';
  parameters.push((0, _mapsApiCommon.encodeParameter)(sourceName, source));

  if (type === _mapsApiCommon.MAP_TYPES.TABLE) {
    if (geoColumn) {
      parameters.push((0, _mapsApiCommon.encodeParameter)('geo_column', geoColumn));
    }

    if (columns) {
      parameters.push((0, _mapsApiCommon.encodeParameter)('columns', columns.join(',')));
    }
  }

  return parameters.join('&');
}

async function mapInstantiation({
  type,
  source,
  connection,
  credentials,
  geoColumn,
  columns,
  schema
}) {
  const baseUrl = "".concat(credentials.mapsUrl, "/").concat(connection, "/").concat(type);
  const url = "".concat(baseUrl, "?").concat(getParameters({
    type,
    source,
    geoColumn,
    columns,
    schema
  }));
  const {
    accessToken
  } = credentials;
  const format = 'json';

  if (url.length > MAX_GET_LENGTH && type === _mapsApiCommon.MAP_TYPES.QUERY) {
    const body = JSON.stringify({
      q: source,
      client: 'deck-gl-carto'
    });
    return await request({
      method: 'POST',
      url: baseUrl,
      format,
      accessToken,
      body
    });
  }

  return await request({
    url,
    format,
    accessToken
  });
}

function getUrlFromMetadata(metadata, format) {
  const m = metadata[format];

  if (m && !m.error && m.url) {
    return m.url[0];
  }

  return null;
}

function checkGetLayerDataParameters({
  type,
  source,
  connection,
  localCreds
}) {
  _core.log.assert(connection, 'Must define connection');

  _core.log.assert(type, 'Must define a type');

  _core.log.assert(source, 'Must define a source');

  _core.log.assert(localCreds.apiVersion === _mapsApiCommon.API_VERSIONS.V3, 'Method only available for v3');

  _core.log.assert(localCreds.apiBaseUrl, 'Must define apiBaseUrl');

  _core.log.assert(localCreds.accessToken, 'Must define an accessToken');
}

async function fetchLayerData({
  type,
  source,
  connection,
  credentials,
  geoColumn,
  columns,
  format,
  schema
}) {
  const defaultCredentials = (0, _config.getDefaultCredentials)();
  const localCreds = { ...(defaultCredentials.apiVersion === _mapsApiCommon.API_VERSIONS.V3 && defaultCredentials),
    ...credentials
  };
  checkGetLayerDataParameters({
    type,
    source,
    connection,
    localCreds
  });

  if (!localCreds.mapsUrl) {
    localCreds.mapsUrl = (0, _config.buildMapsUrlFromBase)(localCreds.apiBaseUrl);
  }

  const metadata = await mapInstantiation({
    type,
    source,
    connection,
    credentials: localCreds,
    geoColumn,
    columns,
    schema
  });
  let url;
  let mapFormat;

  if (format) {
    mapFormat = format;
    url = getUrlFromMetadata(metadata, format);

    _core.log.assert(url, "Format ".concat(format, " not available"));
  } else {
    const prioritizedFormats = [_mapsApiCommon.FORMATS.GEOJSON, _mapsApiCommon.FORMATS.NDJSON, _mapsApiCommon.FORMATS.TILEJSON];

    for (const f of prioritizedFormats) {
      url = getUrlFromMetadata(metadata, f);

      if (url) {
        mapFormat = f;
        break;
      }
    }
  }

  const {
    accessToken
  } = localCreds;
  const data = await request({
    url,
    format: mapFormat,
    accessToken
  });
  const result = {
    data,
    format: mapFormat
  };

  if (schema) {
    result.schema = metadata.schema;
  }

  return result;
}

async function getData({
  type,
  source,
  connection,
  credentials,
  geoColumn,
  columns,
  format
}) {
  const layerData = await fetchLayerData({
    type,
    source,
    connection,
    credentials,
    geoColumn,
    columns,
    format,
    schema: false
  });
  return layerData.data;
}
//# sourceMappingURL=maps-v3-client.js.map