"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setDefaultCredentials = setDefaultCredentials;
exports.getDefaultCredentials = getDefaultCredentials;
exports.buildMapsUrlFromBase = buildMapsUrlFromBase;
exports.defaultClassicCredentials = void 0;

var _mapsApiCommon = require("./api/maps-api-common");

const defaultClassicCredentials = {
  username: 'public',
  apiKey: 'default_public',
  region: 'us',
  mapsUrl: null
};
exports.defaultClassicCredentials = defaultClassicCredentials;
const defaultCloudNativeCredentials = {
  accessToken: null,
  apiBaseUrl: null,
  mapsUrl: null
};
let credentials = {};
setDefaultCredentials({});

function setDefaultCredentials(opts) {
  const apiVersion = opts.apiVersion || _mapsApiCommon.API_VERSIONS.V2;

  switch (apiVersion) {
    case _mapsApiCommon.API_VERSIONS.V1:
      opts.mapsUrl = opts.mapsUrl || _mapsApiCommon.DEFAULT_MAPS_URL_FORMAT[apiVersion];
      credentials = {
        apiVersion,
        ...defaultClassicCredentials,
        ...opts
      };
      break;

    case _mapsApiCommon.API_VERSIONS.V2:
      opts.mapsUrl = opts.mapsUrl || _mapsApiCommon.DEFAULT_MAPS_URL_FORMAT[apiVersion];
      credentials = {
        apiVersion,
        ...defaultClassicCredentials,
        ...opts
      };
      break;

    case _mapsApiCommon.API_VERSIONS.V3:
      if (!opts.apiBaseUrl) {
        throw new Error("API version ".concat(_mapsApiCommon.API_VERSIONS.V3, " requires to define apiBaseUrl at credentials. Go to https://app.carto.com to get your apiBaseUrl."));
      }

      const apiBaseUrl = opts.apiBaseUrl || defaultCloudNativeCredentials.apiBaseUrl;
      opts.mapsUrl = opts.mapsUrl || buildMapsUrlFromBase(apiBaseUrl);
      credentials = {
        apiVersion,
        ...defaultCloudNativeCredentials,
        ...opts
      };
      break;

    default:
      throw new Error("Invalid API version ".concat(apiVersion, ". Use API_VERSIONS enum."));
  }
}

function getDefaultCredentials() {
  return credentials;
}

function buildMapsUrlFromBase(apiBaseUrl) {
  let suffix = '/v3/maps';

  if (apiBaseUrl.endsWith('/')) {
    suffix = suffix.substring(1);
  }

  return "".concat(apiBaseUrl).concat(suffix);
}
//# sourceMappingURL=config.js.map