{"version":3,"sources":["../../../src/layers/carto-layer.js"],"names":["defaultProps","data","type","onDataLoad","value","compare","onDataError","optional","credentials","connection","geoColumn","columns","CartoLayer","CompositeLayer","initializeState","state","apiVersion","isLoaded","getSubLayers","length","_checkProps","props","localCreds","log","assert","Object","values","API_VERSIONS","includes","V1","V2","MAP_TYPES","QUERY","TILESET","V3","TABLE","Array","isArray","updateState","oldProps","changeFlags","shouldUpdateData","dataChanged","JSON","stringify","setState","_updateData","source","localConfig","err","renderLayers","updateTriggers","layer","MVTLayer","GeoJsonLayer","getSubLayerProps","id","layerName"],"mappings":"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","sourcesContent":["import {CompositeLayer, log} from '@deck.gl/core';\nimport {MVTLayer} from '@deck.gl/geo-layers';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {getData, getDataV2, API_VERSIONS} from '../api';\nimport {MAP_TYPES} from '../api/maps-api-common';\nimport {getDefaultCredentials} from '../config';\n\nconst defaultProps = {\n  // (String, required): data resource to load. table name, sql query or tileset name.\n  data: null,\n  // (Enum (MAP_TYPES), required)\n  type: null,\n  onDataLoad: {type: 'function', value: data => {}, compare: false},\n  onDataError: {type: 'function', value: null, compare: false, optional: true},\n\n  // override carto credentials for the layer, set to null to read from default\n  credentials: null,\n\n  /*********************/\n  /* API v3 PARAMETERS */\n  /**********************/\n  // (String, required): connection name at CARTO platform\n  connection: null,\n\n  // (String, optional): name of the `geo_column` in the CARTO platform. Use this override the default column ('geom'), from which the geometry information should be fetched.\n  geoColumn: null,\n\n  // (Array<String>, optional): names of columns to fetch. By default, all columns are fetched.\n  columns: {type: 'array', value: null}\n};\n\nexport default class CartoLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      data: null,\n      apiVersion: null\n    };\n  }\n\n  get isLoaded() {\n    return this.getSubLayers().length > 0 && super.isLoaded;\n  }\n\n  _checkProps(props) {\n    const {type, credentials, connection, geoColumn, columns} = props;\n    const localCreds = {...getDefaultCredentials(), ...credentials};\n    const {apiVersion} = localCreds;\n\n    log.assert(\n      Object.values(API_VERSIONS).includes(apiVersion),\n      `Invalid apiVersion ${apiVersion}. Use API_VERSIONS enum.`\n    );\n\n    if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n      log.assert(\n        type === MAP_TYPES.QUERY || type === MAP_TYPES.TILESET,\n        `Invalid type ${type}. Use type MAP_TYPES.QUERY or MAP_TYPES.TILESET for apiVersion ${apiVersion}`\n      );\n      log.assert(!connection, `Connection prop is not supported for apiVersion ${apiVersion}`);\n      log.assert(!geoColumn, `geoColumn prop is not supported for apiVersion ${apiVersion}`);\n      log.assert(!columns, `columns prop is not supported for apiVersion ${apiVersion}`);\n    } else if (apiVersion === API_VERSIONS.V3) {\n      log.assert(connection, 'Missing mandatory connection parameter');\n      log.assert(\n        Object.values(MAP_TYPES).includes(type),\n        `Invalid type ${type}. Use MAP_TYPES enum.`\n      );\n      if (type !== MAP_TYPES.TABLE) {\n        log.assert(!geoColumn, `geoColumn prop is only supported for type ${MAP_TYPES.TABLE}`);\n        log.assert(!columns, `columns prop is only supported for type ${MAP_TYPES.TABLE}`);\n      }\n      if (columns) {\n        log.assert(Array.isArray(columns), 'columns prop must be an Array');\n      }\n    }\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    this._checkProps(props);\n    const shouldUpdateData =\n      changeFlags.dataChanged ||\n      props.connection !== oldProps.connection ||\n      props.geoColumn !== oldProps.geoColumn ||\n      JSON.stringify(props.columns) !== JSON.stringify(oldProps.columns) ||\n      props.type !== oldProps.type ||\n      JSON.stringify(props.credentials) !== JSON.stringify(oldProps.credentials);\n\n    if (shouldUpdateData) {\n      this.setState({data: null, apiVersion: null});\n      this._updateData();\n    }\n  }\n\n  async _updateData() {\n    try {\n      const {type, data: source, connection, credentials, geoColumn, columns} = this.props;\n      const localConfig = {...getDefaultCredentials(), ...credentials};\n      const {apiVersion} = localConfig;\n\n      let data;\n\n      if (apiVersion === API_VERSIONS.V3) {\n        data = await getData({\n          type,\n          source,\n          connection,\n          credentials,\n          geoColumn,\n          columns\n        });\n      } else if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n        data = await getDataV2({type, source, credentials});\n      } else {\n        log.assert(`Unknow apiVersion ${apiVersion}. Use API_VERSIONS enum.`);\n      }\n\n      this.setState({data, apiVersion});\n      this.props.onDataLoad(data);\n    } catch (err) {\n      if (this.props.onDataError) {\n        this.props.onDataError(err);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  renderLayers() {\n    const {data, apiVersion} = this.state;\n    const {type} = this.props;\n\n    if (!data) return null;\n\n    const {updateTriggers} = this.props;\n\n    let layer;\n\n    if (\n      apiVersion === API_VERSIONS.V1 ||\n      apiVersion === API_VERSIONS.V2 ||\n      type === MAP_TYPES.TILESET\n    ) {\n      layer = MVTLayer;\n    } else {\n      layer = GeoJsonLayer;\n    }\n\n    const props = {...this.props};\n    delete props.data;\n\n    // eslint-disable-next-line new-cap\n    return new layer(\n      props,\n      this.getSubLayerProps({\n        id: `carto-${layer.layerName}`,\n        data,\n        updateTriggers\n      })\n    );\n  }\n}\n\nCartoLayer.layerName = 'CartoLayer';\nCartoLayer.defaultProps = defaultProps;\n"],"file":"carto-layer.js"}