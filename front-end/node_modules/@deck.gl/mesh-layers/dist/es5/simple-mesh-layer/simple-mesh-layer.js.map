{"version":3,"sources":["../../../src/simple-mesh-layer/simple-mesh-layer.js"],"names":["validateGeometryAttributes","attributes","useMeshColors","hasColorAttribute","COLOR_0","colors","useColorAttribute","constant","value","Float32Array","log","assert","positions","POSITION","getGeometry","data","Geometry","Error","DEFAULT_COLOR","defaultProps","mesh","type","async","texture","sizeScale","min","_useMeshColors","_instanced","wireframe","material","getPosition","x","position","getColor","getOrientation","getScale","getTranslation","getTransformMatrix","SimpleMeshLayer","Layer","getShaders","transpileToGLSL100","context","gl","defines","FEATURES","GLSL_DERIVATIVES","DERIVATIVES_AVAILABLE","vs","fs","modules","project32","phongLighting","picking","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","transition","fp64","use64bitPositions","size","accessor","instanceColors","props","colorFormat","length","normalized","defaultValue","instanceModelMatrix","MATRIX_ATTRIBUTES","setState","emptyTexture","Texture2D","Uint8Array","width","height","updateState","oldProps","changeFlags","extensionsChanged","state","model","delete","getModel","hasNormals","Boolean","NORMAL","normals","invalidateAll","setTexture","setDrawMode","finalizeState","draw","uniforms","viewport","coordinateSystem","setUniforms","composeModelMatrix","flatShading","Model","id","geometry","isInstanced","sampler","hasTexture","layerName"],"mappings":"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","sourcesContent":["// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, phongLighting, picking, COORDINATE_SYSTEM, log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Texture2D, isWebGL2} from '@luma.gl/core';\nimport {hasFeature, FEATURES} from '@luma.gl/webgl';\n\nimport {MATRIX_ATTRIBUTES, shouldComposeModelMatrix} from '../utils/matrix';\n\nimport vs from './simple-mesh-layer-vertex.glsl';\nimport fs from './simple-mesh-layer-fragment.glsl';\n\nfunction validateGeometryAttributes(attributes, useMeshColors) {\n  const hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  const useColorAttribute = hasColorAttribute && useMeshColors;\n  if (!useColorAttribute) {\n    attributes.colors = {constant: true, value: new Float32Array([1, 1, 1])};\n  }\n  log.assert(\n    attributes.positions || attributes.POSITION,\n    'no \"postions\" or \"POSITION\" attribute in mesh'\n  );\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data, useMeshColors) {\n  if (data.attributes) {\n    validateGeometryAttributes(data.attributes, useMeshColors);\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if (data.positions || data.POSITION) {\n    validateGeometryAttributes(data, useMeshColors);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  mesh: {value: null, type: 'object', async: true},\n  texture: {type: 'image', value: null, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  // Whether the color attribute in a mesh will be used\n  // This prop will be removed and set to true in next major release\n  _useMeshColors: {type: 'boolean', value: false},\n\n  // _instanced is a hack to use world position instead of meter offsets in mesh\n  // TODO - formalize API\n  _instanced: true,\n  // NOTE(Tarek): Quick and dirty wireframe. Just draws\n  // the same mesh with LINE_STRIPS. Won't follow edges\n  // of the original mesh.\n  wireframe: false,\n  // Optional material for 'lighting' shader module\n  material: true,\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []}\n};\n\nexport default class SimpleMeshLayer extends Layer {\n  getShaders() {\n    const transpileToGLSL100 = !isWebGL2(this.context.gl);\n\n    const defines = {};\n\n    if (hasFeature(this.context.gl, FEATURES.GLSL_DERIVATIVES)) {\n      defines.DERIVATIVES_AVAILABLE = 1;\n    }\n\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, phongLighting, picking],\n      transpileToGLSL100,\n      defines\n    });\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.addInstanced({\n      instancePositions: {\n        transition: true,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        size: this.props.colorFormat.length,\n        normalized: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n      this.state.model?.delete();\n      if (props.mesh) {\n        this.state.model = this.getModel(props.mesh);\n\n        const attributes = props.mesh.attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (this.state.model) {\n      this.state.model.setDrawMode(this.props.wireframe ? GL.LINE_STRIP : GL.TRIANGLES);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    this.state.emptyTexture.delete();\n  }\n\n  draw({uniforms}) {\n    if (!this.state.model) {\n      return;\n    }\n\n    const {viewport} = this.context;\n    const {sizeScale, coordinateSystem, _instanced} = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        sizeScale,\n        composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),\n        flatShading: !this.state.hasNormals\n      })\n      .draw();\n  }\n\n  getModel(mesh) {\n    const model = new Model(this.context.gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: getGeometry(mesh, this.props._useMeshColors),\n      isInstanced: true\n    });\n\n    const {texture} = this.props;\n    const {emptyTexture} = this.state;\n    model.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n\n    return model;\n  }\n\n  setTexture(texture) {\n    const {emptyTexture, model} = this.state;\n\n    // props.mesh may not be ready at this time.\n    // The sampler will be set when `getModel` is called\n    model?.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n  }\n}\n\nSimpleMeshLayer.layerName = 'SimpleMeshLayer';\nSimpleMeshLayer.defaultProps = defaultProps;\n"],"file":"simple-mesh-layer.js"}