"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decodeExtensions = decodeExtensions;
exports.EXTENSIONS = void 0;

var KHR_draco_mesh_compression = _interopRequireWildcard(require("./KHR_draco_mesh_compression"));

var KHR_materials_unlit = _interopRequireWildcard(require("./KHR_materials_unlit"));

var KHR_lights_punctual = _interopRequireWildcard(require("./KHR_lights_punctual"));

var KHR_techniques_webgl = _interopRequireWildcard(require("./KHR_techniques_webgl"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const EXTENSIONS = {
  KHR_draco_mesh_compression,
  KHR_materials_unlit,
  KHR_lights_punctual,
  KHR_techniques_webgl
};
exports.EXTENSIONS = EXTENSIONS;

async function decodeExtensions(gltf, options = {}, context) {
  for (const extensionName in EXTENSIONS) {
    var _options$gltf;

    const excludes = (options === null || options === void 0 ? void 0 : (_options$gltf = options.gltf) === null || _options$gltf === void 0 ? void 0 : _options$gltf.excludeExtensions) || {};
    const exclude = extensionName in excludes && !excludes[extensionName];

    if (!exclude) {
      const extension = EXTENSIONS[extensionName];
      await extension.decode(gltf, options, context);
    }
  }
}
//# sourceMappingURL=gltf-extensions.js.map