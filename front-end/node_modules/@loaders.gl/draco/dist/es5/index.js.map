{"version":3,"sources":["../../src/index.ts"],"names":["DracoLoader","DracoWorkerLoader","parse","arrayBuffer","options","draco","dracoParser","DracoParser","parseSync","destroy","_TypecheckDracoLoader"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAGA;;AACA;;AACA;;AASA;;AAUO,MAAMA,WAAW,GAAG,EACzB,GAAGC,wBADsB;AAEzBC,EAAAA;AAFyB,CAApB;;;AAKP,eAAeA,KAAf,CACEC,WADF,EAEEC,OAFF,EAG0B;AACxB,QAAM;AAACC,IAAAA;AAAD,MAAU,MAAM,+CAAuBD,OAAvB,CAAtB;AACA,QAAME,WAAW,GAAG,IAAIC,oBAAJ,CAAgBF,KAAhB,CAApB;;AACA,MAAI;AACF,WAAOC,WAAW,CAACE,SAAZ,CAAsBL,WAAtB,EAAmCC,OAAnC,aAAmCA,OAAnC,uBAAmCA,OAAO,CAAEC,KAA5C,CAAP;AACD,GAFD,SAEU;AACRC,IAAAA,WAAW,CAACG,OAAZ;AACD;AACF;;AAGM,MAAMC,qBAAuC,GAAGV,WAAhD","sourcesContent":["import type {LoaderWithParser} from '@loaders.gl/loader-utils';\nimport type {DracoMeshData, DracoLoaderData} from './lib/draco-types';\nimport type {DracoLoaderOptions} from './draco-loader';\nimport {DracoLoader as DracoWorkerLoader} from './draco-loader';\nimport DracoParser from './lib/draco-parser';\nimport {loadDracoDecoderModule} from './lib/draco-module-loader';\n\n// Draco data types\n\nexport type {DracoMeshData, DracoLoaderData};\n\n// Draco Writer\n\nexport type {DracoWriterOptions} from './draco-writer';\nexport {DracoWriter} from './draco-writer';\n\n// Draco Loader\n\nexport type {DracoLoaderOptions};\nexport {DracoWorkerLoader};\n\n/**\n * Loader for Draco3D compressed geometries\n */\nexport const DracoLoader = {\n  ...DracoWorkerLoader,\n  parse\n};\n\nasync function parse(\n  arrayBuffer: ArrayBuffer,\n  options?: DracoLoaderOptions\n): Promise<DracoMeshData> {\n  const {draco} = await loadDracoDecoderModule(options);\n  const dracoParser = new DracoParser(draco);\n  try {\n    return dracoParser.parseSync(arrayBuffer, options?.draco);\n  } finally {\n    dracoParser.destroy();\n  }\n}\n\n// TYPE TESTS - TODO find a better way than exporting junk\nexport const _TypecheckDracoLoader: LoaderWithParser = DracoLoader;\n"],"file":"index.js"}