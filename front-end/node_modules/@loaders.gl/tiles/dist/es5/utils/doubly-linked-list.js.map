{"version":3,"sources":["../../../src/utils/doubly-linked-list.js"],"names":["DoublyLinkedList","constructor","head","tail","_length","length","add","item","node","DoublyLinkedListNode","next","remove","previous","splice","nextNode","_insert","oldNodeNext"],"mappings":";;;;;;;;;AAGA;;AAOe,MAAMA,gBAAN,CAAuB;AACpCC,EAAAA,WAAW,GAAG;AACZ,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,OAAL,GAAe,CAAf;AACD;;AAES,MAANC,MAAM,GAAG;AACX,WAAO,KAAKD,OAAZ;AACD;;AAODE,EAAAA,GAAG,CAACC,IAAD,EAAO;AACR,UAAMC,IAAI,GAAG,IAAIC,6BAAJ,CAAyBF,IAAzB,EAA+B,KAAKJ,IAApC,EAA0C,IAA1C,CAAb;;AAEA,QAAI,KAAKA,IAAT,EAAe;AACb,WAAKA,IAAL,CAAUO,IAAV,GAAiBF,IAAjB;AACA,WAAKL,IAAL,GAAYK,IAAZ;AACD,KAHD,MAGO;AACL,WAAKN,IAAL,GAAYM,IAAZ;AACA,WAAKL,IAAL,GAAYK,IAAZ;AACD;;AAED,MAAE,KAAKJ,OAAP;AAEA,WAAOI,IAAP;AACD;;AAMDG,EAAAA,MAAM,CAACH,IAAD,EAAO;AACX,QAAI,CAACA,IAAL,EAAW;AACT;AACD;;AAED,QAAIA,IAAI,CAACI,QAAL,IAAiBJ,IAAI,CAACE,IAA1B,EAAgC;AAC9BF,MAAAA,IAAI,CAACI,QAAL,CAAcF,IAAd,GAAqBF,IAAI,CAACE,IAA1B;AACAF,MAAAA,IAAI,CAACE,IAAL,CAAUE,QAAV,GAAqBJ,IAAI,CAACI,QAA1B;AACD,KAHD,MAGO,IAAIJ,IAAI,CAACI,QAAT,EAAmB;AAExBJ,MAAAA,IAAI,CAACI,QAAL,CAAcF,IAAd,GAAqB,IAArB;AACA,WAAKP,IAAL,GAAYK,IAAI,CAACI,QAAjB;AACD,KAJM,MAIA,IAAIJ,IAAI,CAACE,IAAT,EAAe;AAEpBF,MAAAA,IAAI,CAACE,IAAL,CAAUE,QAAV,GAAqB,IAArB;AACA,WAAKV,IAAL,GAAYM,IAAI,CAACE,IAAjB;AACD,KAJM,MAIA;AAEL,WAAKR,IAAL,GAAY,IAAZ;AACA,WAAKC,IAAL,GAAY,IAAZ;AACD;;AAEDK,IAAAA,IAAI,CAACE,IAAL,GAAY,IAAZ;AACAF,IAAAA,IAAI,CAACI,QAAL,GAAgB,IAAhB;AAEA,MAAE,KAAKR,OAAP;AACD;;AAODS,EAAAA,MAAM,CAACL,IAAD,EAAOM,QAAP,EAAiB;AACrB,QAAIN,IAAI,KAAKM,QAAb,EAAuB;AACrB;AACD;;AAGD,SAAKH,MAAL,CAAYG,QAAZ;;AACA,SAAKC,OAAL,CAAaP,IAAb,EAAmBM,QAAnB;AACD;;AAEDC,EAAAA,OAAO,CAACP,IAAD,EAAOM,QAAP,EAAiB;AACtB,UAAME,WAAW,GAAGR,IAAI,CAACE,IAAzB;AACAF,IAAAA,IAAI,CAACE,IAAL,GAAYI,QAAZ;;AAGA,QAAI,KAAKX,IAAL,KAAcK,IAAlB,EAAwB;AACtB,WAAKL,IAAL,GAAYW,QAAZ;AACD,KAFD,MAEO;AACLE,MAAAA,WAAW,CAACJ,QAAZ,GAAuBE,QAAvB;AACD;;AAEDA,IAAAA,QAAQ,CAACJ,IAAT,GAAgBM,WAAhB;AACAF,IAAAA,QAAQ,CAACF,QAAT,GAAoBJ,IAApB;AAEA,MAAE,KAAKJ,OAAP;AACD;;AA9FmC","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport DoublyLinkedListNode from '../utils/doubly-linked-list-node';\n\n/**\n * Doubly linked list\n *\n * @private\n */\nexport default class DoublyLinkedList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n    this._length = 0;\n  }\n\n  get length() {\n    return this._length;\n  }\n\n  /**\n   * Adds the item to the end of the list\n   * @param {*} [item]\n   * @return {DoublyLinkedListNode}\n   */\n  add(item) {\n    const node = new DoublyLinkedListNode(item, this.tail, null);\n\n    if (this.tail) {\n      this.tail.next = node;\n      this.tail = node;\n    } else {\n      this.head = node;\n      this.tail = node;\n    }\n\n    ++this._length;\n\n    return node;\n  }\n\n  /**\n   * Removes the given node from the list\n   * @param {DoublyLinkedListNode} node\n   */\n  remove(node) {\n    if (!node) {\n      return;\n    }\n\n    if (node.previous && node.next) {\n      node.previous.next = node.next;\n      node.next.previous = node.previous;\n    } else if (node.previous) {\n      // Remove last node\n      node.previous.next = null;\n      this.tail = node.previous;\n    } else if (node.next) {\n      // Remove first node\n      node.next.previous = null;\n      this.head = node.next;\n    } else {\n      // Remove last node in the linked list\n      this.head = null;\n      this.tail = null;\n    }\n\n    node.next = null;\n    node.previous = null;\n\n    --this._length;\n  }\n\n  /**\n   * Moves nextNode after node\n   * @param {DoublyLinkedListNode} node\n   * @param {DoublyLinkedListNode} nextNode\n   */\n  splice(node, nextNode) {\n    if (node === nextNode) {\n      return;\n    }\n\n    // Remove nextNode, then insert after node\n    this.remove(nextNode);\n    this._insert(node, nextNode);\n  }\n\n  _insert(node, nextNode) {\n    const oldNodeNext = node.next;\n    node.next = nextNode;\n\n    // nextNode is the new tail\n    if (this.tail === node) {\n      this.tail = nextNode;\n    } else {\n      oldNodeNext.previous = nextNode;\n    }\n\n    nextNode.next = oldNodeNext;\n    nextNode.previous = node;\n\n    ++this._length;\n  }\n}\n"],"file":"doubly-linked-list.js"}