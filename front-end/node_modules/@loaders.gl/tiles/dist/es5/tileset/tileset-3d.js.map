{"version":3,"sources":["../../../src/tileset/tileset-3d.ts"],"names":["DEFAULT_PROPS","description","ellipsoid","Ellipsoid","WGS84","modelMatrix","Matrix4","throttleRequests","maxRequests","maximumMemoryUsage","onTileLoad","onTileUnload","onTileError","onTraversalComplete","selectedTiles","contentLoader","undefined","viewDistanceScale","maximumScreenSpaceError","loadTiles","updateTransforms","viewportTraversersMap","loadOptions","fetch","attributions","basePath","i3s","TILES_TOTAL","TILES_IN_MEMORY","TILES_IN_VIEW","TILES_RENDERABLE","TILES_LOADED","TILES_LOADING","TILES_UNLOADED","TILES_LOAD_FAILED","POINTS_COUNT","TILES_GPU_MEMORY","Tileset3D","constructor","json","options","tileset","loader","type","url","path","dirname","lodMetricType","lodMetricValue","refine","root","roots","cartographicCenter","cartesianCenter","zoom","boundingVolume","traverseCounter","geometricError","_traverser","_initializeTraverser","_cache","TilesetCache","_requestScheduler","RequestScheduler","_frameNumber","_pendingCount","_tiles","_emptyTiles","_requestedTiles","frameStateData","lastUpdatedVieports","_queryParams","_queryParamsString","gpuMemoryUsageInBytes","stats","Stats","id","_initializeStats","_extensionsUsed","dynamicScreenSpaceErrorComputedDensity","extras","asset","credits","_initializeTileSet","destroy","_destroy","isLoaded","tiles","Object","values","frameNumber","queryParams","getQueryParamString","setProps","props","setOptions","getTileUrl","tilePath","isDataUrl","startsWith","hasExtension","extensionName","Boolean","indexOf","update","viewports","Array","reset","length","viewportsToTraverse","viewport","_needTraverse","push","_initializeTileHeaders","includes","frameState","traverse","viewportId","traverserId","_onTraversalEnd","currentFrameStateData","requestedTiles","emptyTiles","_updateTiles","frameStateKey","frameStateDataValue","concat","tile","_loadTiles","_unloadTiles","_updateStats","_tilesChanged","oldSelectedTiles","set1","Set","map","t","set2","changed","filter","x","has","contentUnloaded","_loadTile","unloadTiles","_unloadTile","tilesRenderable","pointsRenderable","contentAvailable","content","pointCount","get","count","tilesetJson","TILESET_TYPE","TILES3D","_initializeCesiumTileset","I3S","_initializeI3STileset","_calculateViewProps","center","console","warn","Vector3","cartesianToCartographic","parentTileHeader","rootTile","Tile3D","children","depth","stack","pop","incrementCount","header","childHeader","childTile","TraverserClass","Tileset3DTraverser","I3SetTraverser","TilesetTraverser","onTraversalEnd","bind","_destroyTileHeaders","parentTile","_destroySubtree","loaded","_onStartTileLoading","loadContent","error","_onTileLoadError","_onEndTileLoading","_onTileLoad","message","toString","_addTileToCache","decrementCount","add","_updateCacheStats","byteLength","unloadContent","child","_destroyTile","unloadTile","Error","version","v","tilesetVersion","properties","extensionsUsed","token","queryParamStrings","key","keys","join"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/*\n\n  The Tileset loading and rendering flow is as below,\n  A rendered (i.e. deck.gl `Tile3DLayer`) triggers `tileset.update()` after a `tileset` is loaded\n  `tileset` starts traversing the tile tree and update `requestTiles` (tiles of which content need\n  to be fetched) and `selectedTiles` (tiles ready for rendering under the current viewport).\n  `Tile3DLayer` will update rendering based on `selectedTiles`.\n  `Tile3DLayer` also listens to `onTileLoad` callback and trigger another round of `update and then traversal`\n  when new tiles are loaded.\n\n  As I3S tileset have stored `tileHeader` file (metadata) and tile content files (geometry, texture, ...) separately.\n  During each traversal, it issues `tilHeader` requests if that `tileHeader` is not yet fetched,\n  after the tile header is fulfilled, it will resume the traversal starting from the tile just fetched (not root).\n\n  Tile3DLayer\n       |\n   await load(tileset)\n       |\n   tileset.update()\n       |                async load tileHeader\n   tileset.traverse() -------------------------- Queued\n       |        resume traversal after fetched  |\n       |----------------------------------------|\n       |\n       |                     async load tile content\n  tilset.requestedTiles  ----------------------------- RequestScheduler\n                                                              |\n  tilset.selectedTiles (ready for rendering)                  |\n       |         Listen to                                    |\n    Tile3DLayer ----------- onTileLoad  ----------------------|\n       |                         |   notify new tile is available\n    updateLayers                 |\n                        tileset.update // trigger another round of update\n*/\n\nimport {Matrix4, Vector3} from '@math.gl/core';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {Stats} from '@probe.gl/stats';\nimport {\n  RequestScheduler,\n  assert,\n  path,\n  LoaderWithParser,\n  LoaderOptions\n} from '@loaders.gl/loader-utils';\nimport TilesetCache from './tileset-cache';\nimport {calculateTransformProps} from './helpers/transform-utils';\nimport {FrameState, getFrameState} from './helpers/frame-state';\nimport {getZoomFromBoundingVolume} from './helpers/zoom';\nimport Tile3D from './tile-3d';\nimport Tileset3DTraverser from './traversers/tileset-3d-traverser';\nimport TilesetTraverser from './traversers/tileset-traverser';\nimport I3SetTraverser from './traversers/i3s-tileset-traverser';\nimport {TILESET_TYPE} from '../constants';\n\nexport type Tileset3DProps = {\n  // loading\n  throttleRequests?: boolean;\n  maxRequests?: number;\n  loadOptions?: LoaderOptions;\n  loadTiles?: boolean;\n  basePath?: string;\n  maximumMemoryUsage?: number;\n\n  // Metadata\n  description?: string;\n  attributions?: string[];\n\n  // Transforms\n  ellipsoid?: object;\n  modelMatrix?: Matrix4;\n\n  // Traversal\n  maximumScreenSpaceError?: number;\n  viewportTraversersMap?: any;\n  updateTransforms?: boolean;\n  viewDistanceScale?: number;\n\n  // Callbacks\n  onTileLoad?: (tile: Tile3D) => any;\n  onTileUnload?: (tile: Tile3D) => any;\n  onTileError?: (tile: Tile3D, message: string, url: string) => any;\n  contentLoader?: (tile: Tile3D) => Promise<void>;\n  onTraversalComplete?: (selectedTiles: Tile3D[]) => Tile3D[];\n};\n\ntype Props = {\n  description: string;\n  ellipsoid: object;\n  modelMatrix: Matrix4;\n  throttleRequests: boolean;\n  maximumMemoryUsage: number;\n  onTileLoad: (tile: Tile3D) => any;\n  onTileUnload: (tile: Tile3D) => any;\n  onTileError: (tile: Tile3D, message: string, url: string) => any;\n  onTraversalComplete: (selectedTiles: Tile3D[]) => Tile3D[];\n  maximumScreenSpaceError: number;\n  viewportTraversersMap: any;\n  attributions: string[];\n  maxRequests: number;\n  loadTiles: boolean;\n  loadOptions: LoaderOptions;\n  updateTransforms: boolean;\n  viewDistanceScale: number;\n  basePath: string;\n  contentLoader?: (tile: Tile3D) => Promise<void>;\n  i3s: {[key: string]: any};\n};\n\nconst DEFAULT_PROPS: Props = {\n  description: '',\n\n  ellipsoid: Ellipsoid.WGS84,\n  // A 4x4 transformation matrix this transforms the entire tileset.\n  modelMatrix: new Matrix4(),\n\n  // Set to false to disable network request throttling\n  throttleRequests: true,\n\n  // Number of simultaneous requsts, if throttleRequests is true\n  maxRequests: 64,\n\n  maximumMemoryUsage: 32,\n\n  /**\n   * Callback. Indicates this a tile's content was loaded\n   * @param tile {TileHeader}\n   */\n  onTileLoad: () => {},\n  /**\n   * Callback. Indicates this a tile's content was unloaded\n   * @param tile {TileHeader}\n   */\n  onTileUnload: () => {},\n  onTileError: () => {},\n  /**\n   * Callback. Allows post-process selectedTiles right after traversal.\n   * @param selectedTiles {TileHeader[]}\n   * @returns TileHeader[] - output array of tiles to return to deck.gl\n   */\n  onTraversalComplete: (selectedTiles: Tile3D[]) => selectedTiles,\n\n  // Optional async tile content loader\n  contentLoader: undefined,\n\n  // View distance scale modifier\n  viewDistanceScale: 1.0,\n\n  // TODO CESIUM\n  // The maximum screen space error used to drive level of detail refinement.\n  maximumScreenSpaceError: 8,\n\n  loadTiles: true,\n  updateTransforms: true,\n  viewportTraversersMap: null,\n\n  loadOptions: {fetch: {}},\n\n  attributions: [],\n  basePath: '',\n\n  i3s: {}\n};\n\n// Tracked Stats\nconst TILES_TOTAL = 'Tiles In Tileset(s)';\nconst TILES_IN_MEMORY = 'Tiles In Memory';\nconst TILES_IN_VIEW = 'Tiles In View';\nconst TILES_RENDERABLE = 'Tiles To Render';\nconst TILES_LOADED = 'Tiles Loaded';\nconst TILES_LOADING = 'Tiles Loading';\nconst TILES_UNLOADED = 'Tiles Unloaded';\nconst TILES_LOAD_FAILED = 'Failed Tile Loads';\nconst POINTS_COUNT = 'Points';\nconst TILES_GPU_MEMORY = 'Tile Memory Use';\n\nexport default class Tileset3D {\n  // props: Tileset3DProps;\n  options: Props;\n  loadOptions: {[key: string]: any};\n\n  type: string;\n  tileset: {[key: string]: any};\n  loader: LoaderWithParser;\n  url: string;\n  basePath: string;\n  modelMatrix: Matrix4;\n  ellipsoid: any;\n  lodMetricType: string;\n  lodMetricValue: number;\n  refine: string;\n  root: Tile3D | null;\n  roots: {[key: string]: Tile3D};\n  asset: {[key: string]: any};\n\n  description: string;\n  properties: any;\n  extras: any;\n  attributions: any;\n  credits: any;\n\n  stats: Stats;\n\n  traverseCounter: number;\n  geometricError: number;\n  selectedTiles: Tile3D[];\n\n  cartographicCenter: Vector3 | null;\n  cartesianCenter: Vector3 | null;\n  zoom: number;\n  boundingVolume: any;\n\n  // METRICS\n  // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n  // Tiles not in view are unloaded to enforce private\n  // The total amount of GPU memory in bytes used by the tileset.\n  gpuMemoryUsageInBytes: any;\n  dynamicScreenSpaceErrorComputedDensity: any;\n\n  // TRAVERSAL\n  _traverser: TilesetTraverser;\n  private _cache: TilesetCache;\n  _requestScheduler: RequestScheduler;\n\n  _frameNumber: number;\n  private _queryParamsString: string;\n  private _queryParams: any;\n  private _extensionsUsed: any;\n  private _tiles: {[id: string]: Tile3D};\n\n  // counter for tracking tiles requests\n  private _pendingCount: any;\n\n  // HOLD TRAVERSAL RESULTS\n  private lastUpdatedVieports: any[] | null;\n  private _requestedTiles: any;\n  private _emptyTiles: any;\n  private frameStateData: any;\n\n  maximumMemoryUsage: number;\n\n  /**\n   * Create a new Tileset3D\n   * @param json\n   * @param props\n   */\n  // eslint-disable-next-line max-statements\n  constructor(json: any, options?: Tileset3DProps) {\n    assert(json);\n\n    // PUBLIC MEMBERS\n    this.options = {...DEFAULT_PROPS, ...options};\n    // raw data\n    this.tileset = json;\n    this.loader = json.loader;\n    // could be  3d tiles, i3s\n    this.type = json.type;\n    // The url to a tileset JSON file.\n    this.url = json.url;\n    this.basePath = json.basePath || path.dirname(this.url);\n    this.modelMatrix = this.options.modelMatrix;\n    this.ellipsoid = this.options.ellipsoid;\n\n    // Geometric error when the tree is not rendered at all\n    this.lodMetricType = json.lodMetricType;\n    this.lodMetricValue = json.lodMetricValue;\n    this.refine = json.root.refine;\n\n    this.loadOptions = this.options.loadOptions || {};\n\n    this.root = null;\n    this.roots = {};\n    // view props\n    this.cartographicCenter = null;\n    this.cartesianCenter = null;\n    this.zoom = 1;\n    this.boundingVolume = null;\n\n    // TRAVERSAL\n    this.traverseCounter = 0;\n    this.geometricError = 0;\n    this._traverser = this._initializeTraverser();\n    this._cache = new TilesetCache();\n    this._requestScheduler = new RequestScheduler({\n      throttleRequests: this.options.throttleRequests,\n      maxRequests: this.options.maxRequests\n    });\n    // update tracker\n    // increase in each update cycle\n    this._frameNumber = 0;\n\n    // counter for tracking tiles requests\n    this._pendingCount = 0;\n\n    // HOLD TRAVERSAL RESULTS\n    this._tiles = {};\n    this.selectedTiles = [];\n    this._emptyTiles = [];\n    this._requestedTiles = [];\n    this.frameStateData = {};\n    this.lastUpdatedVieports = null;\n\n    this._queryParams = {};\n    this._queryParamsString = '';\n\n    // METRICS\n    // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n    // Tiles not in view are unloaded to enforce this.\n    this.maximumMemoryUsage = this.options.maximumMemoryUsage || 32;\n    // The total amount of GPU memory in bytes used by the tileset.\n    this.gpuMemoryUsageInBytes = 0;\n    this.stats = new Stats({id: this.url});\n    this._initializeStats();\n\n    // EXTRACTED FROM TILESET\n    this._extensionsUsed = undefined;\n    this.dynamicScreenSpaceErrorComputedDensity = 0.0; // Updated based on the camera position and direction\n    // Metadata for the entire tileset\n    this.extras = null;\n    this.asset = {};\n    this.credits = {};\n    this.description = this.options.description || '';\n\n    this._initializeTileSet(json);\n  }\n\n  /** Release resources */\n  destroy(): void {\n    this._destroy();\n  }\n\n  /** Is the tileset loaded (update needs to have been called at least once) */\n  isLoaded(): boolean {\n    // Check that `_frameNumber !== 0` which means that update was called at least once\n    return this._pendingCount === 0 && this._frameNumber !== 0;\n  }\n\n  get tiles(): object[] {\n    return Object.values(this._tiles);\n  }\n\n  get frameNumber(): number {\n    return this._frameNumber;\n  }\n\n  get queryParams(): string {\n    if (!this._queryParamsString) {\n      this._queryParamsString = getQueryParamString(this._queryParams);\n    }\n    return this._queryParamsString;\n  }\n\n  setProps(props: Tileset3DProps): void {\n    this.options = {...this.options, ...props};\n  }\n\n  /** @deprecated */\n  setOptions(options: Tileset3DProps): void {\n    this.options = {...this.options, ...options};\n  }\n\n  /**\n   * Return a loadable tile url for a specific tile subpath\n   * @param tilePath a tile subpath\n   */\n  getTileUrl(tilePath: string): string {\n    const isDataUrl = tilePath.startsWith('data:');\n    if (isDataUrl) {\n      return tilePath;\n    }\n    return `${tilePath}${this.queryParams}`;\n  }\n\n  // TODO CESIUM specific\n  hasExtension(extensionName: string): boolean {\n    return Boolean(this._extensionsUsed && this._extensionsUsed.indexOf(extensionName) > -1);\n  }\n\n  /**\n   * Update visible tiles relying on a list of viewports\n   * @param viewports - list of viewports\n   */\n  // eslint-disable-next-line max-statements, complexity\n  update(viewports: any[]): void {\n    if ('loadTiles' in this.options && !this.options.loadTiles) {\n      return;\n    }\n    if (this.traverseCounter > 0) {\n      return;\n    }\n    if (!viewports && this.lastUpdatedVieports) {\n      viewports = this.lastUpdatedVieports;\n    } else {\n      this.lastUpdatedVieports = viewports;\n    }\n    if (!(viewports instanceof Array)) {\n      viewports = [viewports];\n    }\n\n    this._cache.reset();\n    this._frameNumber++;\n    this.traverseCounter = viewports.length;\n    const viewportsToTraverse: string[] = [];\n    // First loop to decrement traverseCounter\n    for (const viewport of viewports) {\n      const id = viewport.id as string;\n      if (this._needTraverse(id)) {\n        viewportsToTraverse.push(id);\n      } else {\n        this.traverseCounter--;\n      }\n    }\n\n    // Second loop to traverse\n    for (const viewport of viewports) {\n      const id = viewport.id as string;\n      if (!this.roots[id]) {\n        this.roots[id] = this._initializeTileHeaders(this.tileset, null);\n      }\n\n      if (!viewportsToTraverse.includes(id)) {\n        continue; // eslint-disable-line no-continue\n      }\n      const frameState = getFrameState(viewport, this._frameNumber);\n      this._traverser.traverse(this.roots[id], frameState, this.options);\n    }\n  }\n\n  /**\n   * Check if traversal is needed for particular viewport\n   * @param {string} viewportId - id of a viewport\n   * @return {boolean}\n   */\n  _needTraverse(viewportId: string): boolean {\n    let traverserId = viewportId;\n    if (this.options.viewportTraversersMap) {\n      traverserId = this.options.viewportTraversersMap[viewportId];\n    }\n    if (traverserId !== viewportId) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * The callback to post-process tiles after traversal procedure\n   * @param frameState - frame state for tile culling\n   */\n  _onTraversalEnd(frameState: FrameState): void {\n    const id = frameState.viewport.id;\n    if (!this.frameStateData[id]) {\n      this.frameStateData[id] = {selectedTiles: [], _requestedTiles: [], _emptyTiles: []};\n    }\n    const currentFrameStateData = this.frameStateData[id];\n    const selectedTiles = Object.values(this._traverser.selectedTiles);\n    currentFrameStateData.selectedTiles = selectedTiles;\n    currentFrameStateData._requestedTiles = Object.values(this._traverser.requestedTiles);\n    currentFrameStateData._emptyTiles = Object.values(this._traverser.emptyTiles);\n\n    this.traverseCounter--;\n    if (this.traverseCounter > 0) {\n      return;\n    }\n\n    this._updateTiles();\n  }\n\n  /**\n   * Update tiles relying on data from all traversers\n   */\n  _updateTiles(): void {\n    this.selectedTiles = [];\n    this._requestedTiles = [];\n    this._emptyTiles = [];\n\n    for (const frameStateKey in this.frameStateData) {\n      const frameStateDataValue = this.frameStateData[frameStateKey];\n      this.selectedTiles = this.selectedTiles.concat(frameStateDataValue.selectedTiles);\n      this._requestedTiles = this._requestedTiles.concat(frameStateDataValue._requestedTiles);\n      this._emptyTiles = this._emptyTiles.concat(frameStateDataValue._emptyTiles);\n    }\n\n    this.selectedTiles = this.options.onTraversalComplete(this.selectedTiles);\n\n    for (const tile of this.selectedTiles) {\n      this._tiles[tile.id] = tile;\n    }\n\n    this._loadTiles();\n    this._unloadTiles();\n    this._updateStats();\n  }\n\n  _tilesChanged(oldSelectedTiles, selectedTiles) {\n    if (oldSelectedTiles.length !== selectedTiles.length) {\n      return true;\n    }\n    const set1 = new Set(oldSelectedTiles.map((t) => t.id));\n    const set2 = new Set(selectedTiles.map((t) => t.id));\n    let changed = oldSelectedTiles.filter((x) => !set2.has(x.id)).length > 0;\n    changed = changed || selectedTiles.filter((x) => !set1.has(x.id)).length > 0;\n    return changed;\n  }\n\n  _loadTiles() {\n    // Sort requests by priority before making any requests.\n    // This makes it less likely this requests will be cancelled after being issued.\n    // requestedTiles.sort((a, b) => a._priority - b._priority);\n    for (const tile of this._requestedTiles) {\n      if (tile.contentUnloaded) {\n        this._loadTile(tile);\n      }\n    }\n  }\n\n  _unloadTiles() {\n    // unload tiles from cache when hit maximumMemoryUsage\n    this._cache.unloadTiles(this, (tileset, tile) => tileset._unloadTile(tile));\n  }\n\n  _updateStats() {\n    let tilesRenderable = 0;\n    let pointsRenderable = 0;\n    for (const tile of this.selectedTiles) {\n      if (tile.contentAvailable && tile.content) {\n        tilesRenderable++;\n        if (tile.content.pointCount) {\n          pointsRenderable += tile.content.pointCount;\n        }\n      }\n    }\n\n    this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;\n    this.stats.get(TILES_RENDERABLE).count = tilesRenderable;\n    this.stats.get(POINTS_COUNT).count = pointsRenderable;\n  }\n\n  _initializeTileSet(tilesetJson) {\n    this.root = this._initializeTileHeaders(tilesetJson, null);\n\n    // TODO CESIUM Specific\n    if (this.type === TILESET_TYPE.TILES3D) {\n      this._initializeCesiumTileset(tilesetJson);\n    }\n\n    if (this.type === TILESET_TYPE.I3S) {\n      this._initializeI3STileset();\n    }\n    // Calculate cartographicCenter & zoom props to help apps center view on tileset\n    this._calculateViewProps();\n  }\n\n  // Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n  _calculateViewProps() {\n    const root = this.root as Tile3D;\n    assert(root);\n    const {center} = root.boundingVolume;\n    // TODO - handle all cases\n    if (!center) {\n      // eslint-disable-next-line\n      console.warn('center was not pre-calculated for the root tile');\n      this.cartographicCenter = new Vector3();\n      this.zoom = 1;\n      return;\n    }\n    this.cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(center, new Vector3());\n    this.cartesianCenter = center;\n    this.zoom = getZoomFromBoundingVolume(root.boundingVolume);\n  }\n\n  _initializeStats() {\n    this.stats.get(TILES_TOTAL);\n    this.stats.get(TILES_LOADING);\n    this.stats.get(TILES_IN_MEMORY);\n    this.stats.get(TILES_IN_VIEW);\n    this.stats.get(TILES_RENDERABLE);\n    this.stats.get(TILES_LOADED);\n    this.stats.get(TILES_UNLOADED);\n    this.stats.get(TILES_LOAD_FAILED);\n    this.stats.get(POINTS_COUNT, 'memory');\n    this.stats.get(TILES_GPU_MEMORY, 'memory');\n  }\n\n  // Installs the main tileset JSON file or a tileset JSON file referenced from a tile.\n  // eslint-disable-next-line max-statements\n  _initializeTileHeaders(tilesetJson, parentTileHeader) {\n    // A tileset JSON file referenced from a tile may exist in a different directory than the root tileset.\n    // Get the basePath relative to the external tileset.\n    const rootTile = new Tile3D(this, tilesetJson.root, parentTileHeader); // resource\n\n    // If there is a parentTileHeader, add the root of the currently loading tileset\n    // to parentTileHeader's children, and update its depth.\n    if (parentTileHeader) {\n      parentTileHeader.children.push(rootTile);\n      rootTile.depth = parentTileHeader.depth + 1;\n    }\n\n    // Cesium 3d tiles knows the hierarchy beforehand\n    if (this.type === TILESET_TYPE.TILES3D) {\n      const stack: Tile3D[] = [];\n      stack.push(rootTile);\n\n      while (stack.length > 0) {\n        const tile = stack.pop() as Tile3D;\n        this.stats.get(TILES_TOTAL).incrementCount();\n        const children = tile.header.children || [];\n        for (const childHeader of children) {\n          const childTile = new Tile3D(this, childHeader, tile);\n          tile.children.push(childTile);\n          childTile.depth = tile.depth + 1;\n          stack.push(childTile);\n        }\n      }\n    }\n\n    return rootTile;\n  }\n\n  _initializeTraverser() {\n    let TraverserClass;\n    const type = this.type;\n    switch (type) {\n      case TILESET_TYPE.TILES3D:\n        TraverserClass = Tileset3DTraverser;\n        break;\n      case TILESET_TYPE.I3S:\n        TraverserClass = I3SetTraverser;\n        break;\n      default:\n        TraverserClass = TilesetTraverser;\n    }\n\n    return new TraverserClass({\n      basePath: this.basePath,\n      onTraversalEnd: this._onTraversalEnd.bind(this)\n    });\n  }\n\n  _destroyTileHeaders(parentTile) {\n    this._destroySubtree(parentTile);\n  }\n\n  async _loadTile(tile) {\n    let loaded;\n    try {\n      this._onStartTileLoading();\n      loaded = await tile.loadContent();\n    } catch (error) {\n      this._onTileLoadError(tile, error);\n    } finally {\n      this._onEndTileLoading();\n      this._onTileLoad(tile, loaded);\n    }\n  }\n\n  _onTileLoadError(tile, error) {\n    this.stats.get(TILES_LOAD_FAILED).incrementCount();\n\n    const message = error.message || error.toString();\n    const url = tile.url;\n    // TODO - Allow for probe log to be injected instead of console?\n    console.error(`A 3D tile failed to load: ${tile.url} ${message}`); // eslint-disable-line\n    this.options.onTileError(tile, message, url);\n  }\n\n  _onTileLoad(tile, loaded) {\n    if (!loaded) {\n      return;\n    }\n\n    // add coordinateOrigin and modelMatrix to tile\n    if (tile && tile.content) {\n      calculateTransformProps(tile, tile.content);\n    }\n\n    this._addTileToCache(tile);\n    this.options.onTileLoad(tile);\n  }\n\n  _onStartTileLoading() {\n    this._pendingCount++;\n    this.stats.get(TILES_LOADING).incrementCount();\n  }\n\n  _onEndTileLoading() {\n    this._pendingCount--;\n    this.stats.get(TILES_LOADING).decrementCount();\n  }\n\n  _addTileToCache(tile) {\n    this._cache.add(this, tile, (tileset) => tileset._updateCacheStats(tile));\n  }\n\n  _updateCacheStats(tile) {\n    this.stats.get(TILES_LOADED).incrementCount();\n    this.stats.get(TILES_IN_MEMORY).incrementCount();\n\n    // Good enough? Just use the raw binary ArrayBuffer's byte length.\n    this.gpuMemoryUsageInBytes += tile.content.byteLength || 0;\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n  }\n\n  _unloadTile(tile) {\n    this.gpuMemoryUsageInBytes -= (tile.content && tile.content.byteLength) || 0;\n\n    this.stats.get(TILES_IN_MEMORY).decrementCount();\n    this.stats.get(TILES_UNLOADED).incrementCount();\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n\n    this.options.onTileUnload(tile);\n    tile.unloadContent();\n  }\n\n  // Traverse the tree and destroy all tiles\n  _destroy() {\n    const stack: Tile3D[] = [];\n\n    if (this.root) {\n      stack.push(this.root);\n    }\n\n    while (stack.length > 0) {\n      const tile: Tile3D = stack.pop() as Tile3D;\n\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n\n      this._destroyTile(tile);\n    }\n    this.root = null;\n  }\n\n  // Traverse the tree and destroy all sub tiles\n  _destroySubtree(tile) {\n    const root = tile;\n    const stack: Tile3D[] = [];\n    stack.push(root);\n    while (stack.length > 0) {\n      tile = stack.pop();\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n      if (tile !== root) {\n        this._destroyTile(tile);\n      }\n    }\n    root.children = [];\n  }\n\n  _destroyTile(tile) {\n    this._cache.unloadTile(this, tile);\n    this._unloadTile(tile);\n    tile.destroy();\n  }\n\n  _initializeCesiumTileset(tilesetJson) {\n    this.asset = tilesetJson.asset;\n    if (!this.asset) {\n      throw new Error('Tileset must have an asset property.');\n    }\n    if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {\n      throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');\n    }\n\n    // Note: `asset.tilesetVersion` is version of the tileset itself (not the version of the 3D TILES standard)\n    // We add this version as a `v=1.0` query param to fetch the right version and not get an older cached version\n    if ('tilesetVersion' in this.asset) {\n      this._queryParams.v = this.asset.tilesetVersion;\n    }\n\n    // TODO - ion resources have a credits property we can use for additional attribution.\n    this.credits = {\n      attributions: this.options.attributions || []\n    };\n    this.description = this.options.description || '';\n\n    // Gets the tileset's properties dictionary object, which contains metadata about per-feature properties.\n    this.properties = tilesetJson.properties;\n    this.geometricError = tilesetJson.geometricError;\n    this._extensionsUsed = tilesetJson.extensionsUsed;\n    // Returns the extras property at the top of the tileset JSON (application specific metadata).\n    this.extras = tilesetJson.extras;\n  }\n\n  _initializeI3STileset() {\n    if (this.loadOptions.i3s && 'token' in this.loadOptions.i3s) {\n      this._queryParams.token = this.loadOptions.i3s.token;\n    }\n  }\n}\n\nfunction getQueryParamString(queryParams): string {\n  const queryParamStrings: string[] = [];\n  for (const key of Object.keys(queryParams)) {\n    queryParamStrings.push(`${key}=${queryParams[key]}`);\n  }\n  switch (queryParamStrings.length) {\n    case 0:\n      return '';\n    case 1:\n      return `?${queryParamStrings[0]}`;\n    default:\n      return `?${queryParamStrings.join('&')}`;\n  }\n}\n"],"file":"tileset-3d.js"}