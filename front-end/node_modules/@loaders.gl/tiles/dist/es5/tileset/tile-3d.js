"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _core = require("@math.gl/core");

var _culling = require("@math.gl/culling");

var _core2 = require("@loaders.gl/core");

var _constants = require("../constants");

var _boundingVolume = require("./helpers/bounding-volume");

var _tiles3dLod = require("./helpers/tiles-3d-lod");

var _i3sLod = require("./helpers/i3s-lod");

var _dTilesOptions = require("./helpers/3d-tiles-options");

var _tilesetTraverser = _interopRequireDefault(require("./traversers/tileset-traverser"));

const scratchVector = new _core.Vector3();

function defined(x) {
  return x !== undefined && x !== null;
}

class TileHeader {
  constructor(tileset, header, parentHeader, extendedId = '') {
    (0, _defineProperty2.default)(this, "tileset", void 0);
    (0, _defineProperty2.default)(this, "header", void 0);
    (0, _defineProperty2.default)(this, "id", void 0);
    (0, _defineProperty2.default)(this, "url", void 0);
    (0, _defineProperty2.default)(this, "parent", void 0);
    (0, _defineProperty2.default)(this, "refine", void 0);
    (0, _defineProperty2.default)(this, "type", void 0);
    (0, _defineProperty2.default)(this, "contentUrl", void 0);
    (0, _defineProperty2.default)(this, "lodMetricType", void 0);
    (0, _defineProperty2.default)(this, "lodMetricValue", void 0);
    (0, _defineProperty2.default)(this, "boundingVolume", void 0);
    (0, _defineProperty2.default)(this, "content", void 0);
    (0, _defineProperty2.default)(this, "contentState", void 0);
    (0, _defineProperty2.default)(this, "gpuMemoryUsageInBytes", void 0);
    (0, _defineProperty2.default)(this, "children", void 0);
    (0, _defineProperty2.default)(this, "depth", void 0);
    (0, _defineProperty2.default)(this, "viewportIds", void 0);
    (0, _defineProperty2.default)(this, "transform", void 0);
    (0, _defineProperty2.default)(this, "userData", void 0);
    (0, _defineProperty2.default)(this, "computedTransform", void 0);
    (0, _defineProperty2.default)(this, "hasEmptyContent", void 0);
    (0, _defineProperty2.default)(this, "hasTilesetContent", void 0);
    (0, _defineProperty2.default)(this, "traverser", void 0);
    (0, _defineProperty2.default)(this, "_cacheNode", void 0);
    (0, _defineProperty2.default)(this, "_frameNumber", void 0);
    (0, _defineProperty2.default)(this, "_lodJudge", void 0);
    (0, _defineProperty2.default)(this, "_expireDate", void 0);
    (0, _defineProperty2.default)(this, "_expiredContent", void 0);
    (0, _defineProperty2.default)(this, "_shouldRefine", void 0);
    (0, _defineProperty2.default)(this, "_distanceToCamera", void 0);
    (0, _defineProperty2.default)(this, "_centerZDepth", void 0);
    (0, _defineProperty2.default)(this, "_screenSpaceError", void 0);
    (0, _defineProperty2.default)(this, "_visibilityPlaneMask", void 0);
    (0, _defineProperty2.default)(this, "_visible", void 0);
    (0, _defineProperty2.default)(this, "_inRequestVolume", void 0);
    (0, _defineProperty2.default)(this, "_stackLength", void 0);
    (0, _defineProperty2.default)(this, "_selectionDepth", void 0);
    (0, _defineProperty2.default)(this, "_touchedFrame", void 0);
    (0, _defineProperty2.default)(this, "_visitedFrame", void 0);
    (0, _defineProperty2.default)(this, "_selectedFrame", void 0);
    (0, _defineProperty2.default)(this, "_requestedFrame", void 0);
    (0, _defineProperty2.default)(this, "_priority", void 0);
    (0, _defineProperty2.default)(this, "_contentBoundingVolume", void 0);
    (0, _defineProperty2.default)(this, "_viewerRequestVolume", void 0);
    (0, _defineProperty2.default)(this, "_initialTransform", void 0);
    this.header = header;
    this.tileset = tileset;
    this.id = extendedId || header.id;
    this.url = header.url;
    this.parent = parentHeader;
    this.refine = this._getRefine(header.refine);
    this.type = header.type;
    this.contentUrl = header.contentUrl;
    this.lodMetricType = 'geometricError';
    this.lodMetricValue = 0;
    this.boundingVolume = null;
    this.content = null;
    this.contentState = _constants.TILE_CONTENT_STATE.UNLOADED;
    this.gpuMemoryUsageInBytes = 0;
    this.children = [];
    this.hasEmptyContent = false;
    this.hasTilesetContent = false;
    this.depth = 0;
    this.viewportIds = [];
    this.userData = {};
    this._priority = 0;
    this._touchedFrame = 0;
    this._visitedFrame = 0;
    this._selectedFrame = 0;
    this._requestedFrame = 0;
    this._screenSpaceError = 0;
    this._cacheNode = null;
    this._frameNumber = null;
    this._cacheNode = null;
    this.traverser = new _tilesetTraverser.default({});
    this._shouldRefine = false;
    this._distanceToCamera = 0;
    this._centerZDepth = 0;
    this._visible = undefined;
    this._inRequestVolume = false;
    this._stackLength = 0;
    this._selectionDepth = 0;
    this._initialTransform = new _core.Matrix4();
    this.transform = new _core.Matrix4();

    this._initializeLodMetric(header);

    this._initializeTransforms(header);

    this._initializeBoundingVolumes(header);

    this._initializeContent(header);

    this._initializeRenderingState(header);

    this._lodJudge = null;
    this._expireDate = null;
    this._expiredContent = null;
    Object.seal(this);
  }

  destroy() {
    this.header = null;
  }

  isDestroyed() {
    return this.header === null;
  }

  get selected() {
    return this._selectedFrame === this.tileset._frameNumber;
  }

  get isVisible() {
    return this._visible;
  }

  get isVisibleAndInRequestVolume() {
    return this._visible && this._inRequestVolume;
  }

  get hasRenderContent() {
    return !this.hasEmptyContent && !this.hasTilesetContent;
  }

  get hasChildren() {
    return this.children.length > 0 || this.header.children && this.header.children.length > 0;
  }

  get contentReady() {
    return this.contentState === _constants.TILE_CONTENT_STATE.READY || this.hasEmptyContent;
  }

  get contentAvailable() {
    return Boolean(this.contentReady && this.hasRenderContent || this._expiredContent && !this.contentFailed);
  }

  get hasUnloadedContent() {
    return this.hasRenderContent && this.contentUnloaded;
  }

  get contentUnloaded() {
    return this.contentState === _constants.TILE_CONTENT_STATE.UNLOADED;
  }

  get contentExpired() {
    return this.contentState === _constants.TILE_CONTENT_STATE.EXPIRED;
  }

  get contentFailed() {
    return this.contentState === _constants.TILE_CONTENT_STATE.FAILED;
  }

  getScreenSpaceError(frameState, useParentLodMetric) {
    switch (this.tileset.type) {
      case _constants.TILESET_TYPE.I3S:
        return (0, _i3sLod.getI3ScreenSize)(this, frameState);

      case _constants.TILESET_TYPE.TILES3D:
        return (0, _tiles3dLod.getTiles3DScreenSpaceError)(this, frameState, useParentLodMetric);

      default:
        throw new Error('Unsupported tileset type');
    }
  }

  _getPriority() {
    const traverser = this.tileset._traverser;
    const {
      skipLevelOfDetail
    } = traverser.options;
    const maySkipTile = this.refine === _constants.TILE_REFINEMENT.ADD || skipLevelOfDetail;

    if (maySkipTile && !this.isVisible && this._visible !== undefined) {
      return -1;
    }

    if (this.tileset._frameNumber - this._touchedFrame >= 1) {
      return -1;
    }

    if (this.contentState === _constants.TILE_CONTENT_STATE.UNLOADED) {
      return -1;
    }

    const parent = this.parent;
    const useParentScreenSpaceError = parent && (!maySkipTile || this._screenSpaceError === 0.0 || parent.hasTilesetContent);
    const screenSpaceError = useParentScreenSpaceError ? parent._screenSpaceError : this._screenSpaceError;
    const rootScreenSpaceError = traverser.root ? traverser.root._screenSpaceError : 0.0;
    return Math.max(rootScreenSpaceError - screenSpaceError, 0);
  }

  async loadContent() {
    if (this.hasEmptyContent) {
      return false;
    }

    if (this.content) {
      return true;
    }

    const expired = this.contentExpired;

    if (expired) {
      this._expireDate = null;
    }

    this.contentState = _constants.TILE_CONTENT_STATE.LOADING;
    const requestToken = await this.tileset._requestScheduler.scheduleRequest(this.id, this._getPriority.bind(this));

    if (!requestToken) {
      this.contentState = _constants.TILE_CONTENT_STATE.UNLOADED;
      return false;
    }

    try {
      const contentUrl = this.tileset.getTileUrl(this.contentUrl);
      const loader = this.tileset.loader;
      const options = { ...this.tileset.loadOptions,
        [loader.id]: { ...this.tileset.loadOptions[loader.id],
          isTileset: this.type === 'json',
          ...this._getLoaderSpecificOptions(loader.id)
        }
      };
      this.content = await (0, _core2.load)(contentUrl, loader, options);

      if (this.tileset.options.contentLoader) {
        await this.tileset.options.contentLoader(this);
      }

      if (this._isTileset()) {
        this.tileset._initializeTileHeaders(this.content, this);
      }

      this.contentState = _constants.TILE_CONTENT_STATE.READY;

      this._onContentLoaded();

      return true;
    } catch (error) {
      this.contentState = _constants.TILE_CONTENT_STATE.FAILED;
      throw error;
    } finally {
      requestToken.done();
    }
  }

  unloadContent() {
    if (this.content && this.content.destroy) {
      this.content.destroy();
    }

    this.content = null;

    if (this.header.content && this.header.content.destroy) {
      this.header.content.destroy();
    }

    this.header.content = null;
    this.contentState = _constants.TILE_CONTENT_STATE.UNLOADED;
    return true;
  }

  updateVisibility(frameState, viewportIds) {
    if (this._frameNumber === frameState.frameNumber) {
      return;
    }

    const parent = this.parent;
    const parentVisibilityPlaneMask = parent ? parent._visibilityPlaneMask : _culling.CullingVolume.MASK_INDETERMINATE;

    if (this.tileset._traverser.options.updateTransforms) {
      const parentTransform = parent ? parent.computedTransform : this.tileset.modelMatrix;

      this._updateTransform(parentTransform);
    }

    this._distanceToCamera = this.distanceToTile(frameState);
    this._screenSpaceError = this.getScreenSpaceError(frameState, false);
    this._visibilityPlaneMask = this.visibility(frameState, parentVisibilityPlaneMask);
    this._visible = this._visibilityPlaneMask !== _culling.CullingVolume.MASK_OUTSIDE;
    this._inRequestVolume = this.insideViewerRequestVolume(frameState);
    this._frameNumber = frameState.frameNumber;
    this.viewportIds = viewportIds;
  }

  visibility(frameState, parentVisibilityPlaneMask) {
    const {
      cullingVolume
    } = frameState;
    const {
      boundingVolume
    } = this;
    return cullingVolume.computeVisibilityWithPlaneMask(boundingVolume, parentVisibilityPlaneMask);
  }

  contentVisibility() {
    return true;
  }

  distanceToTile(frameState) {
    const boundingVolume = this.boundingVolume;
    return Math.sqrt(Math.max(boundingVolume.distanceSquaredTo(frameState.camera.position), 0));
  }

  cameraSpaceZDepth({
    camera
  }) {
    const boundingVolume = this.boundingVolume;
    scratchVector.subVectors(boundingVolume.center, camera.position);
    return camera.direction.dot(scratchVector);
  }

  insideViewerRequestVolume(frameState) {
    const viewerRequestVolume = this._viewerRequestVolume;
    return !viewerRequestVolume || viewerRequestVolume.distanceSquaredTo(frameState.camera.position) <= 0;
  }

  updateExpiration() {
    if (defined(this._expireDate) && this.contentReady && !this.hasEmptyContent) {
      const now = Date.now();

      if (Date.lessThan(this._expireDate, now)) {
        this.contentState = _constants.TILE_CONTENT_STATE.EXPIRED;
        this._expiredContent = this.content;
      }
    }
  }

  get extras() {
    return this.header.extras;
  }

  _initializeLodMetric(header) {
    if ('lodMetricType' in header) {
      this.lodMetricType = header.lodMetricType;
    } else {
      this.lodMetricType = this.parent && this.parent.lodMetricType || this.tileset.lodMetricType;
      console.warn("3D Tile: Required prop lodMetricType is undefined. Using parent lodMetricType");
    }

    if ('lodMetricValue' in header) {
      this.lodMetricValue = header.lodMetricValue;
    } else {
      this.lodMetricValue = this.parent && this.parent.lodMetricValue || this.tileset.lodMetricValue;
      console.warn('3D Tile: Required prop lodMetricValue is undefined. Using parent lodMetricValue');
    }
  }

  _initializeTransforms(tileHeader) {
    this.transform = tileHeader.transform ? new _core.Matrix4(tileHeader.transform) : new _core.Matrix4();
    const parent = this.parent;
    const tileset = this.tileset;
    const parentTransform = parent && parent.computedTransform ? parent.computedTransform.clone() : tileset.modelMatrix.clone();
    this.computedTransform = new _core.Matrix4(parentTransform).multiplyRight(this.transform);
    const parentInitialTransform = parent && parent._initialTransform ? parent._initialTransform.clone() : new _core.Matrix4();
    this._initialTransform = new _core.Matrix4(parentInitialTransform).multiplyRight(this.transform);
  }

  _initializeBoundingVolumes(tileHeader) {
    this._contentBoundingVolume = null;
    this._viewerRequestVolume = null;

    this._updateBoundingVolume(tileHeader);
  }

  _initializeContent(tileHeader) {
    this.content = {
      _tileset: this.tileset,
      _tile: this
    };
    this.hasEmptyContent = true;
    this.contentState = _constants.TILE_CONTENT_STATE.UNLOADED;
    this.hasTilesetContent = false;

    if (tileHeader.contentUrl) {
      this.content = null;
      this.hasEmptyContent = false;
    }
  }

  _initializeRenderingState(header) {
    this.depth = header.level || (this.parent ? this.parent.depth + 1 : 0);
    this._shouldRefine = false;
    this._distanceToCamera = 0;
    this._centerZDepth = 0;
    this._screenSpaceError = 0;
    this._visibilityPlaneMask = _culling.CullingVolume.MASK_INDETERMINATE;
    this._visible = undefined;
    this._inRequestVolume = false;
    this._stackLength = 0;
    this._selectionDepth = 0;
    this._frameNumber = 0;
    this._touchedFrame = 0;
    this._visitedFrame = 0;
    this._selectedFrame = 0;
    this._requestedFrame = 0;
    this._priority = 0.0;
  }

  _getRefine(refine) {
    return refine || this.parent && this.parent.refine || _constants.TILE_REFINEMENT.REPLACE;
  }

  _isTileset() {
    return this.contentUrl.indexOf('.json') !== -1;
  }

  _onContentLoaded() {
    switch (this.content && this.content.type) {
      case 'vctr':
      case 'geom':
        this.tileset._traverser.disableSkipLevelOfDetail = true;
        break;

      default:
    }

    if (this._isTileset()) {
      this.hasTilesetContent = true;
    }
  }

  _updateBoundingVolume(header) {
    this.boundingVolume = (0, _boundingVolume.createBoundingVolume)(header.boundingVolume, this.computedTransform, this.boundingVolume);
    const content = header.content;

    if (!content) {
      return;
    }

    if (content.boundingVolume) {
      this._contentBoundingVolume = (0, _boundingVolume.createBoundingVolume)(content.boundingVolume, this.computedTransform, this._contentBoundingVolume);
    }

    if (header.viewerRequestVolume) {
      this._viewerRequestVolume = (0, _boundingVolume.createBoundingVolume)(header.viewerRequestVolume, this.computedTransform, this._viewerRequestVolume);
    }
  }

  _updateTransform(parentTransform = new _core.Matrix4()) {
    const computedTransform = parentTransform.clone().multiplyRight(this.transform);
    const didTransformChange = !computedTransform.equals(this.computedTransform);

    if (!didTransformChange) {
      return;
    }

    this.computedTransform = computedTransform;

    this._updateBoundingVolume(this.header);
  }

  _getLoaderSpecificOptions(loaderId) {
    switch (loaderId) {
      case 'i3s':
        return { ...this.tileset.options.i3s,
          tile: this.header,
          tileset: this.tileset.tileset,
          isTileHeader: false
        };

      case '3d-tiles':
      case 'cesium-ion':
      default:
        return (0, _dTilesOptions.get3dTilesOptions)(this.tileset.tileset);
    }
  }

}

exports.default = TileHeader;
//# sourceMappingURL=tile-3d.js.map