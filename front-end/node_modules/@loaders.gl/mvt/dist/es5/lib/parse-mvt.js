"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseMVT;

var _vectorTile = _interopRequireDefault(require("./mapbox-vector-tile/vector-tile"));

var _vectorTile2 = _interopRequireDefault(require("./binary-vector-tile/vector-tile"));

var _featuresToBinary = require("./binary-vector-tile/features-to-binary");

var _pbf = _interopRequireDefault(require("pbf"));

function parseMVT(arrayBuffer, options) {
  options = normalizeOptions(options);
  const binary = options.gis.format === 'binary';
  const features = [];
  const firstPassData = {
    pointPositionsCount: 0,
    pointFeaturesCount: 0,
    linePositionsCount: 0,
    linePathsCount: 0,
    lineFeaturesCount: 0,
    polygonPositionsCount: 0,
    polygonObjectsCount: 0,
    polygonRingsCount: 0,
    polygonFeaturesCount: 0
  };

  if (arrayBuffer.byteLength > 0) {
    const tile = binary ? new _vectorTile2.default(new _pbf.default(arrayBuffer)) : new _vectorTile.default(new _pbf.default(arrayBuffer));
    const loaderOptions = options.mvt;
    const selectedLayers = Array.isArray(loaderOptions.layers) ? loaderOptions.layers : Object.keys(tile.layers);
    selectedLayers.forEach(layerName => {
      const vectorTileLayer = tile.layers[layerName];
      const featureOptions = { ...loaderOptions,
        layerName
      };

      if (!vectorTileLayer) {
        return;
      }

      for (let i = 0; i < vectorTileLayer.length; i++) {
        const vectorTileFeature = vectorTileLayer.feature(i, firstPassData);
        const decodedFeature = binary ? getDecodedFeatureBinary(vectorTileFeature, featureOptions) : getDecodedFeature(vectorTileFeature, featureOptions);
        features.push(decodedFeature);
      }
    });
  }

  if (binary) {
    const data = (0, _featuresToBinary.featuresToBinary)(features, firstPassData, options.gis);
    data.byteLength = arrayBuffer.byteLength;
    return data;
  }

  return features;
}

function normalizeOptions(options) {
  options = { ...options,
    mvt: options.mvt || {},
    gis: options.gis || {}
  };
  const wgs84Coordinates = options.coordinates === 'wgs84';
  const {
    tileIndex
  } = options;
  const hasTileIndex = tileIndex && Number.isFinite(tileIndex.x) && Number.isFinite(tileIndex.y) && Number.isFinite(tileIndex.z);

  if (wgs84Coordinates && !hasTileIndex) {
    throw new Error('MVT Loader: WGS84 coordinates need tileIndex property. Check documentation.');
  }

  return options;
}

function getDecodedFeature(feature, options = {}) {
  const decodedFeature = feature.toGeoJSON(options.coordinates === 'wgs84' ? options.tileIndex : transformToLocalCoordinates);

  if (options.layerProperty) {
    decodedFeature.properties[options.layerProperty] = options.layerName;
  }

  return decodedFeature;
}

function getDecodedFeatureBinary(feature, options = {}) {
  const decodedFeature = feature.toBinaryCoordinates(options.coordinates === 'wgs84' ? options.tileIndex : transformToLocalCoordinatesBinary);

  if (options.layerProperty) {
    decodedFeature.properties[options.layerProperty] = options.layerName;
  }

  return decodedFeature;
}

function transformToLocalCoordinates(line, feature) {
  const {
    extent
  } = feature;

  for (let i = 0; i < line.length; i++) {
    const p = line[i];
    p[0] /= extent;
    p[1] /= extent;
  }
}

function transformToLocalCoordinatesBinary(data, feature) {
  const {
    extent
  } = feature;

  for (let i = 0, il = data.length; i < il; ++i) {
    data[i] /= extent;
  }
}
//# sourceMappingURL=parse-mvt.js.map