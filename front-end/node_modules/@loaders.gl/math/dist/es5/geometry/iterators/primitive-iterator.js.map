{"version":3,"sources":["../../../../src/geometry/iterators/primitive-iterator.ts"],"names":["makePrimitiveIterator","indices","attributes","mode","start","end","values","value","undefined","length","info","type","i1","i2","i3","i","GL","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAsBO,UAAUA,qBAAV,CACLC,OADK,EAELC,UAAkB,GAAG,EAFhB,EAGLC,IAHK,EAILC,KAAK,GAAG,CAJH,EAKLC,GALK,EAM6E;AAElF,MAAIJ,OAAJ,EAAa;AACXA,IAAAA,OAAO,GAAGA,OAAO,CAACK,MAAR,IAAkBL,OAAO,CAACM,KAA1B,IAAmCN,OAA7C;AACD;;AAGD,MAAII,GAAG,KAAKG,SAAZ,EAAuB;AACrBH,IAAAA,GAAG,GAAGJ,OAAO,GAAGA,OAAO,CAACQ,MAAX,GAAoBL,KAAjC;AACD;;AAGD,QAAMM,IAAiB,GAAG;AACxBR,IAAAA,UADwB;AAExBS,IAAAA,IAAI,EAAE,iCAAqBR,IAArB,CAFkB;AAGxBS,IAAAA,EAAE,EAAE,CAHoB;AAIxBC,IAAAA,EAAE,EAAE,CAJoB;AAKxBC,IAAAA,EAAE,EAAE;AALoB,GAA1B;AAQA,MAAIC,CAAC,GAAGX,KAAR;;AAEA,SAAOW,CAAC,GAAGV,GAAX,EAAgB;AACd,YAAQF,IAAR;AACE,WAAKa,cAAGC,MAAR;AACEP,QAAAA,IAAI,CAACE,EAAL,GAAUG,CAAV;AACAA,QAAAA,CAAC,IAAI,CAAL;AACA;;AACF,WAAKC,cAAGE,KAAR;AACER,QAAAA,IAAI,CAACE,EAAL,GAAUG,CAAV;AACAL,QAAAA,IAAI,CAACG,EAAL,GAAUE,CAAC,GAAG,CAAd;AACAA,QAAAA,CAAC,IAAI,CAAL;AACA;;AACF,WAAKC,cAAGG,UAAR;AACET,QAAAA,IAAI,CAACE,EAAL,GAAUG,CAAV;AACAL,QAAAA,IAAI,CAACG,EAAL,GAAUE,CAAC,GAAG,CAAd;AACAA,QAAAA,CAAC,IAAI,CAAL;AACA;;AACF,WAAKC,cAAGI,SAAR;AACEV,QAAAA,IAAI,CAACE,EAAL,GAAUG,CAAV;AACAL,QAAAA,IAAI,CAACG,EAAL,GAAUE,CAAC,GAAG,CAAd;AACAA,QAAAA,CAAC,IAAI,CAAL;AACA;;AACF,WAAKC,cAAGK,SAAR;AACEX,QAAAA,IAAI,CAACE,EAAL,GAAUG,CAAV;AACAL,QAAAA,IAAI,CAACG,EAAL,GAAUE,CAAC,GAAG,CAAd;AACAL,QAAAA,IAAI,CAACI,EAAL,GAAUC,CAAC,GAAG,CAAd;AACAA,QAAAA,CAAC,IAAI,CAAL;AACA;;AACF,WAAKC,cAAGM,cAAR;AACEZ,QAAAA,IAAI,CAACE,EAAL,GAAUG,CAAV;AACAL,QAAAA,IAAI,CAACG,EAAL,GAAUE,CAAC,GAAG,CAAd;AACAA,QAAAA,CAAC,IAAI,CAAL;AACA;;AACF,WAAKC,cAAGO,YAAR;AACEb,QAAAA,IAAI,CAACE,EAAL,GAAU,CAAV;AACAF,QAAAA,IAAI,CAACG,EAAL,GAAUE,CAAV;AACAL,QAAAA,IAAI,CAACI,EAAL,GAAUC,CAAC,GAAG,CAAd;AACAA,QAAAA,CAAC,IAAI,CAAL;AACA;;AAEF;AACE,iCAAO,KAAP;AAvCJ;;AA2CA,QAAId,OAAJ,EAAa;AACX,UAAI,QAAQS,IAAZ,EAAkB;AAChBA,QAAAA,IAAI,CAACE,EAAL,GAAUX,OAAO,CAACS,IAAI,CAACE,EAAN,CAAjB;AACAF,QAAAA,IAAI,CAACG,EAAL,GAAUZ,OAAO,CAACS,IAAI,CAACG,EAAN,CAAjB;AACAH,QAAAA,IAAI,CAACI,EAAL,GAAUb,OAAO,CAACS,IAAI,CAACI,EAAN,CAAjB;AACD;AACF;;AAED,UAAMJ,IAAN;AACD;AACF","sourcesContent":["import {GL} from '../constants';\nimport {getPrimitiveModeType} from '../primitives/modes';\nimport {assert} from '@loaders.gl/loader-utils';\n\n/**\n * Iteration info for making primitive iterator\n */\ntype Information = {\n  attributes: object;\n  type: number | void;\n  i1: number;\n  i2: number;\n  i3: number;\n  primitiveIndex?: object;\n};\n/**\n * Will iterate over each primitive, expanding (dereferencing) indices\n * @param indices\n * @param attributes\n * @param mode\n * @param start\n * @param end\n */\n// eslint-disable-next-line complexity\nexport function* makePrimitiveIterator(\n  indices?: any,\n  attributes: object = {},\n  mode?: number,\n  start = 0,\n  end?: number\n): Iterable<{attributes: object; type: number; i1: number; i2: number; i3: number}> {\n  // support indices being an object with a values array\n  if (indices) {\n    indices = indices.values || indices.value || indices;\n  }\n\n  // Autodeduce length from indices\n  if (end === undefined) {\n    end = indices ? indices.length : start;\n  }\n\n  // iteration info\n  const info: Information = {\n    attributes,\n    type: getPrimitiveModeType(mode),\n    i1: 0,\n    i2: 0,\n    i3: 0\n  };\n\n  let i = start;\n  // @ts-ignore\n  while (i < end) {\n    switch (mode) {\n      case GL.POINTS: // draw single points.\n        info.i1 = i;\n        i += 1;\n        break;\n      case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 2;\n        break;\n      case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n        info.i1 = i;\n        info.i2 = i + 1;\n        info.i3 = i + 2;\n        i += 3;\n        break;\n      case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n        info.i1 = 1;\n        info.i2 = i;\n        info.i3 = i + 1;\n        i += 1;\n        break;\n\n      default:\n        assert(false);\n    }\n\n    // if indices are present, lookup actual vertices in indices\n    if (indices) {\n      if ('i1' in info) {\n        info.i1 = indices[info.i1];\n        info.i2 = indices[info.i2];\n        info.i3 = indices[info.i3];\n      }\n    }\n    // @ts-ignore\n    yield info;\n  }\n}\n"],"file":"primitive-iterator.js"}