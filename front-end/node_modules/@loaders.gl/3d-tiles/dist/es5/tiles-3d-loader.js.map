{"version":3,"sources":["../../src/tiles-3d-loader.ts"],"names":["Tiles3DLoader","id","name","module","version","VERSION","extensions","mimeTypes","tests","parse","options","loadGLTF","decodeQuantizedPositions","isTileset","assetGltfUpAxis","getBaseUri","tileset","path","dirname","url","parseTile","arrayBuffer","context","tile","content","featureIds","byteOffset","parseTileset","data","tilesetJson","JSON","TextDecoder","decode","loader","basePath","root","type","TILESET_TYPE","TILES3D","lodMetricType","LOD_METRIC_TYPE","GEOMETRIC_ERROR","lodMetricValue","loaderOptions","indexOf"],"mappings":"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","sourcesContent":["import type {LoaderWithParser} from '@loaders.gl/loader-utils';\nimport {path} from '@loaders.gl/loader-utils';\nimport {TILESET_TYPE, LOD_METRIC_TYPE} from '@loaders.gl/tiles';\nimport {VERSION} from './lib/utils/version';\nimport {parse3DTile} from './lib/parsers/parse-3d-tile';\nimport {normalizeTileHeaders} from './lib/parsers/parse-3d-tile-header';\n\n/**\n * Loader for 3D Tiles\n */\nexport const Tiles3DLoader: LoaderWithParser = {\n  id: '3d-tiles',\n  name: '3D Tiles',\n  module: '3d-tiles',\n  version: VERSION,\n  extensions: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  mimeTypes: ['application/octet-stream'],\n  tests: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  parse,\n  options: {\n    '3d-tiles': {\n      loadGLTF: true,\n      decodeQuantizedPositions: false,\n      isTileset: 'auto',\n      assetGltfUpAxis: null\n    }\n  }\n};\n\nfunction getBaseUri(tileset) {\n  return path.dirname(tileset.url);\n}\n\nasync function parseTile(arrayBuffer, options, context) {\n  const tile = {\n    content: {\n      featureIds: null\n    }\n  };\n  const byteOffset = 0;\n  await parse3DTile(arrayBuffer, byteOffset, options, context, tile.content);\n  return tile.content;\n}\n\nasync function parseTileset(data, options, context) {\n  const tilesetJson = JSON.parse(new TextDecoder().decode(data));\n  // eslint-disable-next-line no-use-before-define\n  tilesetJson.loader = options.loader || Tiles3DLoader;\n  tilesetJson.url = context.url;\n  // base path that non-absolute paths in tileset are relative to.\n  tilesetJson.basePath = getBaseUri(tilesetJson);\n  tilesetJson.root = normalizeTileHeaders(tilesetJson);\n  tilesetJson.type = TILESET_TYPE.TILES3D;\n\n  tilesetJson.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;\n  tilesetJson.lodMetricValue = tilesetJson.root.lodMetricValue;\n\n  return tilesetJson;\n}\n\nasync function parse(data, options, context) {\n  // auto detect file type\n  const loaderOptions = options['3d-tiles'] || {};\n  let isTileset;\n  if (loaderOptions.isTileset === 'auto') {\n    isTileset = context.url && context.url.indexOf('.json') !== -1;\n  } else {\n    isTileset = loaderOptions.isTileset;\n  }\n\n  if (isTileset) {\n    data = await parseTileset(data, options, context);\n  } else {\n    data = await parseTile(data, options, context);\n  }\n\n  return data;\n}\n"],"file":"tiles-3d-loader.js"}