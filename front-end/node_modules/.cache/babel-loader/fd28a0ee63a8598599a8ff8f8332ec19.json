{"ast":null,"code":"const EMPTY_ARRAY = [];\nconst placeholderArray = [];\nexport function createIterable(data) {\n  let startRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let endRow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n  let iterable = EMPTY_ARRAY;\n  const objectInfo = {\n    index: -1,\n    data,\n    target: []\n  };\n\n  if (!data) {\n    iterable = EMPTY_ARRAY;\n  } else if (typeof data[Symbol.iterator] === 'function') {\n    iterable = data;\n  } else if (data.length > 0) {\n    placeholderArray.length = data.length;\n    iterable = placeholderArray;\n  }\n\n  if (startRow > 0 || Number.isFinite(endRow)) {\n    iterable = (Array.isArray(iterable) ? iterable : Array.from(iterable)).slice(startRow, endRow);\n    objectInfo.index = startRow - 1;\n  }\n\n  return {\n    iterable,\n    objectInfo\n  };\n}\nexport function isAsyncIterable(data) {\n  return data && data[Symbol.asyncIterator];\n}\nexport function getAccessorFromBuffer(typedArray, _ref) {\n  let {\n    size,\n    stride,\n    offset,\n    startIndices,\n    nested\n  } = _ref;\n  const bytesPerElement = typedArray.BYTES_PER_ELEMENT;\n  const elementStride = stride ? stride / bytesPerElement : size;\n  const elementOffset = offset ? offset / bytesPerElement : 0;\n  const vertexCount = Math.floor((typedArray.length - elementOffset) / elementStride);\n  return (_, _ref2) => {\n    let {\n      index,\n      target\n    } = _ref2;\n\n    if (!startIndices) {\n      const sourceIndex = index * elementStride + elementOffset;\n\n      for (let j = 0; j < size; j++) {\n        target[j] = typedArray[sourceIndex + j];\n      }\n\n      return target;\n    }\n\n    const startIndex = startIndices[index];\n    const endIndex = startIndices[index + 1] || vertexCount;\n    let result;\n\n    if (nested) {\n      result = new Array(endIndex - startIndex);\n\n      for (let i = startIndex; i < endIndex; i++) {\n        const sourceIndex = i * elementStride + elementOffset;\n        target = new Array(size);\n\n        for (let j = 0; j < size; j++) {\n          target[j] = typedArray[sourceIndex + j];\n        }\n\n        result[i - startIndex] = target;\n      }\n    } else if (elementStride === size) {\n      result = typedArray.subarray(startIndex * size + elementOffset, endIndex * size + elementOffset);\n    } else {\n      result = new typedArray.constructor((endIndex - startIndex) * size);\n      let targetIndex = 0;\n\n      for (let i = startIndex; i < endIndex; i++) {\n        const sourceIndex = i * elementStride + elementOffset;\n\n        for (let j = 0; j < size; j++) {\n          result[targetIndex++] = typedArray[sourceIndex + j];\n        }\n      }\n    }\n\n    return result;\n  };\n}","map":{"version":3,"sources":["../../../src/utils/iterable-utils.js"],"names":["EMPTY_ARRAY","placeholderArray","startRow","endRow","iterable","objectInfo","index","target","data","Symbol","Number","Array","nested","bytesPerElement","typedArray","elementStride","stride","elementOffset","offset","vertexCount","Math","sourceIndex","j","startIndex","startIndices","endIndex","result","i","targetIndex"],"mappings":"AAoBA,MAAMA,WAAW,GAAjB,EAAA;AACA,MAAMC,gBAAgB,GAAtB,EAAA;AAOA,OAAO,SAAA,cAAA,CAAA,IAAA,EAA+D;AAAA,MAAjCC,QAAiC,uEAA/D,CAA+D;AAAA,MAAnBC,MAAmB,uEAA/D,QAA+D;AACpE,MAAIC,QAAQ,GAAZ,WAAA;AAEA,QAAMC,UAAU,GAAG;AACjBC,IAAAA,KAAK,EAAE,CADU,CAAA;AAAA,IAAA,IAAA;AAIjBC,IAAAA,MAAM,EAAE;AAJS,GAAnB;;AAOA,MAAI,CAAJ,IAAA,EAAW;AACTH,IAAAA,QAAQ,GAARA,WAAAA;AADF,GAAA,MAEO,IAAI,OAAOI,IAAI,CAACC,MAAM,CAAlB,QAAW,CAAX,KAAJ,UAAA,EAAiD;AAEtDL,IAAAA,QAAQ,GAARA,IAAAA;AAFK,GAAA,MAGA,IAAII,IAAI,CAAJA,MAAAA,GAAJ,CAAA,EAAqB;AAC1BP,IAAAA,gBAAgB,CAAhBA,MAAAA,GAA0BO,IAAI,CAA9BP,MAAAA;AACAG,IAAAA,QAAQ,GAARA,gBAAAA;AACD;;AAED,MAAIF,QAAQ,GAARA,CAAAA,IAAgBQ,MAAM,CAANA,QAAAA,CAApB,MAAoBA,CAApB,EAA6C;AAC3CN,IAAAA,QAAQ,GAAG,CAACO,KAAK,CAALA,OAAAA,CAAAA,QAAAA,IAAAA,QAAAA,GAAqCA,KAAK,CAALA,IAAAA,CAAtC,QAAsCA,CAAtC,EAAA,KAAA,CAAA,QAAA,EAAXP,MAAW,CAAXA;AACAC,IAAAA,UAAU,CAAVA,KAAAA,GAAmBH,QAAQ,GAA3BG,CAAAA;AACD;;AAED,SAAO;AAAA,IAAA,QAAA;AAAWA,IAAAA;AAAX,GAAP;AACD;AAKD,OAAO,SAAA,eAAA,CAAA,IAAA,EAA+B;AACpC,SAAOG,IAAI,IAAIA,IAAI,CAACC,MAAM,CAA1B,aAAmB,CAAnB;AACD;AAKD,OAAO,SAAA,qBAAA,CAAA,UAAA,QAAyF;AAAA,MAA9C;AAAA,IAAA,IAAA;AAAA,IAAA,MAAA;AAAA,IAAA,MAAA;AAAA,IAAA,YAAA;AAAqCG,IAAAA;AAArC,GAA8C;AAC9F,QAAMC,eAAe,GAAGC,UAAU,CAAlC,iBAAA;AACA,QAAMC,aAAa,GAAGC,MAAM,GAAGA,MAAM,GAAT,eAAA,GAA5B,IAAA;AACA,QAAMC,aAAa,GAAGC,MAAM,GAAGA,MAAM,GAAT,eAAA,GAA5B,CAAA;AACA,QAAMC,WAAW,GAAGC,IAAI,CAAJA,KAAAA,CAAW,CAACN,UAAU,CAAVA,MAAAA,GAAD,aAAA,IAA/B,aAAoBM,CAApB;AAEA,SAAO,CAAA,CAAA,YAAwB;AAAA,QAApB;AAAA,MAAA,KAAA;AAAQb,MAAAA;AAAR,KAAoB;;AAC7B,QAAI,CAAJ,YAAA,EAAmB;AACjB,YAAMc,WAAW,GAAGf,KAAK,GAALA,aAAAA,GAApB,aAAA;;AACA,WAAK,IAAIgB,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,IAAA,EAA0BA,CAA1B,EAAA,EAA+B;AAC7Bf,QAAAA,MAAM,CAANA,CAAM,CAANA,GAAYO,UAAU,CAACO,WAAW,GAAlCd,CAAsB,CAAtBA;AACD;;AACD,aAAA,MAAA;AACD;;AACD,UAAMgB,UAAU,GAAGC,YAAY,CAA/B,KAA+B,CAA/B;AACA,UAAMC,QAAQ,GAAGD,YAAY,CAAClB,KAAK,GAAlBkB,CAAY,CAAZA,IAAjB,WAAA;AACA,QAAA,MAAA;;AAEA,QAAA,MAAA,EAAY;AACVE,MAAAA,MAAM,GAAG,IAAA,KAAA,CAAUD,QAAQ,GAA3BC,UAAS,CAATA;;AACA,WAAK,IAAIC,CAAC,GAAV,UAAA,EAAyBA,CAAC,GAA1B,QAAA,EAAuCA,CAAvC,EAAA,EAA4C;AAC1C,cAAMN,WAAW,GAAGM,CAAC,GAADA,aAAAA,GAApB,aAAA;AACApB,QAAAA,MAAM,GAAG,IAAA,KAAA,CAATA,IAAS,CAATA;;AACA,aAAK,IAAIe,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,IAAA,EAA0BA,CAA1B,EAAA,EAA+B;AAC7Bf,UAAAA,MAAM,CAANA,CAAM,CAANA,GAAYO,UAAU,CAACO,WAAW,GAAlCd,CAAsB,CAAtBA;AACD;;AACDmB,QAAAA,MAAM,CAACC,CAAC,GAARD,UAAM,CAANA,GAAAA,MAAAA;AACD;AATH,KAAA,MAUO,IAAIX,aAAa,KAAjB,IAAA,EAA4B;AACjCW,MAAAA,MAAM,GAAGZ,UAAU,CAAVA,QAAAA,CACPS,UAAU,GAAVA,IAAAA,GADOT,aAAAA,EAEPW,QAAQ,GAARA,IAAAA,GAFFC,aAASZ,CAATY;AADK,KAAA,MAKA;AACLA,MAAAA,MAAM,GAAG,IAAIZ,UAAU,CAAd,WAAA,CAA2B,CAACW,QAAQ,GAAT,UAAA,IAApCC,IAAS,CAATA;AACA,UAAIE,WAAW,GAAf,CAAA;;AACA,WAAK,IAAID,CAAC,GAAV,UAAA,EAAyBA,CAAC,GAA1B,QAAA,EAAuCA,CAAvC,EAAA,EAA4C;AAC1C,cAAMN,WAAW,GAAGM,CAAC,GAADA,aAAAA,GAApB,aAAA;;AACA,aAAK,IAAIL,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,IAAA,EAA0BA,CAA1B,EAAA,EAA+B;AAC7BI,UAAAA,MAAM,CAACE,WAAPF,EAAM,CAANA,GAAwBZ,UAAU,CAACO,WAAW,GAA9CK,CAAkC,CAAlCA;AACD;AACF;AACF;;AAED,WAAA,MAAA;AAtCF,GAAA;AAwCD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nconst EMPTY_ARRAY = [];\nconst placeholderArray = [];\n\n/*\n * Create an Iterable\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n * and a \"context\" tracker from the given data\n */\nexport function createIterable(data, startRow = 0, endRow = Infinity) {\n  let iterable = EMPTY_ARRAY;\n\n  const objectInfo = {\n    index: -1,\n    data,\n    // visitor can optionally utilize this to avoid constructing a new array for every object\n    target: []\n  };\n\n  if (!data) {\n    iterable = EMPTY_ARRAY;\n  } else if (typeof data[Symbol.iterator] === 'function') {\n    // data is already an iterable\n    iterable = data;\n  } else if (data.length > 0) {\n    placeholderArray.length = data.length;\n    iterable = placeholderArray;\n  }\n\n  if (startRow > 0 || Number.isFinite(endRow)) {\n    iterable = (Array.isArray(iterable) ? iterable : Array.from(iterable)).slice(startRow, endRow);\n    objectInfo.index = startRow - 1;\n  }\n\n  return {iterable, objectInfo};\n}\n\n/*\n * Returns true if data is an async iterable object\n */\nexport function isAsyncIterable(data) {\n  return data && data[Symbol.asyncIterator];\n}\n\n/*\n * Create an accessor function from a flat buffer that yields the value at each object index\n */\nexport function getAccessorFromBuffer(typedArray, {size, stride, offset, startIndices, nested}) {\n  const bytesPerElement = typedArray.BYTES_PER_ELEMENT;\n  const elementStride = stride ? stride / bytesPerElement : size;\n  const elementOffset = offset ? offset / bytesPerElement : 0;\n  const vertexCount = Math.floor((typedArray.length - elementOffset) / elementStride);\n\n  return (_, {index, target}) => {\n    if (!startIndices) {\n      const sourceIndex = index * elementStride + elementOffset;\n      for (let j = 0; j < size; j++) {\n        target[j] = typedArray[sourceIndex + j];\n      }\n      return target;\n    }\n    const startIndex = startIndices[index];\n    const endIndex = startIndices[index + 1] || vertexCount;\n    let result;\n\n    if (nested) {\n      result = new Array(endIndex - startIndex);\n      for (let i = startIndex; i < endIndex; i++) {\n        const sourceIndex = i * elementStride + elementOffset;\n        target = new Array(size);\n        for (let j = 0; j < size; j++) {\n          target[j] = typedArray[sourceIndex + j];\n        }\n        result[i - startIndex] = target;\n      }\n    } else if (elementStride === size) {\n      result = typedArray.subarray(\n        startIndex * size + elementOffset,\n        endIndex * size + elementOffset\n      );\n    } else {\n      result = new typedArray.constructor((endIndex - startIndex) * size);\n      let targetIndex = 0;\n      for (let i = startIndex; i < endIndex; i++) {\n        const sourceIndex = i * elementStride + elementOffset;\n        for (let j = 0; j < size; j++) {\n          result[targetIndex++] = typedArray[sourceIndex + j];\n        }\n      }\n    }\n\n    return result;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}