{"ast":null,"code":"import debug from '../debug';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport { Framebuffer } from '@luma.gl/core';\nconst TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';\nexport default class DeckRenderer {\n  constructor(gl) {\n    this.gl = gl;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n    this.renderBuffers = [];\n    this.lastPostProcessEffect = null;\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props && this.layerFilter !== props.layerFilter) {\n      this.layerFilter = props.layerFilter;\n      this._needsRedraw = 'layerFilter changed';\n    }\n\n    if ('drawPickingColors' in props && this.drawPickingColors !== props.drawPickingColors) {\n      this.drawPickingColors = props.drawPickingColors;\n      this._needsRedraw = 'drawPickingColors changed';\n    }\n  }\n\n  renderLayers(opts) {\n    const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n    opts.layerFilter = opts.layerFilter || this.layerFilter;\n    opts.effects = opts.effects || [];\n    opts.target = opts.target || Framebuffer.getDefaultFramebuffer(this.gl);\n\n    this._preRender(opts.effects, opts);\n\n    const outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : opts.target;\n    const renderStats = layerPass.render({ ...opts,\n      target: outputBuffer\n    });\n\n    this._postRender(opts.effects, opts);\n\n    this.renderCount++;\n    debug(TRACE_RENDER_LAYERS, this, renderStats, opts);\n  }\n\n  needsRedraw() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      clearRedrawFlags: false\n    };\n    const redraw = this._needsRedraw;\n\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    return redraw;\n  }\n\n  finalize() {\n    const {\n      renderBuffers\n    } = this;\n\n    for (const buffer of renderBuffers) {\n      buffer.delete();\n    }\n\n    renderBuffers.length = 0;\n  }\n\n  _preRender(effects, opts) {\n    let lastPostProcessEffect = null;\n\n    for (const effect of effects) {\n      effect.preRender(this.gl, opts);\n\n      if (effect.postRender) {\n        lastPostProcessEffect = effect;\n      }\n    }\n\n    if (lastPostProcessEffect) {\n      this._resizeRenderBuffers();\n    }\n\n    this.lastPostProcessEffect = lastPostProcessEffect;\n  }\n\n  _resizeRenderBuffers() {\n    const {\n      renderBuffers\n    } = this;\n\n    if (renderBuffers.length === 0) {\n      renderBuffers.push(new Framebuffer(this.gl), new Framebuffer(this.gl));\n    }\n\n    for (const buffer of renderBuffers) {\n      buffer.resize();\n    }\n  }\n\n  _postRender(effects, opts) {\n    const {\n      renderBuffers\n    } = this;\n    const params = {\n      inputBuffer: renderBuffers[0],\n      swapBuffer: renderBuffers[1],\n      target: null\n    };\n\n    for (const effect of effects) {\n      if (effect.postRender) {\n        if (effect === this.lastPostProcessEffect) {\n          params.target = opts.target;\n          effect.postRender(this.gl, params);\n          break;\n        }\n\n        const buffer = effect.postRender(this.gl, params);\n        params.inputBuffer = buffer;\n        params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/lib/deck-renderer.js"],"names":["TRACE_RENDER_LAYERS","constructor","setProps","props","renderLayers","layerPass","opts","Framebuffer","outputBuffer","renderStats","target","debug","needsRedraw","clearRedrawFlags","redraw","finalize","renderBuffers","buffer","_preRender","lastPostProcessEffect","effect","_resizeRenderBuffers","_postRender","params","inputBuffer","swapBuffer"],"mappings":"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","sourcesContent":["import debug from '../debug';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport {Framebuffer} from '@luma.gl/core';\n\nconst TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';\n\nexport default class DeckRenderer {\n  constructor(gl) {\n    this.gl = gl;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n    this.renderBuffers = [];\n    this.lastPostProcessEffect = null;\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props && this.layerFilter !== props.layerFilter) {\n      this.layerFilter = props.layerFilter;\n      this._needsRedraw = 'layerFilter changed';\n    }\n\n    if ('drawPickingColors' in props && this.drawPickingColors !== props.drawPickingColors) {\n      this.drawPickingColors = props.drawPickingColors;\n      this._needsRedraw = 'drawPickingColors changed';\n    }\n  }\n\n  /*\n    target,\n    layers,\n    viewports,\n    onViewportActive,\n    views,\n    redrawReason,\n    clearCanvas,\n    effects,\n    pass,\n    stats\n  */\n  renderLayers(opts) {\n    const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n\n    opts.layerFilter = opts.layerFilter || this.layerFilter;\n    opts.effects = opts.effects || [];\n    opts.target = opts.target || Framebuffer.getDefaultFramebuffer(this.gl);\n\n    this._preRender(opts.effects, opts);\n\n    const outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : opts.target;\n    const renderStats = layerPass.render({...opts, target: outputBuffer});\n\n    this._postRender(opts.effects, opts);\n\n    this.renderCount++;\n\n    debug(TRACE_RENDER_LAYERS, this, renderStats, opts);\n  }\n\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  finalize() {\n    const {renderBuffers} = this;\n    for (const buffer of renderBuffers) {\n      buffer.delete();\n    }\n    renderBuffers.length = 0;\n  }\n\n  // Private\n  _preRender(effects, opts) {\n    let lastPostProcessEffect = null;\n\n    for (const effect of effects) {\n      effect.preRender(this.gl, opts);\n      if (effect.postRender) {\n        lastPostProcessEffect = effect;\n      }\n    }\n\n    if (lastPostProcessEffect) {\n      this._resizeRenderBuffers();\n    }\n    this.lastPostProcessEffect = lastPostProcessEffect;\n  }\n\n  _resizeRenderBuffers() {\n    const {renderBuffers} = this;\n    if (renderBuffers.length === 0) {\n      renderBuffers.push(new Framebuffer(this.gl), new Framebuffer(this.gl));\n    }\n    for (const buffer of renderBuffers) {\n      buffer.resize();\n    }\n  }\n\n  _postRender(effects, opts) {\n    const {renderBuffers} = this;\n    const params = {\n      inputBuffer: renderBuffers[0],\n      swapBuffer: renderBuffers[1],\n      target: null\n    };\n    for (const effect of effects) {\n      if (effect.postRender) {\n        if (effect === this.lastPostProcessEffect) {\n          params.target = opts.target;\n          effect.postRender(this.gl, params);\n          break;\n        }\n        const buffer = effect.postRender(this.gl, params);\n        params.inputBuffer = buffer;\n        params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}