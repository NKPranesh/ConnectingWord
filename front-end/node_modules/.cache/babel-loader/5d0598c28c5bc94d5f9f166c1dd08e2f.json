{"ast":null,"code":"import { Type } from '../schema';\nexport function getTypeInfo(arrowTypeLike) {\n  return {\n    typeId: arrowTypeLike.typeId,\n    ArrayType: arrowTypeLike.ArrayType,\n    typeName: arrowTypeLike.toString(),\n    typeEnumName: getTypeKey(arrowTypeLike.typeId),\n    precision: arrowTypeLike.precision\n  };\n}\nlet ReverseType = null;\n\nfunction getTypeKey(typeKey) {\n  if (!ReverseType) {\n    ReverseType = {};\n\n    for (const key in Type) {\n      ReverseType[Type[key]] = key;\n    }\n  }\n\n  return ReverseType[typeKey];\n}","map":{"version":3,"sources":["../../../../src/lib/schema-utils/get-type-info.ts"],"names":["typeId","arrowTypeLike","ArrayType","typeName","typeEnumName","getTypeKey","precision","ReverseType","Type"],"mappings":"AAAA,SAAA,IAAA,QAAA,WAAA;AAOA,OAAO,SAAA,WAAA,CAAA,aAAA,EAML;AACA,SAAO;AACLA,IAAAA,MAAM,EAAEC,aAAa,CADhB,MAAA;AAELC,IAAAA,SAAS,EAAED,aAAa,CAFnB,SAAA;AAGLE,IAAAA,QAAQ,EAAEF,aAAa,CAHlB,QAGKA,EAHL;AAILG,IAAAA,YAAY,EAAEC,UAAU,CAACJ,aAAa,CAJjC,MAImB,CAJnB;AAKLK,IAAAA,SAAS,EAAEL,aAAa,CAACK;AALpB,GAAP;AAOD;AAED,IAAIC,WAA2C,GAA/C,IAAA;;AAEA,SAAA,UAAA,CAAA,OAAA,EAA6B;AAC3B,MAAI,CAAJ,WAAA,EAAkB;AAChBA,IAAAA,WAAW,GAAXA,EAAAA;;AACA,SAAK,MAAL,GAAA,IAAA,IAAA,EAAwB;AACtBA,MAAAA,WAAW,CAACC,IAAI,CAAhBD,GAAgB,CAAL,CAAXA,GAAAA,GAAAA;AACD;AACF;;AAED,SAAOA,WAAW,CAAlB,OAAkB,CAAlB;AACD","sourcesContent":["import {Type} from '../schema';\nimport {AnyArray} from '../../types';\n\n/**\n * Gets type information from an Arrow type object or \"mock\" Arrow type object\n * @param arrowTypeLike Arrow Type or type object of similar shape\n */\nexport function getTypeInfo(arrowTypeLike: any): {\n  typeId: Type;\n  ArrayType: AnyArray;\n  typeName: string;\n  typeEnumName?: string;\n  precision?: number;\n} {\n  return {\n    typeId: arrowTypeLike.typeId,\n    ArrayType: arrowTypeLike.ArrayType,\n    typeName: arrowTypeLike.toString(),\n    typeEnumName: getTypeKey(arrowTypeLike.typeId),\n    precision: arrowTypeLike.precision\n  };\n}\n\nlet ReverseType: {[key: string]: string} | null = null;\n\nfunction getTypeKey(typeKey) {\n  if (!ReverseType) {\n    ReverseType = {};\n    for (const key in Type) {\n      ReverseType[Type[key]] = key;\n    }\n  }\n\n  return ReverseType[typeKey];\n}\n"]},"metadata":{},"sourceType":"module"}