{"ast":null,"code":"import { assert } from '../env-utils/assert';\nconst workerURLCache = new Map();\nexport function getLoadableWorkerURL(props) {\n  assert(props.source && !props.url || !props.source && props.url);\n  let workerURL = workerURLCache.get(props.source || props.url);\n\n  if (!workerURL) {\n    if (props.url) {\n      workerURL = getLoadableWorkerURLFromURL(props.url);\n      workerURLCache.set(props.url, workerURL);\n    }\n\n    if (props.source) {\n      workerURL = getLoadableWorkerURLFromSource(props.source);\n      workerURLCache.set(props.source, workerURL);\n    }\n  }\n\n  assert(workerURL);\n  return workerURL;\n}\n\nfunction getLoadableWorkerURLFromURL(url) {\n  if (!url.startsWith('http')) {\n    return url;\n  }\n\n  const workerSource = buildScriptSource(url);\n  return getLoadableWorkerURLFromSource(workerSource);\n}\n\nfunction getLoadableWorkerURLFromSource(workerSource) {\n  const blob = new Blob([workerSource], {\n    type: 'application/javascript'\n  });\n  return URL.createObjectURL(blob);\n}\n\nfunction buildScriptSource(workerUrl) {\n  return \"try {\\n  importScripts('\".concat(workerUrl, \"');\\n} catch (error) {\\n  console.error(error);\\n  throw error;\\n}\");\n}","map":{"version":3,"sources":["../../../../src/lib/worker-utils/get-loadable-worker-url.ts"],"names":["workerURLCache","assert","props","workerURL","getLoadableWorkerURLFromURL","getLoadableWorkerURLFromSource","url","workerSource","buildScriptSource","blob","type","URL"],"mappings":"AAAA,SAAA,MAAA,QAAA,qBAAA;AAEA,MAAMA,cAAc,GAAG,IAAvB,GAAuB,EAAvB;AAWA,OAAO,SAAA,oBAAA,CAAA,KAAA,EAAsE;AAC3EC,EAAAA,MAAM,CAAEC,KAAK,CAALA,MAAAA,IAAgB,CAACA,KAAK,CAAvB,GAACA,IAAgC,CAACA,KAAK,CAAN,MAAA,IAAiBA,KAAK,CAA9DD,GAAM,CAANA;AAEA,MAAIE,SAAS,GAAGH,cAAc,CAAdA,GAAAA,CAAmBE,KAAK,CAALA,MAAAA,IAAgBA,KAAK,CAAxD,GAAgBF,CAAhB;;AACA,MAAI,CAAJ,SAAA,EAAgB;AAEd,QAAIE,KAAK,CAAT,GAAA,EAAe;AACbC,MAAAA,SAAS,GAAGC,2BAA2B,CAACF,KAAK,CAA7CC,GAAuC,CAAvCA;AACAH,MAAAA,cAAc,CAAdA,GAAAA,CAAmBE,KAAK,CAAxBF,GAAAA,EAAAA,SAAAA;AACD;;AAED,QAAIE,KAAK,CAAT,MAAA,EAAkB;AAChBC,MAAAA,SAAS,GAAGE,8BAA8B,CAACH,KAAK,CAAhDC,MAA0C,CAA1CA;AACAH,MAAAA,cAAc,CAAdA,GAAAA,CAAmBE,KAAK,CAAxBF,MAAAA,EAAAA,SAAAA;AACD;AACF;;AAEDC,EAAAA,MAAM,CAANA,SAAM,CAANA;AACA,SAAA,SAAA;AACD;;AAOD,SAAA,2BAAA,CAAA,GAAA,EAA0D;AAExD,MAAI,CAACK,GAAG,CAAHA,UAAAA,CAAL,MAAKA,CAAL,EAA6B;AAC3B,WAAA,GAAA;AACD;;AAGD,QAAMC,YAAY,GAAGC,iBAAiB,CAAtC,GAAsC,CAAtC;AACA,SAAOH,8BAA8B,CAArC,YAAqC,CAArC;AACD;;AAOD,SAAA,8BAAA,CAAA,YAAA,EAAsE;AAGpE,QAAMI,IAAI,GAAG,IAAA,IAAA,CAAS,CAAT,YAAS,CAAT,EAAyB;AAACC,IAAAA,IAAI,EAAE;AAAP,GAAzB,CAAb;AACA,SAAOC,GAAG,CAAHA,eAAAA,CAAP,IAAOA,CAAP;AACD;;AAUD,SAAA,iBAAA,CAAA,SAAA,EAAsD;AACpD,SAAA,2BAAA,MAAA,CAAA,SAAA,EAAA,oEAAA,CAAA;AAOD","sourcesContent":["import {assert} from '../env-utils/assert';\n\nconst workerURLCache = new Map();\n\n/**\n * Creates a loadable URL from worker source or URL\n * that can be used to create `Worker` instances.\n * Due to CORS issues it may be necessary to wrap a URL in a small importScripts\n * @param props\n * @param props.source Worker source\n * @param props.url Worker URL\n * @returns loadable url\n */\nexport function getLoadableWorkerURL(props: {source?: string; url?: string}) {\n  assert((props.source && !props.url) || (!props.source && props.url)); // Either source or url must be defined\n\n  let workerURL = workerURLCache.get(props.source || props.url);\n  if (!workerURL) {\n    // Differentiate worker urls from worker source code\n    if (props.url) {\n      workerURL = getLoadableWorkerURLFromURL(props.url);\n      workerURLCache.set(props.url, workerURL);\n    }\n\n    if (props.source) {\n      workerURL = getLoadableWorkerURLFromSource(props.source);\n      workerURLCache.set(props.source, workerURL);\n    }\n  }\n\n  assert(workerURL);\n  return workerURL;\n}\n\n/**\n * Build a loadable worker URL from worker URL\n * @param url\n * @returns loadable URL\n */\nfunction getLoadableWorkerURLFromURL(url: string): string {\n  // A local script url, we can use it to initialize a Worker directly\n  if (!url.startsWith('http')) {\n    return url;\n  }\n\n  // A remote script, we need to use `importScripts` to load from different origin\n  const workerSource = buildScriptSource(url);\n  return getLoadableWorkerURLFromSource(workerSource);\n}\n\n/**\n * Build a loadable worker URL from worker source\n * @param workerSource\n * @returns loadable url\n */\nfunction getLoadableWorkerURLFromSource(workerSource: string): string {\n  // NOTE: webworkify was previously used\n  // const blob = webworkify(workerSource, {bare: true});\n  const blob = new Blob([workerSource], {type: 'application/javascript'});\n  return URL.createObjectURL(blob);\n}\n\n/**\n * Per spec, worker cannot be initialized with a script from a different origin\n * However a local worker script can still import scripts from other origins,\n * so we simply build a wrapper script.\n *\n * @param workerUrl\n * @returns source\n */\nfunction buildScriptSource(workerUrl: string): string {\n  return `\\\ntry {\n  importScripts('${workerUrl}');\n} catch (error) {\n  console.error(error);\n  throw error;\n}`;\n}\n"]},"metadata":{},"sourceType":"module"}