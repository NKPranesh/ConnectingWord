{"ast":null,"code":"import { clamp } from 'math.gl';\nimport Controller from './controller';\nimport { MapState } from './map-controller';\nimport { mod } from '../utils/math-utils';\n\nclass GlobeState extends MapState {\n  _applyConstraints(props) {\n    const {\n      maxZoom,\n      minZoom,\n      zoom\n    } = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n    const {\n      longitude,\n      latitude\n    } = props;\n\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n\n    props.latitude = clamp(latitude, -89, 89);\n    return props;\n  }\n\n}\n\nexport default class GlobeController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(GlobeState, props);\n  }\n\n  setProps(props) {\n    super.setProps(props);\n    this.dragRotate = false;\n    this.touchRotate = false;\n  }\n\n  get linearTransitionProps() {\n    return ['longitude', 'latitude', 'zoom'];\n  }\n\n}","map":{"version":3,"sources":["../../../src/controllers/globe-controller.js"],"names":["_applyConstraints","zoom","props","clamp","latitude","longitude","mod","constructor","setProps","linearTransitionProps"],"mappings":"AAAA,SAAA,KAAA,QAAA,SAAA;AACA,OAAA,UAAA,MAAA,cAAA;AAEA,SAAA,QAAA,QAAA,kBAAA;AACA,SAAA,GAAA,QAAA,qBAAA;;AAEA,MAAA,UAAA,SAAA,QAAA,CAAkC;AAEhCA,EAAAA,iBAAiB,CAAA,KAAA,EAAQ;AAEvB,UAAM;AAAA,MAAA,OAAA;AAAA,MAAA,OAAA;AAAmBC,MAAAA;AAAnB,QAAN,KAAA;AACAC,IAAAA,KAAK,CAALA,IAAAA,GAAaC,KAAK,CAAA,IAAA,EAAA,OAAA,EAAlBD,OAAkB,CAAlBA;AAEA,UAAM;AAAA,MAAA,SAAA;AAAYE,MAAAA;AAAZ,QAAN,KAAA;;AACA,QAAIC,SAAS,GAAG,CAAZA,GAAAA,IAAoBA,SAAS,GAAjC,GAAA,EAAyC;AACvCH,MAAAA,KAAK,CAALA,SAAAA,GAAkBI,GAAG,CAACD,SAAS,GAAV,GAAA,EAAHC,GAAG,CAAHA,GAAlBJ,GAAAA;AACD;;AACDA,IAAAA,KAAK,CAALA,QAAAA,GAAiBC,KAAK,CAAA,QAAA,EAAW,CAAX,EAAA,EAAtBD,EAAsB,CAAtBA;AAEA,WAAA,KAAA;AACD;;AAd+B;;AAiBlC,eAAe,MAAA,eAAA,SAAA,UAAA,CAAyC;AACtDK,EAAAA,WAAW,CAAA,KAAA,EAAQ;AACjBL,IAAAA,KAAK,CAALA,QAAAA,GAAiBA,KAAK,CAALA,QAAAA,IAAjBA,KAAAA;AACA,UAAA,UAAA,EAAA,KAAA;AACD;;AAEDM,EAAAA,QAAQ,CAAA,KAAA,EAAQ;AACd,UAAA,QAAA,CAAA,KAAA;AAGA,SAAA,UAAA,GAAA,KAAA;AACA,SAAA,WAAA,GAAA,KAAA;AACD;;AAED,MAAIC,qBAAJ,GAA4B;AAC1B,WAAO,CAAA,WAAA,EAAA,UAAA,EAAP,MAAO,CAAP;AACD;;AAhBqD","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\n\nimport {MapState} from './map-controller';\nimport {mod} from '../utils/math-utils';\n\nclass GlobeState extends MapState {\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    const {longitude, latitude} = props;\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n    props.latitude = clamp(latitude, -89, 89);\n\n    return props;\n  }\n}\n\nexport default class GlobeController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(GlobeState, props);\n  }\n\n  setProps(props) {\n    super.setProps(props);\n\n    // TODO - support pitching?\n    this.dragRotate = false;\n    this.touchRotate = false;\n  }\n\n  get linearTransitionProps() {\n    return ['longitude', 'latitude', 'zoom'];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}