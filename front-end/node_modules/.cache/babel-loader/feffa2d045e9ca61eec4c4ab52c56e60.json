{"ast":null,"code":"let pathPrefix = '';\nconst fileAliases = {};\nexport function setPathPrefix(prefix) {\n  pathPrefix = prefix;\n}\nexport function getPathPrefix() {\n  return pathPrefix;\n}\nexport function addAliases(aliases) {\n  Object.assign(fileAliases, aliases);\n}\nexport function resolvePath(filename) {\n  for (const alias in fileAliases) {\n    if (filename.startsWith(alias)) {\n      const replacement = fileAliases[alias];\n      filename = filename.replace(alias, replacement);\n    }\n  }\n\n  if (!filename.startsWith('http://') && !filename.startsWith('https://')) {\n    filename = \"\".concat(pathPrefix).concat(filename);\n  }\n\n  return filename;\n}","map":{"version":3,"sources":["../../../../src/lib/path-utils/file-aliases.ts"],"names":["pathPrefix","fileAliases","Object","filename","replacement"],"mappings":"AAEA,IAAIA,UAAU,GAAd,EAAA;AACA,MAAMC,WAA0C,GAAhD,EAAA;AAKA,OAAO,SAAA,aAAA,CAAA,MAAA,EAA6C;AAClDD,EAAAA,UAAU,GAAVA,MAAAA;AACD;AAKD,OAAO,SAAA,aAAA,GAAiC;AACtC,SAAA,UAAA;AACD;AASD,OAAO,SAAA,UAAA,CAAA,OAAA,EAAkE;AACvEE,EAAAA,MAAM,CAANA,MAAAA,CAAAA,WAAAA,EAAAA,OAAAA;AACD;AAKD,OAAO,SAAA,WAAA,CAAA,QAAA,EAA+C;AACpD,OAAK,MAAL,KAAA,IAAA,WAAA,EAAiC;AAC/B,QAAIC,QAAQ,CAARA,UAAAA,CAAJ,KAAIA,CAAJ,EAAgC;AAC9B,YAAMC,WAAW,GAAGH,WAAW,CAA/B,KAA+B,CAA/B;AACAE,MAAAA,QAAQ,GAAGA,QAAQ,CAARA,OAAAA,CAAAA,KAAAA,EAAXA,WAAWA,CAAXA;AACD;AACF;;AACD,MAAI,CAACA,QAAQ,CAARA,UAAAA,CAAD,SAACA,CAAD,IAAmC,CAACA,QAAQ,CAARA,UAAAA,CAAxC,UAAwCA,CAAxC,EAAyE;AACvEA,IAAAA,QAAQ,GAAA,GAAA,MAAA,CAAA,UAAA,EAAA,MAAA,CAARA,QAAQ,CAARA;AACD;;AACD,SAAA,QAAA;AACD","sourcesContent":["// Simple file alias mechanisms for tests.\n\nlet pathPrefix = '';\nconst fileAliases: {[aliasPath: string]: string} = {};\n\n/*\n * Set a relative path prefix\n */\nexport function setPathPrefix(prefix: string): void {\n  pathPrefix = prefix;\n}\n\n/*\n * Get the relative path prefix\n */\nexport function getPathPrefix(): string {\n  return pathPrefix;\n}\n\n/**\n *\n * @param aliases\n *\n * Note: addAliases are an experimental export, they are only for testing of loaders.gl loaders\n * not intended as a generic aliasing mechanism\n */\nexport function addAliases(aliases: {[aliasPath: string]: string}): void {\n  Object.assign(fileAliases, aliases);\n}\n\n/**\n * Resolves aliases and adds path-prefix to paths\n */\nexport function resolvePath(filename: string): string {\n  for (const alias in fileAliases) {\n    if (filename.startsWith(alias)) {\n      const replacement = fileAliases[alias];\n      filename = filename.replace(alias, replacement);\n    }\n  }\n  if (!filename.startsWith('http://') && !filename.startsWith('https://')) {\n    filename = `${pathPrefix}${filename}`;\n  }\n  return filename;\n}\n"]},"metadata":{},"sourceType":"module"}