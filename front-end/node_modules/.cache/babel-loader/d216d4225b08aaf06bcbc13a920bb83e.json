{"ast":null,"code":"import { global } from '@loaders.gl/loader-utils';\nimport { isPureObject, isObject } from '../../javascript-utils/is-type';\nimport { fetchFile } from '../fetch/fetch-file';\nimport { probeLog, NullLog } from './loggers';\nimport { DEFAULT_LOADER_OPTIONS, REMOVED_LOADER_OPTIONS } from './option-defaults';\nexport function getGlobalLoaderState() {\n  global.loaders = global.loaders || {};\n  const {\n    loaders\n  } = global;\n  loaders._state = loaders._state || {};\n  return loaders._state;\n}\n\nconst getGlobalLoaderOptions = () => {\n  const state = getGlobalLoaderState();\n  state.globalOptions = state.globalOptions || { ...DEFAULT_LOADER_OPTIONS\n  };\n  return state.globalOptions;\n};\n\nexport function setGlobalOptions(options) {\n  const state = getGlobalLoaderState();\n  const globalOptions = getGlobalLoaderOptions();\n  state.globalOptions = normalizeOptionsInternal(globalOptions, options);\n}\nexport function normalizeOptions(options, loader, loaders, url) {\n  loaders = loaders || [];\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n  validateOptions(options, loaders);\n  return normalizeOptionsInternal(loader, options, url);\n}\nexport function getFetchFunction(options, context) {\n  const globalOptions = getGlobalLoaderOptions();\n  const fetchOptions = options || globalOptions;\n\n  if (typeof fetchOptions.fetch === 'function') {\n    return fetchOptions.fetch;\n  }\n\n  if (isObject(fetchOptions.fetch)) {\n    return url => fetchFile(url, fetchOptions);\n  }\n\n  if (context !== null && context !== void 0 && context.fetch) {\n    return context === null || context === void 0 ? void 0 : context.fetch;\n  }\n\n  return fetchFile;\n}\n\nfunction validateOptions(options, loaders) {\n  validateOptionsObject(options, null, DEFAULT_LOADER_OPTIONS, REMOVED_LOADER_OPTIONS, loaders);\n\n  for (const loader of loaders) {\n    const idOptions = options && options[loader.id] || {};\n    const loaderOptions = loader.options && loader.options[loader.id] || {};\n    const deprecatedOptions = loader.deprecatedOptions && loader.deprecatedOptions[loader.id] || {};\n    validateOptionsObject(idOptions, loader.id, loaderOptions, deprecatedOptions, loaders);\n  }\n}\n\nfunction validateOptionsObject(options, id, defaultOptions, deprecatedOptions, loaders) {\n  const loaderName = id || 'Top level';\n  const prefix = id ? \"\".concat(id, \".\") : '';\n\n  for (const key in options) {\n    const isSubOptions = !id && isObject(options[key]);\n    const isBaseUriOption = key === 'baseUri' && !id;\n    const isWorkerUrlOption = key === 'workerUrl' && id;\n\n    if (!(key in defaultOptions) && !isBaseUriOption && !isWorkerUrlOption) {\n      if (key in deprecatedOptions) {\n        probeLog.warn(\"\".concat(loaderName, \" loader option '\").concat(prefix).concat(key, \"' no longer supported, use '\").concat(deprecatedOptions[key], \"'\"))();\n      } else if (!isSubOptions) {\n        const suggestion = findSimilarOption(key, loaders);\n        probeLog.warn(\"\".concat(loaderName, \" loader option '\").concat(prefix).concat(key, \"' not recognized. \").concat(suggestion))();\n      }\n    }\n  }\n}\n\nfunction findSimilarOption(optionKey, loaders) {\n  const lowerCaseOptionKey = optionKey.toLowerCase();\n  let bestSuggestion = '';\n\n  for (const loader of loaders) {\n    for (const key in loader.options) {\n      if (optionKey === key) {\n        return \"Did you mean '\".concat(loader.id, \".\").concat(key, \"'?\");\n      }\n\n      const lowerCaseKey = key.toLowerCase();\n      const isPartialMatch = lowerCaseOptionKey.startsWith(lowerCaseKey) || lowerCaseKey.startsWith(lowerCaseOptionKey);\n\n      if (isPartialMatch) {\n        bestSuggestion = bestSuggestion || \"Did you mean '\".concat(loader.id, \".\").concat(key, \"'?\");\n      }\n    }\n  }\n\n  return bestSuggestion;\n}\n\nfunction normalizeOptionsInternal(loader, options, url) {\n  const loaderDefaultOptions = loader.options || {};\n  const mergedOptions = { ...loaderDefaultOptions\n  };\n  addUrlOptions(mergedOptions, url);\n\n  if (mergedOptions.log === null) {\n    mergedOptions.log = new NullLog();\n  }\n\n  mergeNestedFields(mergedOptions, getGlobalLoaderOptions());\n  mergeNestedFields(mergedOptions, options);\n  return mergedOptions;\n}\n\nfunction mergeNestedFields(mergedOptions, options) {\n  for (const key in options) {\n    if (key in options) {\n      const value = options[key];\n\n      if (isPureObject(value) && isPureObject(mergedOptions[key])) {\n        mergedOptions[key] = { ...mergedOptions[key],\n          ...options[key]\n        };\n      } else {\n        mergedOptions[key] = options[key];\n      }\n    }\n  }\n}\n\nfunction addUrlOptions(options, url) {\n  if (url && !('baseUri' in options)) {\n    options.baseUri = url;\n  }\n}","map":{"version":3,"sources":["../../../../src/lib/loader-utils/option-utils.ts"],"names":["global","loaders","getGlobalLoaderOptions","state","getGlobalLoaderState","DEFAULT_LOADER_OPTIONS","globalOptions","normalizeOptionsInternal","Array","validateOptions","fetchOptions","options","isObject","url","fetchFile","context","validateOptionsObject","idOptions","loader","loaderOptions","deprecatedOptions","loaderName","id","prefix","isSubOptions","isBaseUriOption","key","isWorkerUrlOption","probeLog","suggestion","findSimilarOption","lowerCaseOptionKey","optionKey","bestSuggestion","lowerCaseKey","isPartialMatch","loaderDefaultOptions","mergedOptions","addUrlOptions","mergeNestedFields","value","isPureObject"],"mappings":"AACA,SAAA,MAAA,QAAA,0BAAA;AACA,SAAA,YAAA,EAAA,QAAA,QAAA,gCAAA;AACA,SAAA,SAAA,QAAA,qBAAA;AACA,SAAA,QAAA,EAAA,OAAA,QAAA,WAAA;AACA,SAAA,sBAAA,EAAA,sBAAA,QAAA,mBAAA;AAaA,OAAO,SAAA,oBAAA,GAAmD;AAExDA,EAAAA,MAAM,CAANA,OAAAA,GAAiBA,MAAM,CAANA,OAAAA,IAAjBA,EAAAA;AAEA,QAAM;AAACC,IAAAA;AAAD,MAAN,MAAA;AAGAA,EAAAA,OAAO,CAAPA,MAAAA,GAAiBA,OAAO,CAAPA,MAAAA,IAAjBA,EAAAA;AACA,SAAOA,OAAO,CAAd,MAAA;AACD;;AAID,MAAMC,sBAAsB,GAAG,MAAM;AACnC,QAAMC,KAAK,GAAGC,oBAAd,EAAA;AAEAD,EAAAA,KAAK,CAALA,aAAAA,GAAsBA,KAAK,CAALA,aAAAA,IAAuB,EAAC,GAAGE;AAAJ,GAA7CF;AACA,SAAOA,KAAK,CAAZ,aAAA;AAJF,CAAA;;AAWA,OAAO,SAAA,gBAAA,CAAA,OAAA,EAAiD;AACtD,QAAMA,KAAK,GAAGC,oBAAd,EAAA;AACA,QAAME,aAAa,GAAGJ,sBAAtB,EAAA;AACAC,EAAAA,KAAK,CAALA,aAAAA,GAAsBI,wBAAwB,CAAA,aAAA,EAA9CJ,OAA8C,CAA9CA;AACD;AASD,OAAO,SAAA,gBAAA,CAAA,OAAA,EAAA,MAAA,EAAA,OAAA,EAAA,GAAA,EAKG;AACRF,EAAAA,OAAO,GAAGA,OAAO,IAAjBA,EAAAA;AACAA,EAAAA,OAAO,GAAGO,KAAK,CAALA,OAAAA,CAAAA,OAAAA,IAAAA,OAAAA,GAAmC,CAA7CP,OAA6C,CAA7CA;AAEAQ,EAAAA,eAAe,CAAA,OAAA,EAAfA,OAAe,CAAfA;AACA,SAAOF,wBAAwB,CAAA,MAAA,EAAA,OAAA,EAA/B,GAA+B,CAA/B;AACD;AAOD,OAAO,SAAA,gBAAA,CAAA,OAAA,EAAA,OAAA,EAGL;AACA,QAAMD,aAAa,GAAGJ,sBAAtB,EAAA;AAEA,QAAMQ,YAAY,GAAGC,OAAO,IAA5B,aAAA;;AAGA,MAAI,OAAOD,YAAY,CAAnB,KAAA,KAAJ,UAAA,EAA8C;AAC5C,WAAOA,YAAY,CAAnB,KAAA;AACD;;AAGD,MAAIE,QAAQ,CAACF,YAAY,CAAzB,KAAY,CAAZ,EAAkC;AAChC,WAAQG,GAAD,IAASC,SAAS,CAAA,GAAA,EAAzB,YAAyB,CAAzB;AACD;;AAGD,MAAIC,OAAJ,KAAA,IAAIA,IAAAA,OAAJ,KAAA,KAAA,CAAIA,IAAAA,OAAO,CAAX,KAAA,EAAoB;AAClB,WAAOA,OAAP,KAAA,IAAOA,IAAAA,OAAP,KAAA,KAAA,CAAOA,GAAP,KAAA,CAAOA,GAAAA,OAAO,CAAd,KAAA;AACD;;AAGD,SAAA,SAAA;AACD;;AASD,SAAA,eAAA,CAAA,OAAA,EAAA,OAAA,EAAoE;AAElEC,EAAAA,qBAAqB,CAAA,OAAA,EAAA,IAAA,EAAA,sBAAA,EAAA,sBAAA,EAArBA,OAAqB,CAArBA;;AACA,OAAK,MAAL,MAAA,IAAA,OAAA,EAA8B;AAE5B,UAAMC,SAAS,GAAIN,OAAO,IAAIA,OAAO,CAACO,MAAM,CAA1B,EAAmB,CAAlBP,IAAnB,EAAA;AAGA,UAAMQ,aAAa,GAAID,MAAM,CAANA,OAAAA,IAAkBA,MAAM,CAANA,OAAAA,CAAeA,MAAM,CAAxC,EAAmBA,CAAlBA,IAAvB,EAAA;AACA,UAAME,iBAAiB,GACpBF,MAAM,CAANA,iBAAAA,IAA4BA,MAAM,CAANA,iBAAAA,CAAyBA,MAAM,CAA5D,EAA6BA,CAA5BA,IADH,EAAA;AAIAF,IAAAA,qBAAqB,CAAA,SAAA,EAAYE,MAAM,CAAlB,EAAA,EAAA,aAAA,EAAA,iBAAA,EAArBF,OAAqB,CAArBA;AACD;AACF;;AAGD,SAAA,qBAAA,CAAA,OAAA,EAAA,EAAA,EAAA,cAAA,EAAA,iBAAA,EAAA,OAAA,EAME;AACA,QAAMK,UAAU,GAAGC,EAAE,IAArB,WAAA;AACA,QAAMC,MAAM,GAAGD,EAAE,GAAA,GAAA,MAAA,CAAA,EAAA,EAAA,GAAA,CAAA,GAAjB,EAAA;;AAEA,OAAK,MAAL,GAAA,IAAA,OAAA,EAA2B;AAEzB,UAAME,YAAY,GAAG,CAAA,EAAA,IAAOZ,QAAQ,CAACD,OAAO,CAA5C,GAA4C,CAAR,CAApC;AACA,UAAMc,eAAe,GAAGC,GAAG,KAAHA,SAAAA,IAAqB,CAA7C,EAAA;AACA,UAAMC,iBAAiB,GAAGD,GAAG,KAAHA,WAAAA,IAA1B,EAAA;;AAEA,QAAI,EAAEA,GAAG,IAAL,cAAA,KAA4B,CAA5B,eAAA,IAAgD,CAApD,iBAAA,EAAwE;AAEtE,UAAIA,GAAG,IAAP,iBAAA,EAA8B;AAC5BE,QAAAA,QAAQ,CAARA,IAAAA,CAAAA,GAAAA,MAAAA,CAAAA,UAAAA,EAAAA,kBAAAA,EAAAA,MAAAA,CAAAA,MAAAA,EAAAA,MAAAA,CAAAA,GAAAA,EAAAA,8BAAAA,EAAAA,MAAAA,CACgFR,iBAAiB,CADjGQ,GACiG,CADjGA,EAAAA,GAAAA,CAAAA;AADF,OAAA,MAIO,IAAI,CAAJ,YAAA,EAAmB;AACxB,cAAMC,UAAU,GAAGC,iBAAiB,CAAA,GAAA,EAApC,OAAoC,CAApC;AACAF,QAAAA,QAAQ,CAARA,IAAAA,CAAAA,GAAAA,MAAAA,CAAAA,UAAAA,EAAAA,kBAAAA,EAAAA,MAAAA,CAAAA,MAAAA,EAAAA,MAAAA,CAAAA,GAAAA,EAAAA,oBAAAA,EAAAA,MAAAA,CAAAA,UAAAA,CAAAA;AAGD;AACF;AACF;AACF;;AAED,SAAA,iBAAA,CAAA,SAAA,EAAA,OAAA,EAA+C;AAC7C,QAAMG,kBAAkB,GAAGC,SAAS,CAApC,WAA2BA,EAA3B;AACA,MAAIC,cAAc,GAAlB,EAAA;;AACA,OAAK,MAAL,MAAA,IAAA,OAAA,EAA8B;AAC5B,SAAK,MAAL,GAAA,IAAkBf,MAAM,CAAxB,OAAA,EAAkC;AAChC,UAAIc,SAAS,KAAb,GAAA,EAAuB;AACrB,eAAA,iBAAA,MAAA,CAAyBd,MAAM,CAA/B,EAAA,EAAA,GAAA,EAAA,MAAA,CAAA,GAAA,EAAA,IAAA,CAAA;AACD;;AACD,YAAMgB,YAAY,GAAGR,GAAG,CAAxB,WAAqBA,EAArB;AACA,YAAMS,cAAc,GAClBJ,kBAAkB,CAAlBA,UAAAA,CAAAA,YAAAA,KAA+CG,YAAY,CAAZA,UAAAA,CADjD,kBACiDA,CADjD;;AAEA,UAAA,cAAA,EAAoB;AAClBD,QAAAA,cAAc,GAAGA,cAAc,IAAA,iBAAA,MAAA,CAAsBf,MAAM,CAA5B,EAAA,EAAA,GAAA,EAAA,MAAA,CAAA,GAAA,EAA/Be,IAA+B,CAA/BA;AACD;AACF;AACF;;AACD,SAAA,cAAA;AACD;;AAED,SAAA,wBAAA,CAAA,MAAA,EAAA,OAAA,EAAA,GAAA,EAAiE;AAC/D,QAAMG,oBAAoB,GAAGlB,MAAM,CAANA,OAAAA,IAA7B,EAAA;AAEA,QAAMmB,aAAa,GAAG,EAAC,GAAGD;AAAJ,GAAtB;AAEAE,EAAAA,aAAa,CAAA,aAAA,EAAbA,GAAa,CAAbA;;AAGA,MAAID,aAAa,CAAbA,GAAAA,KAAJ,IAAA,EAAgC;AAC9BA,IAAAA,aAAa,CAAbA,GAAAA,GAAoB,IAApBA,OAAoB,EAApBA;AACD;;AAEDE,EAAAA,iBAAiB,CAAA,aAAA,EAAgBrC,sBAAjCqC,EAAiB,CAAjBA;AACAA,EAAAA,iBAAiB,CAAA,aAAA,EAAjBA,OAAiB,CAAjBA;AAEA,SAAA,aAAA;AACD;;AAGD,SAAA,iBAAA,CAAA,aAAA,EAAA,OAAA,EAAmD;AACjD,OAAK,MAAL,GAAA,IAAA,OAAA,EAA2B;AAGzB,QAAIb,GAAG,IAAP,OAAA,EAAoB;AAClB,YAAMc,KAAK,GAAG7B,OAAO,CAArB,GAAqB,CAArB;;AACA,UAAI8B,YAAY,CAAZA,KAAY,CAAZA,IAAuBA,YAAY,CAACJ,aAAa,CAArD,GAAqD,CAAd,CAAvC,EAA6D;AAC3DA,QAAAA,aAAa,CAAbA,GAAa,CAAbA,GAAqB,EACnB,GAAGA,aAAa,CADG,GACH,CADG;AAEnB,aAAG1B,OAAO,CAAA,GAAA;AAFS,SAArB0B;AADF,OAAA,MAKO;AACLA,QAAAA,aAAa,CAAbA,GAAa,CAAbA,GAAqB1B,OAAO,CAA5B0B,GAA4B,CAA5BA;AACD;AACF;AAEF;AACF;;AAOD,SAAA,aAAA,CAAA,OAAA,EAAA,GAAA,EAA8C;AAC5C,MAAIxB,GAAG,IAAI,EAAE,aAAb,OAAW,CAAX,EAAoC;AAClCF,IAAAA,OAAO,CAAPA,OAAAA,GAAAA,GAAAA;AACD;AACF","sourcesContent":["import type {Loader, LoaderContext, LoaderOptions} from '@loaders.gl/loader-utils';\nimport {global} from '@loaders.gl/loader-utils';\nimport {isPureObject, isObject} from '../../javascript-utils/is-type';\nimport {fetchFile} from '../fetch/fetch-file';\nimport {probeLog, NullLog} from './loggers';\nimport {DEFAULT_LOADER_OPTIONS, REMOVED_LOADER_OPTIONS} from './option-defaults';\n/**\n * Global state for loaders.gl. Stored on `global.loaders._state`\n */\ntype GlobalLoaderState = {\n  loaderRegistry: Loader[];\n  globalOptions: {[key: string]: any};\n};\n\n/**\n * Helper for safely accessing global loaders.gl variables\n * Wraps initialization of global variable in function to defeat overly aggressive tree-shakers\n */\nexport function getGlobalLoaderState(): GlobalLoaderState {\n  // @ts-ignore\n  global.loaders = global.loaders || {};\n  // @ts-ignore\n  const {loaders} = global;\n\n  // Add _state object to keep separate from modules added to global.loaders\n  loaders._state = loaders._state || {};\n  return loaders._state;\n}\n\n// Store global loader options on the global object to increase chances of cross loaders-version interoperability\n// NOTE: This use case is not reliable but can help when testing new versions of loaders.gl with existing frameworks\nconst getGlobalLoaderOptions = () => {\n  const state = getGlobalLoaderState();\n  // Ensure all default loader options from this library are mentioned\n  state.globalOptions = state.globalOptions || {...DEFAULT_LOADER_OPTIONS};\n  return state.globalOptions;\n};\n\n/**\n * Set global loader options\n * @param options\n */\nexport function setGlobalOptions(options: object): void {\n  const state = getGlobalLoaderState();\n  const globalOptions = getGlobalLoaderOptions();\n  state.globalOptions = normalizeOptionsInternal(globalOptions, options);\n}\n\n/**\n * Merges options with global opts and loader defaults, also injects baseUri\n * @param options\n * @param loader\n * @param loaders\n * @param url\n */\nexport function normalizeOptions(\n  options: object,\n  loader: Loader,\n  loaders?: Loader[],\n  url?: string\n): object {\n  loaders = loaders || [];\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n\n  validateOptions(options, loaders);\n  return normalizeOptionsInternal(loader, options, url);\n}\n\n/**\n * Gets the current fetch function from options and context\n * @param options\n * @param context\n */\nexport function getFetchFunction(\n  options?: LoaderOptions,\n  context?: Omit<LoaderContext, 'fetch'> & Partial<Pick<LoaderContext, 'fetch'>>\n) {\n  const globalOptions = getGlobalLoaderOptions();\n\n  const fetchOptions = options || globalOptions;\n\n  // options.fetch can be a function\n  if (typeof fetchOptions.fetch === 'function') {\n    return fetchOptions.fetch;\n  }\n\n  // options.fetch can be an options object\n  if (isObject(fetchOptions.fetch)) {\n    return (url) => fetchFile(url, fetchOptions);\n  }\n\n  // else refer to context (from parent loader) if available\n  if (context?.fetch) {\n    return context?.fetch;\n  }\n\n  // else return the default fetch function\n  return fetchFile;\n}\n\n// VALIDATE OPTIONS\n\n/**\n * Warn for unsupported options\n * @param options\n * @param loaders\n */\nfunction validateOptions(options: LoaderOptions, loaders: Loader[]) {\n  // Check top level options\n  validateOptionsObject(options, null, DEFAULT_LOADER_OPTIONS, REMOVED_LOADER_OPTIONS, loaders);\n  for (const loader of loaders) {\n    // Get the scoped, loader specific options from the user supplied options\n    const idOptions = (options && options[loader.id]) || {};\n\n    // Get scoped, loader specific default and deprecated options from the selected loader\n    const loaderOptions = (loader.options && loader.options[loader.id]) || {};\n    const deprecatedOptions =\n      (loader.deprecatedOptions && loader.deprecatedOptions[loader.id]) || {};\n\n    // Validate loader specific options\n    validateOptionsObject(idOptions, loader.id, loaderOptions, deprecatedOptions, loaders);\n  }\n}\n\n// eslint-disable-next-line max-params, complexity\nfunction validateOptionsObject(\n  options,\n  id: string | null,\n  defaultOptions,\n  deprecatedOptions,\n  loaders: Loader[]\n) {\n  const loaderName = id || 'Top level';\n  const prefix = id ? `${id}.` : '';\n\n  for (const key in options) {\n    // If top level option value is an object it could options for a loader, so ignore\n    const isSubOptions = !id && isObject(options[key]);\n    const isBaseUriOption = key === 'baseUri' && !id;\n    const isWorkerUrlOption = key === 'workerUrl' && id;\n    // <loader>.workerUrl requires special handling as it is now auto-generated and no longer specified as a default option.\n    if (!(key in defaultOptions) && !isBaseUriOption && !isWorkerUrlOption) {\n      // Issue deprecation warnings\n      if (key in deprecatedOptions) {\n        probeLog.warn(\n          `${loaderName} loader option \\'${prefix}${key}\\' no longer supported, use \\'${deprecatedOptions[key]}\\'`\n        )();\n      } else if (!isSubOptions) {\n        const suggestion = findSimilarOption(key, loaders);\n        probeLog.warn(\n          `${loaderName} loader option \\'${prefix}${key}\\' not recognized. ${suggestion}`\n        )();\n      }\n    }\n  }\n}\n\nfunction findSimilarOption(optionKey, loaders) {\n  const lowerCaseOptionKey = optionKey.toLowerCase();\n  let bestSuggestion = '';\n  for (const loader of loaders) {\n    for (const key in loader.options) {\n      if (optionKey === key) {\n        return `Did you mean \\'${loader.id}.${key}\\'?`;\n      }\n      const lowerCaseKey = key.toLowerCase();\n      const isPartialMatch =\n        lowerCaseOptionKey.startsWith(lowerCaseKey) || lowerCaseKey.startsWith(lowerCaseOptionKey);\n      if (isPartialMatch) {\n        bestSuggestion = bestSuggestion || `Did you mean \\'${loader.id}.${key}\\'?`;\n      }\n    }\n  }\n  return bestSuggestion;\n}\n\nfunction normalizeOptionsInternal(loader, options, url?: string) {\n  const loaderDefaultOptions = loader.options || {};\n\n  const mergedOptions = {...loaderDefaultOptions};\n\n  addUrlOptions(mergedOptions, url);\n\n  // LOGGING: options.log can be set to `null` to defeat logging\n  if (mergedOptions.log === null) {\n    mergedOptions.log = new NullLog();\n  }\n\n  mergeNestedFields(mergedOptions, getGlobalLoaderOptions());\n  mergeNestedFields(mergedOptions, options);\n\n  return mergedOptions;\n}\n\n// Merge nested options objects\nfunction mergeNestedFields(mergedOptions, options) {\n  for (const key in options) {\n    // Check for nested options\n    // object in options => either no key in defaultOptions or object in defaultOptions\n    if (key in options) {\n      const value = options[key];\n      if (isPureObject(value) && isPureObject(mergedOptions[key])) {\n        mergedOptions[key] = {\n          ...mergedOptions[key],\n          ...options[key]\n        };\n      } else {\n        mergedOptions[key] = options[key];\n      }\n    }\n    // else: No need to merge nested opts, and the initial merge already copied over the nested options\n  }\n}\n\n// Harvest information from the url\n// TODO - baseUri should be a directory, i.e. remove file component from baseUri\n// TODO - extract extension?\n// TODO - extract query parameters?\n// TODO - should these be injected on context instead of options?\nfunction addUrlOptions(options, url?: string) {\n  if (url && !('baseUri' in options)) {\n    options.baseUri = url;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}