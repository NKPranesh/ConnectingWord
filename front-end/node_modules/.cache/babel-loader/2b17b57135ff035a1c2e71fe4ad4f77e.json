{"ast":null,"code":"import { TILE3D_TYPE } from '../constants';\nimport { assert } from '@loaders.gl/loader-utils';\nimport { encodeComposite3DTile } from './encode-3d-tile-composite';\nimport { encodeBatchedModel3DTile } from './encode-3d-tile-batched-model';\nimport { encodeInstancedModel3DTile } from './encode-3d-tile-instanced-model';\nimport { encodePointCloud3DTile } from './encode-3d-tile-point-cloud';\nexport default function encode3DTile(tile, options) {\n  const byteLength = encode3DTileToDataView(tile, null, 0, options);\n  const arrayBuffer = new ArrayBuffer(byteLength);\n  const dataView = new DataView(arrayBuffer);\n  encode3DTileToDataView(tile, dataView, 0, options);\n  return arrayBuffer;\n}\n\nfunction encode3DTileToDataView(tile, dataView, byteOffset, options) {\n  assert(typeof tile.type === 'string');\n\n  switch (tile.type) {\n    case TILE3D_TYPE.COMPOSITE:\n      return encodeComposite3DTile(tile, dataView, byteOffset, options, encode3DTileToDataView);\n\n    case TILE3D_TYPE.POINT_CLOUD:\n      return encodePointCloud3DTile(tile, dataView, byteOffset, options);\n\n    case TILE3D_TYPE.BATCHED_3D_MODEL:\n      return encodeBatchedModel3DTile(tile, dataView, byteOffset, options);\n\n    case TILE3D_TYPE.INSTANCED_3D_MODEL:\n      return encodeInstancedModel3DTile(tile, dataView, byteOffset, options);\n\n    default:\n      throw new Error('3D Tiles: unknown tile type');\n  }\n}","map":{"version":3,"sources":["../../../../src/lib/encoders/encode-3d-tile.js"],"names":["byteLength","encode3DTileToDataView","arrayBuffer","dataView","assert","tile","TILE3D_TYPE","encodeComposite3DTile","encodePointCloud3DTile","encodeBatchedModel3DTile","encodeInstancedModel3DTile"],"mappings":"AAGA,SAAA,WAAA,QAAA,cAAA;AACA,SAAA,MAAA,QAAA,0BAAA;AAEA,SAAA,qBAAA,QAAA,4BAAA;AACA,SAAA,wBAAA,QAAA,gCAAA;AACA,SAAA,0BAAA,QAAA,kCAAA;AACA,SAAA,sBAAA,QAAA,8BAAA;AAEA,eAAe,SAAA,YAAA,CAAA,IAAA,EAAA,OAAA,EAAqC;AAClD,QAAMA,UAAU,GAAGC,sBAAsB,CAAA,IAAA,EAAA,IAAA,EAAA,CAAA,EAAzC,OAAyC,CAAzC;AACA,QAAMC,WAAW,GAAG,IAAA,WAAA,CAApB,UAAoB,CAApB;AACA,QAAMC,QAAQ,GAAG,IAAA,QAAA,CAAjB,WAAiB,CAAjB;AACAF,EAAAA,sBAAsB,CAAA,IAAA,EAAA,QAAA,EAAA,CAAA,EAAtBA,OAAsB,CAAtBA;AACA,SAAA,WAAA;AACD;;AAED,SAAA,sBAAA,CAAA,IAAA,EAAA,QAAA,EAAA,UAAA,EAAA,OAAA,EAAqE;AACnEG,EAAAA,MAAM,CAAC,OAAOC,IAAI,CAAX,IAAA,KAAPD,QAAM,CAANA;;AAEA,UAAQC,IAAI,CAAZ,IAAA;AACE,SAAKC,WAAW,CAAhB,SAAA;AACE,aAAOC,qBAAqB,CAAA,IAAA,EAAA,QAAA,EAAA,UAAA,EAAA,OAAA,EAA5B,sBAA4B,CAA5B;;AACF,SAAKD,WAAW,CAAhB,WAAA;AACE,aAAOE,sBAAsB,CAAA,IAAA,EAAA,QAAA,EAAA,UAAA,EAA7B,OAA6B,CAA7B;;AACF,SAAKF,WAAW,CAAhB,gBAAA;AACE,aAAOG,wBAAwB,CAAA,IAAA,EAAA,QAAA,EAAA,UAAA,EAA/B,OAA+B,CAA/B;;AACF,SAAKH,WAAW,CAAhB,kBAAA;AACE,aAAOI,0BAA0B,CAAA,IAAA,EAAA,QAAA,EAAA,UAAA,EAAjC,OAAiC,CAAjC;;AACF;AACE,YAAM,IAAA,KAAA,CAAN,6BAAM,CAAN;AAVJ;AAYD","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {TILE3D_TYPE} from '../constants';\nimport {assert} from '@loaders.gl/loader-utils';\n\nimport {encodeComposite3DTile} from './encode-3d-tile-composite';\nimport {encodeBatchedModel3DTile} from './encode-3d-tile-batched-model';\nimport {encodeInstancedModel3DTile} from './encode-3d-tile-instanced-model';\nimport {encodePointCloud3DTile} from './encode-3d-tile-point-cloud';\n\nexport default function encode3DTile(tile, options) {\n  const byteLength = encode3DTileToDataView(tile, null, 0, options);\n  const arrayBuffer = new ArrayBuffer(byteLength);\n  const dataView = new DataView(arrayBuffer);\n  encode3DTileToDataView(tile, dataView, 0, options);\n  return arrayBuffer;\n}\n\nfunction encode3DTileToDataView(tile, dataView, byteOffset, options) {\n  assert(typeof tile.type === 'string');\n\n  switch (tile.type) {\n    case TILE3D_TYPE.COMPOSITE:\n      return encodeComposite3DTile(tile, dataView, byteOffset, options, encode3DTileToDataView);\n    case TILE3D_TYPE.POINT_CLOUD:\n      return encodePointCloud3DTile(tile, dataView, byteOffset, options);\n    case TILE3D_TYPE.BATCHED_3D_MODEL:\n      return encodeBatchedModel3DTile(tile, dataView, byteOffset, options);\n    case TILE3D_TYPE.INSTANCED_3D_MODEL:\n      return encodeInstancedModel3DTile(tile, dataView, byteOffset, options);\n    default:\n      throw new Error('3D Tiles: unknown tile type');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}