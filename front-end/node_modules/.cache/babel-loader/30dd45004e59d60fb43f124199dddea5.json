{"ast":null,"code":"import Resource from './resource';\nimport RENDERBUFFER_FORMATS from './renderbuffer-formats';\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { assert } from '../utils/assert';\n\nfunction isFormatSupported(gl, format, formats) {\n  const info = formats[format];\n\n  if (!info) {\n    return false;\n  }\n\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n\n  if (typeof value === 'string') {\n    return gl.getExtension(value);\n  }\n\n  return value;\n}\n\nexport default class Renderbuffer extends Resource {\n  static isSupported(gl) {\n    let {\n      format\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      format: null\n    };\n    return !format || isFormatSupported(gl, format, RENDERBUFFER_FORMATS);\n  }\n\n  static getSamplesForFormat(gl, _ref) {\n    let {\n      format\n    } = _ref;\n    return gl.getInternalformatParameter(36161, format, 32937);\n  }\n\n  constructor(gl) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(gl, opts);\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  initialize(_ref2) {\n    let {\n      format,\n      width = 1,\n      height = 1,\n      samples = 0\n    } = _ref2;\n    assert(format, 'Needs format');\n\n    this._trackDeallocatedMemory();\n\n    this.gl.bindRenderbuffer(36161, this.handle);\n\n    if (samples !== 0 && isWebGL2(this.gl)) {\n      this.gl.renderbufferStorageMultisample(36161, samples, format, width, height);\n    } else {\n      this.gl.renderbufferStorage(36161, format, width, height);\n    }\n\n    this.format = format;\n    this.width = width;\n    this.height = height;\n    this.samples = samples;\n\n    this._trackAllocatedMemory(this.width * this.height * (this.samples || 1) * RENDERBUFFER_FORMATS[this.format].bpp);\n\n    return this;\n  }\n\n  resize(_ref3) {\n    let {\n      width,\n      height\n    } = _ref3;\n\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        samples: this.samples\n      });\n    }\n\n    return this;\n  }\n\n  _createHandle() {\n    return this.gl.createRenderbuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteRenderbuffer(this.handle);\n\n    this._trackDeallocatedMemory();\n  }\n\n  _bindHandle(handle) {\n    this.gl.bindRenderbuffer(36161, handle);\n  }\n\n  _syncHandle(handle) {\n    this.format = this.getParameter(36164);\n    this.width = this.getParameter(36162);\n    this.height = this.getParameter(36163);\n    this.samples = this.getParameter(36011);\n  }\n\n  _getParameter(pname) {\n    this.gl.bindRenderbuffer(36161, this.handle);\n    const value = this.gl.getRenderbufferParameter(36161, pname);\n    return value;\n  }\n\n}","map":{"version":3,"sources":["../../../src/classes/renderbuffer.js"],"names":["info","formats","value","isWebGL2","gl","isSupported","format","isFormatSupported","getSamplesForFormat","constructor","opts","Object","initialize","width","height","samples","assert","RENDERBUFFER_FORMATS","resize","_createHandle","_deleteHandle","_bindHandle","_syncHandle","_getParameter"],"mappings":"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","sourcesContent":["/* eslint-disable no-inline-comments */\nimport GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport RENDERBUFFER_FORMATS from './renderbuffer-formats';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {assert} from '../utils/assert';\n\nfunction isFormatSupported(gl, format, formats) {\n  const info = formats[format];\n  if (!info) {\n    return false;\n  }\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  if (typeof value === 'string') {\n    return gl.getExtension(value);\n  }\n  return value;\n}\n\nexport default class Renderbuffer extends Resource {\n  static isSupported(gl, {format} = {format: null}) {\n    return !format || isFormatSupported(gl, format, RENDERBUFFER_FORMATS);\n  }\n\n  static getSamplesForFormat(gl, {format}) {\n    // Polyfilled to return [0] under WebGL1\n    return gl.getInternalformatParameter(GL.RENDERBUFFER, format, GL.SAMPLES);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // @ts-ignore\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  // Creates and initializes a renderbuffer object's data store\n  initialize({format, width = 1, height = 1, samples = 0}) {\n    assert(format, 'Needs format');\n\n    this._trackDeallocatedMemory();\n\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, this.handle);\n\n    if (samples !== 0 && isWebGL2(this.gl)) {\n      // @ts-ignore\n      this.gl.renderbufferStorageMultisample(GL.RENDERBUFFER, samples, format, width, height);\n    } else {\n      this.gl.renderbufferStorage(GL.RENDERBUFFER, format, width, height);\n    }\n\n    // this.gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.format = format;\n    this.width = width;\n    this.height = height;\n    this.samples = samples;\n\n    this._trackAllocatedMemory(\n      this.width * this.height * (this.samples || 1) * RENDERBUFFER_FORMATS[this.format].bpp\n    );\n\n    return this;\n  }\n\n  resize({width, height}) {\n    // Don't resize if width/height haven't changed\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({width, height, format: this.format, samples: this.samples});\n    }\n    return this;\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createRenderbuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteRenderbuffer(this.handle);\n    this._trackDeallocatedMemory();\n  }\n\n  _bindHandle(handle) {\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, handle);\n  }\n\n  _syncHandle(handle) {\n    this.format = this.getParameter(GL.RENDERBUFFER_INTERNAL_FORMAT);\n    this.width = this.getParameter(GL.RENDERBUFFER_WIDTH);\n    this.height = this.getParameter(GL.RENDERBUFFER_HEIGHT);\n    this.samples = this.getParameter(GL.RENDERBUFFER_SAMPLES);\n  }\n\n  // @param {Boolean} opt.autobind=true - method call will bind/unbind object\n  // @returns {GLenum|GLint} - depends on pname\n  _getParameter(pname) {\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, this.handle);\n    const value = this.gl.getRenderbufferParameter(GL.RENDERBUFFER, pname);\n    // this.gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n    return value;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}