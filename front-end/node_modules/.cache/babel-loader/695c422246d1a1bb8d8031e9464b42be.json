{"ast":null,"code":"import { Tiles3DLoader } from './tiles-3d-loader';\nimport { getIonTilesetMetadata } from './lib/ion/ion';\n\nasync function preload(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options = options['cesium-ion'] || {};\n  const {\n    accessToken\n  } = options;\n  let assetId = options.assetId;\n\n  if (!Number.isFinite(assetId)) {\n    const matched = url.match(/\\/([0-9]+)\\/tileset.json/);\n    assetId = matched && matched[1];\n  }\n\n  return getIonTilesetMetadata(accessToken, assetId);\n}\n\nexport const CesiumIonLoader = { ...Tiles3DLoader,\n  id: 'cesium-ion',\n  name: 'Cesium Ion',\n  preload,\n  parse: async (data, options, context) => {\n    options = { ...options\n    };\n    options['3d-tiles'] = options['cesium-ion'];\n    options.loader = CesiumIonLoader;\n    return Tiles3DLoader.parse(data, options, context);\n  },\n  options: {\n    'cesium-ion': { ...Tiles3DLoader.options['3d-tiles'],\n      accessToken: null\n    }\n  }\n};","map":{"version":3,"sources":["../../src/cesium-ion-loader.ts"],"names":["options","accessToken","assetId","Number","matched","url","getIonTilesetMetadata","CesiumIonLoader","id","name","parse","Tiles3DLoader"],"mappings":"AACA,SAAA,aAAA,QAAA,mBAAA;AACA,SAAA,qBAAA,QAAA,eAAA;;AAEA,eAAA,OAAA,CAAA,GAAA,EAA0C;AAAA,MAAdA,OAAc,uEAA1C,EAA0C;AACxCA,EAAAA,OAAO,GAAGA,OAAO,CAAPA,YAAO,CAAPA,IAAVA,EAAAA;AAEA,QAAM;AAACC,IAAAA;AAAD,MAAN,OAAA;AAEA,MAAIC,OAAO,GAAGF,OAAO,CAArB,OAAA;;AACA,MAAI,CAACG,MAAM,CAANA,QAAAA,CAAL,OAAKA,CAAL,EAA+B;AAC7B,UAAMC,OAAO,GAAGC,GAAG,CAAHA,KAAAA,CAAhB,0BAAgBA,CAAhB;AACAH,IAAAA,OAAO,GAAGE,OAAO,IAAIA,OAAO,CAA5BF,CAA4B,CAA5BA;AACD;;AACD,SAAOI,qBAAqB,CAAA,WAAA,EAA5B,OAA4B,CAA5B;AACD;;AAKD,OAAO,MAAMC,eAAiC,GAAG,EAC/C,GAD+C,aAAA;AAE/CC,EAAAA,EAAE,EAF6C,YAAA;AAG/CC,EAAAA,IAAI,EAH2C,YAAA;AAAA,EAAA,OAAA;AAM/CC,EAAAA,KAAK,EAAE,OAAA,IAAA,EAAA,OAAA,EAAA,OAAA,KAAoC;AACzCV,IAAAA,OAAO,GAAG,EAAC,GAAGA;AAAJ,KAAVA;AACAA,IAAAA,OAAO,CAAPA,UAAO,CAAPA,GAAsBA,OAAO,CAA7BA,YAA6B,CAA7BA;AAEAA,IAAAA,OAAO,CAAPA,MAAAA,GAAAA,eAAAA;AACA,WAAOW,aAAa,CAAbA,KAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAP,OAAOA,CAAP;AAX6C,GAAA;AAa/CX,EAAAA,OAAO,EAAE;AACP,kBAAc,EACZ,GAAGW,aAAa,CAAbA,OAAAA,CADS,UACTA,CADS;AAEZV,MAAAA,WAAW,EAAE;AAFD;AADP;AAbsC,CAA1C","sourcesContent":["import type {LoaderWithParser} from '@loaders.gl/loader-utils';\nimport {Tiles3DLoader} from './tiles-3d-loader';\nimport {getIonTilesetMetadata} from './lib/ion/ion';\n\nasync function preload(url, options = {}) {\n  options = options['cesium-ion'] || {};\n  // @ts-ignore\n  const {accessToken} = options;\n  // @ts-ignore\n  let assetId = options.assetId;\n  if (!Number.isFinite(assetId)) {\n    const matched = url.match(/\\/([0-9]+)\\/tileset.json/);\n    assetId = matched && matched[1];\n  }\n  return getIonTilesetMetadata(accessToken, assetId);\n}\n\n/**\n * Loader for 3D tiles from Cesium ION\n */\nexport const CesiumIonLoader: LoaderWithParser = {\n  ...Tiles3DLoader,\n  id: 'cesium-ion',\n  name: 'Cesium Ion',\n  // @ts-ignore\n  preload,\n  parse: async (data, options?, context?) => {\n    options = {...options};\n    options['3d-tiles'] = options['cesium-ion'];\n    // @ts-ignore\n    options.loader = CesiumIonLoader;\n    return Tiles3DLoader.parse(data, options, context); // , loader);\n  },\n  options: {\n    'cesium-ion': {\n      ...Tiles3DLoader.options['3d-tiles'],\n      accessToken: null\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}