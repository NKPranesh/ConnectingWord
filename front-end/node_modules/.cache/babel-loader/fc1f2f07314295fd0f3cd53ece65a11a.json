{"ast":null,"code":"import { VERSION } from './lib/utils/version';\nimport { parseGLTF } from './lib/parsers/parse-gltf';\nexport const GLTFLoader = {\n  name: 'glTF',\n  id: 'gltf',\n  module: 'gltf',\n  version: VERSION,\n  extensions: ['gltf', 'glb'],\n  mimeTypes: ['model/gltf+json', 'model/gltf-binary'],\n  text: true,\n  binary: true,\n  tests: ['glTF'],\n  parse,\n  options: {\n    gltf: {\n      normalize: true,\n      loadBuffers: true,\n      loadImages: true,\n      decompressMeshes: true,\n      postProcess: true\n    },\n    log: console\n  },\n  deprecatedOptions: {\n    fetchImages: 'gltf.loadImages',\n    createImages: 'gltf.loadImages',\n    decompress: 'gltf.decompressMeshes',\n    postProcess: 'gltf.postProcess',\n    gltf: {\n      decompress: 'gltf.decompressMeshes'\n    }\n  }\n};\nexport async function parse(arrayBuffer) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let context = arguments.length > 2 ? arguments[2] : undefined;\n  options = { ...GLTFLoader.options,\n    ...options\n  };\n  options.gltf = { ...GLTFLoader.options.gltf,\n    ...options.gltf\n  };\n  const {\n    byteOffset = 0\n  } = options;\n  const gltf = {};\n  return await parseGLTF(gltf, arrayBuffer, byteOffset, options, context);\n}","map":{"version":3,"sources":["../../src/gltf-loader.ts"],"names":["GLTFLoader","name","id","module","version","extensions","mimeTypes","text","binary","tests","options","gltf","normalize","loadBuffers","loadImages","decompressMeshes","postProcess","log","console","deprecatedOptions","fetchImages","createImages","decompress","byteOffset","parseGLTF"],"mappings":"AAKA,SAAA,OAAA,QAAA,qBAAA;AACA,SAAA,SAAA,QAAA,0BAAA;AAeA,OAAO,MAAMA,UAA4B,GAAG;AAC1CC,EAAAA,IAAI,EADsC,MAAA;AAE1CC,EAAAA,EAAE,EAFwC,MAAA;AAG1CC,EAAAA,MAAM,EAHoC,MAAA;AAI1CC,EAAAA,OAAO,EAJmC,OAAA;AAK1CC,EAAAA,UAAU,EAAE,CAAA,MAAA,EAL8B,KAK9B,CAL8B;AAM1CC,EAAAA,SAAS,EAAE,CAAA,iBAAA,EAN+B,mBAM/B,CAN+B;AAQ1CC,EAAAA,IAAI,EARsC,IAAA;AAS1CC,EAAAA,MAAM,EAToC,IAAA;AAU1CC,EAAAA,KAAK,EAAE,CAVmC,MAUnC,CAVmC;AAAA,EAAA,KAAA;AAa1CC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE;AACJC,MAAAA,SAAS,EADL,IAAA;AAEJC,MAAAA,WAAW,EAFP,IAAA;AAGJC,MAAAA,UAAU,EAHN,IAAA;AAIJC,MAAAA,gBAAgB,EAJZ,IAAA;AAKJC,MAAAA,WAAW,EAAE;AALT,KADC;AAUPC,IAAAA,GAAG,EAAEC;AAVE,GAbiC;AAyB1CC,EAAAA,iBAAiB,EAAE;AACjBC,IAAAA,WAAW,EADM,iBAAA;AAEjBC,IAAAA,YAAY,EAFK,iBAAA;AAGjBC,IAAAA,UAAU,EAHO,uBAAA;AAIjBN,IAAAA,WAAW,EAJM,kBAAA;AAKjBL,IAAAA,IAAI,EAAE;AACJW,MAAAA,UAAU,EAAE;AADR;AALW;AAzBuB,CAArC;AAoCP,OAAO,eAAA,KAAA,CAAA,WAAA,EAA4E;AAAA,MAA1CZ,OAA0C,uEAA5E,EAA4E;AAAA,MAA5E,OAA4E;AAEjFA,EAAAA,OAAO,GAAG,EAAC,GAAGV,UAAU,CAAd,OAAA;AAAwB,OAAGU;AAA3B,GAAVA;AAEAA,EAAAA,OAAO,CAAPA,IAAAA,GAAe,EAAC,GAAGV,UAAU,CAAVA,OAAAA,CAAJ,IAAA;AAA6B,OAAGU,OAAO,CAACC;AAAxC,GAAfD;AAEA,QAAM;AAACa,IAAAA,UAAU,GAAG;AAAd,MAAN,OAAA;AACA,QAAMZ,IAAI,GAAV,EAAA;AACA,SAAO,MAAMa,SAAS,CAAA,IAAA,EAAA,WAAA,EAAA,UAAA,EAAA,OAAA,EAAtB,OAAsB,CAAtB;AACD","sourcesContent":["import type {LoaderWithParser, LoaderOptions} from '@loaders.gl/loader-utils';\nimport type {DracoLoaderOptions} from '@loaders.gl/draco';\n// import type {ImageLoaderOptions} from '@loaders.gl/images';\n// import type {TextureLoaderOptions} from '@loaders.gl/textures';\nimport type {GLTFParseOptions} from './lib/parsers/parse-gltf';\nimport {VERSION} from './lib/utils/version';\nimport {parseGLTF} from './lib/parsers/parse-gltf';\nimport {GLBLoaderOptions} from './glb-loader';\n\n/**\n * GLTF loader options\n */\nexport type GLTFLoaderOptions = LoaderOptions &\n  GLBLoaderOptions &\n  DracoLoaderOptions & {\n    gltf?: GLTFParseOptions;\n  };\n\n/**\n * GLTF loader\n */\nexport const GLTFLoader: LoaderWithParser = {\n  name: 'glTF',\n  id: 'gltf',\n  module: 'gltf',\n  version: VERSION,\n  extensions: ['gltf', 'glb'],\n  mimeTypes: ['model/gltf+json', 'model/gltf-binary'],\n\n  text: true,\n  binary: true,\n  tests: ['glTF'],\n  parse,\n\n  options: {\n    gltf: {\n      normalize: true, // Normalize glTF v1 to glTF v2 format (not yet stable)\n      loadBuffers: true, // Fetch any linked .BIN buffers, decode base64\n      loadImages: true, // Create image objects\n      decompressMeshes: true, // Decompress Draco encoded meshes\n      postProcess: true // Postprocess glTF and return json structure directly\n    },\n\n    // common?\n    log: console // eslint-disable-line\n  },\n  deprecatedOptions: {\n    fetchImages: 'gltf.loadImages',\n    createImages: 'gltf.loadImages',\n    decompress: 'gltf.decompressMeshes',\n    postProcess: 'gltf.postProcess',\n    gltf: {\n      decompress: 'gltf.decompressMeshes'\n    }\n  }\n};\n\nexport async function parse(arrayBuffer, options: GLTFLoaderOptions = {}, context) {\n  // Apps can call the parse method directly, we so apply default options here\n  options = {...GLTFLoader.options, ...options};\n  // @ts-ignore\n  options.gltf = {...GLTFLoader.options.gltf, ...options.gltf};\n\n  const {byteOffset = 0} = options;\n  const gltf = {};\n  return await parseGLTF(gltf, arrayBuffer, byteOffset, options, context);\n}\n"]},"metadata":{},"sourceType":"module"}