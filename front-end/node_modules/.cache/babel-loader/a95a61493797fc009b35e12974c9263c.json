{"ast":null,"code":"import { formatValue, equals, config } from '../lib/common';\nimport { degrees, radians, clamp } from '../lib/common';\nimport Vector3 from './vector3';\nimport * as vec3 from 'gl-matrix/vec3';\nconst EPSILON = 0.000001;\nconst EARTH_RADIUS_METERS = 6.371e6;\nexport default class SphericalCoordinates {\n  constructor() {\n    let {\n      phi = 0,\n      theta = 0,\n      radius = 1,\n      bearing = undefined,\n      pitch = undefined,\n      altitude = undefined,\n      radiusScale = EARTH_RADIUS_METERS\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.phi = phi;\n    this.theta = theta;\n    this.radius = radius || altitude || 1;\n    this.radiusScale = radiusScale || 1;\n\n    if (bearing !== undefined) {\n      this.bearing = bearing;\n    }\n\n    if (pitch !== undefined) {\n      this.pitch = pitch;\n    }\n\n    this.check();\n  }\n\n  toString() {\n    return this.formatString(config);\n  }\n\n  formatString(_ref) {\n    let {\n      printTypes = false\n    } = _ref;\n    const f = formatValue;\n    return \"\".concat(printTypes ? 'Spherical' : '', \"[rho:\").concat(f(this.radius), \",theta:\").concat(f(this.theta), \",phi:\").concat(f(this.phi), \"]\");\n  }\n\n  equals(other) {\n    return equals(this.radius, other.radius) && equals(this.theta, other.theta) && equals(this.phi, other.phi);\n  }\n\n  exactEquals(other) {\n    return this.radius === other.radius && this.theta === other.theta && this.phi === other.phi;\n  }\n\n  get bearing() {\n    return 180 - degrees(this.phi);\n  }\n\n  set bearing(v) {\n    this.phi = Math.PI - radians(v);\n  }\n\n  get pitch() {\n    return degrees(this.theta);\n  }\n\n  set pitch(v) {\n    this.theta = radians(v);\n  }\n\n  get longitude() {\n    return degrees(this.phi);\n  }\n\n  get latitude() {\n    return degrees(this.theta);\n  }\n\n  get lng() {\n    return degrees(this.phi);\n  }\n\n  get lat() {\n    return degrees(this.theta);\n  }\n\n  get z() {\n    return (this.radius - 1) * this.radiusScale;\n  }\n\n  set(radius, phi, theta) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this.check();\n  }\n\n  clone() {\n    return new SphericalCoordinates().copy(this);\n  }\n\n  copy(other) {\n    this.radius = other.radius;\n    this.phi = other.phi;\n    this.theta = other.theta;\n    return this.check();\n  }\n\n  fromLngLatZ(_ref2) {\n    let [lng, lat, z] = _ref2;\n    this.radius = 1 + z / this.radiusScale;\n    this.phi = radians(lat);\n    this.theta = radians(lng);\n  }\n\n  fromVector3(v) {\n    this.radius = vec3.length(v);\n\n    if (this.radius > 0) {\n      this.theta = Math.atan2(v[0], v[1]);\n      this.phi = Math.acos(clamp(v[2] / this.radius, -1, 1));\n    }\n\n    return this.check();\n  }\n\n  toVector3() {\n    return new Vector3(0, 0, this.radius).rotateX({\n      radians: this.theta\n    }).rotateZ({\n      radians: this.phi\n    });\n  }\n\n  makeSafe() {\n    this.phi = Math.max(EPSILON, Math.min(Math.PI - EPSILON, this.phi));\n    return this;\n  }\n\n  check() {\n    if (!Number.isFinite(this.phi) || !Number.isFinite(this.theta) || !(this.radius > 0)) {\n      throw new Error('SphericalCoordinates: some fields set to invalid numbers');\n    }\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../src/classes/spherical-coordinates.js"],"names":["EPSILON","EARTH_RADIUS_METERS","constructor","phi","theta","radius","bearing","pitch","altitude","radiusScale","toString","formatString","printTypes","f","equals","other","exactEquals","degrees","Math","radians","longitude","latitude","lng","lat","z","set","clone","copy","fromLngLatZ","fromVector3","vec3","v","clamp","toVector3","makeSafe","check","Number"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Adaptation of THREE.js Spherical class, under MIT license\nimport {formatValue, equals, config} from '../lib/common';\nimport {degrees, radians, clamp} from '../lib/common';\nimport Vector3 from './vector3';\n\n// @ts-ignore: error TS2307: Cannot find module 'gl-matrix/...'.\nimport * as vec3 from 'gl-matrix/vec3';\n\n// TODO - import epsilon\nconst EPSILON = 0.000001;\n\nconst EARTH_RADIUS_METERS = 6.371e6;\n\n// Todo [rho, theta, phi] ?\nexport default class SphericalCoordinates {\n  // @ts-ignore TS2740: Type '{}' is missing the following properties from type\n  // eslint-disable-next-line complexity\n  constructor({\n    phi = 0,\n    theta = 0,\n    radius = 1,\n    bearing = undefined,\n    pitch = undefined,\n    altitude = undefined,\n    radiusScale = EARTH_RADIUS_METERS\n  } = {}) {\n    this.phi = phi;\n    this.theta = theta;\n    // TODO - silently accepts illegal 0\n    this.radius = radius || altitude || 1; // radial distance from center\n    this.radiusScale = radiusScale || 1; // Used by lngLatZ\n\n    if (bearing !== undefined) {\n      this.bearing = bearing; // up / down towards top and bottom pole\n    }\n    if (pitch !== undefined) {\n      this.pitch = pitch; // around the equator of the sphere\n    }\n    this.check();\n  }\n\n  toString() {\n    return this.formatString(config);\n  }\n\n  formatString({printTypes = false}) {\n    const f = formatValue;\n    return `${printTypes ? 'Spherical' : ''}\\\n[rho:${f(this.radius)},theta:${f(this.theta)},phi:${f(this.phi)}]`;\n  }\n\n  equals(other) {\n    return (\n      equals(this.radius, other.radius) &&\n      equals(this.theta, other.theta) &&\n      equals(this.phi, other.phi)\n    );\n  }\n\n  exactEquals(other) {\n    return this.radius === other.radius && this.theta === other.theta && this.phi === other.phi;\n  }\n\n  /* eslint-disable brace-style */\n  // Cartographic (bearing 0 north, pitch 0 look from above)\n  get bearing() {\n    return 180 - degrees(this.phi);\n  }\n  set bearing(v) {\n    this.phi = Math.PI - radians(v);\n  }\n  get pitch() {\n    return degrees(this.theta);\n  }\n  set pitch(v) {\n    this.theta = radians(v);\n  }\n  // get pitch() { return 90 - degrees(this.phi); }\n  // set pitch(v) { this.phi = radians(v) + Math.PI / 2; }\n  // get altitude() { return this.radius - 1; } // relative altitude\n\n  // lnglatZ coordinates\n  get longitude() {\n    return degrees(this.phi);\n  }\n  get latitude() {\n    return degrees(this.theta);\n  }\n  get lng() {\n    return degrees(this.phi);\n  }\n  get lat() {\n    return degrees(this.theta);\n  }\n  get z() {\n    return (this.radius - 1) * this.radiusScale;\n  }\n  /* eslint-enable brace-style */\n\n  set(radius, phi, theta) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this.check();\n  }\n\n  clone() {\n    return new SphericalCoordinates().copy(this);\n  }\n\n  copy(other) {\n    this.radius = other.radius;\n    this.phi = other.phi;\n    this.theta = other.theta;\n    return this.check();\n  }\n\n  fromLngLatZ([lng, lat, z]) {\n    this.radius = 1 + z / this.radiusScale;\n    this.phi = radians(lat);\n    this.theta = radians(lng);\n  }\n\n  fromVector3(v) {\n    this.radius = vec3.length(v);\n    if (this.radius > 0) {\n      this.theta = Math.atan2(v[0], v[1]); // equator angle around y-up axis\n      this.phi = Math.acos(clamp(v[2] / this.radius, -1, 1)); // polar angle\n    }\n    return this.check();\n  }\n\n  toVector3() {\n    return new Vector3(0, 0, this.radius)\n      .rotateX({radians: this.theta})\n      .rotateZ({radians: this.phi});\n  }\n\n  // restrict phi to be betwee EPS and PI-EPS\n  makeSafe() {\n    this.phi = Math.max(EPSILON, Math.min(Math.PI - EPSILON, this.phi));\n    return this;\n  }\n\n  check() {\n    // this.makeSafe();\n    if (!Number.isFinite(this.phi) || !Number.isFinite(this.theta) || !(this.radius > 0)) {\n      throw new Error('SphericalCoordinates: some fields set to invalid numbers');\n    }\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}