{"ast":null,"code":"import { LayerExtension } from '@deck.gl/core';\nimport shaderModule from './shader-module';\nconst defaultProps = {\n  getBrushingTarget: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  brushingTarget: 'source',\n  brushingEnabled: true,\n  brushingRadius: 10000\n};\nexport default class BrushingExtension extends LayerExtension {\n  getShaders(extension) {\n    return {\n      modules: [shaderModule]\n    };\n  }\n\n  initializeState(context, extension) {\n    const attributeManager = this.getAttributeManager();\n\n    if (attributeManager) {\n      attributeManager.add({\n        brushingTargets: {\n          size: 2,\n          accessor: 'getBrushingTarget',\n          update: !this.props.getBrushingTarget && extension.useConstantTargetPositions,\n          shaderAttributes: {\n            brushingTargets: {\n              divisor: 0\n            },\n            instanceBrushingTargets: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n\n    extension.onMouseMove = () => {\n      this.getCurrentLayer().setNeedsRedraw();\n    };\n\n    if (this.context.deck) {\n      this.context.deck.eventManager.on({\n        pointermove: extension.onMouseMove,\n        pointerleave: extension.onMouseMove\n      });\n    }\n  }\n\n  finalizeState(extension) {\n    if (this.context.deck) {\n      this.context.deck.eventManager.off({\n        pointermove: extension.onMouseMove,\n        pointerleave: extension.onMouseMove\n      });\n    }\n  }\n\n  useConstantTargetPositions(attribute) {\n    attribute.constant = true;\n    attribute.value = new Float32Array(2);\n    return;\n  }\n\n}\nBrushingExtension.extensionName = 'BrushingExtension';\nBrushingExtension.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/brushing/brushing.js"],"names":["defaultProps","getBrushingTarget","type","value","brushingTarget","brushingEnabled","brushingRadius","getShaders","modules","initializeState","attributeManager","brushingTargets","size","accessor","update","extension","shaderAttributes","divisor","instanceBrushingTargets","pointermove","pointerleave","onMouseMove","finalizeState","useConstantTargetPositions","attribute","BrushingExtension"],"mappings":"AAoBA,SAAA,cAAA,QAAA,eAAA;AACA,OAAA,YAAA,MAAA,iBAAA;AAEA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,iBAAiB,EAAE;AAACC,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAE,CAAA,CAAA,EAAA,CAAA;AAA1B,GADA;AAGnBC,EAAAA,cAAc,EAHK,QAAA;AAInBC,EAAAA,eAAe,EAJI,IAAA;AAKnBC,EAAAA,cAAc,EAAE;AALG,CAArB;AAQA,eAAe,MAAA,iBAAA,SAAA,cAAA,CAA+C;AAC5DC,EAAAA,UAAU,CAAA,SAAA,EAAY;AACpB,WAAO;AACLC,MAAAA,OAAO,EAAE,CAAA,YAAA;AADJ,KAAP;AAGD;;AAEDC,EAAAA,eAAe,CAAA,OAAA,EAAA,SAAA,EAAqB;AAClC,UAAMC,gBAAgB,GAAG,KAAzB,mBAAyB,EAAzB;;AACA,QAAA,gBAAA,EAAsB;AACpBA,MAAAA,gBAAgB,CAAhBA,GAAAA,CAAqB;AACnBC,QAAAA,eAAe,EAAE;AACfC,UAAAA,IAAI,EADW,CAAA;AAEfC,UAAAA,QAAQ,EAFO,mBAAA;AAKfC,UAAAA,MAAM,EAAE,CAAC,KAAA,KAAA,CAAD,iBAAA,IAAiCC,SAAS,CALnC,0BAAA;AAMfC,UAAAA,gBAAgB,EAAE;AAChBL,YAAAA,eAAe,EAAE;AACfM,cAAAA,OAAO,EAAE;AADM,aADD;AAIhBC,YAAAA,uBAAuB,EAAE;AACvBD,cAAAA,OAAO,EAAE;AADc;AAJT;AANH;AADE,OAArBP;AAiBD;;AAIDK,IAAAA,SAAS,CAATA,WAAAA,GAAwB,MAAM;AAC5B,WAAA,eAAA,GAAA,cAAA;AADFA,KAAAA;;AAGA,QAAI,KAAA,OAAA,CAAJ,IAAA,EAAuB;AACrB,WAAA,OAAA,CAAA,IAAA,CAAA,YAAA,CAAA,EAAA,CAAkC;AAChCI,QAAAA,WAAW,EAAEJ,SAAS,CADU,WAAA;AAEhCK,QAAAA,YAAY,EAAEL,SAAS,CAACM;AAFQ,OAAlC;AAID;AACF;;AAEDC,EAAAA,aAAa,CAAA,SAAA,EAAY;AAEvB,QAAI,KAAA,OAAA,CAAJ,IAAA,EAAuB;AACrB,WAAA,OAAA,CAAA,IAAA,CAAA,YAAA,CAAA,GAAA,CAAmC;AACjCH,QAAAA,WAAW,EAAEJ,SAAS,CADW,WAAA;AAEjCK,QAAAA,YAAY,EAAEL,SAAS,CAACM;AAFS,OAAnC;AAID;AACF;;AAEDE,EAAAA,0BAA0B,CAAA,SAAA,EAAY;AACpCC,IAAAA,SAAS,CAATA,QAAAA,GAAAA,IAAAA;AACAA,IAAAA,SAAS,CAATA,KAAAA,GAAkB,IAAA,YAAA,CAAlBA,CAAkB,CAAlBA;AACA;AACD;;AAxD2D;AA2D9DC,iBAAiB,CAAjBA,aAAAA,GAAAA,mBAAAA;AACAA,iBAAiB,CAAjBA,YAAAA,GAAAA,YAAAA","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension} from '@deck.gl/core';\nimport shaderModule from './shader-module';\n\nconst defaultProps = {\n  getBrushingTarget: {type: 'accessor', value: [0, 0]},\n\n  brushingTarget: 'source',\n  brushingEnabled: true,\n  brushingRadius: 10000\n};\n\nexport default class BrushingExtension extends LayerExtension {\n  getShaders(extension) {\n    return {\n      modules: [shaderModule]\n    };\n  }\n\n  initializeState(context, extension) {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.add({\n        brushingTargets: {\n          size: 2,\n          accessor: 'getBrushingTarget',\n          // Hack: extension's defaultProps is not merged with the layer's defaultProps,\n          // So we can't use the standard accessor when the prop is undefined\n          update: !this.props.getBrushingTarget && extension.useConstantTargetPositions,\n          shaderAttributes: {\n            brushingTargets: {\n              divisor: 0\n            },\n            instanceBrushingTargets: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n\n    // Trigger redraw when mouse moves\n    // TODO - expose this in a better way\n    extension.onMouseMove = () => {\n      this.getCurrentLayer().setNeedsRedraw();\n    };\n    if (this.context.deck) {\n      this.context.deck.eventManager.on({\n        pointermove: extension.onMouseMove,\n        pointerleave: extension.onMouseMove\n      });\n    }\n  }\n\n  finalizeState(extension) {\n    // Remove event listeners\n    if (this.context.deck) {\n      this.context.deck.eventManager.off({\n        pointermove: extension.onMouseMove,\n        pointerleave: extension.onMouseMove\n      });\n    }\n  }\n\n  useConstantTargetPositions(attribute) {\n    attribute.constant = true;\n    attribute.value = new Float32Array(2);\n    return;\n  }\n}\n\nBrushingExtension.extensionName = 'BrushingExtension';\nBrushingExtension.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}