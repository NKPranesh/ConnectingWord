{"ast":null,"code":"import { CompositeLayer, log } from '@deck.gl/core';\nimport { replaceInRange } from '../utils';\nimport { binaryToFeatureForAccesor } from './geojson-binary';\nimport { POINT_LAYER, LINE_LAYER, POLYGON_LAYER, getDefaultProps, forwardProps } from './sub-layer-map';\nimport { getGeojsonFeatures, separateGeojsonFeatures } from './geojson';\nimport { createLayerPropsFromFeatures, createLayerPropsFromBinary } from './geojson-layer-props';\nconst defaultProps = { ...getDefaultProps(POINT_LAYER.circle),\n  ...getDefaultProps(POINT_LAYER.icon),\n  ...getDefaultProps(POINT_LAYER.text),\n  ...getDefaultProps(LINE_LAYER),\n  ...getDefaultProps(POLYGON_LAYER),\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  iconAtlas: {\n    type: 'object',\n    value: null\n  },\n  iconMapping: {\n    type: 'object',\n    value: {}\n  },\n  getIcon: {\n    type: 'accessor',\n    value: f => f.properties.icon\n  },\n  getText: {\n    type: 'accessor',\n    value: f => f.properties.text\n  },\n  pointType: 'circle',\n  getRadius: {\n    deprecatedFor: 'getPointRadius'\n  }\n};\nexport default class GeoJsonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      layerProps: {},\n      features: {}\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState(_ref) {\n    let {\n      props,\n      changeFlags\n    } = _ref;\n\n    if (!changeFlags.dataChanged) {\n      return;\n    }\n\n    const {\n      data\n    } = this.props;\n    const binary = data && 'points' in data && 'polygons' in data && 'lines' in data;\n    this.setState({\n      binary\n    });\n\n    if (binary) {\n      this._updateStateBinary({\n        props,\n        changeFlags\n      });\n    } else {\n      this._updateStateJSON({\n        props,\n        changeFlags\n      });\n    }\n  }\n\n  _updateStateBinary(_ref2) {\n    let {\n      props,\n      changeFlags\n    } = _ref2;\n    const layerProps = createLayerPropsFromBinary(props.data, this.encodePickingColor);\n    this.setState({\n      layerProps\n    });\n  }\n\n  _updateStateJSON(_ref3) {\n    let {\n      props,\n      changeFlags\n    } = _ref3;\n    const features = getGeojsonFeatures(props.data);\n    const wrapFeature = this.getSubLayerRow.bind(this);\n    let newFeatures = {};\n    const featuresDiff = {};\n\n    if (Array.isArray(changeFlags.dataChanged)) {\n      const oldFeatures = this.state.features;\n\n      for (const key in oldFeatures) {\n        newFeatures[key] = oldFeatures[key].slice();\n        featuresDiff[key] = [];\n      }\n\n      for (const dataRange of changeFlags.dataChanged) {\n        const partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n\n        for (const key in oldFeatures) {\n          featuresDiff[key].push(replaceInRange({\n            data: newFeatures[key],\n            getIndex: f => f.__source.index,\n            dataRange,\n            replace: partialFeatures[key]\n          }));\n        }\n      }\n    } else {\n      newFeatures = separateGeojsonFeatures(features, wrapFeature);\n    }\n\n    const layerProps = createLayerPropsFromFeatures(newFeatures, featuresDiff);\n    this.setState({\n      features: newFeatures,\n      featuresDiff,\n      layerProps\n    });\n  }\n\n  _updateAutoHighlight(info) {\n    const pointLayerIdPrefix = \"\".concat(this.id, \"-points-\");\n    const sourceIsPoints = info.sourceLayer.id.startsWith(pointLayerIdPrefix);\n\n    for (const layer of this.getSubLayers()) {\n      if (layer.id.startsWith(pointLayerIdPrefix) === sourceIsPoints) {\n        layer.updateAutoHighlight(info);\n      }\n    }\n  }\n\n  _renderPolygonLayer() {\n    const {\n      extruded,\n      wireframe\n    } = this.props;\n    const {\n      layerProps\n    } = this.state;\n    const id = 'polygons-fill';\n    const PolygonFillLayer = this.shouldRenderSubLayer(id, layerProps.polygons.data) && this.getSubLayerClass(id, POLYGON_LAYER.type);\n\n    if (PolygonFillLayer) {\n      const forwardedProps = forwardProps(this, POLYGON_LAYER.props);\n      const useLineColor = extruded && wireframe;\n\n      if (!useLineColor) {\n        delete forwardedProps.getLineColor;\n      }\n\n      forwardedProps.updateTriggers.lineColors = useLineColor;\n      return new PolygonFillLayer(forwardedProps, this.getSubLayerProps({\n        id,\n        updateTriggers: forwardedProps.updateTriggers\n      }), layerProps.polygons);\n    }\n\n    return null;\n  }\n\n  _renderLineLayers() {\n    const {\n      extruded,\n      stroked\n    } = this.props;\n    const {\n      layerProps\n    } = this.state;\n    const polygonStrokeLayerId = 'polygons-stroke';\n    const lineStringsLayerId = 'linestrings';\n    const PolygonStrokeLayer = !extruded && stroked && this.shouldRenderSubLayer(polygonStrokeLayerId, layerProps.polygonsOutline.data) && this.getSubLayerClass(polygonStrokeLayerId, LINE_LAYER.type);\n    const LineStringsLayer = this.shouldRenderSubLayer(lineStringsLayerId, layerProps.lines.data) && this.getSubLayerClass(lineStringsLayerId, LINE_LAYER.type);\n\n    if (PolygonStrokeLayer || LineStringsLayer) {\n      const forwardedProps = forwardProps(this, LINE_LAYER.props);\n      return [PolygonStrokeLayer && new PolygonStrokeLayer(forwardedProps, this.getSubLayerProps({\n        id: polygonStrokeLayerId,\n        updateTriggers: forwardedProps.updateTriggers\n      }), layerProps.polygonsOutline), LineStringsLayer && new LineStringsLayer(forwardedProps, this.getSubLayerProps({\n        id: lineStringsLayerId,\n        updateTriggers: forwardedProps.updateTriggers\n      }), layerProps.lines)];\n    }\n\n    return null;\n  }\n\n  _renderPointLayers() {\n    const {\n      pointType\n    } = this.props;\n    const {\n      layerProps,\n      binary\n    } = this.state;\n    let {\n      highlightedObjectIndex\n    } = this.props;\n\n    if (!binary && Number.isFinite(highlightedObjectIndex)) {\n      highlightedObjectIndex = layerProps.points.data.findIndex(d => d.__source.index === highlightedObjectIndex);\n    }\n\n    const types = new Set(pointType.split('+'));\n    const pointLayers = [];\n\n    for (const type of types) {\n      const id = \"points-\".concat(type);\n      const PointLayerMapping = POINT_LAYER[type];\n      const PointsLayer = PointLayerMapping && this.shouldRenderSubLayer(id, layerProps.points.data) && this.getSubLayerClass(id, PointLayerMapping.type);\n\n      if (PointsLayer) {\n        const forwardedProps = forwardProps(this, PointLayerMapping.props);\n        pointLayers.push(new PointsLayer(forwardedProps, this.getSubLayerProps({\n          id,\n          updateTriggers: forwardedProps.updateTriggers,\n          highlightedObjectIndex\n        }), layerProps.points));\n      }\n    }\n\n    return pointLayers;\n  }\n\n  renderLayers() {\n    const {\n      extruded\n    } = this.props;\n\n    const polygonFillLayer = this._renderPolygonLayer();\n\n    const lineLayers = this._renderLineLayers();\n\n    const pointLayers = this._renderPointLayers();\n\n    return [!extruded && polygonFillLayer, lineLayers, pointLayers, extruded && polygonFillLayer];\n  }\n\n  getSubLayerAccessor(accessor) {\n    const {\n      binary\n    } = this.state;\n\n    if (!binary || typeof accessor !== 'function') {\n      return super.getSubLayerAccessor(accessor);\n    }\n\n    return (object, info) => {\n      const {\n        data,\n        index\n      } = info;\n      const feature = binaryToFeatureForAccesor(data, index);\n      return accessor(feature, info);\n    };\n  }\n\n}\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/geojson-layer/geojson-layer.js"],"names":["defaultProps","getDefaultProps","POINT_LAYER","stroked","filled","extruded","wireframe","iconAtlas","type","value","iconMapping","getIcon","f","icon","getText","text","pointType","getRadius","deprecatedFor","initializeState","layerProps","features","log","updateState","changeFlags","data","binary","_updateStateBinary","createLayerPropsFromBinary","props","_updateStateJSON","getGeojsonFeatures","wrapFeature","newFeatures","featuresDiff","Array","oldFeatures","partialFeatures","separateGeojsonFeatures","replaceInRange","getIndex","replace","createLayerPropsFromFeatures","_updateAutoHighlight","pointLayerIdPrefix","sourceIsPoints","info","layer","_renderPolygonLayer","id","PolygonFillLayer","POLYGON_LAYER","forwardedProps","forwardProps","useLineColor","updateTriggers","_renderLineLayers","polygonStrokeLayerId","lineStringsLayerId","PolygonStrokeLayer","LINE_LAYER","LineStringsLayer","_renderPointLayers","highlightedObjectIndex","Number","d","types","pointLayers","PointLayerMapping","PointsLayer","renderLayers","polygonFillLayer","lineLayers","getSubLayerAccessor","index","feature","binaryToFeatureForAccesor","accessor","GeoJsonLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, log} from '@deck.gl/core';\nimport {replaceInRange} from '../utils';\nimport {binaryToFeatureForAccesor} from './geojson-binary';\nimport {\n  POINT_LAYER,\n  LINE_LAYER,\n  POLYGON_LAYER,\n  getDefaultProps,\n  forwardProps\n} from './sub-layer-map';\n\nimport {getGeojsonFeatures, separateGeojsonFeatures} from './geojson';\nimport {createLayerPropsFromFeatures, createLayerPropsFromBinary} from './geojson-layer-props';\n\nconst defaultProps = {\n  ...getDefaultProps(POINT_LAYER.circle),\n  ...getDefaultProps(POINT_LAYER.icon),\n  ...getDefaultProps(POINT_LAYER.text),\n  ...getDefaultProps(LINE_LAYER),\n  ...getDefaultProps(POLYGON_LAYER),\n\n  // Overwrite sub layer defaults\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  iconAtlas: {type: 'object', value: null},\n  iconMapping: {type: 'object', value: {}},\n  getIcon: {type: 'accessor', value: f => f.properties.icon},\n  getText: {type: 'accessor', value: f => f.properties.text},\n\n  // Self props\n  pointType: 'circle',\n\n  // TODO: deprecated, remove in v9\n  getRadius: {deprecatedFor: 'getPointRadius'}\n};\n\nexport default class GeoJsonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      layerProps: {},\n      features: {}\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({props, changeFlags}) {\n    if (!changeFlags.dataChanged) {\n      return;\n    }\n    const {data} = this.props;\n    const binary = data && 'points' in data && 'polygons' in data && 'lines' in data;\n\n    this.setState({binary});\n\n    if (binary) {\n      this._updateStateBinary({props, changeFlags});\n    } else {\n      this._updateStateJSON({props, changeFlags});\n    }\n  }\n\n  _updateStateBinary({props, changeFlags}) {\n    const layerProps = createLayerPropsFromBinary(props.data, this.encodePickingColor);\n    this.setState({layerProps});\n  }\n\n  _updateStateJSON({props, changeFlags}) {\n    const features = getGeojsonFeatures(props.data);\n    const wrapFeature = this.getSubLayerRow.bind(this);\n    let newFeatures = {};\n    const featuresDiff = {};\n\n    if (Array.isArray(changeFlags.dataChanged)) {\n      const oldFeatures = this.state.features;\n      for (const key in oldFeatures) {\n        newFeatures[key] = oldFeatures[key].slice();\n        featuresDiff[key] = [];\n      }\n\n      for (const dataRange of changeFlags.dataChanged) {\n        const partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n        for (const key in oldFeatures) {\n          featuresDiff[key].push(\n            replaceInRange({\n              data: newFeatures[key],\n              getIndex: f => f.__source.index,\n              dataRange,\n              replace: partialFeatures[key]\n            })\n          );\n        }\n      }\n    } else {\n      newFeatures = separateGeojsonFeatures(features, wrapFeature);\n    }\n\n    const layerProps = createLayerPropsFromFeatures(newFeatures, featuresDiff);\n\n    this.setState({\n      features: newFeatures,\n      featuresDiff,\n      layerProps\n    });\n  }\n\n  _updateAutoHighlight(info) {\n    // All sub layers except the points layer use source feature index to encode the picking color\n    // The points layer uses indices from the points data array.\n    const pointLayerIdPrefix = `${this.id}-points-`;\n    const sourceIsPoints = info.sourceLayer.id.startsWith(pointLayerIdPrefix);\n    for (const layer of this.getSubLayers()) {\n      if (layer.id.startsWith(pointLayerIdPrefix) === sourceIsPoints) {\n        layer.updateAutoHighlight(info);\n      }\n    }\n  }\n\n  _renderPolygonLayer() {\n    const {extruded, wireframe} = this.props;\n    const {layerProps} = this.state;\n    const id = 'polygons-fill';\n\n    const PolygonFillLayer =\n      this.shouldRenderSubLayer(id, layerProps.polygons.data) &&\n      this.getSubLayerClass(id, POLYGON_LAYER.type);\n\n    if (PolygonFillLayer) {\n      const forwardedProps = forwardProps(this, POLYGON_LAYER.props);\n      // Avoid building the lineColors attribute if wireframe is off\n      const useLineColor = extruded && wireframe;\n      if (!useLineColor) {\n        delete forwardedProps.getLineColor;\n      }\n      // using a legacy API to invalid lineColor attributes\n      forwardedProps.updateTriggers.lineColors = useLineColor;\n\n      return new PolygonFillLayer(\n        forwardedProps,\n        this.getSubLayerProps({\n          id,\n          updateTriggers: forwardedProps.updateTriggers\n        }),\n        layerProps.polygons\n      );\n    }\n    return null;\n  }\n\n  _renderLineLayers() {\n    const {extruded, stroked} = this.props;\n    const {layerProps} = this.state;\n    const polygonStrokeLayerId = 'polygons-stroke';\n    const lineStringsLayerId = 'linestrings';\n\n    const PolygonStrokeLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer(polygonStrokeLayerId, layerProps.polygonsOutline.data) &&\n      this.getSubLayerClass(polygonStrokeLayerId, LINE_LAYER.type);\n    const LineStringsLayer =\n      this.shouldRenderSubLayer(lineStringsLayerId, layerProps.lines.data) &&\n      this.getSubLayerClass(lineStringsLayerId, LINE_LAYER.type);\n\n    if (PolygonStrokeLayer || LineStringsLayer) {\n      const forwardedProps = forwardProps(this, LINE_LAYER.props);\n\n      return [\n        PolygonStrokeLayer &&\n          new PolygonStrokeLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id: polygonStrokeLayerId,\n              updateTriggers: forwardedProps.updateTriggers\n            }),\n            layerProps.polygonsOutline\n          ),\n\n        LineStringsLayer &&\n          new LineStringsLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id: lineStringsLayerId,\n              updateTriggers: forwardedProps.updateTriggers\n            }),\n            layerProps.lines\n          )\n      ];\n    }\n    return null;\n  }\n\n  _renderPointLayers() {\n    const {pointType} = this.props;\n    const {layerProps, binary} = this.state;\n    let {highlightedObjectIndex} = this.props;\n\n    if (!binary && Number.isFinite(highlightedObjectIndex)) {\n      highlightedObjectIndex = layerProps.points.data.findIndex(\n        d => d.__source.index === highlightedObjectIndex\n      );\n    }\n\n    // Avoid duplicate sub layer ids\n    const types = new Set(pointType.split('+'));\n    const pointLayers = [];\n    for (const type of types) {\n      const id = `points-${type}`;\n      const PointLayerMapping = POINT_LAYER[type];\n      const PointsLayer =\n        PointLayerMapping &&\n        this.shouldRenderSubLayer(id, layerProps.points.data) &&\n        this.getSubLayerClass(id, PointLayerMapping.type);\n      if (PointsLayer) {\n        const forwardedProps = forwardProps(this, PointLayerMapping.props);\n\n        pointLayers.push(\n          new PointsLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id,\n              updateTriggers: forwardedProps.updateTriggers,\n              highlightedObjectIndex\n            }),\n            layerProps.points\n          )\n        );\n      }\n    }\n    return pointLayers;\n  }\n\n  renderLayers() {\n    const {extruded} = this.props;\n\n    const polygonFillLayer = this._renderPolygonLayer();\n    const lineLayers = this._renderLineLayers();\n    const pointLayers = this._renderPointLayers();\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonFillLayer,\n      lineLayers,\n      pointLayers,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonFillLayer\n    ];\n  }\n\n  getSubLayerAccessor(accessor) {\n    const {binary} = this.state;\n    if (!binary || typeof accessor !== 'function') {\n      return super.getSubLayerAccessor(accessor);\n    }\n\n    return (object, info) => {\n      const {data, index} = info;\n      const feature = binaryToFeatureForAccesor(data, index);\n      return accessor(feature, info);\n    };\n  }\n}\n\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}