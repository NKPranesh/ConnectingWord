{"ast":null,"code":"import { assert } from '@loaders.gl/loader-utils';\nexport default class ManagedArray {\n  constructor() {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    this._array = new Array(length);\n    this._map = new Map();\n    this._length = length;\n  }\n\n  get length() {\n    return this._length;\n  }\n\n  set length(length) {\n    this._length = length;\n\n    if (length > this._array.length) {\n      this._array.length = length;\n    }\n  }\n\n  get values() {\n    return this._array;\n  }\n\n  get(index) {\n    assert(index < this._array.length);\n    return this._array[index];\n  }\n\n  set(index, element) {\n    assert(index >= 0);\n\n    if (index >= this.length) {\n      this.length = index + 1;\n    }\n\n    if (this._map.has(this._array[index])) {\n      this._map.delete(this._array[index]);\n    }\n\n    this._array[index] = element;\n\n    this._map.set(element, index);\n  }\n\n  delete(element) {\n    const index = this._map.get(element);\n\n    if (index >= 0) {\n      this._array.splice(index, 1);\n\n      this._map.delete(element);\n\n      this.length--;\n    }\n  }\n\n  peek() {\n    return this._array[this._length - 1];\n  }\n\n  push(element) {\n    if (!this._map.has(element)) {\n      const index = this.length++;\n      this._array[index] = element;\n\n      this._map.set(element, index);\n    }\n  }\n\n  pop() {\n    const element = this._array[--this.length];\n\n    this._map.delete(element);\n\n    return element;\n  }\n\n  reserve(length) {\n    assert(length >= 0);\n\n    if (length > this._array.length) {\n      this._array.length = length;\n    }\n  }\n\n  resize(length) {\n    assert(length >= 0);\n    this.length = length;\n  }\n\n  trim(length) {\n    if (length === null || length === undefined) {\n      length = this.length;\n    }\n\n    this._array.length = length;\n  }\n\n  reset() {\n    this._array = [];\n    this._map = new Map();\n    this._length = 0;\n  }\n\n  find(target) {\n    return this._map.has(target);\n  }\n\n}","map":{"version":3,"sources":["../../../src/utils/managed-array.js"],"names":["constructor","length","values","get","assert","index","set","delete","peek","push","pop","element","reserve","resize","trim","reset","find"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {assert} from '@loaders.gl/loader-utils';\n\n/**\n * A wrapper around arrays so that the internal length of the array can be manually managed.\n *\n * @alias ManagedArray\n * @constructor\n * @private\n *\n * @param {Number} [length=0] The initial length of the array.\n */\nexport default class ManagedArray {\n  constructor(length = 0) {\n    this._array = new Array(length);\n    this._map = new Map();\n    this._length = length;\n  }\n\n  /**\n   * Gets or sets the length of the array.\n   * If the set length is greater than the length of the internal array, the internal array is resized.\n   *\n   * @memberof ManagedArray.prototype\n   * @type Number\n   */\n  get length() {\n    return this._length;\n  }\n\n  set length(length) {\n    this._length = length;\n    if (length > this._array.length) {\n      this._array.length = length;\n    }\n  }\n\n  /**\n   * Gets the internal array.\n   *\n   * @memberof ManagedArray.prototype\n   * @type Array\n   * @readonly\n   */\n  get values() {\n    return this._array;\n  }\n\n  /**\n   * Gets the element at an index.\n   *\n   * @param {Number} index The index to get.\n   */\n  get(index) {\n    assert(index < this._array.length);\n    return this._array[index];\n  }\n\n  /**\n   * Sets the element at an index. Resizes the array if index is greater than the length of the array.\n   *\n   * @param {Number} index The index to set.\n   * @param {*} element The element to set at index.\n   */\n  set(index, element) {\n    assert(index >= 0);\n\n    if (index >= this.length) {\n      this.length = index + 1;\n    }\n\n    if (this._map.has(this._array[index])) {\n      this._map.delete(this._array[index]);\n    }\n\n    this._array[index] = element;\n    this._map.set(element, index);\n  }\n\n  delete(element) {\n    const index = this._map.get(element);\n    if (index >= 0) {\n      this._array.splice(index, 1);\n      this._map.delete(element);\n      this.length--;\n    }\n  }\n\n  /**\n   * Returns the last element in the array without modifying the array.\n   *\n   * @returns {*} The last element in the array.\n   */\n  peek() {\n    return this._array[this._length - 1];\n  }\n\n  /**\n   * Push an element into the array.\n   *\n   * @param {*} element The element to push.\n   */\n  push(element) {\n    if (!this._map.has(element)) {\n      const index = this.length++;\n      this._array[index] = element;\n      this._map.set(element, index);\n    }\n  }\n\n  /**\n   * Pop an element from the array.\n   *\n   * @returns {*} The last element in the array.\n   */\n  pop() {\n    const element = this._array[--this.length];\n    this._map.delete(element);\n    return element;\n  }\n\n  /**\n   * Resize the internal array if length > _array.length.\n   *\n   * @param {Number} length The length.\n   */\n  reserve(length) {\n    assert(length >= 0);\n\n    if (length > this._array.length) {\n      this._array.length = length;\n    }\n  }\n\n  /**\n   * Resize the array.\n   *\n   * @param {Number} length The length.\n   */\n  resize(length) {\n    assert(length >= 0);\n\n    this.length = length;\n  }\n\n  /**\n   * Trim the internal array to the specified length. Defaults to the current length.\n   *\n   * @param {Number} [length] The length.\n   */\n  trim(length) {\n    if (length === null || length === undefined) {\n      length = this.length;\n    }\n    this._array.length = length;\n  }\n\n  reset() {\n    this._array = [];\n    this._map = new Map();\n    this._length = 0;\n  }\n\n  find(target) {\n    return this._map.has(target);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}