{"ast":null,"code":"import { Buffer, copyToTexture, cloneTextureFrom } from '@luma.gl/webgl';\nimport { Transform } from '@luma.gl/engine';\nimport { HISTOPYRAMID_BUILD_VS_UTILS, HISTOPYRAMID_TRAVERSAL_UTILS, HISTOPYRAMID_BASE_BUILD_VS, HISTOPYRAMID_BUILD_VS, HISTOPYRAMID_TRAVERSAL_VS } from './histopyramid-shaders';\n\nfunction nextPowerOfTwo(x) {\n  const p = Math.ceil(Math.log2(x));\n  return Math.pow(2, p);\n}\n\nconst channelToIndexMap = {\n  r: 0,\n  x: 0,\n  g: 1,\n  y: 1,\n  b: 2,\n  z: 2,\n  a: 3,\n  w: 3\n};\nexport function buildHistopyramidBaseLevel(gl, opts) {\n  const {\n    texture,\n    channel = 'r',\n    _readData = false\n  } = opts;\n  let {\n    width,\n    height\n  } = texture;\n  width = nextPowerOfTwo(width);\n  height = nextPowerOfTwo(height);\n  const size = (width > height ? width : height) / 2;\n  const baseTexture = cloneTextureFrom(texture, {\n    width: size,\n    height: size\n  });\n  const transform = new Transform(gl, {\n    _sourceTextures: {\n      inTexture: texture\n    },\n    _targetTexture: baseTexture,\n    _targetTextureVarying: 'outTexture',\n    vs: `${HISTOPYRAMID_BUILD_VS_UTILS}${HISTOPYRAMID_BASE_BUILD_VS}`,\n    elementCount: baseTexture.width * baseTexture.height\n  });\n  transform.run({\n    uniforms: {\n      channel: channelToIndexMap[channel] || 0,\n      padingPixelValue: [0, 0, 0, 0]\n    }\n  });\n  let textureData;\n\n  if (_readData || size === 1) {\n    textureData = transform.getData({\n      packed: true\n    });\n  }\n\n  const flatPyramidSize = size * 2;\n  const flatPyramidTexture = cloneTextureFrom(texture, {\n    width: flatPyramidSize,\n    height: flatPyramidSize,\n    parameters: {\n      [10240]: 9728,\n      [10241]: 9728\n    }\n  });\n  const framebuffer = transform.getFramebuffer();\n  copyToTexture(framebuffer, flatPyramidTexture, {\n    targetX: 0,\n    width: size,\n    height: size\n  });\n  return {\n    textureData,\n    baseTexture,\n    flatPyramidTexture\n  };\n}\nexport function getHistoPyramid(gl, opts) {\n  const {\n    textureData,\n    baseTexture,\n    flatPyramidTexture\n  } = buildHistopyramidBaseLevel(gl, opts);\n  const {\n    width\n  } = baseTexture;\n  const levelCount = Math.log2(width) + 1;\n  const pyramidTextures = [baseTexture];\n  let topLevelData = textureData;\n\n  if (levelCount > 1) {\n    for (let i = 1; i < levelCount; i++) {\n      const size = width / Math.pow(2, i);\n      pyramidTextures.push(cloneTextureFrom(baseTexture, {\n        width: size,\n        height: size\n      }));\n    }\n\n    const transform = new Transform(gl, {\n      _sourceTextures: {\n        inTexture: pyramidTextures[0]\n      },\n      _targetTexture: pyramidTextures[1],\n      _targetTextureVarying: 'outTexture',\n      vs: `${HISTOPYRAMID_BUILD_VS_UTILS}${HISTOPYRAMID_BUILD_VS}`,\n      elementCount: pyramidTextures[1].width * pyramidTextures[1].height\n    });\n    let flatOffset = width;\n\n    for (let i = 1; i < levelCount; i++) {\n      const outSize = [pyramidTextures[i].width, pyramidTextures[i].height];\n      transform.update({\n        _sourceTextures: {\n          inTexture: pyramidTextures[i - 1]\n        },\n        _targetTexture: pyramidTextures[i],\n        elementCount: pyramidTextures[i].width * pyramidTextures[i].height\n      });\n      transform.run();\n      const framebuffer = transform.getFramebuffer();\n      copyToTexture(framebuffer, flatPyramidTexture, {\n        targetX: flatOffset,\n        width: outSize[0],\n        height: outSize[1]\n      });\n      flatOffset += outSize[0];\n    }\n\n    topLevelData = transform.getData();\n  }\n\n  return {\n    pyramidTextures,\n    flatPyramidTexture,\n    levelCount,\n    topLevelData\n  };\n}\nexport function histoPyramidGenerateIndices(gl, opts) {\n  const {\n    flatPyramidTexture,\n    levelCount,\n    topLevelData\n  } = getHistoPyramid(gl, opts);\n  const keyIndexCount = topLevelData[0] + topLevelData[1] + topLevelData[2] + topLevelData[3];\n  const keyIndex = new Buffer(gl, new Float32Array(keyIndexCount).map((_, index) => index));\n  const locationAndIndex = new Buffer(gl, keyIndexCount * 4 * 4);\n  const transform = new Transform(gl, {\n    sourceBuffers: {\n      keyIndex\n    },\n    _sourceTextures: {\n      flatPyramidTexture\n    },\n    feedbackBuffers: {\n      locationAndIndex\n    },\n    varyings: ['locationAndIndex'],\n    vs: `${HISTOPYRAMID_TRAVERSAL_UTILS}${HISTOPYRAMID_TRAVERSAL_VS}`,\n    elementCount: keyIndexCount\n  });\n  transform.run({\n    uniforms: {\n      numLevels: levelCount\n    }\n  });\n  return {\n    locationAndIndexBuffer: locationAndIndex\n  };\n}","map":{"version":3,"sources":["../../../../src/gpgpu/histopyramid/histopyramid.js"],"names":["p","Math","channelToIndexMap","r","x","g","y","b","z","a","w","channel","_readData","height","width","nextPowerOfTwo","size","baseTexture","cloneTextureFrom","transform","_sourceTextures","inTexture","texture","_targetTexture","_targetTextureVarying","vs","HISTOPYRAMID_BUILD_VS_UTILS","HISTOPYRAMID_BASE_BUILD_VS","elementCount","uniforms","padingPixelValue","textureData","packed","flatPyramidSize","flatPyramidTexture","parameters","framebuffer","copyToTexture","targetX","buildHistopyramidBaseLevel","levelCount","pyramidTextures","topLevelData","i","HISTOPYRAMID_BUILD_VS","flatOffset","outSize","getHistoPyramid","keyIndexCount","keyIndex","locationAndIndex","sourceBuffers","feedbackBuffers","varyings","HISTOPYRAMID_TRAVERSAL_UTILS","HISTOPYRAMID_TRAVERSAL_VS","numLevels","locationAndIndexBuffer"],"mappings":"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","sourcesContent":["import {Buffer, copyToTexture, cloneTextureFrom} from '@luma.gl/webgl';\nimport {Transform} from '@luma.gl/engine';\nimport GL from '@luma.gl/constants';\nimport {\n  HISTOPYRAMID_BUILD_VS_UTILS,\n  HISTOPYRAMID_TRAVERSAL_UTILS,\n  HISTOPYRAMID_BASE_BUILD_VS,\n  HISTOPYRAMID_BUILD_VS,\n  HISTOPYRAMID_TRAVERSAL_VS\n} from './histopyramid-shaders';\n\n// Following methods implement Histopyramid operations as described in 'High‐speed marching cubes using histopyramids' by Dyken C, Ziegler G, Theobalt C and Seidel H\n// Link to the paper: http://olmozavala.com/Custom/OpenGL/Tutorials/OpenGL4_Examples/MarchingCubes_Dyken/Dyken_et_al-2008-Computer_Graphics_Forum.pdf\n\n// TODO: enable to assert on texture dimension\n// function isPowerOfTwo(x) {\n//     return ((x !== 0) && !(x & (x - 1)));\n// }\n\nfunction nextPowerOfTwo(x) {\n  const p = Math.ceil(Math.log2(x));\n  return Math.pow(2, p);\n}\n\nconst channelToIndexMap = {\n  r: 0,\n  x: 0,\n  g: 1,\n  y: 1,\n  b: 2,\n  z: 2,\n  a: 3,\n  w: 3\n};\n\n// returns a base level texture that packs given weight into a texture\n// each 2X2 region is mapped into RGBA channels of single pixel\n// returned texture is a squred power of two sized texture\n// R -> lower left, G -> lower right B -> upper left A -> upper right\nexport function buildHistopyramidBaseLevel(gl, opts) {\n  const {texture, channel = 'r', _readData = false} = opts;\n  let {width, height} = texture;\n  width = nextPowerOfTwo(width);\n  height = nextPowerOfTwo(height);\n  // Use sqaured next power of two size, then use half of it since we are packing 2X2 group into a single RGBA pixel\n  const size = (width > height ? width : height) / 2;\n  const baseTexture = cloneTextureFrom(texture, {\n    width: size,\n    height: size\n  });\n\n  // build individual pyramid textures\n  const transform = new Transform(gl, {\n    _sourceTextures: {\n      inTexture: texture\n    },\n    _targetTexture: baseTexture,\n    _targetTextureVarying: 'outTexture',\n    vs: `${HISTOPYRAMID_BUILD_VS_UTILS}${HISTOPYRAMID_BASE_BUILD_VS}`,\n    elementCount: baseTexture.width * baseTexture.height\n  });\n  transform.run({\n    uniforms: {\n      channel: channelToIndexMap[channel] || 0,\n      padingPixelValue: [0, 0, 0, 0]\n    }\n  });\n  // _readData is debug only option\n  let textureData;\n  // when base textuer size is 1X1, there are no more level to be generated\n  // so read the texture data to be provided as base level data.\n  if (_readData || size === 1) {\n    textureData = transform.getData({packed: true});\n  }\n  const flatPyramidSize = size * 2;\n  const flatPyramidTexture = cloneTextureFrom(texture, {\n    width: flatPyramidSize,\n    height: flatPyramidSize,\n    parameters: {\n      [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n      [GL.TEXTURE_MIN_FILTER]: GL.NEAREST\n    }\n  });\n  const framebuffer = transform.getFramebuffer();\n  copyToTexture(framebuffer, flatPyramidTexture, {\n    targetX: 0,\n    width: size,\n    height: size\n  });\n\n  return {textureData, baseTexture, flatPyramidTexture};\n}\n\n// builds histopyramid for a given texture and returns individual levels and flatended pyramid texture\n// Returns object\n// * pyramidTextures: Array with all individual mip levels\n// * flatPyramidTexture: Texture with all mip levels laid out horizontally\nexport function getHistoPyramid(gl, opts) {\n  const {textureData, baseTexture, flatPyramidTexture} = buildHistopyramidBaseLevel(gl, opts);\n  const {width} = baseTexture;\n  // assert(width === height && isPowerOfTwo(width));\n  const levelCount = Math.log2(width) + 1;\n  const pyramidTextures = [baseTexture];\n\n  let topLevelData = textureData;\n  if (levelCount > 1) {\n    // build empty textures for rest of the pyramid\n    for (let i = 1; i < levelCount; i++) {\n      const size = width / Math.pow(2, i);\n      pyramidTextures.push(\n        cloneTextureFrom(baseTexture, {\n          width: size,\n          height: size\n        })\n      );\n    }\n\n    // build individual pyramid textures\n    const transform = new Transform(gl, {\n      _sourceTextures: {\n        inTexture: pyramidTextures[0]\n      },\n      _targetTexture: pyramidTextures[1],\n      _targetTextureVarying: 'outTexture',\n      vs: `${HISTOPYRAMID_BUILD_VS_UTILS}${HISTOPYRAMID_BUILD_VS}`,\n      elementCount: pyramidTextures[1].width * pyramidTextures[1].height\n    });\n\n    let flatOffset = width;\n    for (let i = 1; i < levelCount; i++) {\n      const outSize = [pyramidTextures[i].width, pyramidTextures[i].height];\n      transform.update({\n        _sourceTextures: {inTexture: pyramidTextures[i - 1]},\n        _targetTexture: pyramidTextures[i],\n        elementCount: pyramidTextures[i].width * pyramidTextures[i].height\n      });\n      transform.run();\n\n      // copy the result to the flaten pyramid texture\n      const framebuffer = transform.getFramebuffer();\n      copyToTexture(framebuffer, flatPyramidTexture, {\n        targetX: flatOffset,\n        width: outSize[0],\n        height: outSize[1]\n      });\n\n      flatOffset += outSize[0];\n    }\n    topLevelData = transform.getData();\n  }\n\n  return {pyramidTextures, flatPyramidTexture, levelCount, topLevelData};\n}\n\n// builds and traverses a histopyramid for a given texture and returns pixel locations and local-key index for each non zero weight in input texture\n// Returns object\n// *locationAndIndexBuffer : Buffer contains one vec4 for each non zero weight. XY represent loation, Z represents local-key index and W represent key-index\nexport function histoPyramidGenerateIndices(gl, opts) {\n  const {flatPyramidTexture, levelCount, topLevelData} = getHistoPyramid(gl, opts);\n\n  const keyIndexCount = topLevelData[0] + topLevelData[1] + topLevelData[2] + topLevelData[3];\n  const keyIndex = new Buffer(gl, new Float32Array(keyIndexCount).map((_, index) => index));\n  const locationAndIndex = new Buffer(gl, keyIndexCount * 4 * 4); // 4 floats for each key index\n\n  const transform = new Transform(gl, {\n    sourceBuffers: {\n      keyIndex\n    },\n    _sourceTextures: {\n      flatPyramidTexture\n    },\n    feedbackBuffers: {\n      locationAndIndex\n    },\n    varyings: ['locationAndIndex'],\n    vs: `${HISTOPYRAMID_TRAVERSAL_UTILS}${HISTOPYRAMID_TRAVERSAL_VS}`,\n    elementCount: keyIndexCount\n  });\n  transform.run({\n    uniforms: {\n      numLevels: levelCount\n    }\n  });\n\n  return {locationAndIndexBuffer: locationAndIndex};\n}\n"]},"metadata":{},"sourceType":"module"}