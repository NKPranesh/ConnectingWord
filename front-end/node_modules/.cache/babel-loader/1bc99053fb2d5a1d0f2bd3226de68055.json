{"ast":null,"code":"import { clamp } from 'math.gl';\nimport Controller from './controller';\nimport { OrbitState } from './orbit-controller';\n\nclass OrthographicState extends OrbitState {\n  constructor(props) {\n    super(props);\n    this.zoomAxis = props.zoomAxis || 'all';\n  }\n\n  _applyConstraints(props) {\n    const {\n      maxZoom,\n      minZoom,\n      zoom\n    } = props;\n    props.zoom = Array.isArray(zoom) ? [clamp(zoom[0], minZoom, maxZoom), clamp(zoom[1], minZoom, maxZoom)] : clamp(zoom, minZoom, maxZoom);\n    return props;\n  }\n\n  _calculateNewZoom(_ref) {\n    let {\n      scale,\n      startZoom\n    } = _ref;\n    const {\n      maxZoom,\n      minZoom\n    } = this._viewportProps;\n\n    if (!startZoom && startZoom !== 0) {\n      startZoom = this._viewportProps.zoom;\n    }\n\n    let deltaZoom = Math.log2(scale);\n\n    if (Array.isArray(startZoom)) {\n      let [newZoomX, newZoomY] = startZoom;\n\n      switch (this.zoomAxis) {\n        case 'X':\n          newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n          break;\n\n        case 'Y':\n          newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n          break;\n\n        default:\n          let z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n\n          if (z < minZoom) {\n            deltaZoom += minZoom - z;\n          }\n\n          z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n\n          if (z > maxZoom) {\n            deltaZoom += maxZoom - z;\n          }\n\n          newZoomX += deltaZoom;\n          newZoomY += deltaZoom;\n      }\n\n      return [newZoomX, newZoomY];\n    }\n\n    return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n  }\n\n}\n\nexport default class OrthographicController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(OrthographicState, props);\n  }\n\n  _onPanRotate(event) {\n    return false;\n  }\n\n  get linearTransitionProps() {\n    return ['target', 'zoom'];\n  }\n\n}","map":{"version":3,"sources":["../../../src/controllers/orthographic-controller.js"],"names":["constructor","props","_applyConstraints","zoom","Array","clamp","_calculateNewZoom","startZoom","minZoom","deltaZoom","Math","newZoomX","newZoomY","z","maxZoom","_onPanRotate","linearTransitionProps"],"mappings":"AAAA,SAAA,KAAA,QAAA,SAAA;AACA,OAAA,UAAA,MAAA,cAAA;AACA,SAAA,UAAA,QAAA,oBAAA;;AAEA,MAAA,iBAAA,SAAA,UAAA,CAA2C;AACzCA,EAAAA,WAAW,CAAA,KAAA,EAAQ;AACjB,UAAA,KAAA;AAEA,SAAA,QAAA,GAAgBC,KAAK,CAALA,QAAAA,IAAhB,KAAA;AACD;;AAEDC,EAAAA,iBAAiB,CAAA,KAAA,EAAQ;AACvB,UAAM;AAAA,MAAA,OAAA;AAAA,MAAA,OAAA;AAAmBC,MAAAA;AAAnB,QAAN,KAAA;AACAF,IAAAA,KAAK,CAALA,IAAAA,GAAaG,KAAK,CAALA,OAAAA,CAAAA,IAAAA,IACT,CAACC,KAAK,CAACF,IAAI,CAAL,CAAK,CAAL,EAAA,OAAA,EAAN,OAAM,CAAN,EAAmCE,KAAK,CAACF,IAAI,CAAL,CAAK,CAAL,EAAA,OAAA,EAD/BC,OAC+B,CAAxC,CADSA,GAETC,KAAK,CAAA,IAAA,EAAA,OAAA,EAFTJ,OAES,CAFTA;AAGA,WAAA,KAAA;AACD;;AAEDK,EAAAA,iBAAiB,OAAqB;AAAA,QAApB;AAAA,MAAA,KAAA;AAAQC,MAAAA;AAAR,KAAoB;AACpC,UAAM;AAAA,MAAA,OAAA;AAAUC,MAAAA;AAAV,QAAqB,KAA3B,cAAA;;AACA,QAAI,CAAA,SAAA,IAAcD,SAAS,KAA3B,CAAA,EAAmC;AACjCA,MAAAA,SAAS,GAAG,KAAA,cAAA,CAAZA,IAAAA;AACD;;AACD,QAAIE,SAAS,GAAGC,IAAI,CAAJA,IAAAA,CAAhB,KAAgBA,CAAhB;;AACA,QAAIN,KAAK,CAALA,OAAAA,CAAJ,SAAIA,CAAJ,EAA8B;AAC5B,UAAI,CAAA,QAAA,EAAA,QAAA,IAAJ,SAAA;;AACA,cAAQ,KAAR,QAAA;AACE,aAAA,GAAA;AAEEO,UAAAA,QAAQ,GAAGN,KAAK,CAACM,QAAQ,GAAT,SAAA,EAAA,OAAA,EAAhBA,OAAgB,CAAhBA;AACA;;AACF,aAAA,GAAA;AAEEC,UAAAA,QAAQ,GAAGP,KAAK,CAACO,QAAQ,GAAT,SAAA,EAAA,OAAA,EAAhBA,OAAgB,CAAhBA;AACA;;AACF;AAEE,cAAIC,CAAC,GAAGH,IAAI,CAAJA,GAAAA,CAASC,QAAQ,GAAjBD,SAAAA,EAA+BE,QAAQ,GAA/C,SAAQF,CAAR;;AACA,cAAIG,CAAC,GAAL,OAAA,EAAiB;AACfJ,YAAAA,SAAS,IAAID,OAAO,GAApBC,CAAAA;AACD;;AACDI,UAAAA,CAAC,GAAGH,IAAI,CAAJA,GAAAA,CAASC,QAAQ,GAAjBD,SAAAA,EAA+BE,QAAQ,GAA3CC,SAAIH,CAAJG;;AACA,cAAIA,CAAC,GAAL,OAAA,EAAiB;AACfJ,YAAAA,SAAS,IAAIK,OAAO,GAApBL,CAAAA;AACD;;AACDE,UAAAA,QAAQ,IAARA,SAAAA;AACAC,UAAAA,QAAQ,IAARA,SAAAA;AApBJ;;AAsBA,aAAO,CAAA,QAAA,EAAP,QAAO,CAAP;AACD;;AAID,WAAOP,KAAK,CAACE,SAAS,GAAV,SAAA,EAAA,OAAA,EAAZ,OAAY,CAAZ;AACD;;AAnDwC;;AAsD3C,eAAe,MAAA,sBAAA,SAAA,UAAA,CAAgD;AAC7DP,EAAAA,WAAW,CAAA,KAAA,EAAQ;AACjBC,IAAAA,KAAK,CAALA,QAAAA,GAAiBA,KAAK,CAALA,QAAAA,IAAjBA,KAAAA;AACA,UAAA,iBAAA,EAAA,KAAA;AACD;;AAEDc,EAAAA,YAAY,CAAA,KAAA,EAAQ;AAElB,WAAA,KAAA;AACD;;AAED,MAAIC,qBAAJ,GAA4B;AAC1B,WAAO,CAAA,QAAA,EAAP,MAAO,CAAP;AACD;;AAb4D","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\nimport {OrbitState} from './orbit-controller';\n\nclass OrthographicState extends OrbitState {\n  constructor(props) {\n    super(props);\n\n    this.zoomAxis = props.zoomAxis || 'all';\n  }\n\n  _applyConstraints(props) {\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = Array.isArray(zoom)\n      ? [clamp(zoom[0], minZoom, maxZoom), clamp(zoom[1], minZoom, maxZoom)]\n      : clamp(zoom, minZoom, maxZoom);\n    return props;\n  }\n\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    if (!startZoom && startZoom !== 0) {\n      startZoom = this._viewportProps.zoom;\n    }\n    let deltaZoom = Math.log2(scale);\n    if (Array.isArray(startZoom)) {\n      let [newZoomX, newZoomY] = startZoom;\n      switch (this.zoomAxis) {\n        case 'X':\n          // Scale x only\n          newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n          break;\n        case 'Y':\n          // Scale y only\n          newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n          break;\n        default:\n          // Lock aspect ratio\n          let z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z < minZoom) {\n            deltaZoom += minZoom - z;\n          }\n          z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z > maxZoom) {\n            deltaZoom += maxZoom - z;\n          }\n          newZoomX += deltaZoom;\n          newZoomY += deltaZoom;\n      }\n      return [newZoomX, newZoomY];\n    }\n    // Ignore `zoomAxis`\n    // `LinearTransitionInterpolator` does not support interpolation between a number and an array\n    // So if zoom is a number (legacy use case), new zoom still has to be a number\n    return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n  }\n}\n\nexport default class OrthographicController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(OrthographicState, props);\n  }\n\n  _onPanRotate(event) {\n    // No rotation in orthographic view\n    return false;\n  }\n\n  get linearTransitionProps() {\n    return ['target', 'zoom'];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}