{"ast":null,"code":"import { calculatePickingColors } from './geojson-binary';\n\nfunction createEmptyLayerProps() {\n  return {\n    points: {},\n    lines: {},\n    polygons: {},\n    polygonsOutline: {}\n  };\n}\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\nexport function createLayerPropsFromFeatures(features, featuresDiff) {\n  const layerProps = createEmptyLayerProps();\n  const {\n    pointFeatures,\n    lineFeatures,\n    polygonFeatures,\n    polygonOutlineFeatures\n  } = features;\n  layerProps.points.data = pointFeatures;\n\n  layerProps.points._dataDiff = featuresDiff.pointFeatures && (() => featuresDiff.pointFeatures);\n\n  layerProps.points.getPosition = getCoordinates;\n  layerProps.lines.data = lineFeatures;\n\n  layerProps.lines._dataDiff = featuresDiff.lineFeatures && (() => featuresDiff.lineFeatures);\n\n  layerProps.lines.getPath = getCoordinates;\n  layerProps.polygons.data = polygonFeatures;\n\n  layerProps.polygons._dataDiff = featuresDiff.polygonFeatures && (() => featuresDiff.polygonFeatures);\n\n  layerProps.polygons.getPolygon = getCoordinates;\n  layerProps.polygonsOutline.data = polygonOutlineFeatures;\n\n  layerProps.polygonsOutline._dataDiff = featuresDiff.polygonOutlineFeatures && (() => featuresDiff.polygonOutlineFeatures);\n\n  layerProps.polygonsOutline.getPath = getCoordinates;\n  return layerProps;\n}\nexport function createLayerPropsFromBinary(geojsonBinary, encodePickingColor) {\n  const layerProps = createEmptyLayerProps();\n  const {\n    points,\n    lines,\n    polygons\n  } = geojsonBinary;\n  const customPickingColors = calculatePickingColors(geojsonBinary, encodePickingColor);\n  layerProps.points.data = {\n    length: points.positions.value.length / points.positions.size,\n    attributes: {\n      getPosition: points.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.points\n      }\n    },\n    properties: points.properties,\n    numericProps: points.numericProps,\n    featureIds: points.featureIds\n  };\n  layerProps.lines.data = {\n    length: lines.pathIndices.value.length - 1,\n    startIndices: lines.pathIndices.value,\n    attributes: {\n      getPath: lines.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.lines\n      }\n    },\n    properties: lines.properties,\n    numericProps: lines.numericProps,\n    featureIds: lines.featureIds\n  };\n  layerProps.lines._pathType = 'open';\n  layerProps.polygons.data = {\n    length: polygons.polygonIndices.value.length - 1,\n    startIndices: polygons.polygonIndices.value,\n    attributes: {\n      getPolygon: polygons.positions,\n      pickingColors: {\n        size: 3,\n        value: customPickingColors.polygons\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  };\n  layerProps.polygons._normalize = false;\n\n  if (polygons.triangles) {\n    layerProps.polygons.data.attributes.indices = polygons.triangles.value;\n  }\n\n  layerProps.polygonsOutline.data = {\n    length: polygons.primitivePolygonIndices.value.length - 1,\n    startIndices: polygons.primitivePolygonIndices.value,\n    attributes: {\n      getPath: polygons.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.polygons\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  };\n  layerProps.polygonsOutline._pathType = 'open';\n  return layerProps;\n}","map":{"version":3,"sources":["../../../src/geojson-layer/geojson-layer-props.js"],"names":["points","lines","polygons","polygonsOutline","f","layerProps","createEmptyLayerProps","polygonOutlineFeatures","featuresDiff","customPickingColors","calculatePickingColors","length","attributes","getPosition","instancePickingColors","size","value","properties","numericProps","featureIds","startIndices","getPath","getPolygon","pickingColors"],"mappings":"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","sourcesContent":["import {calculatePickingColors} from './geojson-binary';\n\nfunction createEmptyLayerProps() {\n  return {\n    points: {},\n    lines: {},\n    polygons: {},\n    polygonsOutline: {}\n  };\n}\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\nexport function createLayerPropsFromFeatures(features, featuresDiff) {\n  const layerProps = createEmptyLayerProps();\n  const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = features;\n\n  layerProps.points.data = pointFeatures;\n  layerProps.points._dataDiff = featuresDiff.pointFeatures && (() => featuresDiff.pointFeatures);\n  layerProps.points.getPosition = getCoordinates;\n\n  layerProps.lines.data = lineFeatures;\n  layerProps.lines._dataDiff = featuresDiff.lineFeatures && (() => featuresDiff.lineFeatures);\n  layerProps.lines.getPath = getCoordinates;\n\n  layerProps.polygons.data = polygonFeatures;\n  layerProps.polygons._dataDiff =\n    featuresDiff.polygonFeatures && (() => featuresDiff.polygonFeatures);\n  layerProps.polygons.getPolygon = getCoordinates;\n\n  layerProps.polygonsOutline.data = polygonOutlineFeatures;\n  layerProps.polygonsOutline._dataDiff =\n    featuresDiff.polygonOutlineFeatures && (() => featuresDiff.polygonOutlineFeatures);\n  layerProps.polygonsOutline.getPath = getCoordinates;\n\n  return layerProps;\n}\n\nexport function createLayerPropsFromBinary(geojsonBinary, encodePickingColor) {\n  const layerProps = createEmptyLayerProps();\n  const {points, lines, polygons} = geojsonBinary;\n\n  const customPickingColors = calculatePickingColors(geojsonBinary, encodePickingColor);\n\n  layerProps.points.data = {\n    length: points.positions.value.length / points.positions.size,\n    attributes: {\n      getPosition: points.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.points\n      }\n    },\n    properties: points.properties,\n    numericProps: points.numericProps,\n    featureIds: points.featureIds\n  };\n\n  layerProps.lines.data = {\n    length: lines.pathIndices.value.length - 1,\n    startIndices: lines.pathIndices.value,\n    attributes: {\n      getPath: lines.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.lines\n      }\n    },\n    properties: lines.properties,\n    numericProps: lines.numericProps,\n    featureIds: lines.featureIds\n  };\n  layerProps.lines._pathType = 'open';\n\n  layerProps.polygons.data = {\n    length: polygons.polygonIndices.value.length - 1,\n    startIndices: polygons.polygonIndices.value,\n    attributes: {\n      getPolygon: polygons.positions,\n      pickingColors: {\n        size: 3,\n        value: customPickingColors.polygons\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  };\n  layerProps.polygons._normalize = false;\n  if (polygons.triangles) {\n    layerProps.polygons.data.attributes.indices = polygons.triangles.value;\n  }\n\n  layerProps.polygonsOutline.data = {\n    length: polygons.primitivePolygonIndices.value.length - 1,\n    startIndices: polygons.primitivePolygonIndices.value,\n    attributes: {\n      getPath: polygons.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.polygons\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  };\n  layerProps.polygonsOutline._pathType = 'open';\n\n  return layerProps;\n}\n"]},"metadata":{},"sourceType":"module"}