{"ast":null,"code":"import { Texture2D, TextureCube } from '@luma.gl/webgl';\nimport { loadImage } from '@loaders.gl/images';\nexport default class GLTFEnvironment {\n  constructor(gl, _ref) {\n    let {\n      brdfLutUrl,\n      getTexUrl,\n      specularMipLevels = 10\n    } = _ref;\n    this.gl = gl;\n    this.brdfLutUrl = brdfLutUrl;\n    this.getTexUrl = getTexUrl;\n    this.specularMipLevels = specularMipLevels;\n  }\n\n  makeCube(_ref2) {\n    let {\n      id,\n      getTextureForFace,\n      parameters\n    } = _ref2;\n    const pixels = {};\n    TextureCube.FACES.forEach(face => {\n      pixels[face] = getTextureForFace(face);\n    });\n    return new TextureCube(this.gl, {\n      id,\n      mipmaps: false,\n      parameters,\n      pixels\n    });\n  }\n\n  getDiffuseEnvSampler() {\n    if (!this._DiffuseEnvSampler) {\n      this._DiffuseEnvSampler = this.makeCube({\n        id: 'DiffuseEnvSampler',\n        getTextureForFace: dir => loadImage(this.getTexUrl('diffuse', dir, 0)),\n        parameters: {\n          [10242]: 33071,\n          [10243]: 33071,\n          [10241]: 9729,\n          [10240]: 9729\n        }\n      });\n    }\n\n    return this._DiffuseEnvSampler;\n  }\n\n  getSpecularEnvSampler() {\n    if (!this._SpecularEnvSampler) {\n      this._SpecularEnvSampler = this.makeCube({\n        id: 'SpecularEnvSampler',\n        getTextureForFace: dir => {\n          const imageArray = [];\n\n          for (let lod = 0; lod <= this.specularMipLevels - 1; lod++) {\n            imageArray.push(loadImage(this.getTexUrl('specular', dir, lod)));\n          }\n\n          return imageArray;\n        },\n        parameters: {\n          [10242]: 33071,\n          [10243]: 33071,\n          [10241]: 9987,\n          [10240]: 9729\n        }\n      });\n    }\n\n    return this._SpecularEnvSampler;\n  }\n\n  getBrdfTexture() {\n    if (!this._BrdfTexture) {\n      this._BrdfTexture = new Texture2D(this.gl, {\n        id: 'brdfLUT',\n        parameters: {\n          [10242]: 33071,\n          [10243]: 33071,\n          [10241]: 9729,\n          [10240]: 9729\n        },\n        data: loadImage(this.brdfLutUrl)\n      });\n    }\n\n    return this._BrdfTexture;\n  }\n\n  delete() {\n    if (this._DiffuseEnvSampler) {\n      this._DiffuseEnvSampler.delete();\n\n      this._DiffuseEnvSampler = null;\n    }\n\n    if (this._SpecularEnvSampler) {\n      this._SpecularEnvSampler.delete();\n\n      this._SpecularEnvSampler = null;\n    }\n\n    if (this._BrdfTexture) {\n      this._BrdfTexture.delete();\n\n      this._BrdfTexture = null;\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/gltf/gltf-environment.js"],"names":["constructor","specularMipLevels","makeCube","parameters","pixels","TextureCube","face","getTextureForFace","mipmaps","getDiffuseEnvSampler","id","dir","loadImage","getSpecularEnvSampler","imageArray","lod","getBrdfTexture","data","delete"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {Texture2D, TextureCube} from '@luma.gl/webgl';\nimport {loadImage} from '@loaders.gl/images';\n\nexport default class GLTFEnvironment {\n  constructor(gl, {brdfLutUrl, getTexUrl, specularMipLevels = 10}) {\n    this.gl = gl;\n    this.brdfLutUrl = brdfLutUrl;\n    this.getTexUrl = getTexUrl;\n    this.specularMipLevels = specularMipLevels;\n  }\n\n  makeCube({id, getTextureForFace, parameters}) {\n    const pixels = {};\n    TextureCube.FACES.forEach(face => {\n      pixels[face] = getTextureForFace(face);\n    });\n    return new TextureCube(this.gl, {\n      id,\n      mipmaps: false,\n      parameters,\n      pixels\n    });\n  }\n\n  getDiffuseEnvSampler() {\n    if (!this._DiffuseEnvSampler) {\n      this._DiffuseEnvSampler = this.makeCube({\n        id: 'DiffuseEnvSampler',\n        getTextureForFace: dir => loadImage(this.getTexUrl('diffuse', dir, 0)),\n        parameters: {\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR\n        }\n      });\n    }\n\n    return this._DiffuseEnvSampler;\n  }\n\n  getSpecularEnvSampler() {\n    if (!this._SpecularEnvSampler) {\n      this._SpecularEnvSampler = this.makeCube({\n        id: 'SpecularEnvSampler',\n        getTextureForFace: dir => {\n          const imageArray = [];\n          for (let lod = 0; lod <= this.specularMipLevels - 1; lod++) {\n            imageArray.push(loadImage(this.getTexUrl('specular', dir, lod)));\n          }\n          return imageArray;\n        },\n        parameters: {\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR\n        }\n      });\n    }\n\n    return this._SpecularEnvSampler;\n  }\n\n  getBrdfTexture() {\n    if (!this._BrdfTexture) {\n      this._BrdfTexture = new Texture2D(this.gl, {\n        id: 'brdfLUT',\n        parameters: {\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR\n        },\n        // Texture2D accepts a promise that returns an image as data (Async Textures)\n        data: loadImage(this.brdfLutUrl)\n      });\n    }\n\n    return this._BrdfTexture;\n  }\n\n  delete() {\n    if (this._DiffuseEnvSampler) {\n      this._DiffuseEnvSampler.delete();\n      this._DiffuseEnvSampler = null;\n    }\n\n    if (this._SpecularEnvSampler) {\n      this._SpecularEnvSampler.delete();\n      this._SpecularEnvSampler = null;\n    }\n\n    if (this._BrdfTexture) {\n      this._BrdfTexture.delete();\n      this._BrdfTexture = null;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}