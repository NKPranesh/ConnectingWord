{"ast":null,"code":"import { assert } from '../utils/assert';\nimport { isWebGL2 } from '../utils/webgl-checks';\nimport { getParameterPolyfill } from './get-parameter-polyfill';\nconst OES_vertex_array_object = 'OES_vertex_array_object';\nconst ANGLE_instanced_arrays = 'ANGLE_instanced_arrays';\nconst WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nconst EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nconst EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\nconst ERR_VAO_NOT_SUPPORTED = 'VertexArray requires WebGL2 or OES_vertex_array_object extension';\n\nfunction getExtensionData(gl, extension) {\n  return {\n    webgl2: isWebGL2(gl),\n    ext: gl.getExtension(extension)\n  };\n}\n\nexport const WEBGL2_CONTEXT_POLYFILLS = {\n  [OES_vertex_array_object]: {\n    meta: {\n      suffix: 'OES'\n    },\n    createVertexArray: () => {\n      assert(false, ERR_VAO_NOT_SUPPORTED);\n    },\n    deleteVertexArray: () => {},\n    bindVertexArray: () => {},\n    isVertexArray: () => false\n  },\n  [ANGLE_instanced_arrays]: {\n    meta: {\n      suffix: 'ANGLE'\n    },\n\n    vertexAttribDivisor(location, divisor) {\n      assert(divisor === 0, 'WebGL instanced rendering not supported');\n    },\n\n    drawElementsInstanced: () => {},\n    drawArraysInstanced: () => {}\n  },\n  [WEBGL_draw_buffers]: {\n    meta: {\n      suffix: 'WEBGL'\n    },\n    drawBuffers: () => {\n      assert(false);\n    }\n  },\n  [EXT_disjoint_timer_query]: {\n    meta: {\n      suffix: 'EXT'\n    },\n    createQuery: () => {\n      assert(false);\n    },\n    deleteQuery: () => {\n      assert(false);\n    },\n    beginQuery: () => {\n      assert(false);\n    },\n    endQuery: () => {},\n\n    getQuery(handle, pname) {\n      return this.getQueryObject(handle, pname);\n    },\n\n    getQueryParameter(handle, pname) {\n      return this.getQueryObject(handle, pname);\n    },\n\n    getQueryObject: () => {}\n  }\n};\nexport const WEBGL2_CONTEXT_OVERRIDES = {\n  readBuffer: (gl, originalFunc, attachment) => {\n    if (isWebGL2(gl)) {\n      originalFunc(attachment);\n    } else {}\n  },\n  getVertexAttrib: (gl, originalFunc, location, pname) => {\n    const {\n      webgl2,\n      ext\n    } = getExtensionData(gl, ANGLE_instanced_arrays);\n    let result;\n\n    switch (pname) {\n      case 35069:\n        result = !webgl2 ? false : undefined;\n        break;\n\n      case 35070:\n        result = !webgl2 && !ext ? 0 : undefined;\n        break;\n\n      default:\n    }\n\n    return result !== undefined ? result : originalFunc(location, pname);\n  },\n  getProgramParameter: (gl, originalFunc, program, pname) => {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case 35967:\n          return 35981;\n\n        case 35971:\n          return 0;\n\n        case 35382:\n          return 0;\n\n        default:\n      }\n    }\n\n    return originalFunc(program, pname);\n  },\n  getInternalformatParameter: (gl, originalFunc, target, format, pname) => {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case 32937:\n          return new Int32Array([0]);\n\n        default:\n      }\n    }\n\n    return gl.getInternalformatParameter(target, format, pname);\n  },\n\n  getTexParameter(gl, originalFunc, target, pname) {\n    switch (pname) {\n      case 34046:\n        const {\n          extensions\n        } = gl.luma;\n        const ext = extensions[EXT_texture_filter_anisotropic];\n        pname = ext && ext.TEXTURE_MAX_ANISOTROPY_EXT || 34046;\n        break;\n\n      default:\n    }\n\n    return originalFunc(target, pname);\n  },\n\n  getParameter: getParameterPolyfill,\n\n  hint(gl, originalFunc, pname, value) {\n    return originalFunc(pname, value);\n  }\n\n};","map":{"version":3,"sources":["../../../src/polyfill/polyfill-table.js"],"names":["OES_vertex_array_object","ANGLE_instanced_arrays","WEBGL_draw_buffers","EXT_disjoint_timer_query","EXT_texture_filter_anisotropic","ERR_VAO_NOT_SUPPORTED","webgl2","isWebGL2","ext","gl","WEBGL2_CONTEXT_POLYFILLS","meta","suffix","createVertexArray","assert","deleteVertexArray","bindVertexArray","isVertexArray","vertexAttribDivisor","divisor","drawElementsInstanced","drawArraysInstanced","drawBuffers","createQuery","deleteQuery","beginQuery","endQuery","getQuery","getQueryParameter","getQueryObject","WEBGL2_CONTEXT_OVERRIDES","readBuffer","originalFunc","getVertexAttrib","getExtensionData","result","getProgramParameter","getInternalformatParameter","getTexParameter","extensions","pname","getParameter","hint"],"mappings":"AACA,SAAA,MAAA,QAAA,iBAAA;AACA,SAAA,QAAA,QAAA,uBAAA;AAEA,SAAA,oBAAA,QAAA,0BAAA;AAEA,MAAMA,uBAAuB,GAA7B,yBAAA;AACA,MAAMC,sBAAsB,GAA5B,wBAAA;AACA,MAAMC,kBAAkB,GAAxB,oBAAA;AACA,MAAMC,wBAAwB,GAA9B,0BAAA;AACA,MAAMC,8BAA8B,GAApC,gCAAA;AAEA,MAAMC,qBAAqB,GAA3B,kEAAA;;AAGA,SAAA,gBAAA,CAAA,EAAA,EAAA,SAAA,EAAyC;AACvC,SAAO;AACLC,IAAAA,MAAM,EAAEC,QAAQ,CADX,EACW,CADX;AAELC,IAAAA,GAAG,EAAEC,EAAE,CAAFA,YAAAA,CAAAA,SAAAA;AAFA,GAAP;AAID;;AAQD,OAAO,MAAMC,wBAAwB,GAAG;AAEtC,GAAA,uBAAA,GAA2B;AACzBC,IAAAA,IAAI,EAAE;AAACC,MAAAA,MAAM,EAAE;AAAT,KADmB;AAGzBC,IAAAA,iBAAiB,EAAE,MAAM;AACvBC,MAAAA,MAAM,CAAA,KAAA,EAANA,qBAAM,CAANA;AAJuB,KAAA;AAMzBC,IAAAA,iBAAiB,EAAE,MAAM,CANA,CAAA;AAOzBC,IAAAA,eAAe,EAAE,MAAM,CAPE,CAAA;AAQzBC,IAAAA,aAAa,EAAE,MAAM;AARI,GAFW;AAYtC,GAAA,sBAAA,GAA0B;AACxBN,IAAAA,IAAI,EAAE;AACJC,MAAAA,MAAM,EAAE;AADJ,KADkB;;AAOxBM,IAAAA,mBAAmB,CAAA,QAAA,EAAA,OAAA,EAAoB;AAErCJ,MAAAA,MAAM,CAACK,OAAO,KAAR,CAAA,EAANL,yCAAM,CAANA;AATsB,KAAA;;AAWxBM,IAAAA,qBAAqB,EAAE,MAAM,CAXL,CAAA;AAYxBC,IAAAA,mBAAmB,EAAE,MAAM,CAAE;AAZL,GAZY;AA0BtC,GAAA,kBAAA,GAAsB;AACpBV,IAAAA,IAAI,EAAE;AACJC,MAAAA,MAAM,EAAE;AADJ,KADc;AAIpBU,IAAAA,WAAW,EAAE,MAAM;AACjBR,MAAAA,MAAM,CAANA,KAAM,CAANA;AACD;AANmB,GA1BgB;AAkCtC,GAAA,wBAAA,GAA4B;AAC1BH,IAAAA,IAAI,EAAE;AAACC,MAAAA,MAAM,EAAE;AAAT,KADoB;AAG1BW,IAAAA,WAAW,EAAE,MAAM;AACjBT,MAAAA,MAAM,CAANA,KAAM,CAANA;AAJwB,KAAA;AAM1BU,IAAAA,WAAW,EAAE,MAAM;AACjBV,MAAAA,MAAM,CAANA,KAAM,CAANA;AAPwB,KAAA;AAS1BW,IAAAA,UAAU,EAAE,MAAM;AAChBX,MAAAA,MAAM,CAANA,KAAM,CAANA;AAVwB,KAAA;AAY1BY,IAAAA,QAAQ,EAAE,MAAM,CAZU,CAAA;;AAa1BC,IAAAA,QAAQ,CAAA,MAAA,EAAA,KAAA,EAAgB;AAEtB,aAAO,KAAA,cAAA,CAAA,MAAA,EAAP,KAAO,CAAP;AAfwB,KAAA;;AAkB1BC,IAAAA,iBAAiB,CAAA,MAAA,EAAA,KAAA,EAAgB;AAE/B,aAAO,KAAA,cAAA,CAAA,MAAA,EAAP,KAAO,CAAP;AApBwB,KAAA;;AAsB1BC,IAAAA,cAAc,EAAE,MAAM,CAAE;AAtBE;AAlCU,CAAjC;AA4DP,OAAO,MAAMC,wBAAwB,GAAG;AAEtCC,EAAAA,UAAU,EAAE,CAAA,EAAA,EAAA,YAAA,EAAA,UAAA,KAAkC;AAC5C,QAAIxB,QAAQ,CAAZ,EAAY,CAAZ,EAAkB;AAChByB,MAAAA,YAAY,CAAZA,UAAY,CAAZA;AADF,KAAA,MAEO,CAEN;AAPmC,GAAA;AAUtCC,EAAAA,eAAe,EAAE,CAAA,EAAA,EAAA,YAAA,EAAA,QAAA,EAAA,KAAA,KAAuC;AAEtD,UAAM;AAAA,MAAA,MAAA;AAASzB,MAAAA;AAAT,QAAgB0B,gBAAgB,CAAA,EAAA,EAAtC,sBAAsC,CAAtC;AAEA,QAAA,MAAA;;AACA,YAAA,KAAA;AAEE,WAAA,KAAA;AACEC,QAAAA,MAAM,GAAG,CAAA,MAAA,GAAA,KAAA,GAATA,SAAAA;AACA;;AAEF,WAAA,KAAA;AACEA,QAAAA,MAAM,GAAG,CAAA,MAAA,IAAW,CAAX,GAAA,GAAA,CAAA,GAATA,SAAAA;AACA;;AACF;AATF;;AAYA,WAAOA,MAAM,KAANA,SAAAA,GAAAA,MAAAA,GAAgCH,YAAY,CAAA,QAAA,EAAnD,KAAmD,CAAnD;AA3BoC,GAAA;AA8BtCI,EAAAA,mBAAmB,EAAE,CAAA,EAAA,EAAA,YAAA,EAAA,OAAA,EAAA,KAAA,KAAsC;AACzD,QAAI,CAAC7B,QAAQ,CAAb,EAAa,CAAb,EAAmB;AACjB,cAAA,KAAA;AACE,aAAA,KAAA;AACE,iBAAA,KAAA;;AACF,aAAA,KAAA;AACE,iBAAA,CAAA;;AACF,aAAA,KAAA;AACE,iBAAA,CAAA;;AACF;AAPF;AASD;;AACD,WAAOyB,YAAY,CAAA,OAAA,EAAnB,KAAmB,CAAnB;AA1CoC,GAAA;AA4CtCK,EAAAA,0BAA0B,EAAE,CAAA,EAAA,EAAA,YAAA,EAAA,MAAA,EAAA,MAAA,EAAA,KAAA,KAA6C;AACvE,QAAI,CAAC9B,QAAQ,CAAb,EAAa,CAAb,EAAmB;AACjB,cAAA,KAAA;AACE,aAAA,KAAA;AACE,iBAAO,IAAA,UAAA,CAAe,CAAtB,CAAsB,CAAf,CAAP;;AACF;AAHF;AAKD;;AACD,WAAOE,EAAE,CAAFA,0BAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAP,KAAOA,CAAP;AApDoC,GAAA;;AAsDtC6B,EAAAA,eAAe,CAAA,EAAA,EAAA,YAAA,EAAA,MAAA,EAAA,KAAA,EAAkC;AAC/C,YAAA,KAAA;AACE,WAAA,KAAA;AACE,cAAM;AAACC,UAAAA;AAAD,YAAe9B,EAAE,CAAvB,IAAA;AACA,cAAMD,GAAG,GAAG+B,UAAU,CAAtB,8BAAsB,CAAtB;AACAC,QAAAA,KAAK,GAAIhC,GAAG,IAAIA,GAAG,CAAX,0BAACA,IAATgC,KAAAA;AACA;;AACF;AANF;;AAQA,WAAOR,YAAY,CAAA,MAAA,EAAnB,KAAmB,CAAnB;AA/DoC,GAAA;;AAiEtCS,EAAAA,YAAY,EAjE0B,oBAAA;;AAkEtCC,EAAAA,IAAI,CAAA,EAAA,EAAA,YAAA,EAAA,KAAA,EAAA,KAAA,EAAiC;AAKnC,WAAOV,YAAY,CAAA,KAAA,EAAnB,KAAmB,CAAnB;AACD;;AAxEqC,CAAjC","sourcesContent":["import GL from '@luma.gl/constants';\nimport {assert} from '../utils/assert';\nimport {isWebGL2} from '../utils/webgl-checks';\n\nimport {getParameterPolyfill} from './get-parameter-polyfill';\n\nconst OES_vertex_array_object = 'OES_vertex_array_object';\nconst ANGLE_instanced_arrays = 'ANGLE_instanced_arrays';\nconst WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nconst EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nconst EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\n\nconst ERR_VAO_NOT_SUPPORTED = 'VertexArray requires WebGL2 or OES_vertex_array_object extension';\n\n// Return object with webgl2 flag and an extension\nfunction getExtensionData(gl, extension) {\n  return {\n    webgl2: isWebGL2(gl),\n    ext: gl.getExtension(extension)\n  };\n}\n\n// function mapExtensionConstant(gl, constant) {\n//   switch (constant) {\n//   case ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES: return GL.FRAGMENT_SHADER_DERIVATIVE_HINT;\n//   }\n// }\n\nexport const WEBGL2_CONTEXT_POLYFILLS = {\n  // POLYFILL TABLE\n  [OES_vertex_array_object]: {\n    meta: {suffix: 'OES'},\n    // NEW METHODS\n    createVertexArray: () => {\n      assert(false, ERR_VAO_NOT_SUPPORTED);\n    },\n    deleteVertexArray: () => {},\n    bindVertexArray: () => {},\n    isVertexArray: () => false\n  },\n  [ANGLE_instanced_arrays]: {\n    meta: {\n      suffix: 'ANGLE'\n      // constants: {\n      //   VERTEX_ATTRIB_ARRAY_DIVISOR: 'VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE'\n      // }\n    },\n    vertexAttribDivisor(location, divisor) {\n      // Accept divisor 0 even if instancing is not supported (0 = no instancing)\n      assert(divisor === 0, 'WebGL instanced rendering not supported');\n    },\n    drawElementsInstanced: () => {},\n    drawArraysInstanced: () => {}\n  },\n  [WEBGL_draw_buffers]: {\n    meta: {\n      suffix: 'WEBGL'\n    },\n    drawBuffers: () => {\n      assert(false);\n    }\n  },\n  [EXT_disjoint_timer_query]: {\n    meta: {suffix: 'EXT'},\n    // WebGL1: Polyfills the WebGL2 Query API\n    createQuery: () => {\n      assert(false);\n    },\n    deleteQuery: () => {\n      assert(false);\n    },\n    beginQuery: () => {\n      assert(false);\n    },\n    endQuery: () => {},\n    getQuery(handle, pname) {\n      // @ts-ignore\n      return this.getQueryObject(handle, pname);\n    },\n    // The WebGL1 extension uses getQueryObject rather then getQueryParameter\n    getQueryParameter(handle, pname) {\n      // @ts-ignore\n      return this.getQueryObject(handle, pname);\n    },\n    getQueryObject: () => {}\n  }\n};\n\nexport const WEBGL2_CONTEXT_OVERRIDES = {\n  // Ensure readBuffer is a no-op\n  readBuffer: (gl, originalFunc, attachment) => {\n    if (isWebGL2(gl)) {\n      originalFunc(attachment);\n    } else {\n      // assert(attachment !== GL_COLOR_ATTACHMENT0 && attachment !== GL_FRONT);\n    }\n  },\n  // Override for getVertexAttrib that returns sane values for non-WebGL1 constants\n  getVertexAttrib: (gl, originalFunc, location, pname) => {\n    // const gl = this; // eslint-disable-line\n    const {webgl2, ext} = getExtensionData(gl, ANGLE_instanced_arrays);\n\n    let result;\n    switch (pname) {\n      // WebGL1 attributes will never be integer\n      case GL.VERTEX_ATTRIB_ARRAY_INTEGER:\n        result = !webgl2 ? false : undefined;\n        break;\n      // if instancing is not available, return 0 meaning divisor has not been set\n      case GL.VERTEX_ATTRIB_ARRAY_DIVISOR:\n        result = !webgl2 && !ext ? 0 : undefined;\n        break;\n      default:\n    }\n\n    return result !== undefined ? result : originalFunc(location, pname);\n  },\n  // Handle transform feedback and uniform block queries in WebGL1\n  getProgramParameter: (gl, originalFunc, program, pname) => {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case GL.TRANSFORM_FEEDBACK_BUFFER_MODE:\n          return GL.SEPARATE_ATTRIBS;\n        case GL.TRANSFORM_FEEDBACK_VARYINGS:\n          return 0;\n        case GL.ACTIVE_UNIFORM_BLOCKS:\n          return 0;\n        default:\n      }\n    }\n    return originalFunc(program, pname);\n  },\n  getInternalformatParameter: (gl, originalFunc, target, format, pname) => {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case GL.SAMPLES:\n          return new Int32Array([0]);\n        default:\n      }\n    }\n    return gl.getInternalformatParameter(target, format, pname);\n  },\n  getTexParameter(gl, originalFunc, target, pname) {\n    switch (pname) {\n      case GL.TEXTURE_MAX_ANISOTROPY_EXT:\n        const {extensions} = gl.luma;\n        const ext = extensions[EXT_texture_filter_anisotropic];\n        pname = (ext && ext.TEXTURE_MAX_ANISOTROPY_EXT) || GL.TEXTURE_MAX_ANISOTROPY_EXT;\n        break;\n      default:\n    }\n    return originalFunc(target, pname);\n  },\n  getParameter: getParameterPolyfill,\n  hint(gl, originalFunc, pname, value) {\n    // TODO - handle GL.FRAGMENT_SHADER_DERIVATIVE_HINT:\n    // switch (pname) {\n    // case GL.FRAGMENT_SHADER_DERIVATIVE_HINT:\n    // }\n    return originalFunc(pname, value);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}