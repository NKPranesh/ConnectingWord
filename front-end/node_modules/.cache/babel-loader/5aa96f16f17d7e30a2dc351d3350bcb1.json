{"ast":null,"code":"import { log } from '@deck.gl/core';\nimport { Matrix4 } from 'math.gl';\nimport { MVTWorkerLoader } from '@loaders.gl/mvt';\nimport { binaryToGeojson } from '@loaders.gl/gis';\nimport { COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { ClipExtension } from '@deck.gl/extensions';\nimport TileLayer from '../tile-layer/tile-layer';\nimport { getURLFromTemplate, isURLTemplate } from '../tile-layer/utils';\nimport { transform } from './coordinate-transform';\nimport findIndexBinary from './find-index-binary';\nimport { GeoJsonLayer } from '@deck.gl/layers';\nconst WORLD_SIZE = 512;\nconst defaultProps = {\n  uniqueIdProperty: {\n    type: 'string',\n    value: ''\n  },\n  highlightedFeatureId: null,\n  loaders: [MVTWorkerLoader],\n  binary: true\n};\nexport default class MVTLayer extends TileLayer {\n  initializeState() {\n    super.initializeState();\n    this.setState({\n      data: null,\n      tileJSON: null\n    });\n  }\n\n  get isLoaded() {\n    return this.state.data && this.state.tileset && super.isLoaded;\n  }\n\n  updateState(_ref) {\n    let {\n      props,\n      oldProps,\n      context,\n      changeFlags\n    } = _ref;\n\n    if (changeFlags.dataChanged) {\n      this._updateTileData();\n    }\n\n    if (this.state.data) {\n      super.updateState({\n        props,\n        oldProps,\n        context,\n        changeFlags\n      });\n\n      this._setWGS84PropertyForTiles();\n    }\n  }\n\n  async _updateTileData() {\n    let {\n      data\n    } = this.props;\n    let tileJSON = null;\n\n    if (typeof data === 'string' && !isURLTemplate(data)) {\n      const {\n        onDataLoad,\n        fetch\n      } = this.props;\n      this.setState({\n        data: null,\n        tileJSON: null\n      });\n\n      try {\n        tileJSON = await fetch(data, {\n          propName: 'data',\n          layer: this,\n          loaders: []\n        });\n      } catch (error) {\n        this.raiseError(error, 'loading TileJSON');\n        data = null;\n      }\n\n      if (onDataLoad) {\n        onDataLoad(tileJSON);\n      }\n    } else if (data.tilejson) {\n      tileJSON = data;\n    }\n\n    if (tileJSON) {\n      data = tileJSON.tiles;\n    }\n\n    this.setState({\n      data,\n      tileJSON\n    });\n  }\n\n  _getTilesetOptions(props) {\n    const opts = super._getTilesetOptions(props);\n\n    const {\n      tileJSON\n    } = this.state;\n\n    if (tileJSON) {\n      if (Number.isFinite(tileJSON.minzoom) && tileJSON.minzoom > props.minZoom) {\n        opts.minZoom = tileJSON.minzoom;\n      }\n\n      if (Number.isFinite(tileJSON.maxzoom) && (!Number.isFinite(props.maxZoom) || tileJSON.maxzoom < props.maxZoom)) {\n        opts.maxZoom = tileJSON.maxzoom;\n      }\n    }\n\n    return opts;\n  }\n\n  renderLayers() {\n    if (!this.state.data) return null;\n    return super.renderLayers();\n  }\n\n  getTileData(tile) {\n    var _loadOptions;\n\n    const url = getURLFromTemplate(this.state.data, tile);\n\n    if (!url) {\n      return Promise.reject('Invalid URL');\n    }\n\n    let loadOptions = this.getLoadOptions();\n    const {\n      binary,\n      fetch\n    } = this.props;\n    const {\n      signal,\n      x,\n      y,\n      z\n    } = tile;\n    loadOptions = { ...loadOptions,\n      mimeType: 'application/x-protobuf',\n      mvt: { ...((_loadOptions = loadOptions) === null || _loadOptions === void 0 ? void 0 : _loadOptions.mvt),\n        coordinates: this.context.viewport.resolution ? 'wgs84' : 'local',\n        tileIndex: {\n          x,\n          y,\n          z\n        }\n      },\n      gis: binary ? {\n        format: 'binary'\n      } : {}\n    };\n    return fetch(url, {\n      propName: 'data',\n      layer: this,\n      loadOptions,\n      signal\n    });\n  }\n\n  renderSubLayers(props) {\n    const {\n      tile\n    } = props;\n    const worldScale = Math.pow(2, tile.z);\n    const xScale = WORLD_SIZE / worldScale;\n    const yScale = -xScale;\n    const xOffset = WORLD_SIZE * tile.x / worldScale;\n    const yOffset = WORLD_SIZE * (1 - tile.y / worldScale);\n    const modelMatrix = new Matrix4().scale([xScale, yScale, 1]);\n    props.autoHighlight = false;\n\n    if (!this.context.viewport.resolution) {\n      props.modelMatrix = modelMatrix;\n      props.coordinateOrigin = [xOffset, yOffset, 0];\n      props.coordinateSystem = COORDINATE_SYSTEM.CARTESIAN;\n      props.extensions = [...(props.extensions || []), new ClipExtension()];\n    }\n\n    const subLayers = super.renderSubLayers(props);\n\n    if (this.props.binary && !(subLayers instanceof GeoJsonLayer)) {\n      log.warn('renderSubLayers() must return GeoJsonLayer when using binary:true')();\n    }\n\n    return subLayers;\n  }\n\n  _updateAutoHighlight(info) {\n    const {\n      uniqueIdProperty\n    } = this.props;\n    const {\n      hoveredFeatureId,\n      hoveredFeatureLayerName\n    } = this.state;\n    const hoveredFeature = info.object;\n    let newHoveredFeatureId;\n    let newHoveredFeatureLayerName;\n\n    if (hoveredFeature) {\n      newHoveredFeatureId = getFeatureUniqueId(hoveredFeature, uniqueIdProperty);\n      newHoveredFeatureLayerName = getFeatureLayerName(hoveredFeature);\n    }\n\n    if (hoveredFeatureId !== newHoveredFeatureId || hoveredFeatureLayerName !== newHoveredFeatureLayerName) {\n      this.setState({\n        hoveredFeatureId: newHoveredFeatureId,\n        hoveredFeatureLayerName: newHoveredFeatureLayerName\n      });\n    }\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const isWGS84 = this.context.viewport.resolution;\n\n    if (this.props.binary && info.index !== -1) {\n      const {\n        data\n      } = params.sourceLayer.props;\n      info.object = binaryToGeojson(data, {\n        globalFeatureId: info.index\n      });\n    }\n\n    if (info.object && !isWGS84) {\n      info.object = transformTileCoordsToWGS84(info.object, info.tile.bbox, this.context.viewport);\n    }\n\n    return info;\n  }\n\n  getHighlightedObjectIndex(tile) {\n    const {\n      hoveredFeatureId,\n      hoveredFeatureLayerName\n    } = this.state;\n    const {\n      uniqueIdProperty,\n      highlightedFeatureId,\n      binary\n    } = this.props;\n    const data = tile.content;\n    const isHighlighted = isFeatureIdDefined(highlightedFeatureId);\n    const isFeatureIdPresent = isFeatureIdDefined(hoveredFeatureId) || isHighlighted;\n\n    if (!isFeatureIdPresent) {\n      return -1;\n    }\n\n    const featureIdToHighlight = isHighlighted ? highlightedFeatureId : hoveredFeatureId;\n\n    if (Array.isArray(data)) {\n      return data.findIndex(feature => {\n        const isMatchingId = getFeatureUniqueId(feature, uniqueIdProperty) === featureIdToHighlight;\n        const isMatchingLayer = isHighlighted || getFeatureLayerName(feature) === hoveredFeatureLayerName;\n        return isMatchingId && isMatchingLayer;\n      });\n    } else if (data && binary) {\n      return findIndexBinary(data, uniqueIdProperty, featureIdToHighlight, isHighlighted ? '' : hoveredFeatureLayerName);\n    }\n\n    return -1;\n  }\n\n  _pickObjects(maxObjects) {\n    const {\n      deck,\n      viewport\n    } = this.context;\n    const width = viewport.width;\n    const height = viewport.height;\n    const x = viewport.x;\n    const y = viewport.y;\n    const layerIds = [this.id];\n    return deck.pickObjects({\n      x,\n      y,\n      width,\n      height,\n      layerIds,\n      maxObjects\n    });\n  }\n\n  getRenderedFeatures() {\n    let maxFeatures = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    const features = this._pickObjects(maxFeatures);\n\n    const featureCache = new Set();\n    const renderedFeatures = [];\n\n    for (const f of features) {\n      const featureId = getFeatureUniqueId(f.object, this.props.uniqueIdProperty);\n\n      if (featureId === undefined) {\n        renderedFeatures.push(f.object);\n      } else if (!featureCache.has(featureId)) {\n        featureCache.add(featureId);\n        renderedFeatures.push(f.object);\n      }\n    }\n\n    return renderedFeatures;\n  }\n\n  _setWGS84PropertyForTiles() {\n    const propName = 'dataInWGS84';\n    const {\n      tileset\n    } = this.state;\n    tileset.selectedTiles.forEach(tile => {\n      if (!tile.hasOwnProperty(propName)) {\n        Object.defineProperty(tile, propName, {\n          get: () => {\n            if (!tile.content) {\n              return null;\n            }\n\n            if (this.props.binary && Array.isArray(tile.content) && !tile.content.length) {\n              return [];\n            }\n\n            if (tile._contentWGS84 === undefined) {\n              const content = this.props.binary ? binaryToGeojson(tile.content) : tile.content;\n              tile._contentWGS84 = content.map(feature => transformTileCoordsToWGS84(feature, tile.bbox, this.context.viewport));\n            }\n\n            return tile._contentWGS84;\n          }\n        });\n      }\n    });\n  }\n\n}\n\nfunction getFeatureUniqueId(feature, uniqueIdProperty) {\n  if (uniqueIdProperty) {\n    return feature.properties[uniqueIdProperty];\n  }\n\n  if ('id' in feature) {\n    return feature.id;\n  }\n\n  return undefined;\n}\n\nfunction getFeatureLayerName(feature) {\n  var _feature$properties;\n\n  return ((_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.layerName) || null;\n}\n\nfunction isFeatureIdDefined(value) {\n  return value !== undefined && value !== null && value !== '';\n}\n\nfunction transformTileCoordsToWGS84(object, bbox, viewport) {\n  const feature = { ...object,\n    geometry: {\n      type: object.geometry.type\n    }\n  };\n  Object.defineProperty(feature.geometry, 'coordinates', {\n    get: () => {\n      const wgs84Geom = transform(object.geometry, bbox, viewport);\n      return wgs84Geom.coordinates;\n    }\n  });\n  return feature;\n}\n\nMVTLayer.layerName = 'MVTLayer';\nMVTLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/mvt-layer/mvt-layer.js"],"names":["WORLD_SIZE","defaultProps","uniqueIdProperty","type","value","highlightedFeatureId","loaders","binary","initializeState","data","tileJSON","isLoaded","updateState","changeFlags","_updateTileData","isURLTemplate","fetch","propName","layer","onDataLoad","_getTilesetOptions","opts","Number","props","renderLayers","getTileData","url","getURLFromTemplate","Promise","loadOptions","z","mimeType","mvt","coordinates","tileIndex","gis","format","signal","renderSubLayers","tile","worldScale","Math","xScale","yScale","xOffset","yOffset","modelMatrix","COORDINATE_SYSTEM","subLayers","log","_updateAutoHighlight","hoveredFeatureLayerName","hoveredFeature","info","newHoveredFeatureId","getFeatureUniqueId","newHoveredFeatureLayerName","getFeatureLayerName","hoveredFeatureId","getPickingInfo","isWGS84","params","binaryToGeojson","globalFeatureId","index","transformTileCoordsToWGS84","getHighlightedObjectIndex","isHighlighted","isFeatureIdDefined","isFeatureIdPresent","featureIdToHighlight","Array","feature","isMatchingId","isMatchingLayer","findIndexBinary","_pickObjects","viewport","width","height","x","y","layerIds","maxObjects","getRenderedFeatures","maxFeatures","features","featureCache","renderedFeatures","featureId","f","_setWGS84PropertyForTiles","tileset","Object","get","content","geometry","object","wgs84Geom","transform","MVTLayer"],"mappings":"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","sourcesContent":["import {log} from '@deck.gl/core';\nimport {Matrix4} from 'math.gl';\nimport {MVTWorkerLoader} from '@loaders.gl/mvt';\nimport {binaryToGeojson} from '@loaders.gl/gis';\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {ClipExtension} from '@deck.gl/extensions';\n\nimport TileLayer from '../tile-layer/tile-layer';\nimport {getURLFromTemplate, isURLTemplate} from '../tile-layer/utils';\nimport {transform} from './coordinate-transform';\nimport findIndexBinary from './find-index-binary';\n\nimport {GeoJsonLayer} from '@deck.gl/layers';\n\nconst WORLD_SIZE = 512;\n\nconst defaultProps = {\n  uniqueIdProperty: {type: 'string', value: ''},\n  highlightedFeatureId: null,\n  loaders: [MVTWorkerLoader],\n  binary: true\n};\n\nexport default class MVTLayer extends TileLayer {\n  initializeState() {\n    super.initializeState();\n    this.setState({\n      data: null,\n      tileJSON: null\n    });\n  }\n\n  get isLoaded() {\n    return this.state.data && this.state.tileset && super.isLoaded;\n  }\n\n  updateState({props, oldProps, context, changeFlags}) {\n    if (changeFlags.dataChanged) {\n      this._updateTileData();\n    }\n\n    if (this.state.data) {\n      super.updateState({props, oldProps, context, changeFlags});\n      this._setWGS84PropertyForTiles();\n    }\n  }\n\n  /* eslint-disable complexity */\n  async _updateTileData() {\n    let {data} = this.props;\n    let tileJSON = null;\n\n    if (typeof data === 'string' && !isURLTemplate(data)) {\n      const {onDataLoad, fetch} = this.props;\n      this.setState({data: null, tileJSON: null});\n      try {\n        tileJSON = await fetch(data, {propName: 'data', layer: this, loaders: []});\n      } catch (error) {\n        this.raiseError(error, 'loading TileJSON');\n        data = null;\n      }\n\n      if (onDataLoad) {\n        onDataLoad(tileJSON);\n      }\n    } else if (data.tilejson) {\n      tileJSON = data;\n    }\n\n    if (tileJSON) {\n      data = tileJSON.tiles;\n    }\n\n    this.setState({data, tileJSON});\n  }\n\n  _getTilesetOptions(props) {\n    const opts = super._getTilesetOptions(props);\n    const {tileJSON} = this.state;\n\n    if (tileJSON) {\n      if (Number.isFinite(tileJSON.minzoom) && tileJSON.minzoom > props.minZoom) {\n        opts.minZoom = tileJSON.minzoom;\n      }\n\n      if (\n        Number.isFinite(tileJSON.maxzoom) &&\n        (!Number.isFinite(props.maxZoom) || tileJSON.maxzoom < props.maxZoom)\n      ) {\n        opts.maxZoom = tileJSON.maxzoom;\n      }\n    }\n    return opts;\n  }\n\n  /* eslint-disable complexity */\n\n  renderLayers() {\n    if (!this.state.data) return null;\n    return super.renderLayers();\n  }\n\n  getTileData(tile) {\n    const url = getURLFromTemplate(this.state.data, tile);\n    if (!url) {\n      return Promise.reject('Invalid URL');\n    }\n    let loadOptions = this.getLoadOptions();\n    const {binary, fetch} = this.props;\n    const {signal, x, y, z} = tile;\n    loadOptions = {\n      ...loadOptions,\n      mimeType: 'application/x-protobuf',\n      mvt: {\n        ...loadOptions?.mvt,\n        coordinates: this.context.viewport.resolution ? 'wgs84' : 'local',\n        tileIndex: {x, y, z}\n        // Local worker debug\n        // workerUrl: `modules/mvt/dist/mvt-loader.worker.js`\n        // Set worker to null to skip web workers\n        // workerUrl: null\n      },\n      gis: binary ? {format: 'binary'} : {}\n    };\n    return fetch(url, {propName: 'data', layer: this, loadOptions, signal});\n  }\n\n  renderSubLayers(props) {\n    const {tile} = props;\n    const worldScale = Math.pow(2, tile.z);\n\n    const xScale = WORLD_SIZE / worldScale;\n    const yScale = -xScale;\n\n    const xOffset = (WORLD_SIZE * tile.x) / worldScale;\n    const yOffset = WORLD_SIZE * (1 - tile.y / worldScale);\n\n    const modelMatrix = new Matrix4().scale([xScale, yScale, 1]);\n\n    props.autoHighlight = false;\n\n    if (!this.context.viewport.resolution) {\n      props.modelMatrix = modelMatrix;\n      props.coordinateOrigin = [xOffset, yOffset, 0];\n      props.coordinateSystem = COORDINATE_SYSTEM.CARTESIAN;\n      props.extensions = [...(props.extensions || []), new ClipExtension()];\n    }\n\n    const subLayers = super.renderSubLayers(props);\n\n    if (this.props.binary && !(subLayers instanceof GeoJsonLayer)) {\n      log.warn('renderSubLayers() must return GeoJsonLayer when using binary:true')();\n    }\n\n    return subLayers;\n  }\n\n  _updateAutoHighlight(info) {\n    const {uniqueIdProperty} = this.props;\n\n    const {hoveredFeatureId, hoveredFeatureLayerName} = this.state;\n    const hoveredFeature = info.object;\n    let newHoveredFeatureId;\n    let newHoveredFeatureLayerName;\n\n    if (hoveredFeature) {\n      newHoveredFeatureId = getFeatureUniqueId(hoveredFeature, uniqueIdProperty);\n      newHoveredFeatureLayerName = getFeatureLayerName(hoveredFeature);\n    }\n\n    if (\n      hoveredFeatureId !== newHoveredFeatureId ||\n      hoveredFeatureLayerName !== newHoveredFeatureLayerName\n    ) {\n      this.setState({\n        hoveredFeatureId: newHoveredFeatureId,\n        hoveredFeatureLayerName: newHoveredFeatureLayerName\n      });\n    }\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n\n    const isWGS84 = this.context.viewport.resolution;\n\n    if (this.props.binary && info.index !== -1) {\n      const {data} = params.sourceLayer.props;\n      info.object = binaryToGeojson(data, {globalFeatureId: info.index});\n    }\n    if (info.object && !isWGS84) {\n      info.object = transformTileCoordsToWGS84(info.object, info.tile.bbox, this.context.viewport);\n    }\n\n    return info;\n  }\n\n  getHighlightedObjectIndex(tile) {\n    const {hoveredFeatureId, hoveredFeatureLayerName} = this.state;\n    const {uniqueIdProperty, highlightedFeatureId, binary} = this.props;\n    const data = tile.content;\n\n    const isHighlighted = isFeatureIdDefined(highlightedFeatureId);\n    const isFeatureIdPresent = isFeatureIdDefined(hoveredFeatureId) || isHighlighted;\n\n    if (!isFeatureIdPresent) {\n      return -1;\n    }\n\n    const featureIdToHighlight = isHighlighted ? highlightedFeatureId : hoveredFeatureId;\n\n    // Iterable data\n    if (Array.isArray(data)) {\n      return data.findIndex(feature => {\n        const isMatchingId = getFeatureUniqueId(feature, uniqueIdProperty) === featureIdToHighlight;\n        const isMatchingLayer =\n          isHighlighted || getFeatureLayerName(feature) === hoveredFeatureLayerName;\n        return isMatchingId && isMatchingLayer;\n      });\n\n      // Non-iterable data\n    } else if (data && binary) {\n      // Get the feature index of the selected item to highlight\n      return findIndexBinary(\n        data,\n        uniqueIdProperty,\n        featureIdToHighlight,\n        isHighlighted ? '' : hoveredFeatureLayerName\n      );\n    }\n\n    return -1;\n  }\n\n  _pickObjects(maxObjects) {\n    const {deck, viewport} = this.context;\n    const width = viewport.width;\n    const height = viewport.height;\n    const x = viewport.x;\n    const y = viewport.y;\n    const layerIds = [this.id];\n    return deck.pickObjects({x, y, width, height, layerIds, maxObjects});\n  }\n\n  getRenderedFeatures(maxFeatures = null) {\n    const features = this._pickObjects(maxFeatures);\n    const featureCache = new Set();\n    const renderedFeatures = [];\n\n    for (const f of features) {\n      const featureId = getFeatureUniqueId(f.object, this.props.uniqueIdProperty);\n\n      if (featureId === undefined) {\n        // we have no id for the feature, we just add to the list\n        renderedFeatures.push(f.object);\n      } else if (!featureCache.has(featureId)) {\n        // Add removing duplicates\n        featureCache.add(featureId);\n        renderedFeatures.push(f.object);\n      }\n    }\n\n    return renderedFeatures;\n  }\n\n  _setWGS84PropertyForTiles() {\n    const propName = 'dataInWGS84';\n    const {tileset} = this.state;\n\n    tileset.selectedTiles.forEach(tile => {\n      if (!tile.hasOwnProperty(propName)) {\n        // eslint-disable-next-line accessor-pairs\n        Object.defineProperty(tile, propName, {\n          get: () => {\n            // Still loading or encountered an error\n            if (!tile.content) {\n              return null;\n            }\n\n            if (this.props.binary && Array.isArray(tile.content) && !tile.content.length) {\n              // TODO: @loaders.gl/mvt returns [] when no content. It should return a valid empty binary.\n              // https://github.com/visgl/loaders.gl/pull/1137\n              return [];\n            }\n\n            if (tile._contentWGS84 === undefined) {\n              // Create a cache to transform only once\n              const content = this.props.binary ? binaryToGeojson(tile.content) : tile.content;\n              tile._contentWGS84 = content.map(feature =>\n                transformTileCoordsToWGS84(feature, tile.bbox, this.context.viewport)\n              );\n            }\n            return tile._contentWGS84;\n          }\n        });\n      }\n    });\n  }\n}\n\nfunction getFeatureUniqueId(feature, uniqueIdProperty) {\n  if (uniqueIdProperty) {\n    return feature.properties[uniqueIdProperty];\n  }\n\n  if ('id' in feature) {\n    return feature.id;\n  }\n\n  return undefined;\n}\n\nfunction getFeatureLayerName(feature) {\n  return feature.properties?.layerName || null;\n}\n\nfunction isFeatureIdDefined(value) {\n  return value !== undefined && value !== null && value !== '';\n}\n\nfunction transformTileCoordsToWGS84(object, bbox, viewport) {\n  const feature = {\n    ...object,\n    geometry: {\n      type: object.geometry.type\n    }\n  };\n\n  // eslint-disable-next-line accessor-pairs\n  Object.defineProperty(feature.geometry, 'coordinates', {\n    get: () => {\n      const wgs84Geom = transform(object.geometry, bbox, viewport);\n      return wgs84Geom.coordinates;\n    }\n  });\n\n  return feature;\n}\n\nMVTLayer.layerName = 'MVTLayer';\nMVTLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}