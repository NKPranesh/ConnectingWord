{"ast":null,"code":"import { GL_PARAMETER_DEFAULTS, GL_HOOKED_SETTERS } from './webgl-parameter-tables';\nimport { setParameters, getParameters } from './unified-parameter-api';\nimport { assert } from '../utils/assert';\nimport { deepArrayEqual } from '../utils/utils';\n\nfunction installGetterOverride(gl, functionName) {\n  const originalGetterFunc = gl[functionName].bind(gl);\n\n  gl[functionName] = function get() {\n    const pname = arguments.length <= 0 ? undefined : arguments[0];\n\n    if (!(pname in gl.state.cache)) {\n      return originalGetterFunc(...arguments);\n    }\n\n    return gl.state.enable ? gl.state.cache[pname] : originalGetterFunc(...arguments);\n  };\n\n  Object.defineProperty(gl[functionName], 'name', {\n    value: `${functionName}-from-cache`,\n    configurable: false\n  });\n}\n\nfunction installSetterSpy(gl, functionName, setter) {\n  const originalSetterFunc = gl[functionName].bind(gl);\n\n  gl[functionName] = function set() {\n    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n      params[_key] = arguments[_key];\n    }\n\n    const {\n      valueChanged,\n      oldValue\n    } = setter(gl.state._updateCache, ...params);\n\n    if (valueChanged) {\n      originalSetterFunc(...params);\n    }\n\n    return oldValue;\n  };\n\n  Object.defineProperty(gl[functionName], 'name', {\n    value: `${functionName}-to-cache`,\n    configurable: false\n  });\n}\n\nfunction installProgramSpy(gl) {\n  const originalUseProgram = gl.useProgram.bind(gl);\n\n  gl.useProgram = function useProgramLuma(handle) {\n    if (gl.state.program !== handle) {\n      originalUseProgram(handle);\n      gl.state.program = handle;\n    }\n  };\n}\n\nclass GLState {\n  constructor(gl) {\n    let {\n      copyState = false,\n      log = () => {}\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.gl = gl;\n    this.program = null;\n    this.stateStack = [];\n    this.enable = true;\n    this.cache = copyState ? getParameters(gl) : Object.assign({}, GL_PARAMETER_DEFAULTS);\n    this.log = log;\n    this._updateCache = this._updateCache.bind(this);\n    Object.seal(this);\n  }\n\n  push() {\n    let values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.stateStack.push({});\n  }\n\n  pop() {\n    assert(this.stateStack.length > 0);\n    const oldValues = this.stateStack[this.stateStack.length - 1];\n    setParameters(this.gl, oldValues);\n    this.stateStack.pop();\n  }\n\n  _updateCache(values) {\n    let valueChanged = false;\n    let oldValue;\n    const oldValues = this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1];\n\n    for (const key in values) {\n      assert(key !== undefined);\n      const value = values[key];\n      const cached = this.cache[key];\n\n      if (!deepArrayEqual(value, cached)) {\n        valueChanged = true;\n        oldValue = cached;\n\n        if (oldValues && !(key in oldValues)) {\n          oldValues[key] = cached;\n        }\n\n        this.cache[key] = value;\n      }\n    }\n\n    return {\n      valueChanged,\n      oldValue\n    };\n  }\n\n}\n\nexport function trackContextState(gl) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    enable = true,\n    copyState\n  } = options;\n  assert(copyState !== undefined);\n\n  if (!gl.state) {\n    const global_ = typeof global !== 'undefined' ? global : window;\n    const {\n      polyfillContext\n    } = global_;\n\n    if (polyfillContext) {\n      polyfillContext(gl);\n    }\n\n    gl.state = new GLState(gl, {\n      copyState\n    });\n    installProgramSpy(gl);\n\n    for (const key in GL_HOOKED_SETTERS) {\n      const setter = GL_HOOKED_SETTERS[key];\n      installSetterSpy(gl, key, setter);\n    }\n\n    installGetterOverride(gl, 'getParameter');\n    installGetterOverride(gl, 'isEnabled');\n  }\n\n  gl.state.enable = enable;\n  return gl;\n}\nexport function pushContextState(gl) {\n  if (!gl.state) {\n    trackContextState(gl, {\n      copyState: false\n    });\n  }\n\n  gl.state.push();\n}\nexport function popContextState(gl) {\n  assert(gl.state);\n  gl.state.pop();\n}","map":{"version":3,"sources":["../../../src/state-tracker/track-context-state.js"],"names":["originalGetterFunc","gl","pname","Object","value","functionName","configurable","originalSetterFunc","oldValue","setter","originalUseProgram","constructor","copyState","log","getParameters","push","values","pop","assert","oldValues","setParameters","_updateCache","valueChanged","key","cached","deepArrayEqual","options","enable","global_","polyfillContext","installProgramSpy","GL_HOOKED_SETTERS","installSetterSpy","installGetterOverride","trackContextState"],"mappings":"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","sourcesContent":["// Support for listening to context state changes and intercepting state queries\n// NOTE: this system does not handle buffer bindings\n/** @typedef {import('./track-context-state')} types */\n\nimport {GL_PARAMETER_DEFAULTS, GL_HOOKED_SETTERS} from './webgl-parameter-tables';\nimport {setParameters, getParameters} from './unified-parameter-api';\nimport {assert} from '../utils/assert';\nimport {deepArrayEqual} from '../utils/utils';\n\n// HELPER FUNCTIONS - INSTALL GET/SET INTERCEPTORS (SPYS) ON THE CONTEXT\n\n// Overrides a WebGLRenderingContext state \"getter\" function\n// to return values directly from cache\nfunction installGetterOverride(gl, functionName) {\n  // Get the original function from the WebGLRenderingContext\n  const originalGetterFunc = gl[functionName].bind(gl);\n\n  // Wrap it with a spy so that we can update our state cache when it gets called\n  gl[functionName] = function get(...params) {\n    const pname = params[0];\n\n    // WebGL limits are not prepopulated in the cache, it's neither undefined in GL_PARAMETER_DEFAULTS\n    // nor intercepted by GL_HOOKED_SETTERS. Query the original getter.\n    if (!(pname in gl.state.cache)) {\n      return originalGetterFunc(...params);\n    }\n\n    // Optionally call the original function to do a \"hard\" query from the WebGLRenderingContext\n    return gl.state.enable\n      ? // Call the getter the params so that it can e.g. serve from a cache\n        gl.state.cache[pname]\n      : // Optionally call the original function to do a \"hard\" query from the WebGLRenderingContext\n        originalGetterFunc(...params);\n  };\n\n  // Set the name of this anonymous function to help in debugging and profiling\n  Object.defineProperty(gl[functionName], 'name', {\n    value: `${functionName}-from-cache`,\n    configurable: false\n  });\n}\n\n// Overrides a WebGLRenderingContext state \"setter\" function\n// to call a setter spy before the actual setter. Allows us to keep a cache\n// updated with a copy of the WebGL context state.\nfunction installSetterSpy(gl, functionName, setter) {\n  // Get the original function from the WebGLRenderingContext\n  const originalSetterFunc = gl[functionName].bind(gl);\n\n  // Wrap it with a spy so that we can update our state cache when it gets called\n  gl[functionName] = function set(...params) {\n    // Update the value\n    // Call the setter with the state cache and the params so that it can store the parameters\n    const {valueChanged, oldValue} = setter(gl.state._updateCache, ...params);\n\n    // Call the original WebGLRenderingContext func to make sure the context actually gets updated\n    if (valueChanged) {\n      originalSetterFunc(...params);\n    }\n\n    // Note: if the original function fails to set the value, our state cache will be bad\n    // No solution for this at the moment, but assuming that this is unlikely to be a real problem\n    // We could call the setter after the originalSetterFunc. Concern is that this would\n    // cause different behavior in debug mode, where originalSetterFunc can throw exceptions\n\n    return oldValue;\n  };\n\n  // Set the name of this anonymous function to help in debugging and profiling\n  Object.defineProperty(gl[functionName], 'name', {\n    value: `${functionName}-to-cache`,\n    configurable: false\n  });\n}\n\nfunction installProgramSpy(gl) {\n  const originalUseProgram = gl.useProgram.bind(gl);\n\n  gl.useProgram = function useProgramLuma(handle) {\n    if (gl.state.program !== handle) {\n      originalUseProgram(handle);\n      gl.state.program = handle;\n    }\n  };\n}\n\n// HELPER CLASS - GLState\n\n/* eslint-disable no-shadow */\nclass GLState {\n  constructor(\n    gl,\n    {\n      copyState = false, // Copy cache from params (slow) or initialize from WebGL defaults (fast)\n      log = () => {} // Logging function, called when gl parameter change calls are actually issued\n    } = {}\n  ) {\n    this.gl = gl;\n    this.program = null;\n    this.stateStack = [];\n    this.enable = true;\n    this.cache = copyState ? getParameters(gl) : Object.assign({}, GL_PARAMETER_DEFAULTS);\n    this.log = log;\n\n    this._updateCache = this._updateCache.bind(this);\n    Object.seal(this);\n  }\n\n  push(values = {}) {\n    this.stateStack.push({});\n  }\n\n  pop() {\n    assert(this.stateStack.length > 0);\n    // Use the saved values in the state stack to restore parameters\n    const oldValues = this.stateStack[this.stateStack.length - 1];\n    setParameters(this.gl, oldValues);\n    // Don't pop until we have reset parameters (to make sure other \"stack frames\" are not affected)\n    this.stateStack.pop();\n  }\n\n  // interceptor for context set functions - update our cache and our stack\n  // values (Object) - the key values for this setter\n  _updateCache(values) {\n    let valueChanged = false;\n    let oldValue; // = undefined\n\n    const oldValues = this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1];\n\n    for (const key in values) {\n      assert(key !== undefined);\n      const value = values[key];\n      const cached = this.cache[key];\n      // Check that value hasn't already been shadowed\n      if (!deepArrayEqual(value, cached)) {\n        valueChanged = true;\n        oldValue = cached;\n\n        // First, save current value being shadowed\n        // If a state stack frame is active, save the current parameter values for pop\n        // but first check that value hasn't already been shadowed and saved\n        if (oldValues && !(key in oldValues)) {\n          oldValues[key] = cached;\n        }\n\n        // Save current value being shadowed\n        this.cache[key] = value;\n      }\n    }\n\n    return {valueChanged, oldValue};\n  }\n}\n\n// PUBLIC API\n\n/**\n * Initialize WebGL state caching on a context\n * @type {types['trackContextState']}\n */\n// After calling this function, context state will be cached\n// gl.state.push() and gl.state.pop() will be available for saving,\n// temporarily modifying, and then restoring state.\nexport function trackContextState(gl, options = {}) {\n  const {enable = true, copyState} = options;\n  assert(copyState !== undefined);\n  // @ts-ignore\n  if (!gl.state) {\n    const global_ = typeof global !== 'undefined' ? global : window;\n    // @ts-ignore\n    const {polyfillContext} = global_;\n    if (polyfillContext) {\n      polyfillContext(gl);\n    }\n\n    // Create a state cache\n    // @ts-ignore\n    gl.state = new GLState(gl, {copyState});\n\n    installProgramSpy(gl);\n\n    // intercept all setter functions in the table\n    for (const key in GL_HOOKED_SETTERS) {\n      const setter = GL_HOOKED_SETTERS[key];\n      installSetterSpy(gl, key, setter);\n    }\n\n    // intercept all getter functions in the table\n    installGetterOverride(gl, 'getParameter');\n    installGetterOverride(gl, 'isEnabled');\n  }\n\n  // @ts-ignore\n  gl.state.enable = enable;\n\n  return gl;\n}\n\n/**\n * Initialize WebGL state caching on a context\n * @type {types['pushContextState']}\n */\nexport function pushContextState(gl) {\n  // @ts-ignore\n  if (!gl.state) {\n    trackContextState(gl, {copyState: false});\n  }\n  // @ts-ignore\n  gl.state.push();\n}\n\n/**\n * Initialize WebGL state caching on a context\n * @type {types['popContextState']}\n */\nexport function popContextState(gl) {\n  // @ts-ignore\n  assert(gl.state);\n  // @ts-ignore\n  gl.state.pop();\n}\n"]},"metadata":{},"sourceType":"module"}