{"ast":null,"code":"import ShaderModule from './shader-module';\nimport { assert } from '../utils';\nexport function resolveModules(modules) {\n  return getShaderDependencies(instantiateModules(modules));\n}\n\nfunction getShaderDependencies(modules) {\n  const moduleMap = {};\n  const moduleDepth = {};\n  getDependencyGraph({\n    modules,\n    level: 0,\n    moduleMap,\n    moduleDepth\n  });\n  return Object.keys(moduleDepth).sort((a, b) => moduleDepth[b] - moduleDepth[a]).map(name => moduleMap[name]);\n}\n\nfunction getDependencyGraph(_ref) {\n  let {\n    modules,\n    level,\n    moduleMap,\n    moduleDepth\n  } = _ref;\n\n  if (level >= 5) {\n    throw new Error('Possible loop in shader dependency graph');\n  }\n\n  for (const module of modules) {\n    moduleMap[module.name] = module;\n\n    if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) {\n      moduleDepth[module.name] = level;\n    }\n  }\n\n  for (const module of modules) {\n    if (module.dependencies) {\n      getDependencyGraph({\n        modules: module.dependencies,\n        level: level + 1,\n        moduleMap,\n        moduleDepth\n      });\n    }\n  }\n}\n\nfunction instantiateModules(modules, seen) {\n  return modules.map(module => {\n    if (module instanceof ShaderModule) {\n      return module;\n    }\n\n    assert(typeof module !== 'string', `Shader module use by name is deprecated. Import shader module '${module}' and use it directly.`);\n    assert(module.name, 'shader module has no name');\n    module = new ShaderModule(module);\n    module.dependencies = instantiateModules(module.dependencies);\n    return module;\n  });\n}\n\nexport const TEST_EXPORTS = {\n  getShaderDependencies,\n  getDependencyGraph\n};","map":{"version":3,"sources":["../../../src/lib/resolve-modules.js"],"names":["getShaderDependencies","instantiateModules","moduleMap","moduleDepth","getDependencyGraph","level","Object","name","module","modules","assert","TEST_EXPORTS"],"mappings":"AAAA,OAAA,YAAA,MAAA,iBAAA;AACA,SAAA,MAAA,QAAA,UAAA;AAGA,OAAO,SAAA,cAAA,CAAA,OAAA,EAAiC;AACtC,SAAOA,qBAAqB,CAACC,kBAAkB,CAA/C,OAA+C,CAAnB,CAA5B;AACD;;AAcD,SAAA,qBAAA,CAAA,OAAA,EAAwC;AACtC,QAAMC,SAAS,GAAf,EAAA;AACA,QAAMC,WAAW,GAAjB,EAAA;AACAC,EAAAA,kBAAkB,CAAC;AAAA,IAAA,OAAA;AAAUC,IAAAA,KAAK,EAAf,CAAA;AAAA,IAAA,SAAA;AAA+BF,IAAAA;AAA/B,GAAD,CAAlBC;AAGA,SAAOE,MAAM,CAANA,IAAAA,CAAAA,WAAAA,EAAAA,IAAAA,CACC,CAAA,CAAA,EAAA,CAAA,KAAUH,WAAW,CAAXA,CAAW,CAAXA,GAAiBA,WAAW,CADvCG,CACuC,CADvCA,EAAAA,GAAAA,CAEAC,IAAI,IAAIL,SAAS,CAFxB,IAEwB,CAFjBI,CAAP;AAGD;;AAcD,SAAA,kBAAA,OAAsE;AAAA,MAA1C;AAAA,IAAA,OAAA;AAAA,IAAA,KAAA;AAAA,IAAA,SAAA;AAA4BH,IAAAA;AAA5B,GAA0C;;AACpE,MAAIE,KAAK,IAAT,CAAA,EAAgB;AACd,UAAM,IAAA,KAAA,CAAN,0CAAM,CAAN;AACD;;AAGD,OAAK,MAAL,MAAA,IAAA,OAAA,EAA8B;AAC5BH,IAAAA,SAAS,CAACM,MAAM,CAAhBN,IAAS,CAATA,GAAAA,MAAAA;;AACA,QAAIC,WAAW,CAACK,MAAM,CAAlBL,IAAW,CAAXA,KAAAA,SAAAA,IAA0CA,WAAW,CAACK,MAAM,CAAlBL,IAAW,CAAXA,GAA9C,KAAA,EAAgF;AAC9EA,MAAAA,WAAW,CAACK,MAAM,CAAlBL,IAAW,CAAXA,GAAAA,KAAAA;AACD;AACF;;AAGD,OAAK,MAAL,MAAA,IAAA,OAAA,EAA8B;AAC5B,QAAIK,MAAM,CAAV,YAAA,EAAyB;AACvBJ,MAAAA,kBAAkB,CAAC;AAACK,QAAAA,OAAO,EAAED,MAAM,CAAhB,YAAA;AAA+BH,QAAAA,KAAK,EAAEA,KAAK,GAA3C,CAAA;AAAA,QAAA,SAAA;AAA4DF,QAAAA;AAA5D,OAAD,CAAlBC;AACD;AACF;AACF;;AAED,SAAA,kBAAA,CAAA,OAAA,EAAA,IAAA,EAA2C;AACzC,SAAO,OAAO,CAAP,GAAA,CAAYI,MAAM,IAAI;AAC3B,QAAIA,MAAM,YAAV,YAAA,EAAoC;AAClC,aAAA,MAAA;AACD;;AAEDE,IAAAA,MAAM,CACJ,OAAA,MAAA,KADI,QAAA,EAEH,kEAAiEF,MAFpEE,wBAAM,CAANA;AAIAA,IAAAA,MAAM,CAACF,MAAM,CAAP,IAAA,EAANE,2BAAM,CAANA;AAEAF,IAAAA,MAAM,GAAG,IAAA,YAAA,CAATA,MAAS,CAATA;AACAA,IAAAA,MAAM,CAANA,YAAAA,GAAsBP,kBAAkB,CAACO,MAAM,CAA/CA,YAAwC,CAAxCA;AAEA,WAAA,MAAA;AAdF,GAAO,CAAP;AAgBD;;AAED,OAAO,MAAMG,YAAY,GAAG;AAAA,EAAA,qBAAA;AAE1BP,EAAAA;AAF0B,CAArB","sourcesContent":["import ShaderModule from './shader-module';\nimport {assert} from '../utils';\n\n// Instantiate shader modules and any dependencies resolve dependencies\nexport function resolveModules(modules) {\n  return getShaderDependencies(instantiateModules(modules));\n}\n\n/**\n * Takes a list of shader module names and returns a new list of\n * shader module names that includes all dependencies, sorted so\n * that modules that are dependencies of other modules come first.\n *\n * If the shader glsl code from the returned modules is concatenated\n * in the reverse order, it is guaranteed that all functions be resolved and\n * that all function and variable definitions come before use.\n *\n * @param {String[]} modules - Array of modules (inline modules or module names)\n * @return {String[]} - Array of modules\n */\nfunction getShaderDependencies(modules) {\n  const moduleMap = {};\n  const moduleDepth = {};\n  getDependencyGraph({modules, level: 0, moduleMap, moduleDepth});\n\n  // Return a reverse sort so that dependencies come before the modules that use them\n  return Object.keys(moduleDepth)\n    .sort((a, b) => moduleDepth[b] - moduleDepth[a])\n    .map(name => moduleMap[name]);\n}\n\n/**\n * Recursively checks module dpendencies to calculate dependency\n * level of each module.\n *\n * @param {object} options\n * @param {object[]} options.modules - Array of modules\n * @param {number} options.level - Current level\n * @param {object} options.moduleMap -\n * @param {object} options.moduleDepth - Current level\n * @return {object} - Map of module name to its level\n */\n// Adds another level of dependencies to the result map\nfunction getDependencyGraph({modules, level, moduleMap, moduleDepth}) {\n  if (level >= 5) {\n    throw new Error('Possible loop in shader dependency graph');\n  }\n\n  // Update level on all current modules\n  for (const module of modules) {\n    moduleMap[module.name] = module;\n    if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) {\n      moduleDepth[module.name] = level;\n    }\n  }\n\n  // Recurse\n  for (const module of modules) {\n    if (module.dependencies) {\n      getDependencyGraph({modules: module.dependencies, level: level + 1, moduleMap, moduleDepth});\n    }\n  }\n}\n\nfunction instantiateModules(modules, seen) {\n  return modules.map(module => {\n    if (module instanceof ShaderModule) {\n      return module;\n    }\n\n    assert(\n      typeof module !== 'string',\n      `Shader module use by name is deprecated. Import shader module '${module}' and use it directly.`\n    );\n    assert(module.name, 'shader module has no name');\n\n    module = new ShaderModule(module);\n    module.dependencies = instantiateModules(module.dependencies);\n\n    return module;\n  });\n}\n\nexport const TEST_EXPORTS = {\n  getShaderDependencies,\n  getDependencyGraph\n};\n"]},"metadata":{},"sourceType":"module"}