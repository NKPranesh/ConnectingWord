{"ast":null,"code":"import { getStringFromArrayBuffer } from './parse-utils';\nconst SIZEOF_UINT32 = 4;\nconst DEPRECATION_WARNING = \"b3dm tile in legacy format.\";\nexport function parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset) {\n  const view = new DataView(arrayBuffer);\n  let batchLength;\n  tile.header = tile.header || {};\n  let featureTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n  let featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n  let batchTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n  let batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  if (batchTableJsonByteLength >= 570425344) {\n    byteOffset -= SIZEOF_UINT32 * 2;\n    batchLength = featureTableJsonByteLength;\n    batchTableJsonByteLength = featureTableBinaryByteLength;\n    batchTableBinaryByteLength = 0;\n    featureTableJsonByteLength = 0;\n    featureTableBinaryByteLength = 0;\n    console.warn(DEPRECATION_WARNING);\n  } else if (batchTableBinaryByteLength >= 570425344) {\n    byteOffset -= SIZEOF_UINT32;\n    batchLength = batchTableJsonByteLength;\n    batchTableJsonByteLength = featureTableJsonByteLength;\n    batchTableBinaryByteLength = featureTableBinaryByteLength;\n    featureTableJsonByteLength = 0;\n    featureTableBinaryByteLength = 0;\n    console.warn(DEPRECATION_WARNING);\n  }\n\n  tile.header.featureTableJsonByteLength = featureTableJsonByteLength;\n  tile.header.featureTableBinaryByteLength = featureTableBinaryByteLength;\n  tile.header.batchTableJsonByteLength = batchTableJsonByteLength;\n  tile.header.batchTableBinaryByteLength = batchTableBinaryByteLength;\n  tile.header.batchLength = batchLength;\n  return byteOffset;\n}\nexport function parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options) {\n  byteOffset = parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options);\n  return byteOffset;\n}\n\nfunction parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options) {\n  const {\n    featureTableJsonByteLength,\n    featureTableBinaryByteLength,\n    batchLength\n  } = tile.header;\n  tile.featureTableJson = {\n    BATCH_LENGTH: batchLength || 0\n  };\n\n  if (featureTableJsonByteLength > 0) {\n    const featureTableString = getStringFromArrayBuffer(arrayBuffer, byteOffset, featureTableJsonByteLength);\n    tile.featureTableJson = JSON.parse(featureTableString);\n  }\n\n  byteOffset += featureTableJsonByteLength;\n  tile.featureTableBinary = new Uint8Array(arrayBuffer, byteOffset, featureTableBinaryByteLength);\n  byteOffset += featureTableBinaryByteLength;\n  return byteOffset;\n}\n\nfunction parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options) {\n  const {\n    batchTableJsonByteLength,\n    batchTableBinaryByteLength\n  } = tile.header;\n\n  if (batchTableJsonByteLength > 0) {\n    const batchTableString = getStringFromArrayBuffer(arrayBuffer, byteOffset, batchTableJsonByteLength);\n    tile.batchTableJson = JSON.parse(batchTableString);\n    byteOffset += batchTableJsonByteLength;\n\n    if (batchTableBinaryByteLength > 0) {\n      tile.batchTableBinary = new Uint8Array(arrayBuffer, byteOffset, batchTableBinaryByteLength);\n      tile.batchTableBinary = new Uint8Array(tile.batchTableBinary);\n      byteOffset += batchTableBinaryByteLength;\n    }\n  }\n\n  return byteOffset;\n}","map":{"version":3,"sources":["../../../../../src/lib/parsers/helpers/parse-3d-tile-tables.js"],"names":["SIZEOF_UINT32","DEPRECATION_WARNING","view","tile","featureTableJsonByteLength","byteOffset","featureTableBinaryByteLength","batchTableJsonByteLength","batchTableBinaryByteLength","batchLength","console","parse3DTileFeatureTable","parse3DTileBatchTable","BATCH_LENGTH","featureTableString","getStringFromArrayBuffer","JSON","batchTableString"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {getStringFromArrayBuffer} from './parse-utils';\n\nconst SIZEOF_UINT32 = 4;\nconst DEPRECATION_WARNING = `b3dm tile in legacy format.`;\n\n// eslint-disable-next-line max-statements\nexport function parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset) {\n  const view = new DataView(arrayBuffer);\n  let batchLength;\n\n  tile.header = tile.header || {};\n\n  let featureTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  let featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  let batchTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  let batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  // First legacy header format - [batchLength] [batchTableByteLength] ('batchTableJsonByteLength': JSON starts with a quotation mark or the glTF magic)\n  // Second legacy format - [batchTableJsonByteLength] [batchTableBinaryByteLength] [batchLength] (Second legacy format is similar as first but here we check 'batchTableBinaryByteLength' instead)\n  // Current header format - [featureTableJsonByteLength] [featureTableBinaryByteLength] [batchTableJsonByteLength] [batchTableBinaryByteLength]\n  // First byte will be 0x22 or 0x67. The minimum uint32 expected is 0x22000000 = 570425344 = 570MB.\n  if (batchTableJsonByteLength >= 570425344) {\n    byteOffset -= SIZEOF_UINT32 * 2;\n    batchLength = featureTableJsonByteLength;\n    batchTableJsonByteLength = featureTableBinaryByteLength;\n    batchTableBinaryByteLength = 0;\n    featureTableJsonByteLength = 0;\n    featureTableBinaryByteLength = 0;\n\n    console.warn(DEPRECATION_WARNING); // eslint-disable-line\n  } else if (batchTableBinaryByteLength >= 570425344) {\n    byteOffset -= SIZEOF_UINT32;\n    batchLength = batchTableJsonByteLength;\n    batchTableJsonByteLength = featureTableJsonByteLength;\n    batchTableBinaryByteLength = featureTableBinaryByteLength;\n    featureTableJsonByteLength = 0;\n    featureTableBinaryByteLength = 0;\n\n    console.warn(DEPRECATION_WARNING); // eslint-disable-line\n  }\n\n  tile.header.featureTableJsonByteLength = featureTableJsonByteLength;\n  tile.header.featureTableBinaryByteLength = featureTableBinaryByteLength;\n  tile.header.batchTableJsonByteLength = batchTableJsonByteLength;\n  tile.header.batchTableBinaryByteLength = batchTableBinaryByteLength;\n  tile.header.batchLength = batchLength;\n\n  return byteOffset;\n}\n\nexport function parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options) {\n  byteOffset = parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options);\n  return byteOffset;\n}\n\nfunction parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options) {\n  const {featureTableJsonByteLength, featureTableBinaryByteLength, batchLength} = tile.header;\n\n  tile.featureTableJson = {\n    BATCH_LENGTH: batchLength || 0\n  };\n\n  if (featureTableJsonByteLength > 0) {\n    const featureTableString = getStringFromArrayBuffer(\n      arrayBuffer,\n      byteOffset,\n      featureTableJsonByteLength\n    );\n    tile.featureTableJson = JSON.parse(featureTableString);\n  }\n  byteOffset += featureTableJsonByteLength;\n\n  tile.featureTableBinary = new Uint8Array(arrayBuffer, byteOffset, featureTableBinaryByteLength);\n  byteOffset += featureTableBinaryByteLength;\n\n  /*\n  const featureTable = parseFeatureTable(featureTableJson, featureTableBinary);\n\n  const batchLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n  featureTable.featuresLength = batchLength;\n  */\n\n  return byteOffset;\n}\n\nfunction parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options) {\n  const {batchTableJsonByteLength, batchTableBinaryByteLength} = tile.header;\n\n  if (batchTableJsonByteLength > 0) {\n    const batchTableString = getStringFromArrayBuffer(\n      arrayBuffer,\n      byteOffset,\n      batchTableJsonByteLength\n    );\n    tile.batchTableJson = JSON.parse(batchTableString);\n    byteOffset += batchTableJsonByteLength;\n\n    if (batchTableBinaryByteLength > 0) {\n      // Has a batch table binary\n      tile.batchTableBinary = new Uint8Array(arrayBuffer, byteOffset, batchTableBinaryByteLength);\n      // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n      tile.batchTableBinary = new Uint8Array(tile.batchTableBinary);\n\n      byteOffset += batchTableBinaryByteLength;\n    }\n  }\n\n  return byteOffset;\n}\n"]},"metadata":{},"sourceType":"module"}