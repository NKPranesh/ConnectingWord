{"ast":null,"code":"import { log } from '@deck.gl/core';\nimport { Geometry, uid } from '@luma.gl/core';\nimport { modifyPolygonWindingDirection, WINDING } from '@math.gl/polygon';\nexport default class ColumnGeometry extends Geometry {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      id = uid('column-geometry')\n    } = props;\n    const {\n      indices,\n      attributes\n    } = tesselateColumn(props);\n    super({ ...props,\n      id,\n      indices,\n      attributes\n    });\n  }\n\n}\n\nfunction tesselateColumn(props) {\n  const {\n    radius,\n    height = 1,\n    nradial = 10\n  } = props;\n  let {\n    vertices\n  } = props;\n\n  if (vertices) {\n    log.assert(vertices.length >= nradial);\n    vertices = vertices.flatMap(v => [v[0], v[1]]);\n    modifyPolygonWindingDirection(vertices, WINDING.COUNTER_CLOCKWISE);\n  }\n\n  const isExtruded = height > 0;\n  const vertsAroundEdge = nradial + 1;\n  const numVertices = isExtruded ? vertsAroundEdge * 3 + 1 : nradial;\n  const stepAngle = Math.PI * 2 / nradial;\n  const indices = new Uint16Array(isExtruded ? nradial * 3 * 2 : 0);\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n  let i = 0;\n\n  if (isExtruded) {\n    for (let j = 0; j < vertsAroundEdge; j++) {\n      const a = j * stepAngle;\n      const vertexIndex = j % nradial;\n      const sin = Math.sin(a);\n      const cos = Math.cos(a);\n\n      for (let k = 0; k < 2; k++) {\n        positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;\n        positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;\n        positions[i + 2] = (1 / 2 - k) * height;\n        normals[i + 0] = vertices ? vertices[vertexIndex * 2] : cos;\n        normals[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin;\n        i += 3;\n      }\n    }\n\n    positions[i + 0] = positions[i - 3];\n    positions[i + 1] = positions[i - 2];\n    positions[i + 2] = positions[i - 1];\n    i += 3;\n  }\n\n  for (let j = isExtruded ? 0 : 1; j < vertsAroundEdge; j++) {\n    const v = Math.floor(j / 2) * Math.sign(0.5 - j % 2);\n    const a = v * stepAngle;\n    const vertexIndex = (v + nradial) % nradial;\n    const sin = Math.sin(a);\n    const cos = Math.cos(a);\n    positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;\n    positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;\n    positions[i + 2] = height / 2;\n    normals[i + 2] = 1;\n    i += 3;\n  }\n\n  if (isExtruded) {\n    let index = 0;\n\n    for (let j = 0; j < nradial; j++) {\n      indices[index++] = j * 2 + 0;\n      indices[index++] = j * 2 + 2;\n      indices[index++] = j * 2 + 0;\n      indices[index++] = j * 2 + 1;\n      indices[index++] = j * 2 + 1;\n      indices[index++] = j * 2 + 3;\n    }\n  }\n\n  return {\n    indices,\n    attributes: {\n      POSITION: {\n        size: 3,\n        value: positions\n      },\n      NORMAL: {\n        size: 3,\n        value: normals\n      }\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/column-layer/column-geometry.js"],"names":["constructor","props","id","uid","attributes","tesselateColumn","height","nradial","vertices","log","v","modifyPolygonWindingDirection","WINDING","isExtruded","vertsAroundEdge","numVertices","stepAngle","Math","indices","positions","normals","i","j","a","vertexIndex","sin","cos","k","index","POSITION","size","value","NORMAL"],"mappings":"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","sourcesContent":["import {log} from '@deck.gl/core';\nimport {Geometry, uid} from '@luma.gl/core';\nimport {modifyPolygonWindingDirection, WINDING} from '@math.gl/polygon';\n\nexport default class ColumnGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('column-geometry')} = props;\n    const {indices, attributes} = tesselateColumn(props);\n    super({\n      ...props,\n      id,\n      indices,\n      attributes\n    });\n  }\n}\n\n/* eslint-disable max-statements, complexity */\nfunction tesselateColumn(props) {\n  const {radius, height = 1, nradial = 10} = props;\n  let {vertices} = props;\n\n  if (vertices) {\n    log.assert(vertices.length >= nradial); // `vertices` must contain at least `diskResolution` points\n    vertices = vertices.flatMap(v => [v[0], v[1]]);\n    modifyPolygonWindingDirection(vertices, WINDING.COUNTER_CLOCKWISE);\n  }\n\n  const isExtruded = height > 0;\n  const vertsAroundEdge = nradial + 1; // loop\n  const numVertices = isExtruded\n    ? vertsAroundEdge * 3 + 1 // top, side top edge, side bottom edge, one additional degenerage vertex\n    : nradial; // top\n\n  const stepAngle = (Math.PI * 2) / nradial;\n\n  // Used for wireframe\n  const indices = new Uint16Array(isExtruded ? nradial * 3 * 2 : 0); // top loop, side vertical, bottom loop\n\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n\n  let i = 0;\n\n  // side tesselation: 0, 1, 2, 3, 4, 5, ...\n  //\n  // 0 - 2 - 4  ... top\n  // | / | / |\n  // 1 - 3 - 5  ... bottom\n  //\n  if (isExtruded) {\n    for (let j = 0; j < vertsAroundEdge; j++) {\n      const a = j * stepAngle;\n      const vertexIndex = j % nradial;\n      const sin = Math.sin(a);\n      const cos = Math.cos(a);\n\n      for (let k = 0; k < 2; k++) {\n        positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;\n        positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;\n        positions[i + 2] = (1 / 2 - k) * height;\n\n        normals[i + 0] = vertices ? vertices[vertexIndex * 2] : cos;\n        normals[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin;\n\n        i += 3;\n      }\n    }\n\n    // duplicate the last vertex to create proper degenerate triangle.\n    positions[i + 0] = positions[i - 3];\n    positions[i + 1] = positions[i - 2];\n    positions[i + 2] = positions[i - 1];\n    i += 3;\n  }\n\n  // The column geometry is rendered as a triangle strip, so\n  // in order to render sides and top in one go we need to use degenerate triangles.\n  // Duplicate last vertex of side trinagles and first vertex of the top cap to preserve winding order.\n\n  // top tesselation: 0, -1, 1, -2, 2, -3, 3, ...\n  //\n  //    0 -- 1\n  //   /      \\\n  // -1        2\n  //  |        |\n  // -2        3\n  //   \\      /\n  //   -3 -- 4\n  //\n  for (let j = isExtruded ? 0 : 1; j < vertsAroundEdge; j++) {\n    const v = Math.floor(j / 2) * Math.sign(0.5 - (j % 2));\n    const a = v * stepAngle;\n    const vertexIndex = (v + nradial) % nradial;\n    const sin = Math.sin(a);\n    const cos = Math.cos(a);\n\n    positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;\n    positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;\n    positions[i + 2] = height / 2;\n\n    normals[i + 2] = 1;\n\n    i += 3;\n  }\n\n  if (isExtruded) {\n    let index = 0;\n    for (let j = 0; j < nradial; j++) {\n      // top loop\n      indices[index++] = j * 2 + 0;\n      indices[index++] = j * 2 + 2;\n      // side vertical\n      indices[index++] = j * 2 + 0;\n      indices[index++] = j * 2 + 1;\n      // bottom loop\n      indices[index++] = j * 2 + 1;\n      indices[index++] = j * 2 + 3;\n    }\n  }\n\n  return {\n    indices,\n    attributes: {\n      POSITION: {size: 3, value: positions},\n      NORMAL: {size: 3, value: normals}\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}