{"ast":null,"code":"import { COORDINATE_SYSTEM } from '../../lib/constants';\nimport { getOffsetOrigin } from './viewport-uniforms';\nimport WebMercatorViewport from '../../viewports/web-mercator-viewport';\nimport * as vec4 from 'gl-matrix/vec4';\nimport * as vec3 from 'gl-matrix/vec3';\nimport { addMetersToLngLat } from '@math.gl/web-mercator';\n\nfunction lngLatZToWorldPosition(lngLatZ, viewport) {\n  let offsetMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const p = viewport.projectPosition(lngLatZ);\n\n  if (offsetMode && viewport instanceof WebMercatorViewport) {\n    const [longitude, latitude, z = 0] = lngLatZ;\n    const distanceScales = viewport.getDistanceScales([longitude, latitude]);\n    p[2] = z * distanceScales.unitsPerMeter[2];\n  }\n\n  return p;\n}\n\nfunction normalizeParameters(opts) {\n  const normalizedParams = { ...opts\n  };\n  let {\n    coordinateSystem\n  } = opts;\n  const {\n    viewport,\n    coordinateOrigin,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  } = opts;\n\n  if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n    coordinateSystem = viewport.isGeospatial ? COORDINATE_SYSTEM.LNGLAT : COORDINATE_SYSTEM.CARTESIAN;\n  }\n\n  if (fromCoordinateSystem === undefined) {\n    normalizedParams.fromCoordinateSystem = coordinateSystem;\n  }\n\n  if (fromCoordinateOrigin === undefined) {\n    normalizedParams.fromCoordinateOrigin = coordinateOrigin;\n  }\n\n  normalizedParams.coordinateSystem = coordinateSystem;\n  return normalizedParams;\n}\n\nexport function getWorldPosition(position, _ref) {\n  let {\n    viewport,\n    modelMatrix,\n    coordinateSystem,\n    coordinateOrigin,\n    offsetMode\n  } = _ref;\n  let [x, y, z = 0] = position;\n\n  if (modelMatrix) {\n    [x, y, z] = vec4.transformMat4([], [x, y, z, 1.0], modelMatrix);\n  }\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT:\n      return lngLatZToWorldPosition([x, y, z], viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      return lngLatZToWorldPosition([x + coordinateOrigin[0], y + coordinateOrigin[1], z + (coordinateOrigin[2] || 0)], viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      return lngLatZToWorldPosition(addMetersToLngLat(coordinateOrigin, [x, y, z]), viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.CARTESIAN:\n    default:\n      return viewport.isGeospatial ? [x + coordinateOrigin[0], y + coordinateOrigin[1], z + coordinateOrigin[2]] : viewport.projectPosition([x, y, z]);\n  }\n}\nexport function projectPosition(position, params) {\n  const {\n    viewport,\n    coordinateSystem,\n    coordinateOrigin,\n    modelMatrix,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  } = normalizeParameters(params);\n  const {\n    geospatialOrigin,\n    shaderCoordinateOrigin,\n    offsetMode\n  } = getOffsetOrigin(viewport, coordinateSystem, coordinateOrigin);\n  const worldPosition = getWorldPosition(position, {\n    viewport,\n    modelMatrix,\n    coordinateSystem: fromCoordinateSystem,\n    coordinateOrigin: fromCoordinateOrigin,\n    offsetMode\n  });\n\n  if (offsetMode) {\n    const positionCommonSpace = viewport.projectPosition(geospatialOrigin || shaderCoordinateOrigin);\n    vec3.sub(worldPosition, worldPosition, positionCommonSpace);\n  }\n\n  return worldPosition;\n}","map":{"version":3,"sources":["../../../../src/shaderlib/project/project-functions.js"],"names":["offsetMode","p","viewport","z","distanceScales","normalizedParams","opts","coordinateSystem","fromCoordinateOrigin","COORDINATE_SYSTEM","fromCoordinateSystem","vec4","lngLatZToWorldPosition","x","coordinateOrigin","y","addMetersToLngLat","normalizeParameters","getOffsetOrigin","worldPosition","getWorldPosition","positionCommonSpace","geospatialOrigin","vec3"],"mappings":"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","sourcesContent":["/**\n * Projection utils\n * TODO: move to Viewport class?\n */\nimport {COORDINATE_SYSTEM} from '../../lib/constants';\nimport {getOffsetOrigin} from './viewport-uniforms';\nimport WebMercatorViewport from '../../viewports/web-mercator-viewport';\n\nimport * as vec4 from 'gl-matrix/vec4';\nimport * as vec3 from 'gl-matrix/vec3';\nimport {addMetersToLngLat} from '@math.gl/web-mercator';\n\n// In project.glsl, offset modes calculate z differently from LNG_LAT mode.\n// offset modes apply the y adjustment (unitsPerMeter2) when projecting z\n// LNG_LAT mode only use the linear scale.\nfunction lngLatZToWorldPosition(lngLatZ, viewport, offsetMode = false) {\n  const p = viewport.projectPosition(lngLatZ);\n\n  // TODO - avoid using instanceof\n  if (offsetMode && viewport instanceof WebMercatorViewport) {\n    const [longitude, latitude, z = 0] = lngLatZ;\n    const distanceScales = viewport.getDistanceScales([longitude, latitude]);\n    p[2] = z * distanceScales.unitsPerMeter[2];\n  }\n  return p;\n}\n\nfunction normalizeParameters(opts) {\n  const normalizedParams = {...opts};\n\n  let {coordinateSystem} = opts;\n  const {viewport, coordinateOrigin, fromCoordinateSystem, fromCoordinateOrigin} = opts;\n\n  if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n    coordinateSystem = viewport.isGeospatial\n      ? COORDINATE_SYSTEM.LNGLAT\n      : COORDINATE_SYSTEM.CARTESIAN;\n  }\n\n  if (fromCoordinateSystem === undefined) {\n    normalizedParams.fromCoordinateSystem = coordinateSystem;\n  }\n  if (fromCoordinateOrigin === undefined) {\n    normalizedParams.fromCoordinateOrigin = coordinateOrigin;\n  }\n\n  normalizedParams.coordinateSystem = coordinateSystem;\n\n  return normalizedParams;\n}\n\nexport function getWorldPosition(\n  position,\n  {viewport, modelMatrix, coordinateSystem, coordinateOrigin, offsetMode}\n) {\n  let [x, y, z = 0] = position;\n\n  if (modelMatrix) {\n    [x, y, z] = vec4.transformMat4([], [x, y, z, 1.0], modelMatrix);\n  }\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT:\n      return lngLatZToWorldPosition([x, y, z], viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      return lngLatZToWorldPosition(\n        [x + coordinateOrigin[0], y + coordinateOrigin[1], z + (coordinateOrigin[2] || 0)],\n        viewport,\n        offsetMode\n      );\n\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      return lngLatZToWorldPosition(\n        addMetersToLngLat(coordinateOrigin, [x, y, z]),\n        viewport,\n        offsetMode\n      );\n\n    case COORDINATE_SYSTEM.CARTESIAN:\n    default:\n      return viewport.isGeospatial\n        ? [x + coordinateOrigin[0], y + coordinateOrigin[1], z + coordinateOrigin[2]]\n        : viewport.projectPosition([x, y, z]);\n  }\n}\n\n/**\n * Equivalent to project_position in project.glsl\n * projects a user supplied position to world position directly with or without\n * a reference coordinate system\n * @param {array} position - [x, y, z]\n * @param {object} params\n * @param {Viewport} params.viewport - the current viewport\n * @param {number} params.coordinateSystem - the reference coordinate system used\n *   align world position\n * @param {array} params.coordinateOrigin - the reference coordinate origin used\n *   to align world position\n * @param {Matrix4} [params.modelMatrix] - the model matrix of the supplied position\n * @param {number} [params.fromCoordinateSystem] - the coordinate system that the\n *   supplied position is in. Default to the same as `coordinateSystem`.\n * @param {array} [params.fromCoordinateOrigin] - the coordinate origin that the\n *   supplied position is in. Default to the same as `coordinateOrigin`.\n */\nexport function projectPosition(position, params) {\n  const {\n    viewport,\n    coordinateSystem,\n    coordinateOrigin,\n    // optional\n    modelMatrix,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  } = normalizeParameters(params);\n\n  const {geospatialOrigin, shaderCoordinateOrigin, offsetMode} = getOffsetOrigin(\n    viewport,\n    coordinateSystem,\n    coordinateOrigin\n  );\n\n  const worldPosition = getWorldPosition(position, {\n    viewport,\n    modelMatrix,\n    coordinateSystem: fromCoordinateSystem,\n    coordinateOrigin: fromCoordinateOrigin,\n    offsetMode\n  });\n\n  if (offsetMode) {\n    const positionCommonSpace = viewport.projectPosition(\n      geospatialOrigin || shaderCoordinateOrigin\n    );\n    vec3.sub(worldPosition, worldPosition, positionCommonSpace);\n  }\n\n  return worldPosition;\n}\n"]},"metadata":{},"sourceType":"module"}