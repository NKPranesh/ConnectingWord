{"ast":null,"code":"import { isWebGL2, assertWebGL2Context, log } from '@luma.gl/gltools';\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport { isObjectEmpty } from '../utils/utils';\nexport default class TransformFeedback extends Resource {\n  static isSupported(gl) {\n    return isWebGL2(gl);\n  }\n\n  constructor(gl) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assertWebGL2Context(gl);\n    super(gl, props);\n    this.initialize(props);\n    this.stubRemovedMethods('TransformFeedback', 'v6.0', ['pause', 'resume']);\n    Object.seal(this);\n  }\n\n  initialize() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.buffers = {};\n    this.unused = {};\n    this.configuration = null;\n    this.bindOnUse = true;\n\n    if (!isObjectEmpty(this.buffers)) {\n      this.bind(() => this._unbindBuffers());\n    }\n\n    this.setProps(props);\n    return this;\n  }\n\n  setProps(props) {\n    if ('program' in props) {\n      this.configuration = props.program && props.program.configuration;\n    }\n\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n\n    if ('bindOnUse' in props) {\n      props = props.bindOnUse;\n    }\n\n    if ('buffers' in props) {\n      this.setBuffers(props.buffers);\n    }\n  }\n\n  setBuffers() {\n    let buffers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.bind(() => {\n      for (const bufferName in buffers) {\n        this.setBuffer(bufferName, buffers[bufferName]);\n      }\n    });\n    return this;\n  }\n\n  setBuffer(locationOrName, bufferOrParams) {\n    const location = this._getVaryingIndex(locationOrName);\n\n    const {\n      buffer,\n      byteSize,\n      byteOffset\n    } = this._getBufferParams(bufferOrParams);\n\n    if (location < 0) {\n      this.unused[locationOrName] = buffer;\n      log.warn(() => `${this.id} unused varying buffer ${locationOrName}`)();\n      return this;\n    }\n\n    this.buffers[location] = bufferOrParams;\n\n    if (!this.bindOnUse) {\n      this._bindBuffer(location, buffer, byteOffset, byteSize);\n    }\n\n    return this;\n  }\n\n  begin() {\n    let primitiveMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    this.gl.bindTransformFeedback(36386, this.handle);\n\n    this._bindBuffers();\n\n    this.gl.beginTransformFeedback(primitiveMode);\n    return this;\n  }\n\n  end() {\n    this.gl.endTransformFeedback();\n\n    this._unbindBuffers();\n\n    this.gl.bindTransformFeedback(36386, null);\n    return this;\n  }\n\n  _getBufferParams(bufferOrParams) {\n    let byteOffset;\n    let byteSize;\n    let buffer;\n\n    if (bufferOrParams instanceof Buffer === false) {\n      buffer = bufferOrParams.buffer;\n      byteSize = bufferOrParams.byteSize;\n      byteOffset = bufferOrParams.byteOffset;\n    } else {\n      buffer = bufferOrParams;\n    }\n\n    if (byteOffset !== undefined || byteSize !== undefined) {\n      byteOffset = byteOffset || 0;\n      byteSize = byteSize || buffer.byteLength - byteOffset;\n    }\n\n    return {\n      buffer,\n      byteOffset,\n      byteSize\n    };\n  }\n\n  _getVaryingInfo(locationOrName) {\n    return this.configuration && this.configuration.getVaryingInfo(locationOrName);\n  }\n\n  _getVaryingIndex(locationOrName) {\n    if (this.configuration) {\n      return this.configuration.getVaryingInfo(locationOrName).location;\n    }\n\n    const location = Number(locationOrName);\n    return Number.isFinite(location) ? location : -1;\n  }\n\n  _bindBuffers() {\n    if (this.bindOnUse) {\n      for (const bufferIndex in this.buffers) {\n        const {\n          buffer,\n          byteSize,\n          byteOffset\n        } = this._getBufferParams(this.buffers[bufferIndex]);\n\n        this._bindBuffer(bufferIndex, buffer, byteOffset, byteSize);\n      }\n    }\n  }\n\n  _unbindBuffers() {\n    if (this.bindOnUse) {\n      for (const bufferIndex in this.buffers) {\n        this._bindBuffer(bufferIndex, null);\n      }\n    }\n  }\n\n  _bindBuffer(index, buffer) {\n    let byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let byteSize = arguments.length > 3 ? arguments[3] : undefined;\n    const handle = buffer && buffer.handle;\n\n    if (!handle || byteSize === undefined) {\n      this.gl.bindBufferBase(35982, index, handle);\n    } else {\n      this.gl.bindBufferRange(35982, index, handle, byteOffset, byteSize);\n    }\n\n    return this;\n  }\n\n  _createHandle() {\n    return this.gl.createTransformFeedback();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTransformFeedback(this.handle);\n  }\n\n  _bindHandle(handle) {\n    this.gl.bindTransformFeedback(36386, this.handle);\n  }\n\n}","map":{"version":3,"sources":["../../../src/classes/transform-feedback.js"],"names":["isSupported","isWebGL2","constructor","props","assertWebGL2Context","Object","initialize","isObjectEmpty","setProps","setBuffers","buffers","setBuffer","location","byteOffset","log","id","locationOrName","begin","primitiveMode","end","_getBufferParams","bufferOrParams","buffer","byteSize","_getVaryingInfo","_getVaryingIndex","Number","_bindBuffers","_unbindBuffers","_bindBuffer","handle","_createHandle","_deleteHandle","_bindHandle"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {isWebGL2, assertWebGL2Context, log} from '@luma.gl/gltools';\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {isObjectEmpty} from '../utils/utils';\n\n// NOTE: The `bindOnUse` flag is a major workaround:\n// See https://github.com/KhronosGroup/WebGL/issues/2346\n\nexport default class TransformFeedback extends Resource {\n  static isSupported(gl) {\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, props = {}) {\n    assertWebGL2Context(gl);\n    super(gl, props);\n\n    this.initialize(props);\n    this.stubRemovedMethods('TransformFeedback', 'v6.0', ['pause', 'resume']);\n    Object.seal(this);\n  }\n\n  initialize(props = {}) {\n    this.buffers = {};\n    this.unused = {};\n    this.configuration = null;\n    this.bindOnUse = true;\n\n    // Unbind any currently bound buffers\n    if (!isObjectEmpty(this.buffers)) {\n      this.bind(() => this._unbindBuffers());\n    }\n\n    this.setProps(props);\n    return this;\n  }\n\n  setProps(props) {\n    if ('program' in props) {\n      this.configuration = props.program && props.program.configuration;\n    }\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n    if ('bindOnUse' in props) {\n      props = props.bindOnUse;\n    }\n    if ('buffers' in props) {\n      this.setBuffers(props.buffers);\n    }\n  }\n\n  setBuffers(buffers = {}) {\n    this.bind(() => {\n      for (const bufferName in buffers) {\n        this.setBuffer(bufferName, buffers[bufferName]);\n      }\n    });\n    return this;\n  }\n\n  setBuffer(locationOrName, bufferOrParams) {\n    const location = this._getVaryingIndex(locationOrName);\n    const {buffer, byteSize, byteOffset} = this._getBufferParams(bufferOrParams);\n\n    if (location < 0) {\n      this.unused[locationOrName] = buffer;\n      log.warn(() => `${this.id} unused varying buffer ${locationOrName}`)();\n      return this;\n    }\n\n    this.buffers[location] = bufferOrParams;\n\n    // Need to avoid chrome bug where buffer that is already bound to a different target\n    // cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.\n    if (!this.bindOnUse) {\n      this._bindBuffer(location, buffer, byteOffset, byteSize);\n    }\n\n    return this;\n  }\n\n  begin(primitiveMode = GL.POINTS) {\n    // @ts-ignore\n    this.gl.bindTransformFeedback(GL.TRANSFORM_FEEDBACK, this.handle);\n    this._bindBuffers();\n    // @ts-ignore\n    this.gl.beginTransformFeedback(primitiveMode);\n    return this;\n  }\n\n  end() {\n    // @ts-ignore\n    this.gl.endTransformFeedback();\n    this._unbindBuffers();\n    // @ts-ignore\n    this.gl.bindTransformFeedback(GL.TRANSFORM_FEEDBACK, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _getBufferParams(bufferOrParams) {\n    let byteOffset;\n    let byteSize;\n    let buffer;\n    if (bufferOrParams instanceof Buffer === false) {\n      buffer = bufferOrParams.buffer;\n      byteSize = bufferOrParams.byteSize;\n      byteOffset = bufferOrParams.byteOffset;\n    } else {\n      buffer = bufferOrParams;\n    }\n    // to use bindBufferRange, either offset or size must be specified, use default value for the other.\n    if (byteOffset !== undefined || byteSize !== undefined) {\n      byteOffset = byteOffset || 0;\n      byteSize = byteSize || buffer.byteLength - byteOffset;\n    }\n    return {buffer, byteOffset, byteSize};\n  }\n\n  _getVaryingInfo(locationOrName) {\n    return this.configuration && this.configuration.getVaryingInfo(locationOrName);\n  }\n\n  _getVaryingIndex(locationOrName) {\n    if (this.configuration) {\n      return this.configuration.getVaryingInfo(locationOrName).location;\n    }\n    const location = Number(locationOrName);\n    return Number.isFinite(location) ? location : -1;\n  }\n\n  // Need to avoid chrome bug where buffer that is already bound to a different target\n  // cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.\n  _bindBuffers() {\n    if (this.bindOnUse) {\n      for (const bufferIndex in this.buffers) {\n        const {buffer, byteSize, byteOffset} = this._getBufferParams(this.buffers[bufferIndex]);\n        this._bindBuffer(bufferIndex, buffer, byteOffset, byteSize);\n      }\n    }\n  }\n\n  _unbindBuffers() {\n    if (this.bindOnUse) {\n      for (const bufferIndex in this.buffers) {\n        this._bindBuffer(bufferIndex, null);\n      }\n    }\n  }\n\n  _bindBuffer(index, buffer, byteOffset = 0, byteSize) {\n    const handle = buffer && buffer.handle;\n    if (!handle || byteSize === undefined) {\n      // @ts-ignore\n      this.gl.bindBufferBase(GL.TRANSFORM_FEEDBACK_BUFFER, index, handle);\n    } else {\n      // @ts-ignore\n      this.gl.bindBufferRange(GL.TRANSFORM_FEEDBACK_BUFFER, index, handle, byteOffset, byteSize);\n    }\n    return this;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    // @ts-ignore\n    return this.gl.createTransformFeedback();\n  }\n\n  _deleteHandle() {\n    // @ts-ignore\n    this.gl.deleteTransformFeedback(this.handle);\n  }\n\n  _bindHandle(handle) {\n    // @ts-ignore\n    this.gl.bindTransformFeedback(GL.TRANSFORM_FEEDBACK, this.handle);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}