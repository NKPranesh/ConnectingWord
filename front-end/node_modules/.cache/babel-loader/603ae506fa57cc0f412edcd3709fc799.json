{"ast":null,"code":"import { Texture2D, copyToTexture, cloneTextureFrom } from '@luma.gl/core';\nimport { ImageLoader } from '@loaders.gl/images';\nimport { load } from '@loaders.gl/core';\nimport { createIterable } from '@deck.gl/core';\nconst DEFAULT_CANVAS_WIDTH = 1024;\nconst DEFAULT_BUFFER = 4;\n\nconst noop = () => {};\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [10241]: 9987,\n  [10240]: 9729,\n  [10242]: 33071,\n  [10243]: 33071\n};\n\nfunction nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\nfunction resizeImage(ctx, imageData, width, height) {\n  if (width === imageData.width && height === imageData.height) {\n    return imageData;\n  }\n\n  ctx.canvas.height = height;\n  ctx.canvas.width = width;\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  ctx.drawImage(imageData, 0, 0, imageData.width, imageData.height, 0, 0, width, height);\n  return ctx.canvas;\n}\n\nfunction getIconId(icon) {\n  return icon && (icon.id || icon.url);\n}\n\nfunction resizeTexture(gl, texture, width, height) {\n  const oldWidth = texture.width;\n  const oldHeight = texture.height;\n  const newTexture = cloneTextureFrom(texture, {\n    width,\n    height\n  });\n  copyToTexture(texture, newTexture, {\n    targetY: 0,\n    width: oldWidth,\n    height: oldHeight\n  });\n  texture.delete();\n  return newTexture;\n}\n\nfunction buildRowMapping(mapping, columns, yOffset) {\n  for (let i = 0; i < columns.length; i++) {\n    const {\n      icon,\n      xOffset\n    } = columns[i];\n    const id = getIconId(icon);\n    mapping[id] = { ...icon,\n      x: xOffset,\n      y: yOffset\n    };\n  }\n}\n\nexport function buildMapping(_ref) {\n  let {\n    icons,\n    buffer,\n    mapping = {},\n    xOffset = 0,\n    yOffset = 0,\n    rowHeight = 0,\n    canvasWidth\n  } = _ref;\n  let columns = [];\n\n  for (let i = 0; i < icons.length; i++) {\n    const icon = icons[i];\n    const id = getIconId(icon);\n\n    if (!mapping[id]) {\n      const {\n        height,\n        width\n      } = icon;\n\n      if (xOffset + width + buffer > canvasWidth) {\n        buildRowMapping(mapping, columns, yOffset);\n        xOffset = 0;\n        yOffset = rowHeight + yOffset + buffer;\n        rowHeight = 0;\n        columns = [];\n      }\n\n      columns.push({\n        icon,\n        xOffset\n      });\n      xOffset = xOffset + width + buffer;\n      rowHeight = Math.max(rowHeight, height);\n    }\n  }\n\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n\n  return {\n    mapping,\n    rowHeight,\n    xOffset,\n    yOffset,\n    canvasWidth,\n    canvasHeight: nextPowOfTwo(rowHeight + yOffset + buffer)\n  };\n}\nexport function getDiffIcons(data, getIcon, cachedIcons) {\n  if (!data || !getIcon) {\n    return null;\n  }\n\n  cachedIcons = cachedIcons || {};\n  const icons = {};\n  const {\n    iterable,\n    objectInfo\n  } = createIterable(data);\n\n  for (const object of iterable) {\n    objectInfo.index++;\n    const icon = getIcon(object, objectInfo);\n    const id = getIconId(icon);\n\n    if (!icon) {\n      throw new Error('Icon is missing.');\n    }\n\n    if (!icon.url) {\n      throw new Error('Icon url is missing.');\n    }\n\n    if (!icons[id] && (!cachedIcons[id] || icon.url !== cachedIcons[id].url)) {\n      icons[id] = { ...icon,\n        source: object,\n        sourceIndex: objectInfo.index\n      };\n    }\n  }\n\n  return icons;\n}\nexport default class IconManager {\n  constructor(gl, _ref2) {\n    let {\n      onUpdate = noop,\n      onError = noop\n    } = _ref2;\n    this.gl = gl;\n    this.onUpdate = onUpdate;\n    this.onError = onError;\n    this._loadOptions = null;\n    this._getIcon = null;\n    this._texture = null;\n    this._externalTexture = null;\n    this._mapping = {};\n    this._pendingCount = 0;\n    this._autoPacking = false;\n    this._xOffset = 0;\n    this._yOffset = 0;\n    this._rowHeight = 0;\n    this._buffer = DEFAULT_BUFFER;\n    this._canvasWidth = DEFAULT_CANVAS_WIDTH;\n    this._canvasHeight = 0;\n    this._canvas = null;\n  }\n\n  finalize() {\n    var _this$_texture;\n\n    (_this$_texture = this._texture) === null || _this$_texture === void 0 ? void 0 : _this$_texture.delete();\n  }\n\n  getTexture() {\n    return this._texture || this._externalTexture;\n  }\n\n  getIconMapping(icon) {\n    const id = this._autoPacking ? getIconId(icon) : icon;\n    return this._mapping[id] || {};\n  }\n\n  setProps(_ref3) {\n    let {\n      loadOptions,\n      autoPacking,\n      iconAtlas,\n      iconMapping,\n      data,\n      getIcon\n    } = _ref3;\n\n    if (loadOptions) {\n      this._loadOptions = loadOptions;\n    }\n\n    if (autoPacking !== undefined) {\n      this._autoPacking = autoPacking;\n    }\n\n    if (getIcon) {\n      this._getIcon = getIcon;\n    }\n\n    if (iconMapping) {\n      this._mapping = iconMapping;\n    }\n\n    if (iconAtlas) {\n      this._updateIconAtlas(iconAtlas);\n    }\n\n    if (this._autoPacking && (data || getIcon) && typeof document !== 'undefined') {\n      this._canvas = this._canvas || document.createElement('canvas');\n\n      this._updateAutoPacking(data);\n    }\n  }\n\n  get isLoaded() {\n    return this._pendingCount === 0;\n  }\n\n  _updateIconAtlas(iconAtlas) {\n    var _this$_texture2;\n\n    (_this$_texture2 = this._texture) === null || _this$_texture2 === void 0 ? void 0 : _this$_texture2.delete();\n    this._texture = null;\n    this._externalTexture = iconAtlas;\n    this.onUpdate();\n  }\n\n  _updateAutoPacking(data) {\n    const icons = Object.values(getDiffIcons(data, this._getIcon, this._mapping) || {});\n\n    if (icons.length > 0) {\n      const {\n        mapping,\n        xOffset,\n        yOffset,\n        rowHeight,\n        canvasHeight\n      } = buildMapping({\n        icons,\n        buffer: this._buffer,\n        canvasWidth: this._canvasWidth,\n        mapping: this._mapping,\n        rowHeight: this._rowHeight,\n        xOffset: this._xOffset,\n        yOffset: this._yOffset\n      });\n      this._rowHeight = rowHeight;\n      this._mapping = mapping;\n      this._xOffset = xOffset;\n      this._yOffset = yOffset;\n      this._canvasHeight = canvasHeight;\n\n      if (!this._texture) {\n        this._texture = new Texture2D(this.gl, {\n          width: this._canvasWidth,\n          height: this._canvasHeight,\n          parameters: DEFAULT_TEXTURE_PARAMETERS\n        });\n      }\n\n      if (this._texture.height !== this._canvasHeight) {\n        this._texture = resizeTexture(this.gl, this._texture, this._canvasWidth, this._canvasHeight);\n      }\n\n      this.onUpdate();\n\n      this._loadIcons(icons);\n    }\n  }\n\n  _loadIcons(icons) {\n    const ctx = this._canvas.getContext('2d');\n\n    for (const icon of icons) {\n      this._pendingCount++;\n      load(icon.url, ImageLoader, this._loadOptions).then(imageData => {\n        const id = getIconId(icon);\n        const {\n          x,\n          y,\n          width,\n          height\n        } = this._mapping[id];\n        const data = resizeImage(ctx, imageData, width, height);\n\n        this._texture.setSubImageData({\n          data,\n          x,\n          y,\n          width,\n          height\n        });\n\n        this._texture.generateMipmap();\n\n        this.onUpdate();\n      }).catch(error => {\n        this.onError({\n          url: icon.url,\n          source: icon.source,\n          sourceIndex: icon.sourceIndex,\n          loadOptions: this._loadOptions,\n          error\n        });\n      }).finally(() => {\n        this._pendingCount--;\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/icon-layer/icon-manager.js"],"names":["DEFAULT_CANVAS_WIDTH","DEFAULT_BUFFER","noop","DEFAULT_TEXTURE_PARAMETERS","Math","width","imageData","height","ctx","icon","oldWidth","texture","oldHeight","newTexture","cloneTextureFrom","copyToTexture","targetY","i","columns","xOffset","id","getIconId","mapping","x","y","yOffset","rowHeight","canvasWidth","icons","buildRowMapping","canvasHeight","nextPowOfTwo","cachedIcons","objectInfo","createIterable","getIcon","source","sourceIndex","index","constructor","onUpdate","onError","finalize","getTexture","getIconMapping","setProps","autoPacking","data","document","isLoaded","_updateIconAtlas","_updateAutoPacking","Object","getDiffIcons","buildMapping","buffer","_yOffset","parameters","resizeTexture","_loadIcons","load","resizeImage","error","url","loadOptions"],"mappings":"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","sourcesContent":["/* global document */\nimport GL from '@luma.gl/constants';\nimport {Texture2D, copyToTexture, cloneTextureFrom} from '@luma.gl/core';\nimport {ImageLoader} from '@loaders.gl/images';\nimport {load} from '@loaders.gl/core';\nimport {createIterable} from '@deck.gl/core';\n\nconst DEFAULT_CANVAS_WIDTH = 1024;\nconst DEFAULT_BUFFER = 4;\n\nconst noop = () => {};\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  // GL.LINEAR is the default value but explicitly set it here\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  // for texture boundary artifact\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\nfunction nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n// update comment to create a new texture and copy original data.\nfunction resizeImage(ctx, imageData, width, height) {\n  if (width === imageData.width && height === imageData.height) {\n    return imageData;\n  }\n\n  ctx.canvas.height = height;\n  ctx.canvas.width = width;\n\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  // image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight\n  ctx.drawImage(imageData, 0, 0, imageData.width, imageData.height, 0, 0, width, height);\n\n  return ctx.canvas;\n}\n\nfunction getIconId(icon) {\n  return icon && (icon.id || icon.url);\n}\n\n// resize texture without losing original data\nfunction resizeTexture(gl, texture, width, height) {\n  const oldWidth = texture.width;\n  const oldHeight = texture.height;\n\n  const newTexture = cloneTextureFrom(texture, {width, height});\n  copyToTexture(texture, newTexture, {\n    targetY: 0,\n    width: oldWidth,\n    height: oldHeight\n  });\n\n  texture.delete();\n  return newTexture;\n}\n\n// traverse icons in a row of icon atlas\n// extend each icon with left-top coordinates\nfunction buildRowMapping(mapping, columns, yOffset) {\n  for (let i = 0; i < columns.length; i++) {\n    const {icon, xOffset} = columns[i];\n    const id = getIconId(icon);\n    mapping[id] = {\n      ...icon,\n      x: xOffset,\n      y: yOffset\n    };\n  }\n}\n\n/**\n * Generate coordinate mapping to retrieve icon left-top position from an icon atlas\n * @param icons {Array<Object>} list of icons, each icon requires url, width, height\n * @param buffer {Number} add buffer to the right and bottom side of the image\n * @param xOffset {Number} right position of last icon in old mapping\n * @param yOffset {Number} top position in last icon in old mapping\n * @param rowHeight {Number} rowHeight of the last icon's row\n * @param canvasWidth {Number} max width of canvas\n * @param mapping {object} old mapping\n * @returns {{mapping: {'/icon/1': {url, width, height, ...}},, canvasHeight: {Number}}}\n */\nexport function buildMapping({\n  icons,\n  buffer,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0,\n  rowHeight = 0,\n  canvasWidth\n}) {\n  let columns = [];\n  // Strategy to layout all the icons into a texture:\n  // traverse the icons sequentially, layout the icons from left to right, top to bottom\n  // when the sum of the icons width is equal or larger than canvasWidth,\n  // move to next row starting from total height so far plus max height of the icons in previous row\n  // row width is equal to canvasWidth\n  // row height is decided by the max height of the icons in that row\n  // mapping coordinates of each icon is its left-top position in the texture\n  for (let i = 0; i < icons.length; i++) {\n    const icon = icons[i];\n    const id = getIconId(icon);\n\n    if (!mapping[id]) {\n      const {height, width} = icon;\n\n      // fill one row\n      if (xOffset + width + buffer > canvasWidth) {\n        buildRowMapping(mapping, columns, yOffset);\n\n        xOffset = 0;\n        yOffset = rowHeight + yOffset + buffer;\n        rowHeight = 0;\n        columns = [];\n      }\n\n      columns.push({\n        icon,\n        xOffset\n      });\n\n      xOffset = xOffset + width + buffer;\n      rowHeight = Math.max(rowHeight, height);\n    }\n  }\n\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n\n  return {\n    mapping,\n    rowHeight,\n    xOffset,\n    yOffset,\n    canvasWidth,\n    canvasHeight: nextPowOfTwo(rowHeight + yOffset + buffer)\n  };\n}\n\n// extract icons from data\n// return icons should be unique, and not cached or cached but url changed\nexport function getDiffIcons(data, getIcon, cachedIcons) {\n  if (!data || !getIcon) {\n    return null;\n  }\n\n  cachedIcons = cachedIcons || {};\n  const icons = {};\n  const {iterable, objectInfo} = createIterable(data);\n  for (const object of iterable) {\n    objectInfo.index++;\n    const icon = getIcon(object, objectInfo);\n    const id = getIconId(icon);\n\n    if (!icon) {\n      throw new Error('Icon is missing.');\n    }\n\n    if (!icon.url) {\n      throw new Error('Icon url is missing.');\n    }\n\n    if (!icons[id] && (!cachedIcons[id] || icon.url !== cachedIcons[id].url)) {\n      icons[id] = {...icon, source: object, sourceIndex: objectInfo.index};\n    }\n  }\n  return icons;\n}\n\nexport default class IconManager {\n  constructor(\n    gl,\n    {\n      onUpdate = noop, // notify IconLayer when icon texture update\n      onError = noop\n    }\n  ) {\n    this.gl = gl;\n    this.onUpdate = onUpdate;\n    this.onError = onError;\n\n    // load options used for loading images\n    this._loadOptions = null;\n    this._getIcon = null;\n\n    this._texture = null;\n    this._externalTexture = null;\n    this._mapping = {};\n    // count of pending requests to fetch icons\n    this._pendingCount = 0;\n\n    this._autoPacking = false;\n\n    // internal props used when autoPacking applied\n    // right position of last icon\n    this._xOffset = 0;\n    // top position of last icon\n    this._yOffset = 0;\n    this._rowHeight = 0;\n    this._buffer = DEFAULT_BUFFER;\n    this._canvasWidth = DEFAULT_CANVAS_WIDTH;\n    this._canvasHeight = 0;\n    this._canvas = null;\n  }\n\n  finalize() {\n    this._texture?.delete();\n  }\n\n  getTexture() {\n    return this._texture || this._externalTexture;\n  }\n\n  getIconMapping(icon) {\n    const id = this._autoPacking ? getIconId(icon) : icon;\n    return this._mapping[id] || {};\n  }\n\n  setProps({loadOptions, autoPacking, iconAtlas, iconMapping, data, getIcon}) {\n    if (loadOptions) {\n      this._loadOptions = loadOptions;\n    }\n\n    if (autoPacking !== undefined) {\n      this._autoPacking = autoPacking;\n    }\n\n    if (getIcon) {\n      this._getIcon = getIcon;\n    }\n\n    if (iconMapping) {\n      this._mapping = iconMapping;\n    }\n\n    if (iconAtlas) {\n      this._updateIconAtlas(iconAtlas);\n    }\n\n    if (this._autoPacking && (data || getIcon) && typeof document !== 'undefined') {\n      this._canvas = this._canvas || document.createElement('canvas');\n\n      this._updateAutoPacking(data);\n    }\n  }\n\n  get isLoaded() {\n    return this._pendingCount === 0;\n  }\n\n  _updateIconAtlas(iconAtlas) {\n    this._texture?.delete();\n    this._texture = null;\n    this._externalTexture = iconAtlas;\n    this.onUpdate();\n  }\n\n  _updateAutoPacking(data) {\n    const icons = Object.values(getDiffIcons(data, this._getIcon, this._mapping) || {});\n\n    if (icons.length > 0) {\n      // generate icon mapping\n      const {mapping, xOffset, yOffset, rowHeight, canvasHeight} = buildMapping({\n        icons,\n        buffer: this._buffer,\n        canvasWidth: this._canvasWidth,\n        mapping: this._mapping,\n        rowHeight: this._rowHeight,\n        xOffset: this._xOffset,\n        yOffset: this._yOffset\n      });\n\n      this._rowHeight = rowHeight;\n      this._mapping = mapping;\n      this._xOffset = xOffset;\n      this._yOffset = yOffset;\n      this._canvasHeight = canvasHeight;\n\n      // create new texture\n      if (!this._texture) {\n        this._texture = new Texture2D(this.gl, {\n          width: this._canvasWidth,\n          height: this._canvasHeight,\n          parameters: DEFAULT_TEXTURE_PARAMETERS\n        });\n      }\n\n      if (this._texture.height !== this._canvasHeight) {\n        this._texture = resizeTexture(\n          this.gl,\n          this._texture,\n          this._canvasWidth,\n          this._canvasHeight\n        );\n      }\n\n      this.onUpdate();\n\n      // load images\n      this._loadIcons(icons);\n    }\n  }\n\n  _loadIcons(icons) {\n    const ctx = this._canvas.getContext('2d');\n\n    for (const icon of icons) {\n      this._pendingCount++;\n      load(icon.url, ImageLoader, this._loadOptions)\n        .then(imageData => {\n          const id = getIconId(icon);\n          const {x, y, width, height} = this._mapping[id];\n\n          const data = resizeImage(ctx, imageData, width, height);\n\n          this._texture.setSubImageData({\n            data,\n            x,\n            y,\n            width,\n            height\n          });\n\n          // Call to regenerate mipmaps after modifying texture(s)\n          this._texture.generateMipmap();\n\n          this.onUpdate();\n        })\n        .catch(error => {\n          this.onError({\n            url: icon.url,\n            source: icon.source,\n            sourceIndex: icon.sourceIndex,\n            loadOptions: this._loadOptions,\n            error\n          });\n        })\n        .finally(() => {\n          this._pendingCount--;\n        });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}