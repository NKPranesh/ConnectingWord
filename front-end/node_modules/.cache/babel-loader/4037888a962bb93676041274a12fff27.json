{"ast":null,"code":"import DataColumn from './data-column';\nimport assert from '../../utils/assert';\nimport { createIterable, getAccessorFromBuffer } from '../../utils/iterable-utils';\nimport { fillArray } from '../../utils/flatten';\nimport * as range from '../../utils/range';\nimport { normalizeTransitionSettings } from './attribute-transition-utils';\nexport default class Attribute extends DataColumn {\n  constructor(gl) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(gl, opts);\n    const {\n      transition = false,\n      noAlloc = false,\n      update = null,\n      accessor = null,\n      transform = null,\n      startIndices = null\n    } = opts;\n    Object.assign(this.settings, {\n      transition,\n      noAlloc,\n      update: update || accessor && this._autoUpdater,\n      accessor,\n      transform\n    });\n    Object.assign(this.state, {\n      lastExternalBuffer: null,\n      binaryValue: null,\n      binaryAccessor: null,\n      needsUpdate: true,\n      needsRedraw: false,\n      updateRanges: range.FULL,\n      startIndices\n    });\n    Object.seal(this.settings);\n    Object.seal(this.state);\n\n    this._validateAttributeUpdaters();\n  }\n\n  get startIndices() {\n    return this.state.startIndices;\n  }\n\n  set startIndices(layout) {\n    this.state.startIndices = layout;\n  }\n\n  needsUpdate() {\n    return this.state.needsUpdate;\n  }\n\n  needsRedraw() {\n    let {\n      clearChangedFlags = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const needsRedraw = this.state.needsRedraw;\n    this.state.needsRedraw = needsRedraw && !clearChangedFlags;\n    return needsRedraw;\n  }\n\n  getUpdateTriggers() {\n    const {\n      accessor\n    } = this.settings;\n    return [this.id].concat(typeof accessor !== 'function' && accessor || []);\n  }\n\n  supportsTransition() {\n    return Boolean(this.settings.transition);\n  }\n\n  getTransitionSetting(opts) {\n    if (!opts || !this.supportsTransition()) {\n      return null;\n    }\n\n    const {\n      accessor\n    } = this.settings;\n    const layerSettings = this.settings.transition;\n    const userSettings = Array.isArray(accessor) ? opts[accessor.find(a => opts[a])] : opts[accessor];\n    return normalizeTransitionSettings(userSettings, layerSettings);\n  }\n\n  setNeedsUpdate() {\n    let reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.id;\n    let dataRange = arguments.length > 1 ? arguments[1] : undefined;\n    this.state.needsUpdate = this.state.needsUpdate || reason;\n    this.setNeedsRedraw(reason);\n\n    if (dataRange) {\n      const {\n        startRow = 0,\n        endRow = Infinity\n      } = dataRange;\n      this.state.updateRanges = range.add(this.state.updateRanges, [startRow, endRow]);\n    } else {\n      this.state.updateRanges = range.FULL;\n    }\n  }\n\n  clearNeedsUpdate() {\n    this.state.needsUpdate = false;\n    this.state.updateRanges = range.EMPTY;\n  }\n\n  setNeedsRedraw() {\n    let reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.id;\n    this.state.needsRedraw = this.state.needsRedraw || reason;\n  }\n\n  update(opts) {\n    this.setData(opts);\n  }\n\n  allocate(numInstances) {\n    const {\n      state,\n      settings\n    } = this;\n\n    if (settings.noAlloc) {\n      return false;\n    }\n\n    if (settings.update) {\n      super.allocate({\n        numInstances,\n        copy: state.updateRanges !== range.FULL\n      });\n      return true;\n    }\n\n    return false;\n  }\n\n  updateBuffer(_ref) {\n    let {\n      numInstances,\n      data,\n      props,\n      context\n    } = _ref;\n\n    if (!this.needsUpdate()) {\n      return false;\n    }\n\n    const {\n      state: {\n        updateRanges\n      },\n      settings: {\n        update,\n        noAlloc\n      }\n    } = this;\n    let updated = true;\n\n    if (update) {\n      for (const [startRow, endRow] of updateRanges) {\n        update.call(context, this, {\n          data,\n          startRow,\n          endRow,\n          props,\n          numInstances\n        });\n      }\n\n      if (!this.value) {} else if (this.constant || this.buffer.byteLength < this.value.byteLength + this.byteOffset) {\n        this.setData({\n          value: this.value,\n          constant: this.constant\n        });\n        this.constant = false;\n      } else {\n        for (const [startRow, endRow] of updateRanges) {\n          const startOffset = Number.isFinite(startRow) ? this.getVertexOffset(startRow) : 0;\n          const endOffset = Number.isFinite(endRow) ? this.getVertexOffset(endRow) : noAlloc || !Number.isFinite(numInstances) ? this.value.length : numInstances * this.size;\n          super.updateSubBuffer({\n            startOffset,\n            endOffset\n          });\n        }\n      }\n\n      this._checkAttributeArray();\n    } else {\n      updated = false;\n    }\n\n    this.clearNeedsUpdate();\n    this.setNeedsRedraw();\n    return updated;\n  }\n\n  setConstantValue(value) {\n    if (value === undefined || typeof value === 'function') {\n      return false;\n    }\n\n    const hasChanged = this.setData({\n      constant: true,\n      value\n    });\n\n    if (hasChanged) {\n      this.setNeedsRedraw();\n    }\n\n    this.clearNeedsUpdate();\n    return true;\n  }\n\n  setExternalBuffer(buffer) {\n    const {\n      state\n    } = this;\n\n    if (!buffer) {\n      state.lastExternalBuffer = null;\n      return false;\n    }\n\n    this.clearNeedsUpdate();\n\n    if (state.lastExternalBuffer === buffer) {\n      return true;\n    }\n\n    state.lastExternalBuffer = buffer;\n    this.setNeedsRedraw();\n    this.setData(buffer);\n    return true;\n  }\n\n  setBinaryValue(buffer) {\n    let startIndices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const {\n      state,\n      settings\n    } = this;\n\n    if (!buffer) {\n      state.binaryValue = null;\n      state.binaryAccessor = null;\n      return false;\n    }\n\n    if (settings.noAlloc) {\n      return false;\n    }\n\n    if (state.binaryValue === buffer) {\n      this.clearNeedsUpdate();\n      return true;\n    }\n\n    state.binaryValue = buffer;\n    this.setNeedsRedraw();\n\n    if (ArrayBuffer.isView(buffer)) {\n      buffer = {\n        value: buffer\n      };\n    }\n\n    const needsUpdate = settings.transform || startIndices !== this.startIndices;\n\n    if (needsUpdate) {\n      assert(ArrayBuffer.isView(buffer.value), \"invalid \".concat(settings.accessor));\n      const needsNormalize = buffer.size && buffer.size !== this.size;\n      state.binaryAccessor = getAccessorFromBuffer(buffer.value, {\n        size: buffer.size || this.size,\n        stride: buffer.stride,\n        offset: buffer.offset,\n        startIndices,\n        nested: needsNormalize\n      });\n      return false;\n    }\n\n    this.clearNeedsUpdate();\n    this.setData(buffer);\n    return true;\n  }\n\n  getVertexOffset(row) {\n    const {\n      startIndices\n    } = this;\n    const vertexIndex = startIndices ? startIndices[row] : row;\n    return vertexIndex * this.size;\n  }\n\n  getShaderAttributes() {\n    const shaderAttributeDefs = this.settings.shaderAttributes || {\n      [this.id]: null\n    };\n    const shaderAttributes = {};\n\n    for (const shaderAttributeName in shaderAttributeDefs) {\n      Object.assign(shaderAttributes, super.getShaderAttributes(shaderAttributeName, shaderAttributeDefs[shaderAttributeName]));\n    }\n\n    return shaderAttributes;\n  }\n\n  _autoUpdater(attribute, _ref2) {\n    let {\n      data,\n      startRow,\n      endRow,\n      props,\n      numInstances\n    } = _ref2;\n\n    if (attribute.constant) {\n      return;\n    }\n\n    const {\n      settings,\n      state,\n      value,\n      size,\n      startIndices\n    } = attribute;\n    const {\n      accessor,\n      transform\n    } = settings;\n    const accessorFunc = state.binaryAccessor || (typeof accessor === 'function' ? accessor : props[accessor]);\n    assert(typeof accessorFunc === 'function', \"accessor \\\"\".concat(accessor, \"\\\" is not a function\"));\n    let i = attribute.getVertexOffset(startRow);\n    const {\n      iterable,\n      objectInfo\n    } = createIterable(data, startRow, endRow);\n\n    for (const object of iterable) {\n      objectInfo.index++;\n      let objectValue = accessorFunc(object, objectInfo);\n\n      if (transform) {\n        objectValue = transform.call(this, objectValue);\n      }\n\n      if (startIndices) {\n        const numVertices = (objectInfo.index < startIndices.length - 1 ? startIndices[objectInfo.index + 1] : numInstances) - startIndices[objectInfo.index];\n\n        if (objectValue && Array.isArray(objectValue[0])) {\n          let startIndex = i;\n\n          for (const item of objectValue) {\n            attribute._normalizeValue(item, value, startIndex);\n\n            startIndex += size;\n          }\n        } else if (objectValue && objectValue.length > size) {\n          value.set(objectValue, i);\n        } else {\n          attribute._normalizeValue(objectValue, objectInfo.target, 0);\n\n          fillArray({\n            target: value,\n            source: objectInfo.target,\n            start: i,\n            count: numVertices\n          });\n        }\n\n        i += numVertices * size;\n      } else {\n        attribute._normalizeValue(objectValue, value, i);\n\n        i += size;\n      }\n    }\n  }\n\n  _validateAttributeUpdaters() {\n    const {\n      settings\n    } = this;\n    const hasUpdater = settings.noAlloc || typeof settings.update === 'function';\n\n    if (!hasUpdater) {\n      throw new Error(\"Attribute \".concat(this.id, \" missing update or accessor\"));\n    }\n  }\n\n  _checkAttributeArray() {\n    const {\n      value\n    } = this;\n    const limit = Math.min(4, this.size);\n\n    if (value && value.length >= limit) {\n      let valid = true;\n\n      switch (limit) {\n        case 4:\n          valid = valid && Number.isFinite(value[3]);\n\n        case 3:\n          valid = valid && Number.isFinite(value[2]);\n\n        case 2:\n          valid = valid && Number.isFinite(value[1]);\n\n        case 1:\n          valid = valid && Number.isFinite(value[0]);\n          break;\n\n        default:\n          valid = false;\n      }\n\n      if (!valid) {\n        throw new Error(\"Illegal attribute generated for \".concat(this.id));\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../../src/lib/attribute/attribute.js"],"names":["constructor","opts","transition","noAlloc","update","accessor","transform","startIndices","Object","lastExternalBuffer","binaryValue","binaryAccessor","needsUpdate","needsRedraw","updateRanges","range","clearChangedFlags","getUpdateTriggers","supportsTransition","Boolean","getTransitionSetting","layerSettings","userSettings","Array","a","normalizeTransitionSettings","setNeedsUpdate","reason","startRow","endRow","Infinity","clearNeedsUpdate","setNeedsRedraw","allocate","settings","copy","state","FULL","updateBuffer","context","updated","numInstances","value","constant","startOffset","Number","endOffset","setConstantValue","hasChanged","setExternalBuffer","setBinaryValue","ArrayBuffer","buffer","assert","needsNormalize","getAccessorFromBuffer","size","stride","offset","nested","getVertexOffset","vertexIndex","getShaderAttributes","shaderAttributeDefs","shaderAttributes","_autoUpdater","attribute","accessorFunc","props","i","objectInfo","createIterable","objectValue","numVertices","startIndex","fillArray","target","source","start","count","_validateAttributeUpdaters","hasUpdater","_checkAttributeArray","limit","Math","valid"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport DataColumn from './data-column';\nimport assert from '../../utils/assert';\nimport {createIterable, getAccessorFromBuffer} from '../../utils/iterable-utils';\nimport {fillArray} from '../../utils/flatten';\nimport * as range from '../../utils/range';\nimport {normalizeTransitionSettings} from './attribute-transition-utils';\n\nexport default class Attribute extends DataColumn {\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    const {\n      // deck.gl fields\n      transition = false,\n      noAlloc = false,\n      update = null,\n      accessor = null,\n      transform = null,\n      startIndices = null\n    } = opts;\n\n    Object.assign(this.settings, {\n      transition,\n      noAlloc,\n      update: update || (accessor && this._autoUpdater),\n      accessor,\n      transform\n    });\n\n    Object.assign(this.state, {\n      lastExternalBuffer: null,\n      binaryValue: null,\n      binaryAccessor: null,\n      needsUpdate: true,\n      needsRedraw: false,\n      updateRanges: range.FULL,\n      startIndices\n    });\n\n    Object.seal(this.settings);\n    Object.seal(this.state);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeUpdaters();\n  }\n\n  get startIndices() {\n    return this.state.startIndices;\n  }\n\n  set startIndices(layout) {\n    this.state.startIndices = layout;\n  }\n\n  needsUpdate() {\n    return this.state.needsUpdate;\n  }\n\n  needsRedraw({clearChangedFlags = false} = {}) {\n    const needsRedraw = this.state.needsRedraw;\n    this.state.needsRedraw = needsRedraw && !clearChangedFlags;\n    return needsRedraw;\n  }\n\n  getUpdateTriggers() {\n    const {accessor} = this.settings;\n\n    // Backards compatibility: allow attribute name to be used as update trigger key\n    return [this.id].concat((typeof accessor !== 'function' && accessor) || []);\n  }\n\n  supportsTransition() {\n    return Boolean(this.settings.transition);\n  }\n\n  // Resolve transition settings object if transition is enabled, otherwise `null`\n  getTransitionSetting(opts) {\n    if (!opts || !this.supportsTransition()) {\n      return null;\n    }\n    const {accessor} = this.settings;\n    // TODO: have the layer resolve these transition settings itself?\n    const layerSettings = this.settings.transition;\n    // these are the transition settings passed in by the user\n    const userSettings = Array.isArray(accessor)\n      ? opts[accessor.find(a => opts[a])]\n      : opts[accessor];\n\n    // Shorthand: use duration instead of parameter object\n    return normalizeTransitionSettings(userSettings, layerSettings);\n  }\n\n  setNeedsUpdate(reason = this.id, dataRange) {\n    this.state.needsUpdate = this.state.needsUpdate || reason;\n    this.setNeedsRedraw(reason);\n    if (dataRange) {\n      const {startRow = 0, endRow = Infinity} = dataRange;\n      this.state.updateRanges = range.add(this.state.updateRanges, [startRow, endRow]);\n    } else {\n      this.state.updateRanges = range.FULL;\n    }\n  }\n\n  clearNeedsUpdate() {\n    this.state.needsUpdate = false;\n    this.state.updateRanges = range.EMPTY;\n  }\n\n  setNeedsRedraw(reason = this.id) {\n    this.state.needsRedraw = this.state.needsRedraw || reason;\n  }\n\n  update(opts) {\n    // backward compatibility\n    this.setData(opts);\n  }\n\n  allocate(numInstances) {\n    const {state, settings} = this;\n\n    if (settings.noAlloc) {\n      // Data is provided through a Buffer object.\n      return false;\n    }\n\n    if (settings.update) {\n      super.allocate({\n        numInstances,\n        copy: state.updateRanges !== range.FULL\n      });\n      return true;\n    }\n\n    return false;\n  }\n\n  updateBuffer({numInstances, data, props, context}) {\n    if (!this.needsUpdate()) {\n      return false;\n    }\n\n    const {\n      state: {updateRanges},\n      settings: {update, noAlloc}\n    } = this;\n\n    let updated = true;\n    if (update) {\n      // Custom updater - typically for non-instanced layers\n      for (const [startRow, endRow] of updateRanges) {\n        update.call(context, this, {data, startRow, endRow, props, numInstances});\n      }\n      if (!this.value) {\n        // no value was assigned during update\n      } else if (\n        this.constant ||\n        this.buffer.byteLength < this.value.byteLength + this.byteOffset\n      ) {\n        this.setData({\n          value: this.value,\n          constant: this.constant\n        });\n        // Setting attribute.constant in updater is a legacy approach that interferes with allocation in the next cycle\n        // Respect it here but reset after use\n        this.constant = false;\n      } else {\n        for (const [startRow, endRow] of updateRanges) {\n          const startOffset = Number.isFinite(startRow) ? this.getVertexOffset(startRow) : 0;\n          const endOffset = Number.isFinite(endRow)\n            ? this.getVertexOffset(endRow)\n            : noAlloc || !Number.isFinite(numInstances)\n              ? this.value.length\n              : numInstances * this.size;\n\n          super.updateSubBuffer({startOffset, endOffset});\n        }\n      }\n      this._checkAttributeArray();\n    } else {\n      updated = false;\n    }\n\n    this.clearNeedsUpdate();\n    this.setNeedsRedraw();\n\n    return updated;\n  }\n\n  // Use generic value\n  // Returns true if successful\n  setConstantValue(value) {\n    if (value === undefined || typeof value === 'function') {\n      return false;\n    }\n\n    const hasChanged = this.setData({constant: true, value});\n\n    if (hasChanged) {\n      this.setNeedsRedraw();\n    }\n    this.clearNeedsUpdate();\n    return true;\n  }\n\n  // Use external buffer\n  // Returns true if successful\n  // eslint-disable-next-line max-statements\n  setExternalBuffer(buffer) {\n    const {state} = this;\n\n    if (!buffer) {\n      state.lastExternalBuffer = null;\n      return false;\n    }\n\n    this.clearNeedsUpdate();\n\n    if (state.lastExternalBuffer === buffer) {\n      return true;\n    }\n    state.lastExternalBuffer = buffer;\n    this.setNeedsRedraw();\n    this.setData(buffer);\n    return true;\n  }\n\n  // Binary value is a typed array packed from mapping the source data with the accessor\n  // If the returned value from the accessor is the same as the attribute value, set it directly\n  // Otherwise use the auto updater for transform/normalization\n  setBinaryValue(buffer, startIndices = null) {\n    const {state, settings} = this;\n\n    if (!buffer) {\n      state.binaryValue = null;\n      state.binaryAccessor = null;\n      return false;\n    }\n\n    if (settings.noAlloc) {\n      // Let the layer handle this\n      return false;\n    }\n\n    if (state.binaryValue === buffer) {\n      this.clearNeedsUpdate();\n      return true;\n    }\n    state.binaryValue = buffer;\n    this.setNeedsRedraw();\n\n    if (ArrayBuffer.isView(buffer)) {\n      buffer = {value: buffer};\n    }\n    const needsUpdate = settings.transform || startIndices !== this.startIndices;\n\n    if (needsUpdate) {\n      assert(ArrayBuffer.isView(buffer.value), `invalid ${settings.accessor}`);\n      const needsNormalize = buffer.size && buffer.size !== this.size;\n\n      state.binaryAccessor = getAccessorFromBuffer(buffer.value, {\n        size: buffer.size || this.size,\n        stride: buffer.stride,\n        offset: buffer.offset,\n        startIndices,\n        nested: needsNormalize\n      });\n      // Fall through to auto updater\n      return false;\n    }\n\n    this.clearNeedsUpdate();\n    this.setData(buffer);\n    return true;\n  }\n\n  getVertexOffset(row) {\n    const {startIndices} = this;\n    const vertexIndex = startIndices ? startIndices[row] : row;\n    return vertexIndex * this.size;\n  }\n\n  getShaderAttributes() {\n    const shaderAttributeDefs = this.settings.shaderAttributes || {[this.id]: null};\n    const shaderAttributes = {};\n\n    for (const shaderAttributeName in shaderAttributeDefs) {\n      Object.assign(\n        shaderAttributes,\n        super.getShaderAttributes(shaderAttributeName, shaderAttributeDefs[shaderAttributeName])\n      );\n    }\n\n    return shaderAttributes;\n  }\n\n  /* eslint-disable max-depth, max-statements */\n  _autoUpdater(attribute, {data, startRow, endRow, props, numInstances}) {\n    if (attribute.constant) {\n      return;\n    }\n    const {settings, state, value, size, startIndices} = attribute;\n\n    const {accessor, transform} = settings;\n    const accessorFunc =\n      state.binaryAccessor || (typeof accessor === 'function' ? accessor : props[accessor]);\n\n    assert(typeof accessorFunc === 'function', `accessor \"${accessor}\" is not a function`);\n\n    let i = attribute.getVertexOffset(startRow);\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n\n      let objectValue = accessorFunc(object, objectInfo);\n      if (transform) {\n        // transform callbacks could be bound to a particular layer instance.\n        // always point `this` to the current layer.\n        objectValue = transform.call(this, objectValue);\n      }\n\n      if (startIndices) {\n        const numVertices =\n          (objectInfo.index < startIndices.length - 1\n            ? startIndices[objectInfo.index + 1]\n            : numInstances) - startIndices[objectInfo.index];\n        if (objectValue && Array.isArray(objectValue[0])) {\n          let startIndex = i;\n          for (const item of objectValue) {\n            attribute._normalizeValue(item, value, startIndex);\n            startIndex += size;\n          }\n        } else if (objectValue && objectValue.length > size) {\n          value.set(objectValue, i);\n        } else {\n          attribute._normalizeValue(objectValue, objectInfo.target, 0);\n          fillArray({\n            target: value,\n            source: objectInfo.target,\n            start: i,\n            count: numVertices\n          });\n        }\n        i += numVertices * size;\n      } else {\n        attribute._normalizeValue(objectValue, value, i);\n        i += size;\n      }\n    }\n  }\n  /* eslint-enable max-depth, max-statements */\n\n  // Validate deck.gl level fields\n  _validateAttributeUpdaters() {\n    const {settings} = this;\n\n    // Check that 'update' is a valid function\n    const hasUpdater = settings.noAlloc || typeof settings.update === 'function';\n    if (!hasUpdater) {\n      throw new Error(`Attribute ${this.id} missing update or accessor`);\n    }\n  }\n\n  // check that the first few elements of the attribute are reasonable\n  /* eslint-disable no-fallthrough */\n  _checkAttributeArray() {\n    const {value} = this;\n    const limit = Math.min(4, this.size);\n    if (value && value.length >= limit) {\n      let valid = true;\n      switch (limit) {\n        case 4:\n          valid = valid && Number.isFinite(value[3]);\n        case 3:\n          valid = valid && Number.isFinite(value[2]);\n        case 2:\n          valid = valid && Number.isFinite(value[1]);\n        case 1:\n          valid = valid && Number.isFinite(value[0]);\n          break;\n        default:\n          valid = false;\n      }\n\n      if (!valid) {\n        throw new Error(`Illegal attribute generated for ${this.id}`);\n      }\n    }\n  }\n  /* eslint-enable no-fallthrough */\n}\n"]},"metadata":{},"sourceType":"module"}