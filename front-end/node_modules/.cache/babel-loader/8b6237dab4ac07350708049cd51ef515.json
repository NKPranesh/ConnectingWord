{"ast":null,"code":"import DRACOBuilder from './lib/draco-builder';\nimport { loadDracoEncoderModule } from './lib/draco-module-loader';\nimport { VERSION } from './lib/utils/version';\nconst DEFAULT_DRACO_OPTIONS = {\n  pointcloud: false,\n  attributeNameEntry: 'name'\n};\nexport const DracoWriter = {\n  name: 'DRACO',\n  id: 'draco',\n  module: 'draco',\n  version: VERSION,\n  extensions: ['drc'],\n  encode,\n  options: {\n    draco: DEFAULT_DRACO_OPTIONS\n  }\n};\n\nasync function encode(data) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    draco\n  } = await loadDracoEncoderModule(options);\n  const dracoBuilder = new DRACOBuilder(draco);\n\n  try {\n    return dracoBuilder.encodeSync(data, options.draco);\n  } finally {\n    dracoBuilder.destroy();\n  }\n}","map":{"version":3,"sources":["../../src/draco-writer.ts"],"names":["DEFAULT_DRACO_OPTIONS","pointcloud","attributeNameEntry","DracoWriter","name","id","module","version","extensions","options","draco","loadDracoEncoderModule","dracoBuilder"],"mappings":"AAGA,OAAA,YAAA,MAAA,qBAAA;AACA,SAAA,sBAAA,QAAA,2BAAA;AACA,SAAA,OAAA,QAAA,qBAAA;AAIA,MAAMA,qBAAqB,GAAG;AAC5BC,EAAAA,UAAU,EADkB,KAAA;AAE5BC,EAAAA,kBAAkB,EAAE;AAFQ,CAA9B;AAcA,OAAO,MAAMC,WAAmB,GAAG;AACjCC,EAAAA,IAAI,EAD6B,OAAA;AAEjCC,EAAAA,EAAE,EAF+B,OAAA;AAGjCC,EAAAA,MAAM,EAH2B,OAAA;AAIjCC,EAAAA,OAAO,EAJ0B,OAAA;AAKjCC,EAAAA,UAAU,EAAE,CALqB,KAKrB,CALqB;AAAA,EAAA,MAAA;AAOjCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EAAEV;AADA;AAPwB,CAA5B;;AAYP,eAAA,MAAA,CAAA,IAAA,EAGwB;AAAA,MADtBS,OACsB,uEAHxB,EAGwB;AAEtB,QAAM;AAACC,IAAAA;AAAD,MAAU,MAAMC,sBAAsB,CAA5C,OAA4C,CAA5C;AACA,QAAMC,YAAY,GAAG,IAAA,YAAA,CAArB,KAAqB,CAArB;;AAEA,MAAI;AACF,WAAOA,YAAY,CAAZA,UAAAA,CAAAA,IAAAA,EAA8BH,OAAO,CAA5C,KAAOG,CAAP;AADF,GAAA,SAEU;AACRA,IAAAA,YAAY,CAAZA,OAAAA;AACD;AACF","sourcesContent":["import type {Writer} from '@loaders.gl/loader-utils';\nimport type {DracoMeshData} from './lib/draco-types';\nimport type {DracoBuildOptions} from './lib/draco-builder';\nimport DRACOBuilder from './lib/draco-builder';\nimport {loadDracoEncoderModule} from './lib/draco-module-loader';\nimport {VERSION} from './lib/utils/version';\n\nexport type DracoWriterOptions = DracoBuildOptions & {};\n\nconst DEFAULT_DRACO_OPTIONS = {\n  pointcloud: false, // Set to true if pointcloud (mode: 0, no indices)\n  attributeNameEntry: 'name'\n  // Draco Compression Parameters\n  // method: 'MESH_EDGEBREAKER_ENCODING',\n  // speed: [5, 5],\n  // quantization: {\n  //   POSITION: 10\n  // }\n};\n\n/**\n * Exporter for Draco3D compressed geometries\n */\nexport const DracoWriter: Writer = {\n  name: 'DRACO',\n  id: 'draco',\n  module: 'draco',\n  version: VERSION,\n  extensions: ['drc'],\n  encode,\n  options: {\n    draco: DEFAULT_DRACO_OPTIONS\n  }\n};\n\nasync function encode(\n  data: DracoMeshData,\n  options: {draco?: DracoWriterOptions} = {}\n): Promise<ArrayBuffer> {\n  // Dynamically load draco\n  const {draco} = await loadDracoEncoderModule(options);\n  const dracoBuilder = new DRACOBuilder(draco);\n\n  try {\n    return dracoBuilder.encodeSync(data, options.draco);\n  } finally {\n    dracoBuilder.destroy();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}