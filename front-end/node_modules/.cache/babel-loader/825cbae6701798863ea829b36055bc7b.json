{"ast":null,"code":"var _jsxFileName = \"/Users/riteshnelakosigi/Desktop/ConnectingWord/front-end/src/components/map.js\";\nimport React from \"react\";\nimport DeckGL from \"@deck.gl/react\";\nimport { StaticMap } from \"react-map-gl\";\nimport { LineLayer, ScatterplotLayer } from \"@deck.gl/layers\";\nimport DarkMap from \"../data/map.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst friendshipData = [{\n  start: [78.4867, 17.385],\n  end: [8.6875, 54.2501],\n  fromName: \"Hyderabad\",\n  toName: \"Denmark\"\n}, {\n  start: [78.4867, 17.385],\n  end: [13.4149, 46.8265],\n  fromName: \"Hyderabad\",\n  toName: \"Austria\"\n}];\nconst peopleData = [{\n  type: \"mid\",\n  name: \"Pranesh\",\n  coordinates: [78.4867, 17.385]\n}, {\n  type: \"major\",\n  name: \"Vamshi\",\n  coordinates: [8.6875, 54.2501]\n}, {\n  type: \"major\",\n  name: \"Mahesh\",\n  coordinates: [13.4149, 46.8265]\n}]; // const layers = [\n//   new LineLayer({\n//     id: \"friendship\",\n//     data: friendshipData,\n//     opacity: 0.8,\n//     getSourcePosition: (d) => d.start,\n//     getTargetPosition: (d) => d.end,\n//     getColor: [225, 0, 0, 123],\n//     getWidth: 5,\n//     pickable: true,\n//   }),\n//   new ScatterplotLayer({\n//     id: \"person\",\n//     data: peopleData,\n//     radiusScale: 10,\n//     getPosition: (d) => d.coordinates,\n//     getFillColor: [255, 140, 0],\n//     getRadius: 3000,\n//     pickable: true,\n//   }),\n// ];\n\nlet INITIAL_VIEW_STATE = {\n  longitude: 78.4867,\n  latitude: 17.385,\n  zoom: 0,\n  maxZoom: 22,\n  pitch: 30,\n  bearing: 0\n};\nconst MAP_STYLE = DarkMap;\n\nclass Map extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      layers: [new LineLayer({\n        id: \"friendship\",\n        data: friendshipData,\n        opacity: 0.8,\n        getSourcePosition: d => d.start,\n        getTargetPosition: d => d.end,\n        getColor: [225, 0, 0, 123],\n        getWidth: 5,\n        pickable: true\n      }), new ScatterplotLayer({\n        id: \"person\",\n        data: peopleData,\n        radiusScale: 10,\n        getPosition: d => d.coordinates,\n        getFillColor: [255, 140, 0],\n        getRadius: 3000,\n        pickable: true\n      })],\n      updateLayers: zoom => {\n        let newState = { ...this.state\n        };\n        console.log(newState.layers[1].props.getRadius);\n        newState.layers[1] = new ScatterplotLayer({\n          id: \"person\",\n          data: peopleData,\n          radiusScale: 10,\n          getPosition: d => d.coordinates,\n          getFillColor: [255, 140, 0],\n          getRadius: zoom == 0 ? 15000 : 0,\n          pickable: true\n        });\n        this.setState(newState);\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(DeckGL, {\n        layers: this.state.layers,\n        initialViewState: INITIAL_VIEW_STATE,\n        controller: true,\n        getTooltip: _ref => {\n          let {\n            object\n          } = _ref;\n          return object && `${object.fromName} to ${object.toName}`;\n        },\n        onViewStateChange: v => {\n          console.log(v.viewState.zoom);\n          this.state.updateLayers(v.viewState.zoom);\n        },\n        children: /*#__PURE__*/_jsxDEV(StaticMap, {\n          reuseMaps: true,\n          mapStyle: MAP_STYLE,\n          preventStyleDiffing: true,\n          mapboxApiAccessToken: \"pk.eyJ1IjoiY29ubmVjdGluZ3dvcmxkIiwiYSI6ImNrd2l3anlzdDB3bTAycG1kYXVlYnZtaXAifQ.fsAb70tSq-vGoIwjXuqreg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/riteshnelakosigi/Desktop/ConnectingWord/front-end/src/components/map.js"],"names":["React","DeckGL","StaticMap","LineLayer","ScatterplotLayer","DarkMap","friendshipData","start","end","fromName","toName","peopleData","type","name","coordinates","INITIAL_VIEW_STATE","longitude","latitude","zoom","maxZoom","pitch","bearing","MAP_STYLE","Map","Component","state","layers","id","data","opacity","getSourcePosition","d","getTargetPosition","getColor","getWidth","pickable","radiusScale","getPosition","getFillColor","getRadius","updateLayers","newState","console","log","props","setState","render","object","v","viewState"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport DeckGL from \"@deck.gl/react\";\nimport { StaticMap } from \"react-map-gl\";\nimport { LineLayer, ScatterplotLayer } from \"@deck.gl/layers\";\nimport DarkMap from \"../data/map.json\";\n\nconst friendshipData = [\n  {\n    start: [78.4867, 17.385],\n    end: [8.6875, 54.2501],\n    fromName: \"Hyderabad\",\n    toName: \"Denmark\",\n  },\n  {\n    start: [78.4867, 17.385],\n    end: [13.4149, 46.8265],\n    fromName: \"Hyderabad\",\n    toName: \"Austria\",\n  },\n];\n\nconst peopleData = [\n  {\n    type: \"mid\",\n    name: \"Pranesh\",\n    coordinates: [78.4867, 17.385],\n  },\n  {\n    type: \"major\",\n    name: \"Vamshi\",\n    coordinates: [8.6875, 54.2501],\n  },\n  {\n    type: \"major\",\n    name: \"Mahesh\",\n    coordinates: [13.4149, 46.8265],\n  },\n];\n\n// const layers = [\n//   new LineLayer({\n//     id: \"friendship\",\n//     data: friendshipData,\n//     opacity: 0.8,\n//     getSourcePosition: (d) => d.start,\n//     getTargetPosition: (d) => d.end,\n//     getColor: [225, 0, 0, 123],\n//     getWidth: 5,\n//     pickable: true,\n//   }),\n//   new ScatterplotLayer({\n//     id: \"person\",\n//     data: peopleData,\n//     radiusScale: 10,\n//     getPosition: (d) => d.coordinates,\n//     getFillColor: [255, 140, 0],\n//     getRadius: 3000,\n//     pickable: true,\n//   }),\n// ];\n\nlet INITIAL_VIEW_STATE = {\n  longitude: 78.4867,\n  latitude: 17.385,\n  zoom: 0,\n  maxZoom: 22,\n  pitch: 30,\n  bearing: 0,\n};\n\nconst MAP_STYLE = DarkMap;\n\nclass Map extends React.Component {\n  state = {\n    layers: [\n      new LineLayer({\n        id: \"friendship\",\n        data: friendshipData,\n        opacity: 0.8,\n        getSourcePosition: (d) => d.start,\n        getTargetPosition: (d) => d.end,\n        getColor: [225, 0, 0, 123],\n        getWidth: 5,\n        pickable: true,\n      }),\n      new ScatterplotLayer({\n        id: \"person\",\n        data: peopleData,\n        radiusScale: 10,\n        getPosition: (d) => d.coordinates,\n        getFillColor: [255, 140, 0],\n        getRadius: 3000,\n        pickable: true,\n      }),\n    ],\n\n    updateLayers: (zoom) => {\n      let newState = { ...this.state };\n      console.log(newState.layers[1].props.getRadius);\n\n      newState.layers[1] = new ScatterplotLayer({\n        id: \"person\",\n        data: peopleData,\n        radiusScale: 10,\n        getPosition: (d) => d.coordinates,\n        getFillColor: [255, 140, 0],\n        getRadius: zoom == 0 ? 15000 : 0,\n        pickable: true,\n      });\n      this.setState(newState);\n    },\n  };\n\n  render() {\n    return (\n      <div>\n        <DeckGL\n          layers={this.state.layers}\n          initialViewState={INITIAL_VIEW_STATE}\n          controller={true}\n          getTooltip={({ object }) =>\n            object && `${object.fromName} to ${object.toName}`\n          }\n          onViewStateChange={(v) => {\n            console.log(v.viewState.zoom);\n            this.state.updateLayers(v.viewState.zoom);\n          }}\n        >\n          <StaticMap\n            reuseMaps\n            mapStyle={MAP_STYLE}\n            preventStyleDiffing={true}\n            mapboxApiAccessToken=\"pk.eyJ1IjoiY29ubmVjdGluZ3dvcmxkIiwiYSI6ImNrd2l3anlzdDB3bTAycG1kYXVlYnZtaXAifQ.fsAb70tSq-vGoIwjXuqreg\"\n          />\n        </DeckGL>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}