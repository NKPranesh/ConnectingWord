{"ast":null,"code":"import { Vector3, equals, assert } from '@math.gl/core';\nconst scratchPosition = new Vector3();\nconst scratchNormal = new Vector3();\nexport default class Plane {\n  constructor() {\n    let normal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0, 1];\n    let distance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.normal = new Vector3();\n    this.distance = -0;\n    this.fromNormalDistance(normal, distance);\n  }\n\n  fromNormalDistance(normal, distance) {\n    assert(Number.isFinite(distance));\n    this.normal.from(normal).normalize();\n    this.distance = distance;\n    return this;\n  }\n\n  fromPointNormal(point, normal) {\n    point = scratchPosition.from(point);\n    this.normal.from(normal).normalize();\n    const distance = -this.normal.dot(point);\n    this.distance = distance;\n    return this;\n  }\n\n  fromCoefficients(a, b, c, d) {\n    this.normal.set(a, b, c);\n    assert(equals(this.normal.len(), 1));\n    this.distance = d;\n    return this;\n  }\n\n  clone(plane) {\n    return new Plane(this.normal, this.distance);\n  }\n\n  equals(right) {\n    return equals(this.distance, right.distance) && equals(this.normal, right.normal);\n  }\n\n  getPointDistance(point) {\n    return this.normal.dot(point) + this.distance;\n  }\n\n  transform(matrix4) {\n    const normal = scratchNormal.copy(this.normal).transformAsVector(matrix4).normalize();\n    const point = this.normal.scale(-this.distance).transform(matrix4);\n    return this.fromPointNormal(point, normal);\n  }\n\n  projectPointOntoPlane(point) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    point = scratchPosition.from(point);\n    const pointDistance = this.getPointDistance(point);\n    const scaledNormal = scratchNormal.copy(this.normal).scale(pointDistance);\n    return point.subtract(scaledNormal).to(result);\n  }\n\n}","map":{"version":3,"sources":["../../../src/lib/plane.js"],"names":["scratchPosition","scratchNormal","constructor","normal","distance","fromNormalDistance","assert","Number","fromPointNormal","point","fromCoefficients","equals","clone","right","getPointDistance","transform","projectPointOntoPlane","result","pointDistance","scaledNormal"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* eslint-disable */\nimport {Vector3, equals, assert} from '@math.gl/core';\n\nconst scratchPosition = new Vector3();\nconst scratchNormal = new Vector3();\n\n// A plane in Hessian Normal Form\nexport default class Plane {\n  constructor(normal = [0, 0, 1], distance = 0) {\n    this.normal = new Vector3();\n    this.distance = -0;\n    this.fromNormalDistance(normal, distance);\n  }\n\n  fromNormalDistance(normal, distance) {\n    assert(Number.isFinite(distance));\n    this.normal.from(normal).normalize();\n    this.distance = distance;\n    return this;\n  }\n\n  // Creates a plane from a normal and a point on the plane.\n  fromPointNormal(point, normal) {\n    point = scratchPosition.from(point);\n    this.normal.from(normal).normalize();\n    const distance = -this.normal.dot(point);\n    this.distance = distance;\n\n    return this;\n  }\n\n  // Creates a plane from the general equation\n  fromCoefficients(a, b, c, d) {\n    this.normal.set(a, b, c);\n    assert(equals(this.normal.len(), 1));\n    this.distance = d;\n    return this;\n  }\n\n  // Duplicates a Plane instance.\n  clone(plane) {\n    return new Plane(this.normal, this.distance);\n  }\n\n  // Compares the provided Planes by normal and distance\n  equals(right) {\n    return equals(this.distance, right.distance) && equals(this.normal, right.normal);\n  }\n\n  // Computes the signed shortest distance of a point to a plane.\n  // The sign of the distance determines which side of the plane the point is on.\n  getPointDistance(point) {\n    return this.normal.dot(point) + this.distance;\n  }\n\n  // Transforms the plane by the given transformation matrix.\n  transform(matrix4) {\n    const normal = scratchNormal.copy(this.normal).transformAsVector(matrix4).normalize();\n    const point = this.normal.scale(-this.distance).transform(matrix4);\n    return this.fromPointNormal(point, normal);\n  }\n\n  // Projects a point onto the plane.\n  projectPointOntoPlane(point, result = [0, 0, 0]) {\n    point = scratchPosition.from(point);\n    // projectedPoint = point - (normal.point + scale) * normal\n    const pointDistance = this.getPointDistance(point);\n    const scaledNormal = scratchNormal.copy(this.normal).scale(pointDistance);\n\n    return point.subtract(scaledNormal).to(result);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}