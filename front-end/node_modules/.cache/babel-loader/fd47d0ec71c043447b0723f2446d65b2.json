{"ast":null,"code":"import { DracoLoader as DracoWorkerLoader } from './draco-loader';\nimport DracoParser from './lib/draco-parser';\nimport { loadDracoDecoderModule } from './lib/draco-module-loader';\nexport { DracoWriter } from './draco-writer';\nexport { DracoWorkerLoader };\nexport const DracoLoader = { ...DracoWorkerLoader,\n  parse\n};\n\nasync function parse(arrayBuffer, options) {\n  const {\n    draco\n  } = await loadDracoDecoderModule(options);\n  const dracoParser = new DracoParser(draco);\n\n  try {\n    return dracoParser.parseSync(arrayBuffer, options === null || options === void 0 ? void 0 : options.draco);\n  } finally {\n    dracoParser.destroy();\n  }\n}\n\nexport const _TypecheckDracoLoader = DracoLoader;","map":{"version":3,"sources":["../../src/index.ts"],"names":["DracoLoader","parse","draco","loadDracoDecoderModule","dracoParser","options","_TypecheckDracoLoader"],"mappings":"AAGA,SAAQA,WAAW,IAAnB,iBAAA,QAAA,gBAAA;AACA,OAAA,WAAA,MAAA,oBAAA;AACA,SAAA,sBAAA,QAAA,2BAAA;AASA,SAAA,WAAA,QAAA,gBAAA;AAKA,SAAA,iBAAA;AAKA,OAAO,MAAMA,WAAW,GAAG,EACzB,GADyB,iBAAA;AAEzBC,EAAAA;AAFyB,CAApB;;AAKP,eAAA,KAAA,CAAA,WAAA,EAAA,OAAA,EAG0B;AACxB,QAAM;AAACC,IAAAA;AAAD,MAAU,MAAMC,sBAAsB,CAA5C,OAA4C,CAA5C;AACA,QAAMC,WAAW,GAAG,IAAA,WAAA,CAApB,KAAoB,CAApB;;AACA,MAAI;AACF,WAAOA,WAAW,CAAXA,SAAAA,CAAAA,WAAAA,EAAmCC,OAAnCD,KAAAA,IAAmCC,IAAAA,OAAnCD,KAAAA,KAAAA,CAAmCC,GAAnCD,KAAAA,CAAmCC,GAAAA,OAAO,CAAjD,KAAOD,CAAP;AADF,GAAA,SAEU;AACRA,IAAAA,WAAW,CAAXA,OAAAA;AACD;AACF;;AAGD,OAAO,MAAME,qBAAuC,GAA7C,WAAA","sourcesContent":["import type {LoaderWithParser} from '@loaders.gl/loader-utils';\nimport type {DracoMeshData, DracoLoaderData} from './lib/draco-types';\nimport type {DracoLoaderOptions} from './draco-loader';\nimport {DracoLoader as DracoWorkerLoader} from './draco-loader';\nimport DracoParser from './lib/draco-parser';\nimport {loadDracoDecoderModule} from './lib/draco-module-loader';\n\n// Draco data types\n\nexport type {DracoMeshData, DracoLoaderData};\n\n// Draco Writer\n\nexport type {DracoWriterOptions} from './draco-writer';\nexport {DracoWriter} from './draco-writer';\n\n// Draco Loader\n\nexport type {DracoLoaderOptions};\nexport {DracoWorkerLoader};\n\n/**\n * Loader for Draco3D compressed geometries\n */\nexport const DracoLoader = {\n  ...DracoWorkerLoader,\n  parse\n};\n\nasync function parse(\n  arrayBuffer: ArrayBuffer,\n  options?: DracoLoaderOptions\n): Promise<DracoMeshData> {\n  const {draco} = await loadDracoDecoderModule(options);\n  const dracoParser = new DracoParser(draco);\n  try {\n    return dracoParser.parseSync(arrayBuffer, options?.draco);\n  } finally {\n    dracoParser.destroy();\n  }\n}\n\n// TYPE TESTS - TODO find a better way than exporting junk\nexport const _TypecheckDracoLoader: LoaderWithParser = DracoLoader;\n"]},"metadata":{},"sourceType":"module"}