{"ast":null,"code":"import TinySDF from '@mapbox/tiny-sdf';\nimport { buildMapping } from './utils';\nimport LRUCache from './lru-cache';\n\nfunction getDefaultCharacterSet() {\n  const charSet = [];\n\n  for (let i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n\n  return charSet;\n}\n\nexport const DEFAULT_CHAR_SET = getDefaultCharacterSet();\nexport const DEFAULT_FONT_FAMILY = 'Monaco, monospace';\nexport const DEFAULT_FONT_WEIGHT = 'normal';\nexport const DEFAULT_FONT_SIZE = 64;\nexport const DEFAULT_BUFFER = 4;\nexport const DEFAULT_CUTOFF = 0.25;\nexport const DEFAULT_RADIUS = 12;\nconst MAX_CANVAS_WIDTH = 1024;\nconst BASELINE_SCALE = 0.9;\nconst HEIGHT_SCALE = 1.2;\nconst CACHE_LIMIT = 3;\nconst cache = new LRUCache(CACHE_LIMIT);\nconst VALID_PROPS = ['fontFamily', 'fontWeight', 'characterSet', 'fontSize', 'sdf', 'buffer', 'cutoff', 'radius'];\n\nfunction getNewChars(key, characterSet) {\n  const cachedFontAtlas = cache.get(key);\n\n  if (!cachedFontAtlas) {\n    return characterSet;\n  }\n\n  const newChars = [];\n  const cachedMapping = cachedFontAtlas.mapping;\n  let cachedCharSet = Object.keys(cachedMapping);\n  cachedCharSet = new Set(cachedCharSet);\n  let charSet = characterSet;\n\n  if (charSet instanceof Array) {\n    charSet = new Set(charSet);\n  }\n\n  charSet.forEach(char => {\n    if (!cachedCharSet.has(char)) {\n      newChars.push(char);\n    }\n  });\n  return newChars;\n}\n\nfunction populateAlphaChannel(alphaChannel, imageData) {\n  for (let i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\nfunction setTextStyle(ctx, fontFamily, fontSize, fontWeight) {\n  ctx.font = \"\".concat(fontWeight, \" \").concat(fontSize, \"px \").concat(fontFamily);\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = 'baseline';\n  ctx.textAlign = 'left';\n}\n\nexport default class FontAtlasManager {\n  constructor() {\n    this.props = {\n      fontFamily: DEFAULT_FONT_FAMILY,\n      fontWeight: DEFAULT_FONT_WEIGHT,\n      characterSet: DEFAULT_CHAR_SET,\n      fontSize: DEFAULT_FONT_SIZE,\n      buffer: DEFAULT_BUFFER,\n      sdf: false,\n      cutoff: DEFAULT_CUTOFF,\n      radius: DEFAULT_RADIUS\n    };\n    this._key = null;\n    this._atlas = null;\n  }\n\n  get texture() {\n    return this._atlas;\n  }\n\n  get mapping() {\n    return this._atlas && this._atlas.mapping;\n  }\n\n  get scale() {\n    return HEIGHT_SCALE;\n  }\n\n  setProps() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    VALID_PROPS.forEach(prop => {\n      if (prop in props) {\n        this.props[prop] = props[prop];\n      }\n    });\n    const oldKey = this._key;\n    this._key = this._getKey();\n    const charSet = getNewChars(this._key, this.props.characterSet);\n    const cachedFontAtlas = cache.get(this._key);\n\n    if (cachedFontAtlas && charSet.length === 0) {\n      if (this._key !== oldKey) {\n        this._atlas = cachedFontAtlas;\n      }\n\n      return;\n    }\n\n    const fontAtlas = this._generateFontAtlas(this._key, charSet, cachedFontAtlas);\n\n    this._atlas = fontAtlas;\n    cache.set(this._key, fontAtlas);\n  }\n\n  _generateFontAtlas(key, characterSet, cachedFontAtlas) {\n    const {\n      fontFamily,\n      fontWeight,\n      fontSize,\n      buffer,\n      sdf,\n      radius,\n      cutoff\n    } = this.props;\n    let canvas = cachedFontAtlas && cachedFontAtlas.data;\n\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.width = MAX_CANVAS_WIDTH;\n    }\n\n    const ctx = canvas.getContext('2d');\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n    const {\n      mapping,\n      canvasHeight,\n      xOffset,\n      yOffset\n    } = buildMapping({\n      getFontWidth: char => ctx.measureText(char).width,\n      fontHeight: fontSize * HEIGHT_SCALE,\n      buffer,\n      characterSet,\n      maxCanvasWidth: MAX_CANVAS_WIDTH,\n      ...(cachedFontAtlas && {\n        mapping: cachedFontAtlas.mapping,\n        xOffset: cachedFontAtlas.xOffset,\n        yOffset: cachedFontAtlas.yOffset\n      })\n    });\n\n    if (canvas.height !== canvasHeight) {\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      canvas.height = canvasHeight;\n      ctx.putImageData(imageData, 0, 0);\n    }\n\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    if (sdf) {\n      const tinySDF = new TinySDF(fontSize, buffer, radius, cutoff, fontFamily, fontWeight);\n      const imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n\n      for (const char of characterSet) {\n        populateAlphaChannel(tinySDF.draw(char), imageData);\n        ctx.putImageData(imageData, mapping[char].x - buffer, mapping[char].y + buffer);\n      }\n    } else {\n      for (const char of characterSet) {\n        ctx.fillText(char, mapping[char].x, mapping[char].y + fontSize * BASELINE_SCALE);\n      }\n    }\n\n    return {\n      xOffset,\n      yOffset,\n      mapping,\n      data: canvas,\n      width: canvas.width,\n      height: canvas.height\n    };\n  }\n\n  _getKey() {\n    const {\n      fontFamily,\n      fontWeight,\n      fontSize,\n      buffer,\n      sdf,\n      radius,\n      cutoff\n    } = this.props;\n\n    if (sdf) {\n      return \"\".concat(fontFamily, \" \").concat(fontWeight, \" \").concat(fontSize, \" \").concat(buffer, \" \").concat(radius, \" \").concat(cutoff);\n    }\n\n    return \"\".concat(fontFamily, \" \").concat(fontWeight, \" \").concat(fontSize, \" \").concat(buffer);\n  }\n\n}","map":{"version":3,"sources":["../../../src/text-layer/font-atlas-manager.js"],"names":["charSet","i","String","DEFAULT_CHAR_SET","getDefaultCharacterSet","DEFAULT_FONT_FAMILY","DEFAULT_FONT_WEIGHT","DEFAULT_FONT_SIZE","DEFAULT_BUFFER","DEFAULT_CUTOFF","DEFAULT_RADIUS","MAX_CANVAS_WIDTH","BASELINE_SCALE","HEIGHT_SCALE","CACHE_LIMIT","cache","VALID_PROPS","cachedFontAtlas","newChars","cachedMapping","cachedCharSet","Object","char","alphaChannel","imageData","ctx","constructor","fontFamily","fontWeight","characterSet","fontSize","buffer","sdf","cutoff","radius","texture","mapping","scale","setProps","props","prop","oldKey","getNewChars","fontAtlas","_generateFontAtlas","canvas","document","setTextStyle","yOffset","buildMapping","getFontWidth","fontHeight","maxCanvasWidth","xOffset","tinySDF","populateAlphaChannel","data","width","height","_getKey"],"mappings":"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","sourcesContent":["/* global document */\nimport TinySDF from '@mapbox/tiny-sdf';\n\nimport {buildMapping} from './utils';\nimport LRUCache from './lru-cache';\n\nfunction getDefaultCharacterSet() {\n  const charSet = [];\n  for (let i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n  return charSet;\n}\n\nexport const DEFAULT_CHAR_SET = getDefaultCharacterSet();\nexport const DEFAULT_FONT_FAMILY = 'Monaco, monospace';\nexport const DEFAULT_FONT_WEIGHT = 'normal';\nexport const DEFAULT_FONT_SIZE = 64;\nexport const DEFAULT_BUFFER = 4;\nexport const DEFAULT_CUTOFF = 0.25;\nexport const DEFAULT_RADIUS = 12;\n\nconst MAX_CANVAS_WIDTH = 1024;\n\nconst BASELINE_SCALE = 0.9;\nconst HEIGHT_SCALE = 1.2;\n\n// only preserve latest three fontAtlas\nconst CACHE_LIMIT = 3;\n\n/**\n * [key]: {\n *   xOffset, // x position of last character in mapping\n *   yOffset, // y position of last character in mapping\n *   mapping, // x, y coordinate of each character in shared `fontAtlas`\n *   data, // canvas\n *   width. // canvas.width,\n *   height, // canvas.height\n * }\n *\n */\nconst cache = new LRUCache(CACHE_LIMIT);\n\nconst VALID_PROPS = [\n  'fontFamily',\n  'fontWeight',\n  'characterSet',\n  'fontSize',\n  'sdf',\n  'buffer',\n  'cutoff',\n  'radius'\n];\n\n/**\n * get all the chars not in cache\n * @param key cache key\n * @param characterSet (Array|Set)\n * @returns {Array} chars not in cache\n */\nfunction getNewChars(key, characterSet) {\n  const cachedFontAtlas = cache.get(key);\n  if (!cachedFontAtlas) {\n    return characterSet;\n  }\n\n  const newChars = [];\n  const cachedMapping = cachedFontAtlas.mapping;\n  let cachedCharSet = Object.keys(cachedMapping);\n  cachedCharSet = new Set(cachedCharSet);\n\n  let charSet = characterSet;\n  if (charSet instanceof Array) {\n    charSet = new Set(charSet);\n  }\n\n  charSet.forEach(char => {\n    if (!cachedCharSet.has(char)) {\n      newChars.push(char);\n    }\n  });\n\n  return newChars;\n}\n\nfunction populateAlphaChannel(alphaChannel, imageData) {\n  // populate distance value from tinySDF to image alpha channel\n  for (let i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\nfunction setTextStyle(ctx, fontFamily, fontSize, fontWeight) {\n  ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = 'baseline';\n  ctx.textAlign = 'left';\n}\n\nexport default class FontAtlasManager {\n  constructor() {\n    // font settings\n    this.props = {\n      fontFamily: DEFAULT_FONT_FAMILY,\n      fontWeight: DEFAULT_FONT_WEIGHT,\n      characterSet: DEFAULT_CHAR_SET,\n      fontSize: DEFAULT_FONT_SIZE,\n      buffer: DEFAULT_BUFFER,\n      // sdf only props\n      // https://github.com/mapbox/tiny-sdf\n      sdf: false,\n      cutoff: DEFAULT_CUTOFF,\n      radius: DEFAULT_RADIUS\n    };\n\n    // key is used for caching generated fontAtlas\n    this._key = null;\n    this._atlas = null;\n  }\n\n  get texture() {\n    return this._atlas;\n  }\n\n  get mapping() {\n    return this._atlas && this._atlas.mapping;\n  }\n\n  get scale() {\n    return HEIGHT_SCALE;\n  }\n\n  setProps(props = {}) {\n    VALID_PROPS.forEach(prop => {\n      if (prop in props) {\n        this.props[prop] = props[prop];\n      }\n    });\n\n    // update cache key\n    const oldKey = this._key;\n    this._key = this._getKey();\n\n    const charSet = getNewChars(this._key, this.props.characterSet);\n    const cachedFontAtlas = cache.get(this._key);\n\n    // if a fontAtlas associated with the new settings is cached and\n    // there are no new chars\n    if (cachedFontAtlas && charSet.length === 0) {\n      // update texture with cached fontAtlas\n      if (this._key !== oldKey) {\n        this._atlas = cachedFontAtlas;\n      }\n      return;\n    }\n\n    // update fontAtlas with new settings\n    const fontAtlas = this._generateFontAtlas(this._key, charSet, cachedFontAtlas);\n    this._atlas = fontAtlas;\n\n    // update cache\n    cache.set(this._key, fontAtlas);\n  }\n\n  _generateFontAtlas(key, characterSet, cachedFontAtlas) {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    let canvas = cachedFontAtlas && cachedFontAtlas.data;\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.width = MAX_CANVAS_WIDTH;\n    }\n    const ctx = canvas.getContext('2d');\n\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 1. build mapping\n    const {mapping, canvasHeight, xOffset, yOffset} = buildMapping({\n      getFontWidth: char => ctx.measureText(char).width,\n      fontHeight: fontSize * HEIGHT_SCALE,\n      buffer,\n      characterSet,\n      maxCanvasWidth: MAX_CANVAS_WIDTH,\n      ...(cachedFontAtlas && {\n        mapping: cachedFontAtlas.mapping,\n        xOffset: cachedFontAtlas.xOffset,\n        yOffset: cachedFontAtlas.yOffset\n      })\n    });\n\n    // 2. update canvas\n    // copy old canvas data to new canvas only when height changed\n    if (canvas.height !== canvasHeight) {\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      canvas.height = canvasHeight;\n      ctx.putImageData(imageData, 0, 0);\n    }\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 3. layout characters\n    if (sdf) {\n      const tinySDF = new TinySDF(fontSize, buffer, radius, cutoff, fontFamily, fontWeight);\n      // used to store distance values from tinySDF\n      // tinySDF.size equals `fontSize + buffer * 2`\n      const imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n\n      for (const char of characterSet) {\n        populateAlphaChannel(tinySDF.draw(char), imageData);\n        ctx.putImageData(imageData, mapping[char].x - buffer, mapping[char].y + buffer);\n      }\n    } else {\n      for (const char of characterSet) {\n        ctx.fillText(char, mapping[char].x, mapping[char].y + fontSize * BASELINE_SCALE);\n      }\n    }\n\n    return {\n      xOffset,\n      yOffset,\n      mapping,\n      data: canvas,\n      width: canvas.width,\n      height: canvas.height\n    };\n  }\n\n  _getKey() {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    if (sdf) {\n      return `${fontFamily} ${fontWeight} ${fontSize} ${buffer} ${radius} ${cutoff}`;\n    }\n    return `${fontFamily} ${fontWeight} ${fontSize} ${buffer}`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}