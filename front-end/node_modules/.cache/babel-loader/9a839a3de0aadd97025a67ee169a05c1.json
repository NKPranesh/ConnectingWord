{"ast":null,"code":"import { padToNBytes, copyBinaryToDataView, copyPaddedStringToDataView } from '@loaders.gl/loader-utils';\nimport { MAGIC_ARRAY } from '../constants';\nimport { encode3DTileHeader, encode3DTileByteLength } from './helpers/encode-3d-tile-header';\nexport function encodeBatchedModel3DTile(tile, dataView, byteOffset, options) {\n  const {\n    featuresLength = 0,\n    batchTable\n  } = tile;\n  const featureTableJson = {\n    BATCH_LENGTH: featuresLength\n  };\n  const featureTableJsonString = JSON.stringify(featureTableJson);\n  const batchTableJsonString = batchTable ? JSON.stringify(batchTable) : '';\n  const featureTableJsonByteLength = padToNBytes(featureTableJsonString.length, 8);\n  const batchTableJsonByteLength = batchTableJsonString ? padToNBytes(batchTableJsonString.length, 8) : 0;\n  tile = {\n    magic: MAGIC_ARRAY.BATCHED_MODEL,\n    ...tile\n  };\n  const byteOffsetStart = byteOffset;\n  byteOffset = encode3DTileHeader(tile, dataView, byteOffset);\n\n  if (dataView) {\n    dataView.setUint32(12, featureTableJsonByteLength, true);\n    dataView.setUint32(16, 0, true);\n    dataView.setUint32(20, batchTableJsonByteLength, true);\n    dataView.setUint32(24, 0, true);\n  }\n\n  byteOffset += 16;\n  byteOffset = copyPaddedStringToDataView(dataView, byteOffset, featureTableJsonString, 8);\n\n  if (batchTable) {\n    byteOffset = copyPaddedStringToDataView(dataView, byteOffset, batchTableJsonString, 8);\n  }\n\n  const gltfEncoded = tile.gltfEncoded;\n\n  if (gltfEncoded) {\n    byteOffset = copyBinaryToDataView(dataView, byteOffset, gltfEncoded, gltfEncoded.byteLength);\n  }\n\n  encode3DTileByteLength(dataView, byteOffsetStart, byteOffset - byteOffsetStart);\n  return byteOffset;\n}","map":{"version":3,"sources":["../../../../src/lib/encoders/encode-3d-tile-batched-model.js"],"names":["featuresLength","batchTable","featureTableJson","BATCH_LENGTH","featureTableJsonString","JSON","batchTableJsonString","featureTableJsonByteLength","padToNBytes","batchTableJsonByteLength","tile","magic","MAGIC_ARRAY","byteOffsetStart","byteOffset","encode3DTileHeader","dataView","copyPaddedStringToDataView","gltfEncoded","copyBinaryToDataView","encode3DTileByteLength"],"mappings":"AAGA,SAAA,WAAA,EAAA,oBAAA,EAAA,0BAAA,QAAA,0BAAA;AAKA,SAAA,WAAA,QAAA,cAAA;AACA,SAAA,kBAAA,EAAA,sBAAA,QAAA,iCAAA;AAGA,OAAO,SAAA,wBAAA,CAAA,IAAA,EAAA,QAAA,EAAA,UAAA,EAAA,OAAA,EAAuE;AAC5E,QAAM;AAACA,IAAAA,cAAc,GAAf,CAAA;AAAqBC,IAAAA;AAArB,MAAN,IAAA;AAEA,QAAMC,gBAAgB,GAAG;AACvBC,IAAAA,YAAY,EAAEH;AADS,GAAzB;AAGA,QAAMI,sBAAsB,GAAGC,IAAI,CAAJA,SAAAA,CAA/B,gBAA+BA,CAA/B;AACA,QAAMC,oBAAoB,GAAGL,UAAU,GAAGI,IAAI,CAAJA,SAAAA,CAAH,UAAGA,CAAH,GAAvC,EAAA;AACA,QAAME,0BAA0B,GAAGC,WAAW,CAACJ,sBAAsB,CAAvB,MAAA,EAA9C,CAA8C,CAA9C;AACA,QAAMK,wBAAwB,GAAGH,oBAAoB,GACjDE,WAAW,CAACF,oBAAoB,CAArB,MAAA,EADsC,CACtC,CADsC,GAArD,CAAA;AAKAI,EAAAA,IAAI,GAAG;AAACC,IAAAA,KAAK,EAAEC,WAAW,CAAnB,aAAA;AAAmC,OAAGF;AAAtC,GAAPA;AAEA,QAAMG,eAAe,GAArB,UAAA;AAEAC,EAAAA,UAAU,GAAGC,kBAAkB,CAAA,IAAA,EAAA,QAAA,EAA/BD,UAA+B,CAA/BA;;AAEA,MAAA,QAAA,EAAc;AACZE,IAAAA,QAAQ,CAARA,SAAAA,CAAAA,EAAAA,EAAAA,0BAAAA,EAAAA,IAAAA;AACAA,IAAAA,QAAQ,CAARA,SAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,IAAAA;AACAA,IAAAA,QAAQ,CAARA,SAAAA,CAAAA,EAAAA,EAAAA,wBAAAA,EAAAA,IAAAA;AACAA,IAAAA,QAAQ,CAARA,SAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,IAAAA;AACD;;AACDF,EAAAA,UAAU,IAAVA,EAAAA;AAGAA,EAAAA,UAAU,GAAGG,0BAA0B,CAAA,QAAA,EAAA,UAAA,EAAA,sBAAA,EAAvCH,CAAuC,CAAvCA;;AAEA,MAAA,UAAA,EAAgB;AACdA,IAAAA,UAAU,GAAGG,0BAA0B,CAAA,QAAA,EAAA,UAAA,EAAA,oBAAA,EAAvCH,CAAuC,CAAvCA;AACD;;AAGD,QAAMI,WAAW,GAAGR,IAAI,CAAxB,WAAA;;AACA,MAAA,WAAA,EAAiB;AACfI,IAAAA,UAAU,GAAGK,oBAAoB,CAAA,QAAA,EAAA,UAAA,EAAA,WAAA,EAAoCD,WAAW,CAAhFJ,UAAiC,CAAjCA;AACD;;AAGDM,EAAAA,sBAAsB,CAAA,QAAA,EAAA,eAAA,EAA4BN,UAAU,GAA5DM,eAAsB,CAAtBA;AAEA,SAAA,UAAA;AACD","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {\n  padToNBytes,\n  copyBinaryToDataView,\n  copyPaddedStringToDataView\n} from '@loaders.gl/loader-utils';\nimport {MAGIC_ARRAY} from '../constants';\nimport {encode3DTileHeader, encode3DTileByteLength} from './helpers/encode-3d-tile-header';\n\n// Procedurally encode the tile array dataView for testing purposes\nexport function encodeBatchedModel3DTile(tile, dataView, byteOffset, options) {\n  const {featuresLength = 0, batchTable} = tile;\n\n  const featureTableJson = {\n    BATCH_LENGTH: featuresLength\n  };\n  const featureTableJsonString = JSON.stringify(featureTableJson);\n  const batchTableJsonString = batchTable ? JSON.stringify(batchTable) : '';\n  const featureTableJsonByteLength = padToNBytes(featureTableJsonString.length, 8);\n  const batchTableJsonByteLength = batchTableJsonString\n    ? padToNBytes(batchTableJsonString.length, 8)\n    : 0;\n\n  // Add default magic for this tile type\n  tile = {magic: MAGIC_ARRAY.BATCHED_MODEL, ...tile};\n\n  const byteOffsetStart = byteOffset;\n\n  byteOffset = encode3DTileHeader(tile, dataView, byteOffset);\n\n  if (dataView) {\n    dataView.setUint32(12, featureTableJsonByteLength, true); // featureTableJsonByteLength\n    dataView.setUint32(16, 0, true); // featureTableBinaryByteLength\n    dataView.setUint32(20, batchTableJsonByteLength, true); // batchTableJsonByteLength\n    dataView.setUint32(24, 0, true); // batchTableBinaryByteLength\n  }\n  byteOffset += 16;\n\n  // TODO feature table binary\n  byteOffset = copyPaddedStringToDataView(dataView, byteOffset, featureTableJsonString, 8);\n\n  if (batchTable) {\n    byteOffset = copyPaddedStringToDataView(dataView, byteOffset, batchTableJsonString, 8);\n  }\n\n  // Add encoded GLTF to the end of data\n  const gltfEncoded = tile.gltfEncoded;\n  if (gltfEncoded) {\n    byteOffset = copyBinaryToDataView(dataView, byteOffset, gltfEncoded, gltfEncoded.byteLength);\n  }\n\n  // Go \"back\" and rewrite the tile's `byteLength` now that we know the value\n  encode3DTileByteLength(dataView, byteOffsetStart, byteOffset - byteOffsetStart);\n\n  return byteOffset;\n}\n"]},"metadata":{},"sourceType":"module"}