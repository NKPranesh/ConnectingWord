{"ast":null,"code":"export function mergeShaders(target, source) {\n  if (!source) {\n    return target;\n  }\n\n  const result = { ...target,\n    ...source\n  };\n\n  if ('defines' in source) {\n    result.defines = { ...target.defines,\n      ...source.defines\n    };\n  }\n\n  if ('modules' in source) {\n    result.modules = (target.modules || []).concat(source.modules);\n\n    if (source.modules.some(module => module.name === 'project64')) {\n      const index = result.modules.findIndex(module => module.name === 'project32');\n\n      if (index >= 0) {\n        result.modules.splice(index, 1);\n      }\n    }\n  }\n\n  if ('inject' in source) {\n    if (!target.inject) {\n      result.inject = source.inject;\n    } else {\n      const mergedInjection = { ...target.inject\n      };\n\n      for (const key in source.inject) {\n        mergedInjection[key] = (mergedInjection[key] || '') + source.inject[key];\n      }\n\n      result.inject = mergedInjection;\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../../src/utils/shader.js"],"names":["result","source","target","defines","module","index","mergedInjection","inject"],"mappings":"AAqBA,OAAO,SAAA,YAAA,CAAA,MAAA,EAAA,MAAA,EAAsC;AAC3C,MAAI,CAAJ,MAAA,EAAa;AACX,WAAA,MAAA;AACD;;AACD,QAAMA,MAAM,GAAG,EAAC,GAAD,MAAA;AAAY,OAAGC;AAAf,GAAf;;AAEA,MAAI,aAAJ,MAAA,EAAyB;AACvBD,IAAAA,MAAM,CAANA,OAAAA,GAAiB,EAAC,GAAGE,MAAM,CAAV,OAAA;AAAoB,SAAGD,MAAM,CAACE;AAA9B,KAAjBH;AACD;;AACD,MAAI,aAAJ,MAAA,EAAyB;AACvBA,IAAAA,MAAM,CAANA,OAAAA,GAAiB,CAACE,MAAM,CAANA,OAAAA,IAAD,EAAA,EAAA,MAAA,CAA8BD,MAAM,CAArDD,OAAiB,CAAjBA;;AAGA,QAAIC,MAAM,CAANA,OAAAA,CAAAA,IAAAA,CAAoBG,MAAM,IAAIA,MAAM,CAANA,IAAAA,KAAlC,WAAIH,CAAJ,EAAgE;AAC9D,YAAMI,KAAK,GAAGL,MAAM,CAANA,OAAAA,CAAAA,SAAAA,CAAyBI,MAAM,IAAIA,MAAM,CAANA,IAAAA,KAAjD,WAAcJ,CAAd;;AACA,UAAIK,KAAK,IAAT,CAAA,EAAgB;AACdL,QAAAA,MAAM,CAANA,OAAAA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,CAAAA;AACD;AACF;AACF;;AACD,MAAI,YAAJ,MAAA,EAAwB;AACtB,QAAI,CAACE,MAAM,CAAX,MAAA,EAAoB;AAClBF,MAAAA,MAAM,CAANA,MAAAA,GAAgBC,MAAM,CAAtBD,MAAAA;AADF,KAAA,MAEO;AACL,YAAMM,eAAe,GAAG,EAAC,GAAGJ,MAAM,CAACK;AAAX,OAAxB;;AACA,WAAK,MAAL,GAAA,IAAkBN,MAAM,CAAxB,MAAA,EAAiC;AAC/BK,QAAAA,eAAe,CAAfA,GAAe,CAAfA,GAAuB,CAACA,eAAe,CAAfA,GAAe,CAAfA,IAAD,EAAA,IAA+BL,MAAM,CAANA,MAAAA,CAAtDK,GAAsDL,CAAtDK;AACD;;AACDN,MAAAA,MAAM,CAANA,MAAAA,GAAAA,eAAAA;AACD;AACF;;AACD,SAAA,MAAA;AACD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Merge two luma.gl shader descriptors\nexport function mergeShaders(target, source) {\n  if (!source) {\n    return target;\n  }\n  const result = {...target, ...source};\n\n  if ('defines' in source) {\n    result.defines = {...target.defines, ...source.defines};\n  }\n  if ('modules' in source) {\n    result.modules = (target.modules || []).concat(source.modules);\n\n    // Hack: prject32 and project64 cannot co-exist\n    if (source.modules.some(module => module.name === 'project64')) {\n      const index = result.modules.findIndex(module => module.name === 'project32');\n      if (index >= 0) {\n        result.modules.splice(index, 1);\n      }\n    }\n  }\n  if ('inject' in source) {\n    if (!target.inject) {\n      result.inject = source.inject;\n    } else {\n      const mergedInjection = {...target.inject};\n      for (const key in source.inject) {\n        mergedInjection[key] = (mergedInjection[key] || '') + source.inject[key];\n      }\n      result.inject = mergedInjection;\n    }\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}