{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { isMobile } from '../env-utils/globals';\nimport WorkerThread from './worker-thread';\nimport WorkerJob from './worker-job';\nexport default class WorkerPool {\n  constructor(props) {\n    _defineProperty(this, \"name\", 'unnamed');\n\n    _defineProperty(this, \"source\", void 0);\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"maxConcurrency\", 1);\n\n    _defineProperty(this, \"maxMobileConcurrency\", 1);\n\n    _defineProperty(this, \"onDebug\", () => {});\n\n    _defineProperty(this, \"reuseWorkers\", true);\n\n    _defineProperty(this, \"props\", {});\n\n    _defineProperty(this, \"jobQueue\", []);\n\n    _defineProperty(this, \"idleQueue\", []);\n\n    _defineProperty(this, \"count\", 0);\n\n    _defineProperty(this, \"isDestroyed\", false);\n\n    this.source = props.source;\n    this.url = props.url;\n    this.setProps(props);\n  }\n\n  destroy() {\n    this.idleQueue.forEach(worker => worker.destroy());\n    this.isDestroyed = true;\n  }\n\n  setProps(props) {\n    this.props = { ...this.props,\n      ...props\n    };\n\n    if (props.name !== undefined) {\n      this.name = props.name;\n    }\n\n    if (props.maxConcurrency !== undefined) {\n      this.maxConcurrency = props.maxConcurrency;\n    }\n\n    if (props.maxMobileConcurrency !== undefined) {\n      this.maxMobileConcurrency = props.maxMobileConcurrency;\n    }\n\n    if (props.reuseWorkers !== undefined) {\n      this.reuseWorkers = props.reuseWorkers;\n    }\n\n    if (props.onDebug !== undefined) {\n      this.onDebug = props.onDebug;\n    }\n  }\n\n  async startJob(name) {\n    let onMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (job, type, data) => job.done(data);\n    let onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (job, error) => job.error(error);\n    const startPromise = new Promise(onStart => {\n      this.jobQueue.push({\n        name,\n        onMessage,\n        onError,\n        onStart\n      });\n      return this;\n    });\n\n    this._startQueuedJob();\n\n    return await startPromise;\n  }\n\n  async _startQueuedJob() {\n    if (!this.jobQueue.length) {\n      return;\n    }\n\n    const workerThread = this._getAvailableWorker();\n\n    if (!workerThread) {\n      return;\n    }\n\n    const queuedJob = this.jobQueue.shift();\n\n    if (queuedJob) {\n      this.onDebug({\n        message: 'Starting job',\n        name: queuedJob.name,\n        workerThread,\n        backlog: this.jobQueue.length\n      });\n      const job = new WorkerJob(queuedJob.name, workerThread);\n\n      workerThread.onMessage = data => queuedJob.onMessage(job, data.type, data.payload);\n\n      workerThread.onError = error => queuedJob.onError(job, error);\n\n      queuedJob.onStart(job);\n\n      try {\n        await job.result;\n      } finally {\n        this.returnWorkerToQueue(workerThread);\n      }\n    }\n  }\n\n  returnWorkerToQueue(worker) {\n    const shouldDestroyWorker = this.isDestroyed || !this.reuseWorkers || this.count > this._getMaxConcurrency();\n\n    if (shouldDestroyWorker) {\n      worker.destroy();\n      this.count--;\n    } else {\n      this.idleQueue.push(worker);\n    }\n\n    if (!this.isDestroyed) {\n      this._startQueuedJob();\n    }\n  }\n\n  _getAvailableWorker() {\n    if (this.idleQueue.length > 0) {\n      return this.idleQueue.shift() || null;\n    }\n\n    if (this.count < this._getMaxConcurrency()) {\n      this.count++;\n      const name = \"\".concat(this.name.toLowerCase(), \" (#\").concat(this.count, \" of \").concat(this.maxConcurrency, \")\");\n      return new WorkerThread({\n        name,\n        source: this.source,\n        url: this.url\n      });\n    }\n\n    return null;\n  }\n\n  _getMaxConcurrency() {\n    return isMobile ? this.maxMobileConcurrency : this.maxConcurrency;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/lib/worker-farm/worker-pool.ts"],"names":["constructor","props","destroy","worker","setProps","startJob","onMessage","job","onError","startPromise","onStart","_startQueuedJob","workerThread","queuedJob","message","name","backlog","length","data","error","returnWorkerToQueue","shouldDestroyWorker","_getAvailableWorker","source","url","_getMaxConcurrency","isMobile"],"mappings":"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","sourcesContent":["import type {WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport {isMobile} from '../env-utils/globals';\nimport WorkerThread from './worker-thread';\nimport WorkerJob from './worker-job';\n\n/** WorkerPool onDebug Callback Parameters */\ntype OnDebugParameters = {\n  message: string;\n  worker: string;\n  name: string;\n  job: string;\n  backlog: number;\n  workerThread: WorkerThread;\n};\n\n/** WorkerPool Properties */\nexport type WorkerPoolProps = {\n  name?: string;\n  source?: string; // | Function;\n  url?: string;\n  maxConcurrency?: number;\n  maxMobileConcurrency?: number;\n  onDebug?: (options: OnDebugParameters) => any;\n  reuseWorkers?: boolean;\n};\n\n/** Private helper types */\ntype OnMessage = (job: WorkerJob, type: WorkerMessageType, payload: WorkerMessagePayload) => void;\ntype OnError = (job: WorkerJob, error: Error) => void;\n\ntype QueuedJob = {\n  name: string;\n  onMessage: OnMessage;\n  onError: OnError;\n  onStart: (value: any) => void; // Resolve job start promise\n};\n\n/**\n * Process multiple data messages with small pool of identical workers\n */\nexport default class WorkerPool {\n  name: string = 'unnamed';\n  source?: string; // | Function;\n  url?: string;\n  maxConcurrency: number = 1;\n  maxMobileConcurrency: number = 1;\n  onDebug: (options: OnDebugParameters) => any = () => {};\n  reuseWorkers: boolean = true;\n\n  private props: WorkerPoolProps = {};\n  private jobQueue: QueuedJob[] = [];\n  private idleQueue: WorkerThread[] = [];\n  private count = 0;\n  private isDestroyed = false;\n\n  /**\n   * @param processor - worker function\n   * @param maxConcurrency - max count of workers\n   */\n  constructor(props: WorkerPoolProps) {\n    this.source = props.source;\n    this.url = props.url;\n    this.setProps(props);\n  }\n\n  /**\n   * Terminates all workers in the pool\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    // Destroy idle workers, active Workers will be destroyed on completion\n    this.idleQueue.forEach((worker) => worker.destroy());\n    this.isDestroyed = true;\n  }\n\n  setProps(props: WorkerPoolProps) {\n    this.props = {...this.props, ...props};\n\n    if (props.name !== undefined) {\n      this.name = props.name;\n    }\n    if (props.maxConcurrency !== undefined) {\n      this.maxConcurrency = props.maxConcurrency;\n    }\n    if (props.maxMobileConcurrency !== undefined) {\n      this.maxMobileConcurrency = props.maxMobileConcurrency;\n    }\n    if (props.reuseWorkers !== undefined) {\n      this.reuseWorkers = props.reuseWorkers;\n    }\n    if (props.onDebug !== undefined) {\n      this.onDebug = props.onDebug;\n    }\n  }\n\n  async startJob(\n    name: string,\n    onMessage: OnMessage = (job, type, data) => job.done(data),\n    onError: OnError = (job, error) => job.error(error)\n  ): Promise<WorkerJob> {\n    // Promise resolves when thread starts working on this job\n    const startPromise = new Promise<WorkerJob>((onStart) => {\n      // Promise resolves when thread completes or fails working on this job\n      this.jobQueue.push({name, onMessage, onError, onStart});\n      return this;\n    });\n    this._startQueuedJob(); // eslint-disable-line @typescript-eslint/no-floating-promises\n    return await startPromise;\n  }\n\n  // PRIVATE\n\n  /**\n   * Starts first queued job if worker is available or can be created\n   * Called when job is started and whenever a worker returns to the idleQueue\n   */\n  async _startQueuedJob(): Promise<void> {\n    if (!this.jobQueue.length) {\n      return;\n    }\n\n    const workerThread = this._getAvailableWorker();\n    if (!workerThread) {\n      return;\n    }\n\n    // We have a worker, dequeue and start the job\n    const queuedJob = this.jobQueue.shift();\n    if (queuedJob) {\n      // Emit a debug event\n      // @ts-ignore\n      this.onDebug({\n        message: 'Starting job',\n        name: queuedJob.name,\n        workerThread,\n        backlog: this.jobQueue.length\n      });\n\n      // Create a worker job to let the app access thread and manage job completion\n      const job = new WorkerJob(queuedJob.name, workerThread);\n\n      // Set the worker thread's message handlers\n      workerThread.onMessage = (data) => queuedJob.onMessage(job, data.type, data.payload);\n      workerThread.onError = (error) => queuedJob.onError(job, error);\n\n      // Resolve the start promise so that the app can start sending messages to worker\n      queuedJob.onStart(job);\n\n      // Wait for the app to signal that the job is complete, then return worker to queue\n      try {\n        await job.result;\n      } finally {\n        this.returnWorkerToQueue(workerThread);\n      }\n    }\n  }\n\n  /**\n   * Returns a worker to the idle queue\n   * Destroys the worker if\n   *  - pool is destroyed\n   *  - if this pool doesn't reuse workers\n   *  - if maxConcurrency has been lowered\n   * @param worker\n   */\n  returnWorkerToQueue(worker: WorkerThread) {\n    const shouldDestroyWorker =\n      this.isDestroyed || !this.reuseWorkers || this.count > this._getMaxConcurrency();\n\n    if (shouldDestroyWorker) {\n      worker.destroy();\n      this.count--;\n    } else {\n      this.idleQueue.push(worker);\n    }\n\n    if (!this.isDestroyed) {\n      this._startQueuedJob(); // eslint-disable-line @typescript-eslint/no-floating-promises\n    }\n  }\n\n  /**\n   * Returns idle worker or creates new worker if maxConcurrency has not been reached\n   */\n  _getAvailableWorker(): WorkerThread | null {\n    // If a worker has completed and returned to the queue, it can be used\n    if (this.idleQueue.length > 0) {\n      return this.idleQueue.shift() || null;\n    }\n\n    // Create fresh worker if we haven't yet created the max amount of worker threads for this worker source\n    if (this.count < this._getMaxConcurrency()) {\n      this.count++;\n      const name = `${this.name.toLowerCase()} (#${this.count} of ${this.maxConcurrency})`;\n      return new WorkerThread({name, source: this.source, url: this.url});\n    }\n\n    // No worker available, have to wait\n    return null;\n  }\n\n  _getMaxConcurrency() {\n    return isMobile ? this.maxMobileConcurrency : this.maxConcurrency;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}