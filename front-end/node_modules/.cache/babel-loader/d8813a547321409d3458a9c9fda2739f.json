{"ast":null,"code":"import { Layer, project32, phongLighting, picking, COORDINATE_SYSTEM, log } from '@deck.gl/core';\nimport { Model, Geometry, Texture2D, isWebGL2 } from '@luma.gl/core';\nimport { hasFeature, FEATURES } from '@luma.gl/webgl';\nimport { MATRIX_ATTRIBUTES, shouldComposeModelMatrix } from '../utils/matrix';\nimport vs from './simple-mesh-layer-vertex.glsl';\nimport fs from './simple-mesh-layer-fragment.glsl';\n\nfunction validateGeometryAttributes(attributes, useMeshColors) {\n  const hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  const useColorAttribute = hasColorAttribute && useMeshColors;\n\n  if (!useColorAttribute) {\n    attributes.colors = {\n      constant: true,\n      value: new Float32Array([1, 1, 1])\n    };\n  }\n\n  log.assert(attributes.positions || attributes.POSITION, 'no \"postions\" or \"POSITION\" attribute in mesh');\n}\n\nfunction getGeometry(data, useMeshColors) {\n  if (data.attributes) {\n    validateGeometryAttributes(data.attributes, useMeshColors);\n\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if (data.positions || data.POSITION) {\n    validateGeometryAttributes(data, useMeshColors);\n    return new Geometry({\n      attributes: data\n    });\n  }\n\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  mesh: {\n    value: null,\n    type: 'object',\n    async: true\n  },\n  texture: {\n    type: 'image',\n    value: null,\n    async: true\n  },\n  sizeScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  _useMeshColors: {\n    type: 'boolean',\n    value: false\n  },\n  _instanced: true,\n  wireframe: false,\n  material: true,\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getOrientation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getScale: {\n    type: 'accessor',\n    value: [1, 1, 1]\n  },\n  getTranslation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getTransformMatrix: {\n    type: 'accessor',\n    value: []\n  }\n};\nexport default class SimpleMeshLayer extends Layer {\n  getShaders() {\n    const transpileToGLSL100 = !isWebGL2(this.context.gl);\n    const defines = {};\n\n    if (hasFeature(this.context.gl, FEATURES.GLSL_DERIVATIVES)) {\n      defines.DERIVATIVES_AVAILABLE = 1;\n    }\n\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, phongLighting, picking],\n      transpileToGLSL100,\n      defines\n    });\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        transition: true,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instanceColors: {\n        type: 5121,\n        transition: true,\n        size: this.props.colorFormat.length,\n        normalized: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n    this.setState({\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState(_ref) {\n    let {\n      props,\n      oldProps,\n      changeFlags\n    } = _ref;\n    super.updateState({\n      props,\n      oldProps,\n      changeFlags\n    });\n\n    if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n      var _this$state$model;\n\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n\n      if (props.mesh) {\n        this.state.model = this.getModel(props.mesh);\n        const attributes = props.mesh.attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (this.state.model) {\n      this.state.model.setDrawMode(this.props.wireframe ? 3 : 4);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    this.state.emptyTexture.delete();\n  }\n\n  draw(_ref2) {\n    let {\n      uniforms\n    } = _ref2;\n\n    if (!this.state.model) {\n      return;\n    }\n\n    const {\n      viewport\n    } = this.context;\n    const {\n      sizeScale,\n      coordinateSystem,\n      _instanced\n    } = this.props;\n    this.state.model.setUniforms(uniforms).setUniforms({\n      sizeScale,\n      composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),\n      flatShading: !this.state.hasNormals\n    }).draw();\n  }\n\n  getModel(mesh) {\n    const model = new Model(this.context.gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: getGeometry(mesh, this.props._useMeshColors),\n      isInstanced: true\n    });\n    const {\n      texture\n    } = this.props;\n    const {\n      emptyTexture\n    } = this.state;\n    model.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n    return model;\n  }\n\n  setTexture(texture) {\n    const {\n      emptyTexture,\n      model\n    } = this.state;\n    model === null || model === void 0 ? void 0 : model.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n  }\n\n}\nSimpleMeshLayer.layerName = 'SimpleMeshLayer';\nSimpleMeshLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/simple-mesh-layer/simple-mesh-layer.js"],"names":["hasColorAttribute","attributes","useColorAttribute","constant","value","log","data","validateGeometryAttributes","Error","DEFAULT_COLOR","defaultProps","mesh","type","async","texture","sizeScale","min","_useMeshColors","_instanced","wireframe","material","getPosition","x","position","getColor","getOrientation","getScale","getTranslation","getTransformMatrix","getShaders","transpileToGLSL100","isWebGL2","defines","hasFeature","FEATURES","modules","initializeState","attributeManager","instancePositions","transition","fp64","size","accessor","instanceColors","normalized","defaultValue","instanceModelMatrix","MATRIX_ATTRIBUTES","emptyTexture","width","height","updateState","changeFlags","props","oldProps","hasNormals","Boolean","finalizeState","draw","uniforms","viewport","composeModelMatrix","shouldComposeModelMatrix","flatShading","getModel","model","id","geometry","getGeometry","isInstanced","sampler","hasTexture","setTexture","SimpleMeshLayer"],"mappings":"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","sourcesContent":["// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, phongLighting, picking, COORDINATE_SYSTEM, log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Texture2D, isWebGL2} from '@luma.gl/core';\nimport {hasFeature, FEATURES} from '@luma.gl/webgl';\n\nimport {MATRIX_ATTRIBUTES, shouldComposeModelMatrix} from '../utils/matrix';\n\nimport vs from './simple-mesh-layer-vertex.glsl';\nimport fs from './simple-mesh-layer-fragment.glsl';\n\nfunction validateGeometryAttributes(attributes, useMeshColors) {\n  const hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  const useColorAttribute = hasColorAttribute && useMeshColors;\n  if (!useColorAttribute) {\n    attributes.colors = {constant: true, value: new Float32Array([1, 1, 1])};\n  }\n  log.assert(\n    attributes.positions || attributes.POSITION,\n    'no \"postions\" or \"POSITION\" attribute in mesh'\n  );\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data, useMeshColors) {\n  if (data.attributes) {\n    validateGeometryAttributes(data.attributes, useMeshColors);\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if (data.positions || data.POSITION) {\n    validateGeometryAttributes(data, useMeshColors);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  mesh: {value: null, type: 'object', async: true},\n  texture: {type: 'image', value: null, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  // Whether the color attribute in a mesh will be used\n  // This prop will be removed and set to true in next major release\n  _useMeshColors: {type: 'boolean', value: false},\n\n  // _instanced is a hack to use world position instead of meter offsets in mesh\n  // TODO - formalize API\n  _instanced: true,\n  // NOTE(Tarek): Quick and dirty wireframe. Just draws\n  // the same mesh with LINE_STRIPS. Won't follow edges\n  // of the original mesh.\n  wireframe: false,\n  // Optional material for 'lighting' shader module\n  material: true,\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []}\n};\n\nexport default class SimpleMeshLayer extends Layer {\n  getShaders() {\n    const transpileToGLSL100 = !isWebGL2(this.context.gl);\n\n    const defines = {};\n\n    if (hasFeature(this.context.gl, FEATURES.GLSL_DERIVATIVES)) {\n      defines.DERIVATIVES_AVAILABLE = 1;\n    }\n\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, phongLighting, picking],\n      transpileToGLSL100,\n      defines\n    });\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.addInstanced({\n      instancePositions: {\n        transition: true,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        size: this.props.colorFormat.length,\n        normalized: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n      this.state.model?.delete();\n      if (props.mesh) {\n        this.state.model = this.getModel(props.mesh);\n\n        const attributes = props.mesh.attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (this.state.model) {\n      this.state.model.setDrawMode(this.props.wireframe ? GL.LINE_STRIP : GL.TRIANGLES);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    this.state.emptyTexture.delete();\n  }\n\n  draw({uniforms}) {\n    if (!this.state.model) {\n      return;\n    }\n\n    const {viewport} = this.context;\n    const {sizeScale, coordinateSystem, _instanced} = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        sizeScale,\n        composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),\n        flatShading: !this.state.hasNormals\n      })\n      .draw();\n  }\n\n  getModel(mesh) {\n    const model = new Model(this.context.gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: getGeometry(mesh, this.props._useMeshColors),\n      isInstanced: true\n    });\n\n    const {texture} = this.props;\n    const {emptyTexture} = this.state;\n    model.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n\n    return model;\n  }\n\n  setTexture(texture) {\n    const {emptyTexture, model} = this.state;\n\n    // props.mesh may not be ready at this time.\n    // The sampler will be set when `getModel` is called\n    model?.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n  }\n}\n\nSimpleMeshLayer.layerName = 'SimpleMeshLayer';\nSimpleMeshLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}