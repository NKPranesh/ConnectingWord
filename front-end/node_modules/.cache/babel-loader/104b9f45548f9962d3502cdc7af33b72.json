{"ast":null,"code":"import { assert } from '../utils/assert';\nexport function getTypedArrayForBufferView(json, buffers, bufferViewIndex) {\n  const bufferView = json.bufferViews[bufferViewIndex];\n  assert(bufferView);\n  const bufferIndex = bufferView.buffer;\n  const binChunk = buffers[bufferIndex];\n  assert(binChunk);\n  const byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;\n  return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n}\nexport function getTypedArrayForImageData(json, buffers, imageIndex) {\n  const image = json.images[imageIndex];\n  const bufferViewIndex = json.bufferViews[image.bufferView];\n  return getTypedArrayForBufferView(json, buffers, bufferViewIndex);\n}","map":{"version":3,"sources":["../../../../src/lib/gltf-utils/get-typed-array.ts"],"names":["bufferView","json","assert","bufferIndex","binChunk","buffers","byteOffset","image","bufferViewIndex","getTypedArrayForBufferView"],"mappings":"AACA,SAAA,MAAA,QAAA,iBAAA;AAIA,OAAO,SAAA,0BAAA,CAAA,IAAA,EAAA,OAAA,EAAA,eAAA,EAAoE;AACzE,QAAMA,UAAU,GAAGC,IAAI,CAAJA,WAAAA,CAAnB,eAAmBA,CAAnB;AACAC,EAAAA,MAAM,CAANA,UAAM,CAANA;AAGA,QAAMC,WAAW,GAAGH,UAAU,CAA9B,MAAA;AACA,QAAMI,QAAQ,GAAGC,OAAO,CAAxB,WAAwB,CAAxB;AACAH,EAAAA,MAAM,CAANA,QAAM,CAANA;AAEA,QAAMI,UAAU,GAAG,CAACN,UAAU,CAAVA,UAAAA,IAAD,CAAA,IAA+BI,QAAQ,CAA1D,UAAA;AACA,SAAO,IAAA,UAAA,CAAeA,QAAQ,CAAvB,WAAA,EAAA,UAAA,EAAiDJ,UAAU,CAAlE,UAAO,CAAP;AACD;AAID,OAAO,SAAA,yBAAA,CAAA,IAAA,EAAA,OAAA,EAAA,UAAA,EAA8D;AACnE,QAAMO,KAAK,GAAGN,IAAI,CAAJA,MAAAA,CAAd,UAAcA,CAAd;AACA,QAAMO,eAAe,GAAGP,IAAI,CAAJA,WAAAA,CAAiBM,KAAK,CAA9C,UAAwBN,CAAxB;AACA,SAAOQ,0BAA0B,CAAA,IAAA,EAAA,OAAA,EAAjC,eAAiC,CAAjC;AACD","sourcesContent":["// TODO - GLTFScenegraph should use these\nimport {assert} from '../utils/assert';\n\n// accepts buffer view index or buffer view object\n// returns a `Uint8Array`\nexport function getTypedArrayForBufferView(json, buffers, bufferViewIndex) {\n  const bufferView = json.bufferViews[bufferViewIndex];\n  assert(bufferView);\n\n  // Get hold of the arrayBuffer\n  const bufferIndex = bufferView.buffer;\n  const binChunk = buffers[bufferIndex];\n  assert(binChunk);\n\n  const byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;\n  return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n}\n\n// accepts accessor index or accessor object\n// returns a `Uint8Array`\nexport function getTypedArrayForImageData(json, buffers, imageIndex) {\n  const image = json.images[imageIndex];\n  const bufferViewIndex = json.bufferViews[image.bufferView];\n  return getTypedArrayForBufferView(json, buffers, bufferViewIndex);\n}\n\n/*\n// accepts accessor index or accessor object\n// returns a typed array with type that matches the types\nexport function getTypedArrayForAccessor(accessor) {\n  accessor = this.getAccessor(accessor);\n  const bufferView = this.getBufferView(accessor.bufferView);\n  const buffer = this.getBuffer(bufferView.buffer);\n  const arrayBuffer = buffer.data;\n\n  // Create a new typed array as a view into the combined buffer\n  const {ArrayType, length} = getAccessorArrayTypeAndLength(accessor, bufferView);\n  const byteOffset = bufferView.byteOffset + accessor.byteOffset;\n  return new ArrayType(arrayBuffer, byteOffset, length);\n}\n*/\n"]},"metadata":{},"sourceType":"module"}