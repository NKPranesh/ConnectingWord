{"ast":null,"code":"import { h3SetToMultiPolygon } from 'h3-js';\nimport { CompositeLayer, createIterable } from '@deck.gl/core';\nimport { PolygonLayer } from '@deck.gl/layers';\nconst defaultProps = { ...PolygonLayer.defaultProps,\n  getHexagons: {\n    type: 'accessor',\n    value: d => d.hexagons\n  }\n};\nexport default class H3ClusterLayer extends CompositeLayer {\n  updateState(_ref) {\n    let {\n      props,\n      oldProps,\n      changeFlags\n    } = _ref;\n\n    if (changeFlags.dataChanged || changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagons) {\n      const {\n        data,\n        getHexagons\n      } = props;\n      const polygons = [];\n      const {\n        iterable,\n        objectInfo\n      } = createIterable(data);\n\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexagons = getHexagons(object, objectInfo);\n        const multiPolygon = h3SetToMultiPolygon(hexagons, true);\n\n        for (const polygon of multiPolygon) {\n          polygons.push(this.getSubLayerRow({\n            polygon\n          }, object, objectInfo.index));\n        }\n      }\n\n      this.setState({\n        polygons\n      });\n    }\n  }\n\n  renderLayers() {\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      material,\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      transitions,\n      updateTriggers\n    } = this.props;\n    const SubLayerClass = this.getSubLayerClass('cluster-region', PolygonLayer);\n    return new SubLayerClass({\n      filled,\n      wireframe,\n      extruded,\n      elevationScale,\n      stroked,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      material,\n      transitions,\n      getFillColor: this.getSubLayerAccessor(getFillColor),\n      getLineColor: this.getSubLayerAccessor(getLineColor),\n      getLineWidth: this.getSubLayerAccessor(getLineWidth),\n      getLineDashArray: this.getSubLayerAccessor(getLineDashArray),\n      getElevation: this.getSubLayerAccessor(getElevation)\n    }, this.getSubLayerProps({\n      id: 'cluster-region',\n      updateTriggers\n    }), {\n      data: this.state.polygons,\n      getPolygon: d => d.polygon\n    });\n  }\n\n}\nH3ClusterLayer.defaultProps = defaultProps;\nH3ClusterLayer.layerName = 'H3ClusterLayer';","map":{"version":3,"sources":["../../../src/h3-layers/h3-cluster-layer.js"],"names":["defaultProps","PolygonLayer","getHexagons","type","value","d","hexagons","updateState","changeFlags","polygons","objectInfo","createIterable","multiPolygon","h3SetToMultiPolygon","polygon","renderLayers","updateTriggers","SubLayerClass","getFillColor","getLineColor","getLineWidth","getLineDashArray","getElevation","id","data","getPolygon","H3ClusterLayer"],"mappings":"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","sourcesContent":["import {h3SetToMultiPolygon} from 'h3-js';\n\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport {PolygonLayer} from '@deck.gl/layers';\n\nconst defaultProps = {\n  ...PolygonLayer.defaultProps,\n  getHexagons: {type: 'accessor', value: d => d.hexagons}\n};\n\nexport default class H3ClusterLayer extends CompositeLayer {\n  updateState({props, oldProps, changeFlags}) {\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagons)\n    ) {\n      const {data, getHexagons} = props;\n      const polygons = [];\n\n      const {iterable, objectInfo} = createIterable(data);\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexagons = getHexagons(object, objectInfo);\n        const multiPolygon = h3SetToMultiPolygon(hexagons, true);\n\n        for (const polygon of multiPolygon) {\n          polygons.push(this.getSubLayerRow({polygon}, object, objectInfo.index));\n        }\n      }\n\n      this.setState({polygons});\n    }\n  }\n\n  renderLayers() {\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      material,\n\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      transitions,\n      updateTriggers\n    } = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('cluster-region', PolygonLayer);\n\n    return new SubLayerClass(\n      {\n        filled,\n        wireframe,\n\n        extruded,\n        elevationScale,\n\n        stroked,\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels,\n        lineJointRounded,\n        lineMiterLimit,\n        lineDashJustified,\n\n        material,\n        transitions,\n\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        getLineWidth: this.getSubLayerAccessor(getLineWidth),\n        getLineDashArray: this.getSubLayerAccessor(getLineDashArray),\n        getElevation: this.getSubLayerAccessor(getElevation)\n      },\n      this.getSubLayerProps({\n        id: 'cluster-region',\n        updateTriggers\n      }),\n      {\n        data: this.state.polygons,\n        getPolygon: d => d.polygon\n      }\n    );\n  }\n}\n\nH3ClusterLayer.defaultProps = defaultProps;\nH3ClusterLayer.layerName = 'H3ClusterLayer';\n"]},"metadata":{},"sourceType":"module"}