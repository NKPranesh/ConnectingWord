{"ast":null,"code":"import { assert } from '@loaders.gl/loader-utils';\nimport { selectLoaderSync } from './select-loader';\nimport { isLoaderObject } from '../loader-utils/normalize-loader';\nimport { normalizeOptions } from '../loader-utils/option-utils';\nimport { getArrayBufferOrStringFromDataSync } from '../loader-utils/get-data';\nimport { getLoaderContext, getLoadersFromContext } from '../loader-utils/loader-context';\nimport { getResourceUrlAndType } from '../utils/resource-utils';\nexport function parseSync(data, loaders, options, context) {\n  assert(!context || typeof context === 'object');\n\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined;\n    options = loaders;\n    loaders = undefined;\n  }\n\n  options = options || {};\n  const typedLoaders = loaders;\n  const candidateLoaders = getLoadersFromContext(typedLoaders, context);\n  const loader = selectLoaderSync(data, candidateLoaders, options);\n\n  if (!loader) {\n    return null;\n  }\n\n  options = normalizeOptions(options, loader, candidateLoaders);\n  const {\n    url\n  } = getResourceUrlAndType(data);\n\n  const parse = () => {\n    throw new Error('parseSync called parse');\n  };\n\n  context = getLoaderContext({\n    url,\n    parseSync,\n    parse,\n    loaders: loaders\n  }, options);\n  return parseWithLoaderSync(loader, data, options, context);\n}\n\nfunction parseWithLoaderSync(loader, data, options, context) {\n  data = getArrayBufferOrStringFromDataSync(data, loader, options);\n\n  if (loader.parseTextSync && typeof data === 'string') {\n    return loader.parseTextSync(data, options);\n  }\n\n  if (loader.parseSync && data instanceof ArrayBuffer) {\n    return loader.parseSync(data, options, context);\n  }\n\n  throw new Error(\"\".concat(loader.name, \" loader: 'parseSync' not supported by this loader, use 'parse' instead. \").concat(context.url || ''));\n}","map":{"version":3,"sources":["../../../../src/lib/api/parse-sync.ts"],"names":["assert","Array","isLoaderObject","context","options","loaders","typedLoaders","candidateLoaders","getLoadersFromContext","loader","selectLoaderSync","normalizeOptions","url","getResourceUrlAndType","parse","getLoaderContext","parseWithLoaderSync","data","getArrayBufferOrStringFromDataSync"],"mappings":"AAOA,SAAA,MAAA,QAAA,0BAAA;AACA,SAAA,gBAAA,QAAA,iBAAA;AACA,SAAA,cAAA,QAAA,kCAAA;AACA,SAAA,gBAAA,QAAA,8BAAA;AACA,SAAA,kCAAA,QAAA,0BAAA;AACA,SAAA,gBAAA,EAAA,qBAAA,QAAA,gCAAA;AACA,SAAA,qBAAA,QAAA,yBAAA;AASA,OAAO,SAAA,SAAA,CAAA,IAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAKA;AACLA,EAAAA,MAAM,CAAC,CAAA,OAAA,IAAY,OAAA,OAAA,KAAnBA,QAAM,CAANA;;AAIA,MAAI,CAACC,KAAK,CAALA,OAAAA,CAAD,OAACA,CAAD,IAA2B,CAACC,cAAc,CAA9C,OAA8C,CAA9C,EAAyD;AACvDC,IAAAA,OAAO,GAAPA,SAAAA;AACAC,IAAAA,OAAO,GAAPA,OAAAA;AACAC,IAAAA,OAAO,GAAPA,SAAAA;AACD;;AAEDD,EAAAA,OAAO,GAAGA,OAAO,IAAjBA,EAAAA;AAIA,QAAME,YAAY,GAAlB,OAAA;AACA,QAAMC,gBAAgB,GAAGC,qBAAqB,CAAA,YAAA,EAA9C,OAA8C,CAA9C;AACA,QAAMC,MAAM,GAAGC,gBAAgB,CAAA,IAAA,EAAA,gBAAA,EAA/B,OAA+B,CAA/B;;AAEA,MAAI,CAAJ,MAAA,EAAa;AACX,WAAA,IAAA;AACD;;AAGDN,EAAAA,OAAO,GAAGO,gBAAgB,CAAA,OAAA,EAAA,MAAA,EAA1BP,gBAA0B,CAA1BA;AAGA,QAAM;AAACQ,IAAAA;AAAD,MAAQC,qBAAqB,CAAnC,IAAmC,CAAnC;;AAEA,QAAMC,KAAK,GAAG,MAAM;AAClB,UAAM,IAAA,KAAA,CAAN,wBAAM,CAAN;AADF,GAAA;;AAGAX,EAAAA,OAAO,GAAGY,gBAAgB,CAAC;AAAA,IAAA,GAAA;AAAA,IAAA,SAAA;AAAA,IAAA,KAAA;AAAwBV,IAAAA,OAAO,EAAEA;AAAjC,GAAD,EAA1BF,OAA0B,CAA1BA;AAEA,SAAOa,mBAAmB,CAAA,MAAA,EAAA,IAAA,EAAA,OAAA,EAA1B,OAA0B,CAA1B;AACD;;AAGD,SAAA,mBAAA,CAAA,MAAA,EAAA,IAAA,EAAA,OAAA,EAAA,OAAA,EAKE;AACAC,EAAAA,IAAI,GAAGC,kCAAkC,CAAA,IAAA,EAAA,MAAA,EAAzCD,OAAyC,CAAzCA;;AAEA,MAAIR,MAAM,CAANA,aAAAA,IAAwB,OAAA,IAAA,KAA5B,QAAA,EAAsD;AACpD,WAAOA,MAAM,CAANA,aAAAA,CAAAA,IAAAA,EAAP,OAAOA,CAAP;AACD;;AAED,MAAIA,MAAM,CAANA,SAAAA,IAAoBQ,IAAI,YAA5B,WAAA,EAAqD;AACnD,WAAOR,MAAM,CAANA,SAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAP,OAAOA,CAAP;AACD;;AAGD,QAAM,IAAA,KAAA,CAAA,GAAA,MAAA,CACDA,MAAM,CADL,IAAA,EAAA,0EAAA,EAAA,MAAA,CAEFN,OAAO,CAAPA,GAAAA,IAFJ,EAAM,CAAA,CAAN;AAKD","sourcesContent":["import type {\n  SyncDataType,\n  Loader,\n  LoaderWithParser,\n  LoaderContext,\n  LoaderOptions\n} from '@loaders.gl/loader-utils';\nimport {assert} from '@loaders.gl/loader-utils';\nimport {selectLoaderSync} from './select-loader';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {normalizeOptions} from '../loader-utils/option-utils';\nimport {getArrayBufferOrStringFromDataSync} from '../loader-utils/get-data';\nimport {getLoaderContext, getLoadersFromContext} from '../loader-utils/loader-context';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\n\n/**\n * Parses `data` synchronously using a specified loader\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\nexport function parseSync(\n  data: SyncDataType,\n  loaders?: Loader | Loader[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): any {\n  assert(!context || typeof context === 'object'); // parseSync no longer accepts final url\n\n  // Signature: parseSync(data, options)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined; // context not supported in short signature\n    options = loaders as LoaderOptions;\n    loaders = undefined;\n  }\n\n  options = options || {};\n\n  // Chooses a loader (and normalizes it)\n  // Also use any loaders in the context, new loaders take priority\n  const typedLoaders = loaders as Loader | Loader[] | undefined;\n  const candidateLoaders = getLoadersFromContext(typedLoaders, context);\n  const loader = selectLoaderSync(data, candidateLoaders, options);\n  // Note: if nothrow option was set, it is possible that no loader was found, if so just return null\n  if (!loader) {\n    return null;\n  }\n\n  // Normalize options\n  options = normalizeOptions(options, loader, candidateLoaders);\n\n  // Extract a url for auto detection\n  const {url} = getResourceUrlAndType(data);\n\n  const parse = () => {\n    throw new Error('parseSync called parse');\n  };\n  context = getLoaderContext({url, parseSync, parse, loaders: loaders as Loader[]}, options);\n\n  return parseWithLoaderSync(loader as LoaderWithParser, data, options, context);\n}\n\n// TODO - should accept loader.parseSync/parse and generate 1 chunk asyncIterator\nfunction parseWithLoaderSync(\n  loader: LoaderWithParser,\n  data: SyncDataType,\n  options: LoaderOptions,\n  context: LoaderContext\n) {\n  data = getArrayBufferOrStringFromDataSync(data, loader, options);\n\n  if (loader.parseTextSync && typeof data === 'string') {\n    return loader.parseTextSync(data, options); // , context, loader);\n  }\n\n  if (loader.parseSync && data instanceof ArrayBuffer) {\n    return loader.parseSync(data, options, context); // , loader);\n  }\n\n  // TBD - If synchronous parser not available, return null\n  throw new Error(\n    `${loader.name} loader: 'parseSync' not supported by this loader, use 'parse' instead. ${\n      context.url || ''\n    }`\n  );\n}\n"]},"metadata":{},"sourceType":"module"}