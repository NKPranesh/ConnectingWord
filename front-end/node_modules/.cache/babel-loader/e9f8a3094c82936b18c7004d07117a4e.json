{"ast":null,"code":"import { getTypedArrayFromGLType } from '../webgl-utils/typed-array-utils';\nimport { assert } from '../utils/assert';\nimport { checkProps } from '../utils/check-props';\nconst DEFAULT_ACCESSOR_VALUES = {\n  offset: 0,\n  stride: 0,\n  type: 5126,\n  size: 1,\n  divisor: 0,\n  normalized: false,\n  integer: false\n};\nconst PROP_CHECKS = {\n  deprecatedProps: {\n    instanced: 'divisor',\n    isInstanced: 'divisor'\n  }\n};\nexport default class Accessor {\n  static getBytesPerElement(accessor) {\n    const ArrayType = getTypedArrayFromGLType(accessor.type || 5126);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n\n  static getBytesPerVertex(accessor) {\n    assert(accessor.size);\n    const ArrayType = getTypedArrayFromGLType(accessor.type || 5126);\n    return ArrayType.BYTES_PER_ELEMENT * accessor.size;\n  }\n\n  static resolve() {\n    for (var _len = arguments.length, accessors = new Array(_len), _key = 0; _key < _len; _key++) {\n      accessors[_key] = arguments[_key];\n    }\n\n    return new Accessor(...[DEFAULT_ACCESSOR_VALUES, ...accessors]);\n  }\n\n  constructor() {\n    for (var _len2 = arguments.length, accessors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      accessors[_key2] = arguments[_key2];\n    }\n\n    accessors.forEach(accessor => this._assign(accessor));\n    Object.freeze(this);\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  get BYTES_PER_ELEMENT() {\n    return Accessor.getBytesPerElement(this);\n  }\n\n  get BYTES_PER_VERTEX() {\n    return Accessor.getBytesPerVertex(this);\n  }\n\n  _assign() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    props = checkProps('Accessor', props, PROP_CHECKS);\n\n    if (props.type !== undefined) {\n      this.type = props.type;\n\n      if (props.type === 5124 || props.type === 5125) {\n        this.integer = true;\n      }\n    }\n\n    if (props.size !== undefined) {\n      this.size = props.size;\n    }\n\n    if (props.offset !== undefined) {\n      this.offset = props.offset;\n    }\n\n    if (props.stride !== undefined) {\n      this.stride = props.stride;\n    }\n\n    if (props.normalized !== undefined) {\n      this.normalized = props.normalized;\n    }\n\n    if (props.integer !== undefined) {\n      this.integer = props.integer;\n    }\n\n    if (props.divisor !== undefined) {\n      this.divisor = props.divisor;\n    }\n\n    if (props.buffer !== undefined) {\n      this.buffer = props.buffer;\n    }\n\n    if (props.index !== undefined) {\n      if (typeof props.index === 'boolean') {\n        this.index = props.index ? 1 : 0;\n      } else {\n        this.index = props.index;\n      }\n    }\n\n    if (props.instanced !== undefined) {\n      this.divisor = props.instanced ? 1 : 0;\n    }\n\n    if (props.isInstanced !== undefined) {\n      this.divisor = props.isInstanced ? 1 : 0;\n    }\n\n    return this;\n  }\n\n}\nexport { DEFAULT_ACCESSOR_VALUES };","map":{"version":3,"sources":["../../../src/classes/accessor.js"],"names":["DEFAULT_ACCESSOR_VALUES","offset","stride","type","size","divisor","normalized","integer","PROP_CHECKS","deprecatedProps","instanced","isInstanced","getBytesPerElement","ArrayType","getTypedArrayFromGLType","accessor","getBytesPerVertex","assert","resolve","constructor","accessors","Object","toString","JSON","BYTES_PER_ELEMENT","Accessor","BYTES_PER_VERTEX","_assign","props","checkProps"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {getTypedArrayFromGLType} from '../webgl-utils/typed-array-utils';\nimport {assert} from '../utils/assert';\nimport {checkProps} from '../utils/check-props';\n\nconst DEFAULT_ACCESSOR_VALUES = {\n  offset: 0,\n  stride: 0,\n  type: GL.FLOAT,\n  size: 1,\n  divisor: 0,\n  normalized: false,\n  integer: false\n};\n\nconst PROP_CHECKS = {\n  deprecatedProps: {\n    instanced: 'divisor',\n    isInstanced: 'divisor'\n  }\n};\n\nexport default class Accessor {\n  static getBytesPerElement(accessor) {\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || GL.FLOAT);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n\n  static getBytesPerVertex(accessor) {\n    assert(accessor.size);\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || GL.FLOAT);\n    return ArrayType.BYTES_PER_ELEMENT * accessor.size;\n  }\n\n  // Combines (merges) a list of accessors. On top of default values\n  // Usually [programAccessor, bufferAccessor, appAccessor]\n  // All props will be set in the returned object.\n  // TODO check for conflicts between values in the supplied accessors\n  static resolve(...accessors) {\n    return new Accessor(...[DEFAULT_ACCESSOR_VALUES, ...accessors]); // Default values\n  }\n\n  constructor(...accessors) {\n    accessors.forEach(accessor => this._assign(accessor)); // Merge in sequence\n    Object.freeze(this);\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  // ACCESSORS\n\n  // TODO - remove>\n  get BYTES_PER_ELEMENT() {\n    return Accessor.getBytesPerElement(this);\n  }\n\n  get BYTES_PER_VERTEX() {\n    return Accessor.getBytesPerVertex(this);\n  }\n\n  // PRIVATE\n\n  // eslint-disable-next-line complexity, max-statements\n  _assign(props = {}) {\n    props = checkProps('Accessor', props, PROP_CHECKS);\n\n    if (props.type !== undefined) {\n      this.type = props.type;\n\n      // Auto-deduce integer type?\n      if (props.type === GL.INT || props.type === GL.UNSIGNED_INT) {\n        this.integer = true;\n      }\n    }\n    if (props.size !== undefined) {\n      this.size = props.size;\n    }\n    if (props.offset !== undefined) {\n      this.offset = props.offset;\n    }\n    if (props.stride !== undefined) {\n      this.stride = props.stride;\n    }\n    if (props.normalized !== undefined) {\n      this.normalized = props.normalized;\n    }\n    if (props.integer !== undefined) {\n      this.integer = props.integer;\n    }\n\n    // INSTANCE DIVISOR\n    if (props.divisor !== undefined) {\n      this.divisor = props.divisor;\n    }\n\n    // Buffer is optional\n    if (props.buffer !== undefined) {\n      this.buffer = props.buffer;\n    }\n\n    // The binding index (for binding e.g. Transform feedbacks and Uniform buffers)\n    // TODO - should this be part of accessor?\n    if (props.index !== undefined) {\n      if (typeof props.index === 'boolean') {\n        this.index = props.index ? 1 : 0;\n      } else {\n        this.index = props.index;\n      }\n    }\n\n    // DEPRECATED\n    if (props.instanced !== undefined) {\n      this.divisor = props.instanced ? 1 : 0;\n    }\n    if (props.isInstanced !== undefined) {\n      this.divisor = props.isInstanced ? 1 : 0;\n    }\n\n    return this;\n  }\n}\n\n// TEST EXPORTS\nexport {DEFAULT_ACCESSOR_VALUES};\n"]},"metadata":{},"sourceType":"module"}