{"ast":null,"code":"import MathArray from './math-array';\nimport { checkNumber } from '../../lib/validators';\nimport assert from '../../lib/assert';\nexport default class Vector extends MathArray {\n  get ELEMENTS() {\n    assert(false);\n    return 0;\n  }\n\n  copy(vector) {\n    assert(false);\n    return this;\n  }\n\n  get x() {\n    return this[0];\n  }\n\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get y() {\n    return this[1];\n  }\n\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n\n  len() {\n    return Math.sqrt(this.lengthSquared());\n  }\n\n  magnitude() {\n    return this.len();\n  }\n\n  lengthSquared() {\n    let length = 0;\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      length += this[i] * this[i];\n    }\n\n    return length;\n  }\n\n  magnitudeSquared() {\n    return this.lengthSquared();\n  }\n\n  distance(mathArray) {\n    return Math.sqrt(this.distanceSquared(mathArray));\n  }\n\n  distanceSquared(mathArray) {\n    let length = 0;\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const dist = this[i] - mathArray[i];\n      length += dist * dist;\n    }\n\n    return checkNumber(length);\n  }\n\n  dot(mathArray) {\n    let product = 0;\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      product += this[i] * mathArray[i];\n    }\n\n    return checkNumber(product);\n  }\n\n  normalize() {\n    const length = this.magnitude();\n\n    if (length !== 0) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= length;\n      }\n    }\n\n    return this.check();\n  }\n\n  multiply() {\n    for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {\n      vectors[_key] = arguments[_key];\n    }\n\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= vector[i];\n      }\n    }\n\n    return this.check();\n  }\n\n  divide() {\n    for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      vectors[_key2] = arguments[_key2];\n    }\n\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= vector[i];\n      }\n    }\n\n    return this.check();\n  }\n\n  lengthSq() {\n    return this.lengthSquared();\n  }\n\n  distanceTo(vector) {\n    return this.distance(vector);\n  }\n\n  distanceToSquared(vector) {\n    return this.distanceSquared(vector);\n  }\n\n  getComponent(i) {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    return checkNumber(this[i]);\n  }\n\n  setComponent(i, value) {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    this[i] = value;\n    return this.check();\n  }\n\n  addVectors(a, b) {\n    return this.copy(a).add(b);\n  }\n\n  subVectors(a, b) {\n    return this.copy(a).subtract(b);\n  }\n\n  multiplyVectors(a, b) {\n    return this.copy(a).multiply(b);\n  }\n\n  addScaledVector(a, b) {\n    return this.add(new this.constructor(a).multiplyScalar(b));\n  }\n\n}","map":{"version":3,"sources":["../../../../src/classes/base/vector.js"],"names":["ELEMENTS","assert","copy","x","checkNumber","y","len","Math","magnitude","lengthSquared","length","i","magnitudeSquared","distance","distanceSquared","dist","mathArray","dot","product","normalize","multiply","vector","divide","lengthSq","distanceTo","distanceToSquared","getComponent","setComponent","addVectors","subVectors","multiplyVectors","addScaledVector"],"mappings":"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","sourcesContent":["import MathArray from './math-array';\nimport {checkNumber} from '../../lib/validators';\nimport assert from '../../lib/assert';\n\nexport default class Vector extends MathArray {\n  get ELEMENTS() {\n    assert(false);\n    return 0;\n  }\n\n  // VIRTUAL METHODS\n  copy(vector) {\n    assert(false);\n    return this;\n  }\n\n  // ACCESSORS\n\n  get x() {\n    return this[0];\n  }\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get y() {\n    return this[1];\n  }\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n\n  // NOTE: `length` is a reserved word for Arrays, so we can't use `v.length()`\n  // Offer `len` and `magnitude`\n  len() {\n    return Math.sqrt(this.lengthSquared());\n  }\n\n  magnitude() {\n    return this.len();\n  }\n\n  lengthSquared() {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      length += this[i] * this[i];\n    }\n    return length;\n  }\n\n  magnitudeSquared() {\n    return this.lengthSquared();\n  }\n\n  distance(mathArray) {\n    return Math.sqrt(this.distanceSquared(mathArray));\n  }\n\n  distanceSquared(mathArray) {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const dist = this[i] - mathArray[i];\n      length += dist * dist;\n    }\n    return checkNumber(length);\n  }\n\n  dot(mathArray) {\n    let product = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      product += this[i] * mathArray[i];\n    }\n    return checkNumber(product);\n  }\n\n  // MODIFIERS\n\n  normalize() {\n    const length = this.magnitude();\n    if (length !== 0) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= length;\n      }\n    }\n    return this.check();\n  }\n\n  // negate() {\n  //   for (let i = 0; i < this.ELEMENTS; ++i) {\n  //     this[i] = -this[i];\n  //   }\n  //   return this.check();\n  // }\n\n  // inverse() {\n  //   for (let i = 0; i < this.ELEMENTS; ++i) {\n  //     this[i] = 1 / this[i];\n  //   }\n  //   return this.check();\n  // }\n\n  multiply(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  divide(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  // THREE.js compatibility\n  lengthSq() {\n    return this.lengthSquared();\n  }\n\n  distanceTo(vector) {\n    return this.distance(vector);\n  }\n\n  distanceToSquared(vector) {\n    return this.distanceSquared(vector);\n  }\n\n  getComponent(i) {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    return checkNumber(this[i]);\n  }\n\n  setComponent(i, value) {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    this[i] = value;\n    return this.check();\n  }\n\n  addVectors(a, b) {\n    return this.copy(a).add(b);\n  }\n\n  subVectors(a, b) {\n    return this.copy(a).subtract(b);\n  }\n\n  multiplyVectors(a, b) {\n    return this.copy(a).multiply(b);\n  }\n\n  addScaledVector(a, b) {\n    // @ts-ignore error TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.\n    return this.add(new this.constructor(a).multiplyScalar(b));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}