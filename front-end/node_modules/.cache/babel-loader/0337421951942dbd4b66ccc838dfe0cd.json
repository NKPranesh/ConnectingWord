{"ast":null,"code":"import { fetchFile } from '@loaders.gl/core';\nimport { assert } from '@loaders.gl/loader-utils';\nconst CESIUM_ION_URL = 'https://api.cesium.com/v1/assets';\nexport async function getIonTilesetMetadata(accessToken, assetId) {\n  if (!assetId) {\n    const assets = await getIonAssets(accessToken);\n\n    for (const item of assets.items) {\n      if (item.type === '3DTILES') {\n        assetId = item.id;\n      }\n    }\n  }\n\n  const ionAssetMetadata = await getIonAssetMetadata(accessToken, assetId);\n  const {\n    type,\n    url\n  } = ionAssetMetadata;\n  assert(type === '3DTILES' && url);\n  ionAssetMetadata.headers = {\n    Authorization: \"Bearer \".concat(ionAssetMetadata.accessToken)\n  };\n  return ionAssetMetadata;\n}\nexport async function getIonAssets(accessToken) {\n  assert(accessToken);\n  const url = CESIUM_ION_URL;\n  const headers = {\n    Authorization: \"Bearer \".concat(accessToken)\n  };\n  const response = await fetchFile(url, {\n    fetch: {\n      headers\n    }\n  });\n\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n\n  return await response.json();\n}\nexport async function getIonAssetMetadata(accessToken, assetId) {\n  assert(accessToken, assetId);\n  const headers = {\n    Authorization: \"Bearer \".concat(accessToken)\n  };\n  const url = \"\".concat(CESIUM_ION_URL, \"/\").concat(assetId);\n  let response = await fetchFile(\"\".concat(url), {\n    fetch: {\n      headers\n    }\n  });\n\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n\n  let metadata = await response.json();\n  response = await fetchFile(\"\".concat(url, \"/endpoint\"), {\n    fetch: {\n      headers\n    }\n  });\n\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n\n  const tilesetInfo = await response.json();\n  metadata = { ...metadata,\n    ...tilesetInfo\n  };\n  return metadata;\n}","map":{"version":3,"sources":["../../../../src/lib/ion/ion.js"],"names":["CESIUM_ION_URL","assets","getIonAssets","item","assetId","ionAssetMetadata","getIonAssetMetadata","url","assert","type","Authorization","headers","response","fetchFile","fetch","metadata","tilesetInfo"],"mappings":"AAEA,SAAA,SAAA,QAAA,kBAAA;AACA,SAAA,MAAA,QAAA,0BAAA;AAEA,MAAMA,cAAc,GAApB,kCAAA;AAGA,OAAO,eAAA,qBAAA,CAAA,WAAA,EAAA,OAAA,EAA2D;AAEhE,MAAI,CAAJ,OAAA,EAAc;AACZ,UAAMC,MAAM,GAAG,MAAMC,YAAY,CAAjC,WAAiC,CAAjC;;AACA,SAAK,MAAL,IAAA,IAAmBD,MAAM,CAAzB,KAAA,EAAiC;AAC/B,UAAIE,IAAI,CAAJA,IAAAA,KAAJ,SAAA,EAA6B;AAC3BC,QAAAA,OAAO,GAAGD,IAAI,CAAdC,EAAAA;AACD;AACF;AACF;;AAGD,QAAMC,gBAAgB,GAAG,MAAMC,mBAAmB,CAAA,WAAA,EAAlD,OAAkD,CAAlD;AACA,QAAM;AAAA,IAAA,IAAA;AAAOC,IAAAA;AAAP,MAAN,gBAAA;AACAC,EAAAA,MAAM,CAACC,IAAI,KAAJA,SAAAA,IAAPD,GAAM,CAANA;AAGAH,EAAAA,gBAAgB,CAAhBA,OAAAA,GAA2B;AACzBK,IAAAA,aAAa,EAAA,UAAA,MAAA,CAAYL,gBAAgB,CAA5B,WAAA;AADY,GAA3BA;AAGA,SAAA,gBAAA;AACD;AAGD,OAAO,eAAA,YAAA,CAAA,WAAA,EAAyC;AAC9CG,EAAAA,MAAM,CAANA,WAAM,CAANA;AACA,QAAMD,GAAG,GAAT,cAAA;AACA,QAAMI,OAAO,GAAG;AAACD,IAAAA,aAAa,EAAA,UAAA,MAAA,CAAA,WAAA;AAAd,GAAhB;AACA,QAAME,QAAQ,GAAG,MAAMC,SAAS,CAAA,GAAA,EAAM;AAACC,IAAAA,KAAK,EAAE;AAACH,MAAAA;AAAD;AAAR,GAAN,CAAhC;;AACA,MAAI,CAACC,QAAQ,CAAb,EAAA,EAAkB;AAChB,UAAM,IAAA,KAAA,CAAUA,QAAQ,CAAxB,UAAM,CAAN;AACD;;AACD,SAAO,MAAMA,QAAQ,CAArB,IAAaA,EAAb;AACD;AAGD,OAAO,eAAA,mBAAA,CAAA,WAAA,EAAA,OAAA,EAAyD;AAC9DJ,EAAAA,MAAM,CAAA,WAAA,EAANA,OAAM,CAANA;AACA,QAAMG,OAAO,GAAG;AAACD,IAAAA,aAAa,EAAA,UAAA,MAAA,CAAA,WAAA;AAAd,GAAhB;AAEA,QAAMH,GAAG,GAAA,GAAA,MAAA,CAAA,cAAA,EAAA,GAAA,EAAA,MAAA,CAAT,OAAS,CAAT;AAGA,MAAIK,QAAQ,GAAG,MAAMC,SAAS,CAAA,GAAA,MAAA,CAAA,GAAA,CAAA,EAAW;AAACC,IAAAA,KAAK,EAAE;AAACH,MAAAA;AAAD;AAAR,GAAX,CAA9B;;AACA,MAAI,CAACC,QAAQ,CAAb,EAAA,EAAkB;AAChB,UAAM,IAAA,KAAA,CAAUA,QAAQ,CAAxB,UAAM,CAAN;AACD;;AACD,MAAIG,QAAQ,GAAG,MAAMH,QAAQ,CAA7B,IAAqBA,EAArB;AAIAA,EAAAA,QAAQ,GAAG,MAAMC,SAAS,CAAA,GAAA,MAAA,CAAA,GAAA,EAAA,WAAA,CAAA,EAAoB;AAACC,IAAAA,KAAK,EAAE;AAACH,MAAAA;AAAD;AAAR,GAApB,CAA1BC;;AACA,MAAI,CAACA,QAAQ,CAAb,EAAA,EAAkB;AAChB,UAAM,IAAA,KAAA,CAAUA,QAAQ,CAAxB,UAAM,CAAN;AACD;;AACD,QAAMI,WAAW,GAAG,MAAMJ,QAAQ,CAAlC,IAA0BA,EAA1B;AAGAG,EAAAA,QAAQ,GAAG,EACT,GADS,QAAA;AAET,OAAGC;AAFM,GAAXD;AAKA,SAAA,QAAA;AACD","sourcesContent":["// Minimal support to load tilsets from the Cesium ION services\n\nimport {fetchFile} from '@loaders.gl/core';\nimport {assert} from '@loaders.gl/loader-utils';\n\nconst CESIUM_ION_URL = 'https://api.cesium.com/v1/assets';\n\n// Returns `{url, headers, type, attributions}` for an ion tileset\nexport async function getIonTilesetMetadata(accessToken, assetId) {\n  // Step 1, if no asset id, look for first 3DTILES asset associated with this token.\n  if (!assetId) {\n    const assets = await getIonAssets(accessToken);\n    for (const item of assets.items) {\n      if (item.type === '3DTILES') {\n        assetId = item.id;\n      }\n    }\n  }\n\n  // Step 2: Query metdatadata for this asset.\n  const ionAssetMetadata = await getIonAssetMetadata(accessToken, assetId);\n  const {type, url} = ionAssetMetadata;\n  assert(type === '3DTILES' && url);\n\n  // Prepare a headers object for fetch\n  ionAssetMetadata.headers = {\n    Authorization: `Bearer ${ionAssetMetadata.accessToken}`\n  };\n  return ionAssetMetadata;\n}\n\n// Return a list of all assets associated with accessToken\nexport async function getIonAssets(accessToken) {\n  assert(accessToken);\n  const url = CESIUM_ION_URL;\n  const headers = {Authorization: `Bearer ${accessToken}`};\n  const response = await fetchFile(url, {fetch: {headers}});\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  return await response.json();\n}\n\n// Return metadata for a specific asset associated with token\nexport async function getIonAssetMetadata(accessToken, assetId) {\n  assert(accessToken, assetId);\n  const headers = {Authorization: `Bearer ${accessToken}`};\n\n  const url = `${CESIUM_ION_URL}/${assetId}`;\n  // https://cesium.com/docs/rest-api/#operation/getAsset\n  // Retrieves metadata information about a specific asset.\n  let response = await fetchFile(`${url}`, {fetch: {headers}});\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  let metadata = await response.json();\n\n  // https://cesium.com/docs/rest-api/#operation/getAssetEndpoint\n  // Retrieves information and credentials that allow you to access the tiled asset data for visualization and analysis.\n  response = await fetchFile(`${url}/endpoint`, {fetch: {headers}});\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  const tilesetInfo = await response.json();\n\n  // extract dataset description\n  metadata = {\n    ...metadata,\n    ...tilesetInfo\n  };\n\n  return metadata;\n}\n"]},"metadata":{},"sourceType":"module"}