{"ast":null,"code":"import { Layer, project32, picking, log, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport PathTesselator from './path-tesselator';\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  widthUnits: 'meters',\n  widthScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  widthMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  jointRounded: false,\n  capRounded: false,\n  miterLimit: {\n    type: 'number',\n    min: 0,\n    value: 4\n  },\n  billboard: false,\n  _pathType: null,\n  getPath: {\n    type: 'accessor',\n    value: object => object.path\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  rounded: {\n    deprecatedFor: ['jointRounded', 'capRounded']\n  }\n};\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\nexport default class PathLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, picking]\n    });\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const noAlloc = true;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      positions: {\n        size: 3,\n        vertexOffset: 1,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPath',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          instanceLeftPositions: {\n            vertexOffset: 0\n          },\n          instanceStartPositions: {\n            vertexOffset: 1\n          },\n          instanceEndPositions: {\n            vertexOffset: 2\n          },\n          instanceRightPositions: {\n            vertexOffset: 3\n          }\n        }\n      },\n      instanceTypes: {\n        size: 1,\n        type: 5121,\n        update: this.calculateSegmentTypes,\n        noAlloc\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getWidth',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        accessor: 'getColor',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: DEFAULT_COLOR\n      },\n      instancePickingColors: {\n        size: 3,\n        type: 5121,\n        accessor: (object, _ref) => {\n          let {\n            index,\n            target: value\n          } = _ref;\n          return this.encodePickingColor(object && object.__source ? object.__source.index : index, value);\n        }\n      }\n    });\n    this.setState({\n      pathTesselator: new PathTesselator({\n        fp64: this.use64bitPositions()\n      })\n    });\n\n    if (this.props.getDashArray && !this.props.extensions.length) {\n      log.removed('getDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState(_ref2) {\n    let {\n      oldProps,\n      props,\n      changeFlags\n    } = _ref2;\n    super.updateState({\n      props,\n      oldProps,\n      changeFlags\n    });\n    const attributeManager = this.getAttributeManager();\n    const geometryChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath);\n\n    if (geometryChanged) {\n      const {\n        pathTesselator\n      } = this.state;\n      const buffers = props.data.attributes || {};\n      pathTesselator.updateGeometry({\n        data: props.data,\n        geometryBuffer: buffers.getPath,\n        buffers,\n        normalize: !props._pathType,\n        loop: props._pathType === 'loop',\n        getGeometry: props.getPath,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        resolution: this.context.viewport.resolution,\n        dataChanged: changeFlags.dataChanged\n      });\n      this.setState({\n        numInstances: pathTesselator.instanceCount,\n        startIndices: pathTesselator.vertexStarts\n      });\n\n      if (!changeFlags.dataChanged) {\n        attributeManager.invalidateAll();\n      }\n    }\n\n    if (changeFlags.extensionsChanged) {\n      var _this$state$model;\n\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager.invalidateAll();\n    }\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {\n      index\n    } = info;\n    const {\n      data\n    } = this.props;\n\n    if (data[0] && data[0].__source) {\n      info.object = data.find(d => d.__source.index === index);\n    }\n\n    return info;\n  }\n\n  disablePickingIndex(objectIndex) {\n    const {\n      data\n    } = this.props;\n\n    if (data[0] && data[0].__source) {\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw(_ref3) {\n    let {\n      uniforms\n    } = _ref3;\n    const {\n      jointRounded,\n      capRounded,\n      billboard,\n      miterLimit,\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels\n    } = this.props;\n    this.state.model.setUniforms(uniforms).setUniforms({\n      jointType: Number(jointRounded),\n      capType: Number(capRounded),\n      billboard,\n      widthUnits: UNIT[widthUnits],\n      widthScale,\n      miterLimit,\n      widthMinPixels,\n      widthMaxPixels\n    }).draw();\n  }\n\n  _getModel(gl) {\n    const SEGMENT_INDICES = [0, 1, 2, 1, 4, 2, 1, 3, 4, 3, 5, 4];\n    const SEGMENT_POSITIONS = [0, 0, 0, -1, 0, 1, 1, -1, 1, 1, 1, 0];\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 4,\n        attributes: {\n          indices: new Uint16Array(SEGMENT_INDICES),\n          positions: {\n            value: new Float32Array(SEGMENT_POSITIONS),\n            size: 2\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  calculatePositions(attribute) {\n    const {\n      pathTesselator\n    } = this.state;\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('positions');\n  }\n\n  calculateSegmentTypes(attribute) {\n    const {\n      pathTesselator\n    } = this.state;\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('segmentTypes');\n  }\n\n}\nPathLayer.layerName = 'PathLayer';\nPathLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/path-layer/path-layer.js"],"names":["DEFAULT_COLOR","defaultProps","widthUnits","widthScale","type","min","value","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","jointRounded","capRounded","miterLimit","billboard","_pathType","getPath","object","path","getColor","getWidth","rounded","deprecatedFor","ATTRIBUTE_TRANSITION","enter","chunk","getShaders","modules","wrapLongitude","initializeState","noAlloc","attributeManager","positions","size","vertexOffset","fp64","transition","accessor","update","shaderAttributes","instanceLeftPositions","instanceStartPositions","instanceEndPositions","instanceRightPositions","instanceTypes","instanceStrokeWidths","defaultValue","instanceColors","normalized","instancePickingColors","target","pathTesselator","log","updateState","changeFlags","geometryChanged","buffers","props","data","geometryBuffer","normalize","loop","getGeometry","positionFormat","resolution","dataChanged","numInstances","startIndices","vertexStarts","gl","getPickingInfo","info","index","d","disablePickingIndex","i","draw","uniforms","jointType","capType","UNIT","_getModel","SEGMENT_INDICES","SEGMENT_POSITIONS","id","geometry","drawMode","attributes","indices","isInstanced","calculatePositions","attribute","calculateSegmentTypes","PathLayer"],"mappings":"AAoBA,SAAA,KAAA,EAAA,SAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAAA,QAAA,eAAA;AAEA,SAAA,KAAA,EAAA,QAAA,QAAA,eAAA;AAEA,OAAA,cAAA,MAAA,mBAAA;AAEA,OAAA,EAAA,MAAA,0BAAA;AACA,OAAA,EAAA,MAAA,4BAAA;AAEA,MAAMA,aAAa,GAAG,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAtB,GAAsB,CAAtB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EADS,QAAA;AAEnBC,EAAAA,UAAU,EAAE;AAACC,IAAAA,IAAI,EAAL,QAAA;AAAiBC,IAAAA,GAAG,EAApB,CAAA;AAAyBC,IAAAA,KAAK,EAAE;AAAhC,GAFO;AAGnBC,EAAAA,cAAc,EAAE;AAACH,IAAAA,IAAI,EAAL,QAAA;AAAiBC,IAAAA,GAAG,EAApB,CAAA;AAAyBC,IAAAA,KAAK,EAAE;AAAhC,GAHG;AAInBE,EAAAA,cAAc,EAAE;AAACJ,IAAAA,IAAI,EAAL,QAAA;AAAiBC,IAAAA,GAAG,EAApB,CAAA;AAAyBC,IAAAA,KAAK,EAAEG,MAAM,CAACC;AAAvC,GAJG;AAKnBC,EAAAA,YAAY,EALO,KAAA;AAMnBC,EAAAA,UAAU,EANS,KAAA;AAOnBC,EAAAA,UAAU,EAAE;AAACT,IAAAA,IAAI,EAAL,QAAA;AAAiBC,IAAAA,GAAG,EAApB,CAAA;AAAyBC,IAAAA,KAAK,EAAE;AAAhC,GAPO;AAQnBQ,EAAAA,SAAS,EARU,KAAA;AAUnBC,EAAAA,SAAS,EAVU,IAAA;AAYnBC,EAAAA,OAAO,EAAE;AAACZ,IAAAA,IAAI,EAAL,UAAA;AAAmBE,IAAAA,KAAK,EAAEW,MAAM,IAAIA,MAAM,CAACC;AAA3C,GAZU;AAanBC,EAAAA,QAAQ,EAAE;AAACf,IAAAA,IAAI,EAAL,UAAA;AAAmBE,IAAAA,KAAK,EAAEN;AAA1B,GAbS;AAcnBoB,EAAAA,QAAQ,EAAE;AAAChB,IAAAA,IAAI,EAAL,UAAA;AAAmBE,IAAAA,KAAK,EAAE;AAA1B,GAdS;AAiBnBe,EAAAA,OAAO,EAAE;AAACC,IAAAA,aAAa,EAAE,CAAA,cAAA,EAAA,YAAA;AAAhB;AAjBU,CAArB;AAoBA,MAAMC,oBAAoB,GAAG;AAC3BC,EAAAA,KAAK,EAAE,CAAA,KAAA,EAAA,KAAA,KAAkB;AACvB,WAAOC,KAAK,CAALA,MAAAA,GAAeA,KAAK,CAALA,QAAAA,CAAeA,KAAK,CAALA,MAAAA,GAAenB,KAAK,CAAlDmB,MAAeA,CAAfA,GAAP,KAAA;AACD;AAH0B,CAA7B;AAMA,eAAe,MAAA,SAAA,SAAA,KAAA,CAA8B;AAC3CC,EAAAA,UAAU,GAAG;AACX,WAAO,MAAA,UAAA,CAAiB;AAAA,MAAA,EAAA;AAAA,MAAA,EAAA;AAASC,MAAAA,OAAO,EAAE,CAAA,SAAA,EAAA,OAAA;AAAlB,KAAjB,CAAP;AACD;;AAED,MAAIC,aAAJ,GAAoB;AAClB,WAAA,KAAA;AACD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,UAAMC,OAAO,GAAb,IAAA;AACA,UAAMC,gBAAgB,GAAG,KAAzB,mBAAyB,EAAzB;AAEAA,IAAAA,gBAAgB,CAAhBA,YAAAA,CAA8B;AAC5BC,MAAAA,SAAS,EAAE;AACTC,QAAAA,IAAI,EADK,CAAA;AAGTC,QAAAA,YAAY,EAHH,CAAA;AAIT9B,QAAAA,IAAI,EAJK,IAAA;AAKT+B,QAAAA,IAAI,EAAE,KALG,iBAKH,EALG;AAMTC,QAAAA,UAAU,EAND,oBAAA;AAOTC,QAAAA,QAAQ,EAPC,SAAA;AAQTC,QAAAA,MAAM,EAAE,KARC,kBAAA;AAAA,QAAA,OAAA;AAUTC,QAAAA,gBAAgB,EAAE;AAChBC,UAAAA,qBAAqB,EAAE;AACrBN,YAAAA,YAAY,EAAE;AADO,WADP;AAIhBO,UAAAA,sBAAsB,EAAE;AACtBP,YAAAA,YAAY,EAAE;AADQ,WAJR;AAOhBQ,UAAAA,oBAAoB,EAAE;AACpBR,YAAAA,YAAY,EAAE;AADM,WAPN;AAUhBS,UAAAA,sBAAsB,EAAE;AACtBT,YAAAA,YAAY,EAAE;AADQ;AAVR;AAVT,OADiB;AA0B5BU,MAAAA,aAAa,EAAE;AACbX,QAAAA,IAAI,EADS,CAAA;AAEb7B,QAAAA,IAAI,EAFS,IAAA;AAGbkC,QAAAA,MAAM,EAAE,KAHK,qBAAA;AAIbR,QAAAA;AAJa,OA1Ba;AAgC5Be,MAAAA,oBAAoB,EAAE;AACpBZ,QAAAA,IAAI,EADgB,CAAA;AAEpBI,QAAAA,QAAQ,EAFY,UAAA;AAGpBD,QAAAA,UAAU,EAHU,oBAAA;AAIpBU,QAAAA,YAAY,EAAE;AAJM,OAhCM;AAsC5BC,MAAAA,cAAc,EAAE;AACdd,QAAAA,IAAI,EAAE,KAAA,KAAA,CAAA,WAAA,CADQ,MAAA;AAEd7B,QAAAA,IAAI,EAFU,IAAA;AAGd4C,QAAAA,UAAU,EAHI,IAAA;AAIdX,QAAAA,QAAQ,EAJM,UAAA;AAKdD,QAAAA,UAAU,EALI,oBAAA;AAMdU,QAAAA,YAAY,EAAE9C;AANA,OAtCY;AA8C5BiD,MAAAA,qBAAqB,EAAE;AACrBhB,QAAAA,IAAI,EADiB,CAAA;AAErB7B,QAAAA,IAAI,EAFiB,IAAA;AAGrBiC,QAAAA,QAAQ,EAAE,CAAA,MAAA;AAAA,cAAS;AAAA,YAAA,KAAA;AAAQa,YAAAA,MAAM,EAAE5C;AAAhB,WAAT;AAAA,iBACR,KAAA,kBAAA,CAAwBW,MAAM,IAAIA,MAAM,CAAhBA,QAAAA,GAA4BA,MAAM,CAANA,QAAAA,CAA5BA,KAAAA,GAAxB,KAAA,EAAA,KAAA,CADQ;AAAA;AAHW;AA9CK,KAA9Bc;AAuDA,SAAA,QAAA,CAAc;AACZoB,MAAAA,cAAc,EAAE,IAAA,cAAA,CAAmB;AACjChB,QAAAA,IAAI,EAAE,KAAA,iBAAA;AAD2B,OAAnB;AADJ,KAAd;;AAMA,QAAI,KAAA,KAAA,CAAA,YAAA,IAA2B,CAAC,KAAA,KAAA,CAAA,UAAA,CAAhC,MAAA,EAA8D;AAC5DiB,MAAAA,GAAG,CAAHA,OAAAA,CAAAA,cAAAA,EAAAA,oBAAAA;AACD;AACF;;AAEDC,EAAAA,WAAW,QAAiC;AAAA,QAAhC;AAAA,MAAA,QAAA;AAAA,MAAA,KAAA;AAAkBC,MAAAA;AAAlB,KAAgC;AAC1C,UAAA,WAAA,CAAkB;AAAA,MAAA,KAAA;AAAA,MAAA,QAAA;AAAkBA,MAAAA;AAAlB,KAAlB;AAEA,UAAMvB,gBAAgB,GAAG,KAAzB,mBAAyB,EAAzB;AAEA,UAAMwB,eAAe,GACnBD,WAAW,CAAXA,WAAAA,IACCA,WAAW,CAAXA,qBAAAA,KACEA,WAAW,CAAXA,qBAAAA,CAAAA,GAAAA,IAAyCA,WAAW,CAAXA,qBAAAA,CAH9C,OAEGA,CAFH;;AAKA,QAAA,eAAA,EAAqB;AACnB,YAAM;AAACH,QAAAA;AAAD,UAAmB,KAAzB,KAAA;AACA,YAAMK,OAAO,GAAGC,KAAK,CAALA,IAAAA,CAAAA,UAAAA,IAAhB,EAAA;AAEAN,MAAAA,cAAc,CAAdA,cAAAA,CAA8B;AAC5BO,QAAAA,IAAI,EAAED,KAAK,CADiB,IAAA;AAE5BE,QAAAA,cAAc,EAAEH,OAAO,CAFK,OAAA;AAAA,QAAA,OAAA;AAI5BI,QAAAA,SAAS,EAAE,CAACH,KAAK,CAJW,SAAA;AAK5BI,QAAAA,IAAI,EAAEJ,KAAK,CAALA,SAAAA,KALsB,MAAA;AAM5BK,QAAAA,WAAW,EAAEL,KAAK,CANU,OAAA;AAO5BM,QAAAA,cAAc,EAAEN,KAAK,CAPO,cAAA;AAQ5B7B,QAAAA,aAAa,EAAE6B,KAAK,CARQ,aAAA;AAU5BO,QAAAA,UAAU,EAAE,KAAA,OAAA,CAAA,QAAA,CAVgB,UAAA;AAW5BC,QAAAA,WAAW,EAAEX,WAAW,CAACW;AAXG,OAA9Bd;AAaA,WAAA,QAAA,CAAc;AACZe,QAAAA,YAAY,EAAEf,cAAc,CADhB,aAAA;AAEZgB,QAAAA,YAAY,EAAEhB,cAAc,CAACiB;AAFjB,OAAd;;AAIA,UAAI,CAACd,WAAW,CAAhB,WAAA,EAA8B;AAG5BvB,QAAAA,gBAAgB,CAAhBA,aAAAA;AACD;AACF;;AAED,QAAIuB,WAAW,CAAf,iBAAA,EAAmC;AAAA,UAAA,iBAAA;;AACjC,YAAM;AAACe,QAAAA;AAAD,UAAO,KAAb,OAAA;AACA,OAAA,iBAAA,GAAA,KAAA,KAAA,CAAA,KAAA,MAAA,IAAA,IAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAA,MAAA,EAAA;AACA,WAAA,KAAA,CAAA,KAAA,GAAmB,KAAA,SAAA,CAAnB,EAAmB,CAAnB;AACAtC,MAAAA,gBAAgB,CAAhBA,aAAAA;AACD;AACF;;AAEDuC,EAAAA,cAAc,CAAA,MAAA,EAAS;AACrB,UAAMC,IAAI,GAAG,MAAA,cAAA,CAAb,MAAa,CAAb;AACA,UAAM;AAACC,MAAAA;AAAD,QAAN,IAAA;AACA,UAAM;AAACd,MAAAA;AAAD,QAAS,KAAf,KAAA;;AAGA,QAAIA,IAAI,CAAJA,CAAI,CAAJA,IAAWA,IAAI,CAAJA,CAAI,CAAJA,CAAf,QAAA,EAAiC;AAE/Ba,MAAAA,IAAI,CAAJA,MAAAA,GAAcb,IAAI,CAAJA,IAAAA,CAAUe,CAAC,IAAIA,CAAC,CAADA,QAAAA,CAAAA,KAAAA,KAA7BF,KAAcb,CAAda;AACD;;AACD,WAAA,IAAA;AACD;;AAEDG,EAAAA,mBAAmB,CAAA,WAAA,EAAc;AAC/B,UAAM;AAAChB,MAAAA;AAAD,QAAS,KAAf,KAAA;;AAGA,QAAIA,IAAI,CAAJA,CAAI,CAAJA,IAAWA,IAAI,CAAJA,CAAI,CAAJA,CAAf,QAAA,EAAiC;AAE/B,WAAK,IAAIiB,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGjB,IAAI,CAAxB,MAAA,EAAiCiB,CAAjC,EAAA,EAAsC;AACpC,YAAIjB,IAAI,CAAJA,CAAI,CAAJA,CAAAA,QAAAA,CAAAA,KAAAA,KAAJ,WAAA,EAA4C;AAC1C,eAAA,oBAAA,CAAA,CAAA;AACD;AACF;AANH,KAAA,MAOO;AACL,WAAA,oBAAA,CAAA,WAAA;AACD;AACF;;AAEDkB,EAAAA,IAAI,QAAa;AAAA,QAAZ;AAACC,MAAAA;AAAD,KAAY;AACf,UAAM;AAAA,MAAA,YAAA;AAAA,MAAA,UAAA;AAAA,MAAA,SAAA;AAAA,MAAA,UAAA;AAAA,MAAA,UAAA;AAAA,MAAA,UAAA;AAAA,MAAA,cAAA;AAQJrE,MAAAA;AARI,QASF,KATJ,KAAA;AAWA,SAAA,KAAA,CAAA,KAAA,CAAA,WAAA,CAAA,QAAA,EAAA,WAAA,CAEe;AACXsE,MAAAA,SAAS,EAAErE,MAAM,CADN,YACM,CADN;AAEXsE,MAAAA,OAAO,EAAEtE,MAAM,CAFJ,UAEI,CAFJ;AAAA,MAAA,SAAA;AAIXP,MAAAA,UAAU,EAAE8E,IAAI,CAJL,UAIK,CAJL;AAAA,MAAA,UAAA;AAAA,MAAA,UAAA;AAAA,MAAA,cAAA;AAQXxE,MAAAA;AARW,KAFf,EAAA,IAAA;AAaD;;AAEDyE,EAAAA,SAAS,CAAA,EAAA,EAAK;AAiBZ,UAAMC,eAAe,GAAG,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAxB,CAAwB,CAAxB;AAaA,UAAMC,iBAAiB,GAAG,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAIrB,CAJqB,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAQrB,CARqB,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAA1B,CAA0B,CAA1B;AAeA,WAAO,IAAA,KAAA,CAAA,EAAA,EAAc,EACnB,GAAG,KADgB,UAChB,EADgB;AAEnBC,MAAAA,EAAE,EAAE,KAAA,KAAA,CAFe,EAAA;AAGnBC,MAAAA,QAAQ,EAAE,IAAA,QAAA,CAAa;AACrBC,QAAAA,QAAQ,EADa,CAAA;AAErBC,QAAAA,UAAU,EAAE;AACVC,UAAAA,OAAO,EAAE,IAAA,WAAA,CADC,eACD,CADC;AAEVxD,UAAAA,SAAS,EAAE;AAAC1B,YAAAA,KAAK,EAAE,IAAA,YAAA,CAAR,iBAAQ,CAAR;AAA6C2B,YAAAA,IAAI,EAAE;AAAnD;AAFD;AAFS,OAAb,CAHS;AAUnBwD,MAAAA,WAAW,EAAE;AAVM,KAAd,CAAP;AAYD;;AAEDC,EAAAA,kBAAkB,CAAA,SAAA,EAAY;AAC5B,UAAM;AAACvC,MAAAA;AAAD,QAAmB,KAAzB,KAAA;AAEAwC,IAAAA,SAAS,CAATA,YAAAA,GAAyBxC,cAAc,CAAvCwC,YAAAA;AACAA,IAAAA,SAAS,CAATA,KAAAA,GAAkBxC,cAAc,CAAdA,GAAAA,CAAlBwC,WAAkBxC,CAAlBwC;AACD;;AAEDC,EAAAA,qBAAqB,CAAA,SAAA,EAAY;AAC/B,UAAM;AAACzC,MAAAA;AAAD,QAAmB,KAAzB,KAAA;AAEAwC,IAAAA,SAAS,CAATA,YAAAA,GAAyBxC,cAAc,CAAvCwC,YAAAA;AACAA,IAAAA,SAAS,CAATA,KAAAA,GAAkBxC,cAAc,CAAdA,GAAAA,CAAlBwC,cAAkBxC,CAAlBwC;AACD;;AA5P0C;AA+P7CE,SAAS,CAATA,SAAAA,GAAAA,WAAAA;AACAA,SAAS,CAATA,YAAAA,GAAAA,YAAAA","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, log, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport PathTesselator from './path-tesselator';\n\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  widthUnits: 'meters',\n  widthScale: {type: 'number', min: 0, value: 1}, // stroke width in meters\n  widthMinPixels: {type: 'number', min: 0, value: 0}, //  min stroke width in pixels\n  widthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max stroke width in pixels\n  jointRounded: false,\n  capRounded: false,\n  miterLimit: {type: 'number', min: 0, value: 4},\n  billboard: false,\n  // `loop` or `open`\n  _pathType: null,\n\n  getPath: {type: 'accessor', value: object => object.path},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n\n  // deprecated props\n  rounded: {deprecatedFor: ['jointRounded', 'capRounded']}\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class PathLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const noAlloc = true;\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      positions: {\n        size: 3,\n        // Start filling buffer from 1 vertex in\n        vertexOffset: 1,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPath',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          instanceLeftPositions: {\n            vertexOffset: 0\n          },\n          instanceStartPositions: {\n            vertexOffset: 1\n          },\n          instanceEndPositions: {\n            vertexOffset: 2\n          },\n          instanceRightPositions: {\n            vertexOffset: 3\n          }\n        }\n      },\n      instanceTypes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateSegmentTypes,\n        noAlloc\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getWidth',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        accessor: 'getColor',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: DEFAULT_COLOR\n      },\n      instancePickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value)\n      }\n    });\n    /* eslint-enable max-len */\n\n    this.setState({\n      pathTesselator: new PathTesselator({\n        fp64: this.use64bitPositions()\n      })\n    });\n\n    if (this.props.getDashArray && !this.props.extensions.length) {\n      log.removed('getDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const attributeManager = this.getAttributeManager();\n\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath));\n\n    if (geometryChanged) {\n      const {pathTesselator} = this.state;\n      const buffers = props.data.attributes || {};\n\n      pathTesselator.updateGeometry({\n        data: props.data,\n        geometryBuffer: buffers.getPath,\n        buffers,\n        normalize: !props._pathType,\n        loop: props._pathType === 'loop',\n        getGeometry: props.getPath,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        dataChanged: changeFlags.dataChanged\n      });\n      this.setState({\n        numInstances: pathTesselator.instanceCount,\n        startIndices: pathTesselator.vertexStarts\n      });\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        attributeManager.invalidateAll();\n      }\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager.invalidateAll();\n    }\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = data.find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  disablePickingIndex(objectIndex) {\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      jointRounded,\n      capRounded,\n      billboard,\n      miterLimit,\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels\n    } = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        jointType: Number(jointRounded),\n        capType: Number(capRounded),\n        billboard,\n        widthUnits: UNIT[widthUnits],\n        widthScale,\n        miterLimit,\n        widthMinPixels,\n        widthMaxPixels\n      })\n      .draw();\n  }\n\n  _getModel(gl) {\n    /*\n     *       _\n     *        \"-_ 1                   3                       5\n     *     _     \"o---------------------o-------------------_-o\n     *       -   / \"\"--..__              '.             _.-' /\n     *   _     \"@- - - - - \"\"--..__- - - - x - - - -_.@'    /\n     *    \"-_  /                   \"\"--..__ '.  _,-` :     /\n     *       \"o----------------------------\"\"-o'    :     /\n     *      0,2                            4 / '.  :     /\n     *                                      /   '.:     /\n     *                                     /     :'.   /\n     *                                    /     :  ', /\n     *                                   /     :     o\n     */\n\n    // prettier-ignore\n    const SEGMENT_INDICES = [\n      // start corner\n      0, 1, 2,\n      // body\n      1, 4, 2,\n      1, 3, 4,\n      // end corner\n      3, 5, 4\n    ];\n\n    // [0] position on segment - 0: start, 1: end\n    // [1] side of path - -1: left, 0: center (joint), 1: right\n    // prettier-ignore\n    const SEGMENT_POSITIONS = [\n      // bevel start corner\n      0, 0,\n      // start inner corner\n      0, -1,\n      // start outer corner\n      0, 1,\n      // end inner corner\n      1, -1,\n      // end outer corner\n      1, 1,\n      // bevel end corner\n      1, 0\n    ];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          indices: new Uint16Array(SEGMENT_INDICES),\n          positions: {value: new Float32Array(SEGMENT_POSITIONS), size: 2}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  calculatePositions(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('positions');\n  }\n\n  calculateSegmentTypes(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('segmentTypes');\n  }\n}\n\nPathLayer.layerName = 'PathLayer';\nPathLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}