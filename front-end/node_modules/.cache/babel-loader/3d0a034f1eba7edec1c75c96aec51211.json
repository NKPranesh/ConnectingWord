{"ast":null,"code":"import { LOD_METRIC_TYPE, TILE_REFINEMENT, TILE_TYPE } from '@loaders.gl/tiles';\n\nfunction getTileType(tile) {\n  if (!tile.contentUrl) {\n    return TILE_TYPE.EMPTY;\n  }\n\n  const contentUrl = tile.contentUrl;\n  const fileExtension = contentUrl.split('.').pop();\n\n  switch (fileExtension) {\n    case 'pnts':\n      return TILE_TYPE.POINTCLOUD;\n\n    case 'i3dm':\n    case 'b3dm':\n      return TILE_TYPE.SCENEGRAPH;\n\n    default:\n      return fileExtension;\n  }\n}\n\nfunction getRefine(refine) {\n  switch (refine) {\n    case 'REPLACE':\n    case 'replace':\n      return TILE_REFINEMENT.REPLACE;\n\n    case 'ADD':\n    case 'add':\n      return TILE_REFINEMENT.ADD;\n\n    default:\n      return refine;\n  }\n}\n\nexport function normalizeTileData(tile, options) {\n  if (tile.content) {\n    const contentUri = tile.content.uri || tile.content.url;\n    tile.contentUrl = \"\".concat(options.basePath, \"/\").concat(contentUri);\n  }\n\n  tile.id = tile.contentUrl;\n  tile.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;\n  tile.lodMetricValue = tile.geometricError;\n  tile.transformMatrix = tile.transform;\n  tile.type = getTileType(tile);\n  tile.refine = getRefine(tile.refine);\n  return tile;\n}\nexport function normalizeTileHeaders(tileset) {\n  const basePath = tileset.basePath;\n  const root = normalizeTileData(tileset.root, tileset);\n  const stack = [];\n  stack.push(root);\n\n  while (stack.length > 0) {\n    const tile = stack.pop();\n    const children = tile.children || [];\n\n    for (const childHeader of children) {\n      normalizeTileData(childHeader, {\n        basePath\n      });\n      stack.push(childHeader);\n    }\n  }\n\n  return root;\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-3d-tile-header.js"],"names":["tile","TILE_TYPE","contentUrl","fileExtension","TILE_REFINEMENT","contentUri","options","LOD_METRIC_TYPE","getTileType","getRefine","basePath","tileset","root","normalizeTileData","stack","children"],"mappings":"AAAA,SAAA,eAAA,EAAA,eAAA,EAAA,SAAA,QAAA,mBAAA;;AAEA,SAAA,WAAA,CAAA,IAAA,EAA2B;AACzB,MAAI,CAACA,IAAI,CAAT,UAAA,EAAsB;AACpB,WAAOC,SAAS,CAAhB,KAAA;AACD;;AAED,QAAMC,UAAU,GAAGF,IAAI,CAAvB,UAAA;AACA,QAAMG,aAAa,GAAGD,UAAU,CAAVA,KAAAA,CAAAA,GAAAA,EAAtB,GAAsBA,EAAtB;;AACA,UAAA,aAAA;AACE,SAAA,MAAA;AACE,aAAOD,SAAS,CAAhB,UAAA;;AACF,SAAA,MAAA;AACA,SAAA,MAAA;AACE,aAAOA,SAAS,CAAhB,UAAA;;AACF;AACE,aAAA,aAAA;AAPJ;AASD;;AAED,SAAA,SAAA,CAAA,MAAA,EAA2B;AACzB,UAAA,MAAA;AACE,SAAA,SAAA;AACA,SAAA,SAAA;AACE,aAAOG,eAAe,CAAtB,OAAA;;AACF,SAAA,KAAA;AACA,SAAA,KAAA;AACE,aAAOA,eAAe,CAAtB,GAAA;;AACF;AACE,aAAA,MAAA;AARJ;AAUD;;AAED,OAAO,SAAA,iBAAA,CAAA,IAAA,EAAA,OAAA,EAA0C;AAC/C,MAAIJ,IAAI,CAAR,OAAA,EAAkB;AAChB,UAAMK,UAAU,GAAGL,IAAI,CAAJA,OAAAA,CAAAA,GAAAA,IAAoBA,IAAI,CAAJA,OAAAA,CAAvC,GAAA;AACAA,IAAAA,IAAI,CAAJA,UAAAA,GAAAA,GAAAA,MAAAA,CAAqBM,OAAO,CAA5BN,QAAAA,EAAAA,GAAAA,EAAAA,MAAAA,CAAAA,UAAAA,CAAAA;AACD;;AACDA,EAAAA,IAAI,CAAJA,EAAAA,GAAUA,IAAI,CAAdA,UAAAA;AACAA,EAAAA,IAAI,CAAJA,aAAAA,GAAqBO,eAAe,CAApCP,eAAAA;AACAA,EAAAA,IAAI,CAAJA,cAAAA,GAAsBA,IAAI,CAA1BA,cAAAA;AACAA,EAAAA,IAAI,CAAJA,eAAAA,GAAuBA,IAAI,CAA3BA,SAAAA;AACAA,EAAAA,IAAI,CAAJA,IAAAA,GAAYQ,WAAW,CAAvBR,IAAuB,CAAvBA;AACAA,EAAAA,IAAI,CAAJA,MAAAA,GAAcS,SAAS,CAACT,IAAI,CAA5BA,MAAuB,CAAvBA;AACA,SAAA,IAAA;AACD;AAGD,OAAO,SAAA,oBAAA,CAAA,OAAA,EAAuC;AAC5C,QAAMU,QAAQ,GAAGC,OAAO,CAAxB,QAAA;AACA,QAAMC,IAAI,GAAGC,iBAAiB,CAACF,OAAO,CAAR,IAAA,EAA9B,OAA8B,CAA9B;AAEA,QAAMG,KAAK,GAAX,EAAA;AACAA,EAAAA,KAAK,CAALA,IAAAA,CAAAA,IAAAA;;AAEA,SAAOA,KAAK,CAALA,MAAAA,GAAP,CAAA,EAAyB;AACvB,UAAMd,IAAI,GAAGc,KAAK,CAAlB,GAAaA,EAAb;AACA,UAAMC,QAAQ,GAAGf,IAAI,CAAJA,QAAAA,IAAjB,EAAA;;AACA,SAAK,MAAL,WAAA,IAAA,QAAA,EAAoC;AAClCa,MAAAA,iBAAiB,CAAA,WAAA,EAAc;AAACH,QAAAA;AAAD,OAAd,CAAjBG;AACAC,MAAAA,KAAK,CAALA,IAAAA,CAAAA,WAAAA;AACD;AACF;;AAED,SAAA,IAAA;AACD","sourcesContent":["import {LOD_METRIC_TYPE, TILE_REFINEMENT, TILE_TYPE} from '@loaders.gl/tiles';\n\nfunction getTileType(tile) {\n  if (!tile.contentUrl) {\n    return TILE_TYPE.EMPTY;\n  }\n\n  const contentUrl = tile.contentUrl;\n  const fileExtension = contentUrl.split('.').pop();\n  switch (fileExtension) {\n    case 'pnts':\n      return TILE_TYPE.POINTCLOUD;\n    case 'i3dm':\n    case 'b3dm':\n      return TILE_TYPE.SCENEGRAPH;\n    default:\n      return fileExtension;\n  }\n}\n\nfunction getRefine(refine) {\n  switch (refine) {\n    case 'REPLACE':\n    case 'replace':\n      return TILE_REFINEMENT.REPLACE;\n    case 'ADD':\n    case 'add':\n      return TILE_REFINEMENT.ADD;\n    default:\n      return refine;\n  }\n}\n\nexport function normalizeTileData(tile, options) {\n  if (tile.content) {\n    const contentUri = tile.content.uri || tile.content.url;\n    tile.contentUrl = `${options.basePath}/${contentUri}`;\n  }\n  tile.id = tile.contentUrl;\n  tile.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;\n  tile.lodMetricValue = tile.geometricError;\n  tile.transformMatrix = tile.transform;\n  tile.type = getTileType(tile);\n  tile.refine = getRefine(tile.refine);\n  return tile;\n}\n\n// normalize tile headers\nexport function normalizeTileHeaders(tileset) {\n  const basePath = tileset.basePath;\n  const root = normalizeTileData(tileset.root, tileset);\n\n  const stack = [];\n  stack.push(root);\n\n  while (stack.length > 0) {\n    const tile = stack.pop();\n    const children = tile.children || [];\n    for (const childHeader of children) {\n      normalizeTileData(childHeader, {basePath});\n      stack.push(childHeader);\n    }\n  }\n\n  return root;\n}\n"]},"metadata":{},"sourceType":"module"}