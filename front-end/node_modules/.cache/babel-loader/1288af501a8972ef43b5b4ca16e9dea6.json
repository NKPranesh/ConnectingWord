{"ast":null,"code":"import { assert } from '../utils/assert';\nimport GLTFScenegraph from '../api/gltf-scenegraph';\nimport { KHR_LIGHTS_PUNCTUAL } from '../gltf-utils/gltf-constants';\nexport async function decode(gltfData) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {\n    json\n  } = gltfScenegraph;\n  const extension = gltfScenegraph.getExtension(KHR_LIGHTS_PUNCTUAL);\n\n  if (extension) {\n    gltfScenegraph.json.lights = extension.lights;\n    gltfScenegraph.removeExtension(KHR_LIGHTS_PUNCTUAL);\n  }\n\n  for (const node of json.nodes || []) {\n    const nodeExtension = gltfScenegraph.getObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n\n    if (nodeExtension) {\n      node.light = nodeExtension.light;\n    }\n\n    gltfScenegraph.removeObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n  }\n}\nexport async function encode(gltfData) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {\n    json\n  } = gltfScenegraph;\n\n  if (json.lights) {\n    const extension = gltfScenegraph.addExtension(KHR_LIGHTS_PUNCTUAL);\n    assert(!extension.lights);\n    extension.lights = json.lights;\n    delete json.lights;\n  }\n\n  if (gltfScenegraph.json.lights) {\n    for (const light of gltfScenegraph.json.lights) {\n      const node = light.node;\n      gltfScenegraph.addObjectExtension(node, KHR_LIGHTS_PUNCTUAL, light);\n    }\n\n    delete gltfScenegraph.json.lights;\n  }\n}","map":{"version":3,"sources":["../../../../src/lib/extensions/KHR_lights_punctual.ts"],"names":["gltfScenegraph","json","extension","nodeExtension","node","assert","light"],"mappings":"AAKA,SAAA,MAAA,QAAA,iBAAA;AACA,OAAA,cAAA,MAAA,wBAAA;AACA,SAAA,mBAAA,QAAA,8BAAA;AAEA,OAAO,eAAA,MAAA,CAAA,QAAA,EAA6D;AAClE,QAAMA,cAAc,GAAG,IAAA,cAAA,CAAvB,QAAuB,CAAvB;AACA,QAAM;AAACC,IAAAA;AAAD,MAAN,cAAA;AAGA,QAAMC,SAAS,GAAGF,cAAc,CAAdA,YAAAA,CAAlB,mBAAkBA,CAAlB;;AACA,MAAA,SAAA,EAAe;AAEbA,IAAAA,cAAc,CAAdA,IAAAA,CAAAA,MAAAA,GAA6BE,SAAS,CAAtCF,MAAAA;AACAA,IAAAA,cAAc,CAAdA,eAAAA,CAAAA,mBAAAA;AACD;;AAID,OAAK,MAAL,IAAA,IAAmBC,IAAI,CAAJA,KAAAA,IAAnB,EAAA,EAAqC;AACnC,UAAME,aAAa,GAAGH,cAAc,CAAdA,kBAAAA,CAAAA,IAAAA,EAAtB,mBAAsBA,CAAtB;;AACA,QAAA,aAAA,EAAmB;AAEjBI,MAAAA,IAAI,CAAJA,KAAAA,GAAaD,aAAa,CAA1BC,KAAAA;AACD;;AACDJ,IAAAA,cAAc,CAAdA,qBAAAA,CAAAA,IAAAA,EAAAA,mBAAAA;AACD;AACF;AAGD,OAAO,eAAA,MAAA,CAAA,QAAA,EAA+C;AACpD,QAAMA,cAAc,GAAG,IAAA,cAAA,CAAvB,QAAuB,CAAvB;AACA,QAAM;AAACC,IAAAA;AAAD,MAAN,cAAA;;AAGA,MAAIA,IAAI,CAAR,MAAA,EAAiB;AACf,UAAMC,SAAS,GAAGF,cAAc,CAAdA,YAAAA,CAAlB,mBAAkBA,CAAlB;AAEAK,IAAAA,MAAM,CAAC,CAACH,SAAS,CAAjBG,MAAM,CAANA;AAEAH,IAAAA,SAAS,CAATA,MAAAA,GAAmBD,IAAI,CAAvBC,MAAAA;AAEA,WAAOD,IAAI,CAAX,MAAA;AACD;;AAKD,MAAID,cAAc,CAAdA,IAAAA,CAAJ,MAAA,EAAgC;AAE9B,SAAK,MAAL,KAAA,IAAoBA,cAAc,CAAdA,IAAAA,CAApB,MAAA,EAAgD;AAC9C,YAAMI,IAAI,GAAGE,KAAK,CAAlB,IAAA;AACAN,MAAAA,cAAc,CAAdA,kBAAAA,CAAAA,IAAAA,EAAAA,mBAAAA,EAAAA,KAAAA;AACD;;AAED,WAAOA,cAAc,CAAdA,IAAAA,CAAP,MAAA;AACD;AACF","sourcesContent":["// GLTF EXTENSION: KHR_lights_punctual\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n\nimport type {GLTF} from '../types/gltf-types';\n\nimport {assert} from '../utils/assert';\nimport GLTFScenegraph from '../api/gltf-scenegraph';\nimport {KHR_LIGHTS_PUNCTUAL} from '../gltf-utils/gltf-constants';\n\nexport async function decode(gltfData: {json: GLTF}): Promise<void> {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // Move the light array out of the extension and remove the extension\n  const extension = gltfScenegraph.getExtension(KHR_LIGHTS_PUNCTUAL);\n  if (extension) {\n    // @ts-ignore\n    gltfScenegraph.json.lights = extension.lights;\n    gltfScenegraph.removeExtension(KHR_LIGHTS_PUNCTUAL);\n  }\n\n  // Any nodes that have the extension, add lights field pointing to light object\n  // and remove the extension\n  for (const node of json.nodes || []) {\n    const nodeExtension = gltfScenegraph.getObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n    if (nodeExtension) {\n      // @ts-ignore\n      node.light = nodeExtension.light;\n    }\n    gltfScenegraph.removeObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n  }\n}\n\n// Move the light ar ray out of the extension and remove the extension\nexport async function encode(gltfData): Promise<void> {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // @ts-ignore\n  if (json.lights) {\n    const extension = gltfScenegraph.addExtension(KHR_LIGHTS_PUNCTUAL);\n    // @ts-ignore\n    assert(!extension.lights);\n    // @ts-ignore\n    extension.lights = json.lights;\n    // @ts-ignore\n    delete json.lights;\n  }\n\n  // Any nodes that have lights field pointing to light object\n  // add the extension\n  // @ts-ignore\n  if (gltfScenegraph.json.lights) {\n    // @ts-ignore\n    for (const light of gltfScenegraph.json.lights) {\n      const node = light.node;\n      gltfScenegraph.addObjectExtension(node, KHR_LIGHTS_PUNCTUAL, light);\n    }\n    // @ts-ignore\n    delete gltfScenegraph.json.lights;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}