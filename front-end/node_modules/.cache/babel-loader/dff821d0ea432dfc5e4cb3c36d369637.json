{"ast":null,"code":"import { isWebGL2, assertWebGLContext } from '@luma.gl/gltools';\nimport { lumaStats } from '../init';\nimport { getKey, getKeyValue } from '../webgl-utils/constants-to-keys';\nimport { assert } from '../utils/assert';\nimport { uid } from '../utils/utils';\nimport { stubRemovedMethods } from '../utils/stub-methods';\nconst ERR_RESOURCE_METHOD_UNDEFINED = 'Resource subclass must define virtual methods';\nexport default class Resource {\n  constructor(gl) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assertWebGLContext(gl);\n    const {\n      id,\n      userData = {}\n    } = opts;\n    this.gl = gl;\n    this.gl2 = gl;\n    this.id = id || uid(this.constructor.name);\n    this.userData = userData;\n    this._bound = false;\n    this._handle = opts.handle;\n\n    if (this._handle === undefined) {\n      this._handle = this._createHandle();\n    }\n\n    this.byteLength = 0;\n\n    this._addStats();\n  }\n\n  toString() {\n    return `${this.constructor.name}(${this.id})`;\n  }\n\n  get handle() {\n    return this._handle;\n  }\n\n  delete() {\n    let {\n      deleteChildren = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    const children = this._handle && this._deleteHandle(this._handle);\n\n    if (this._handle) {\n      this._removeStats();\n    }\n\n    this._handle = null;\n\n    if (children && deleteChildren) {\n      children.filter(Boolean).forEach(child => child.delete());\n    }\n\n    return this;\n  }\n\n  bind() {\n    let funcOrHandle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.handle;\n\n    if (typeof funcOrHandle !== 'function') {\n      this._bindHandle(funcOrHandle);\n\n      return this;\n    }\n\n    let value;\n\n    if (!this._bound) {\n      this._bindHandle(this.handle);\n\n      this._bound = true;\n      value = funcOrHandle();\n      this._bound = false;\n\n      this._bindHandle(null);\n    } else {\n      value = funcOrHandle();\n    }\n\n    return value;\n  }\n\n  unbind() {\n    this.bind(null);\n  }\n\n  getParameter(pname) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n    const parameters = this.constructor.PARAMETERS || {};\n    const parameter = parameters[pname];\n\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n      const parameterAvailable = (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        const webgl1Default = parameter.webgl1;\n        const webgl2Default = 'webgl2' in parameter ? parameter.webgl2 : parameter.webgl1;\n        const defaultValue = isWebgl2 ? webgl2Default : webgl1Default;\n        return defaultValue;\n      }\n    }\n\n    return this._getParameter(pname, opts);\n  }\n\n  getParameters() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      parameters,\n      keys\n    } = options;\n    const PARAMETERS = this.constructor.PARAMETERS || {};\n    const isWebgl2 = isWebGL2(this.gl);\n    const values = {};\n    const parameterKeys = parameters || Object.keys(PARAMETERS);\n\n    for (const pname of parameterKeys) {\n      const parameter = PARAMETERS[pname];\n      const parameterAvailable = parameter && (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (parameterAvailable) {\n        const key = keys ? getKey(this.gl, pname) : pname;\n        values[key] = this.getParameter(pname, options);\n\n        if (keys && parameter.type === 'GLenum') {\n          values[key] = getKey(this.gl, values[key]);\n        }\n      }\n    }\n\n    return values;\n  }\n\n  setParameter(pname, value) {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n    const parameters = this.constructor.PARAMETERS || {};\n    const parameter = parameters[pname];\n\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n      const parameterAvailable = (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        throw new Error('Parameter not available on this platform');\n      }\n\n      if (parameter.type === 'GLenum') {\n        value = getKeyValue(value);\n      }\n    }\n\n    this._setParameter(pname, value);\n\n    return this;\n  }\n\n  setParameters(parameters) {\n    for (const pname in parameters) {\n      this.setParameter(pname, parameters[pname]);\n    }\n\n    return this;\n  }\n\n  stubRemovedMethods(className, version, methodNames) {\n    return stubRemovedMethods(this, className, version, methodNames);\n  }\n\n  initialize(opts) {}\n\n  _createHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _deleteHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _bindHandle(handle) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _getOptsFromHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _getParameter(pname, opts) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _setParameter(pname, value) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _context() {\n    this.gl.luma = this.gl.luma || {};\n    return this.gl.luma;\n  }\n\n  _addStats() {\n    const name = this.constructor.name;\n    const stats = lumaStats.get('Resource Counts');\n    stats.get('Resources Created').incrementCount();\n    stats.get(`${name}s Created`).incrementCount();\n    stats.get(`${name}s Active`).incrementCount();\n  }\n\n  _removeStats() {\n    const name = this.constructor.name;\n    const stats = lumaStats.get('Resource Counts');\n    stats.get(`${name}s Active`).decrementCount();\n  }\n\n  _trackAllocatedMemory(bytes) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.constructor.name;\n    const stats = lumaStats.get('Memory Usage');\n    stats.get('GPU Memory').addCount(bytes);\n    stats.get(`${name} Memory`).addCount(bytes);\n    this.byteLength = bytes;\n  }\n\n  _trackDeallocatedMemory() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.constructor.name;\n    const stats = lumaStats.get('Memory Usage');\n    stats.get('GPU Memory').subtractCount(this.byteLength);\n    stats.get(`${name} Memory`).subtractCount(this.byteLength);\n    this.byteLength = 0;\n  }\n\n}","map":{"version":3,"sources":["../../../src/classes/resource.js"],"names":["ERR_RESOURCE_METHOD_UNDEFINED","constructor","opts","assertWebGLContext","userData","id","uid","toString","name","handle","delete","deleteChildren","children","child","bind","funcOrHandle","value","unbind","getParameter","pname","getKeyValue","assert","parameters","parameter","isWebgl2","isWebGL2","parameterAvailable","webgl1Default","webgl2Default","defaultValue","getParameters","options","keys","PARAMETERS","values","parameterKeys","Object","key","getKey","setParameter","setParameters","stubRemovedMethods","initialize","_createHandle","_deleteHandle","_bindHandle","_getOptsFromHandle","_getParameter","_setParameter","_context","_addStats","stats","lumaStats","_removeStats","_trackAllocatedMemory","_trackDeallocatedMemory"],"mappings":"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","sourcesContent":["import {isWebGL2, assertWebGLContext} from '@luma.gl/gltools';\nimport {lumaStats} from '../init';\nimport {getKey, getKeyValue} from '../webgl-utils/constants-to-keys';\nimport {assert} from '../utils/assert';\nimport {uid} from '../utils/utils';\nimport {stubRemovedMethods} from '../utils/stub-methods';\n\nconst ERR_RESOURCE_METHOD_UNDEFINED = 'Resource subclass must define virtual methods';\n\n// TODO - Handle context loss\n// function glGetContextLossCount(gl) {\n//   return (gl.luma && gl.luma.glCount) || 0;\n// }\n\nexport default class Resource {\n  constructor(gl, opts = {}) {\n    assertWebGLContext(gl);\n\n    const {id, userData = {}} = opts;\n    this.gl = gl;\n    // @ts-ignore\n    this.gl2 = gl;\n    // this.ext = polyfillContext(gl);\n    this.id = id || uid(this.constructor.name);\n    this.userData = userData;\n    this._bound = false;\n\n    // Set the handle\n    // If handle was provided, use it, otherwise create a new handle\n\n    // TODO - Stores the handle with context loss information\n    // this.glCount = glGetContextLossCount(this.gl);\n\n    // Default VertexArray needs to be created with null handle, so compare against undefined\n    this._handle = opts.handle;\n    if (this._handle === undefined) {\n      this._handle = this._createHandle();\n    }\n\n    // Only meaningful for resources that allocate GPU memory\n    this.byteLength = 0;\n\n    this._addStats();\n  }\n\n  toString() {\n    return `${this.constructor.name}(${this.id})`;\n  }\n\n  get handle() {\n    // TODO - Add context loss handling\n    // Will regenerate and reinitialize the handle if necessary\n    // const glCount = glGetContextLossCount(this.gl);\n    // if (this.glCount !== glCount) {\n    //   this._handle = this._createHandle(this.opts);\n    //   this._glCount = glCount;\n    //   // Reinitialize object\n    //   this.initialize(this.opts);\n    // }\n    return this._handle;\n  }\n\n  delete({deleteChildren = false} = {}) {\n    // Delete this object, and get refs to any children\n    // @ts-ignore\n    const children = this._handle && this._deleteHandle(this._handle);\n    if (this._handle) {\n      this._removeStats();\n    }\n    this._handle = null;\n\n    // Optionally, recursively delete the children\n    // @ts-ignore\n    if (children && deleteChildren) {\n      // @ts-ignore\n      children.filter(Boolean).forEach(child => child.delete());\n    }\n\n    return this;\n  }\n\n  bind(funcOrHandle = this.handle) {\n    if (typeof funcOrHandle !== 'function') {\n      this._bindHandle(funcOrHandle);\n      return this;\n    }\n\n    let value;\n\n    if (!this._bound) {\n      this._bindHandle(this.handle);\n      this._bound = true;\n\n      value = funcOrHandle();\n\n      this._bound = false;\n      this._bindHandle(null);\n    } else {\n      value = funcOrHandle();\n    }\n\n    return value;\n  }\n\n  unbind() {\n    this.bind(null);\n  }\n\n  /**\n   * Query a Resource parameter\n   *\n   * @param {GLenum} pname\n   * @return {GLint|GLfloat|GLenum} param\n   */\n  getParameter(pname, opts = {}) {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n\n    // @ts-ignore\n    const parameters = this.constructor.PARAMETERS || {};\n\n    // Use parameter definitions to handle unsupported parameters\n    const parameter = parameters[pname];\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n\n      // Check if we can query for this parameter\n      const parameterAvailable =\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        const webgl1Default = parameter.webgl1;\n        const webgl2Default = 'webgl2' in parameter ? parameter.webgl2 : parameter.webgl1;\n        const defaultValue = isWebgl2 ? webgl2Default : webgl1Default;\n        return defaultValue;\n      }\n    }\n\n    // If unknown parameter - Could be a valid parameter not covered by PARAMS\n    // Attempt to query for it and let WebGL report errors\n    return this._getParameter(pname, opts);\n  }\n\n  // Many resources support a getParameter call -\n  // getParameters will get all parameters - slow but useful for debugging\n  // eslint-disable-next-line complexity\n  getParameters(options = {}) {\n    const {parameters, keys} = options;\n\n    // Get parameter definitions for this Resource\n    // @ts-ignore\n    const PARAMETERS = this.constructor.PARAMETERS || {};\n\n    const isWebgl2 = isWebGL2(this.gl);\n\n    const values = {};\n\n    // Query all parameters if no list provided\n    const parameterKeys = parameters || Object.keys(PARAMETERS);\n\n    // WEBGL limits\n    for (const pname of parameterKeys) {\n      const parameter = PARAMETERS[pname];\n\n      // Check if this parameter is available on this platform\n      const parameterAvailable =\n        parameter &&\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (parameterAvailable) {\n        const key = keys ? getKey(this.gl, pname) : pname;\n        values[key] = this.getParameter(pname, options);\n        if (keys && parameter.type === 'GLenum') {\n          values[key] = getKey(this.gl, values[key]);\n        }\n      }\n    }\n\n    return values;\n  }\n\n  /**\n   * Update a Resource setting\n   *\n   * @todo - cache parameter to avoid issuing WebGL calls?\n   *\n   * @param {string} pname - parameter (GL constant, value or key)\n   * @param {GLint|GLfloat|GLenum} value\n   * @return {Resource} returns self to enable chaining\n   */\n  setParameter(pname, value) {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n\n    // @ts-ignore\n    const parameters = this.constructor.PARAMETERS || {};\n\n    const parameter = parameters[pname];\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n\n      // Check if this parameter is available on this platform\n      const parameterAvailable =\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        throw new Error('Parameter not available on this platform');\n      }\n\n      // Handle string keys\n      if (parameter.type === 'GLenum') {\n        value = getKeyValue(value);\n      }\n    }\n\n    // If unknown parameter - Could be a valid parameter not covered by PARAMS\n    // attempt to set it and let WebGL report errors\n    this._setParameter(pname, value);\n    return this;\n  }\n\n  /*\n   * Batch update resource parameters\n   * Assumes the subclass supports a setParameter call\n   */\n  setParameters(parameters) {\n    for (const pname in parameters) {\n      this.setParameter(pname, parameters[pname]);\n    }\n    return this;\n  }\n\n  // Install stubs for removed methods\n  stubRemovedMethods(className, version, methodNames) {\n    return stubRemovedMethods(this, className, version, methodNames);\n  }\n\n  // PUBLIC VIRTUAL METHODS\n  initialize(opts) {}\n\n  // PROTECTED METHODS - These must be overridden by subclass\n  _createHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _deleteHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _bindHandle(handle) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _getOptsFromHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  /** @returns {number} */\n  _getParameter(pname, opts) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _setParameter(pname, value) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  // PRIVATE METHODS\n\n  _context() {\n    this.gl.luma = this.gl.luma || {};\n    return this.gl.luma;\n  }\n\n  _addStats() {\n    const name = this.constructor.name;\n    const stats = lumaStats.get('Resource Counts');\n\n    stats.get('Resources Created').incrementCount();\n    stats.get(`${name}s Created`).incrementCount();\n    stats.get(`${name}s Active`).incrementCount();\n  }\n\n  _removeStats() {\n    const name = this.constructor.name;\n    const stats = lumaStats.get('Resource Counts');\n\n    stats.get(`${name}s Active`).decrementCount();\n  }\n\n  _trackAllocatedMemory(bytes, name = this.constructor.name) {\n    const stats = lumaStats.get('Memory Usage');\n\n    stats.get('GPU Memory').addCount(bytes);\n    stats.get(`${name} Memory`).addCount(bytes);\n    this.byteLength = bytes;\n  }\n\n  _trackDeallocatedMemory(name = this.constructor.name) {\n    const stats = lumaStats.get('Memory Usage');\n\n    stats.get('GPU Memory').subtractCount(this.byteLength);\n    stats.get(`${name} Memory`).subtractCount(this.byteLength);\n    this.byteLength = 0;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}