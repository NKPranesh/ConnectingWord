{"ast":null,"code":"import { log } from '@deck.gl/core';\nimport IconLayer from '../../icon-layer/icon-layer';\nimport fs from './multi-icon-layer-fragment.glsl';\nconst DEFAULT_BUFFER = 192.0 / 256;\nconst EMPTY_ARRAY = [];\nconst defaultProps = {\n  getIconOffsets: {\n    type: 'accessor',\n    value: x => x.offsets\n  },\n  alphaCutoff: 0.001,\n  smoothing: 0.1,\n  outlineWidth: 0,\n  outlineColor: {\n    type: 'color',\n    value: [0, 0, 0, 255]\n  }\n};\nexport default class MultiIconLayer extends IconLayer {\n  getShaders() {\n    return { ...super.getShaders(),\n      fs\n    };\n  }\n\n  initializeState() {\n    super.initializeState();\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIconOffsets'\n      },\n      instancePickingColors: {\n        type: 5121,\n        size: 3,\n        accessor: (object, _ref) => {\n          let {\n            index,\n            target: value\n          } = _ref;\n          return this.encodePickingColor(index, value);\n        }\n      }\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      oldProps\n    } = params;\n    let {\n      outlineColor\n    } = props;\n\n    if (outlineColor !== oldProps.outlineColor) {\n      outlineColor = outlineColor.map(x => x / 255);\n      outlineColor[3] = Number.isFinite(outlineColor[3]) ? outlineColor[3] : 1;\n      this.setState({\n        outlineColor\n      });\n    }\n\n    if (!props.sdf && props.outlineWidth) {\n      log.warn(\"\".concat(this.id, \": fontSettings.sdf is required to render outline\"))();\n    }\n  }\n\n  draw(params) {\n    const {\n      sdf,\n      smoothing,\n      outlineWidth\n    } = this.props;\n    const {\n      outlineColor\n    } = this.state;\n    params.uniforms = { ...params.uniforms,\n      buffer: DEFAULT_BUFFER,\n      outlineBuffer: outlineWidth ? Math.max(smoothing, DEFAULT_BUFFER * (1 - outlineWidth)) : -1,\n      gamma: smoothing,\n      sdf: Boolean(sdf),\n      outlineColor\n    };\n    super.draw(params);\n  }\n\n  getInstanceOffset(icons) {\n    return icons ? Array.from(icons).map(icon => super.getInstanceOffset(icon)) : EMPTY_ARRAY;\n  }\n\n  getInstanceColorMode(icons) {\n    return 1;\n  }\n\n  getInstanceIconFrame(icons) {\n    return icons ? Array.from(icons).map(icon => super.getInstanceIconFrame(icon)) : EMPTY_ARRAY;\n  }\n\n}\nMultiIconLayer.layerName = 'MultiIconLayer';\nMultiIconLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../../src/text-layer/multi-icon-layer/multi-icon-layer.js"],"names":["DEFAULT_BUFFER","EMPTY_ARRAY","defaultProps","getIconOffsets","type","value","x","offsets","alphaCutoff","smoothing","outlineWidth","outlineColor","getShaders","fs","initializeState","attributeManager","instanceOffsets","size","accessor","instancePickingColors","target","updateState","oldProps","Number","props","log","draw","params","buffer","outlineBuffer","Math","gamma","sdf","Boolean","getInstanceOffset","icons","Array","icon","getInstanceColorMode","getInstanceIconFrame","MultiIconLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {log} from '@deck.gl/core';\nimport IconLayer from '../../icon-layer/icon-layer';\n\nimport fs from './multi-icon-layer-fragment.glsl';\n\n// TODO expose as layer properties\nconst DEFAULT_BUFFER = 192.0 / 256;\nconst EMPTY_ARRAY = [];\n\nconst defaultProps = {\n  getIconOffsets: {type: 'accessor', value: x => x.offsets},\n  alphaCutoff: 0.001,\n  smoothing: 0.1,\n  outlineWidth: 0,\n  outlineColor: {type: 'color', value: [0, 0, 0, 255]}\n};\n\nexport default class MultiIconLayer extends IconLayer {\n  getShaders() {\n    return {...super.getShaders(), fs};\n  }\n\n  initializeState() {\n    super.initializeState();\n\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIconOffsets'\n      },\n      instancePickingColors: {\n        type: GL.UNSIGNED_BYTE,\n        size: 3,\n        accessor: (object, {index, target: value}) => this.encodePickingColor(index, value)\n      }\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {props, oldProps} = params;\n    let {outlineColor} = props;\n\n    if (outlineColor !== oldProps.outlineColor) {\n      outlineColor = outlineColor.map(x => x / 255);\n      outlineColor[3] = Number.isFinite(outlineColor[3]) ? outlineColor[3] : 1;\n\n      this.setState({\n        outlineColor\n      });\n    }\n    if (!props.sdf && props.outlineWidth) {\n      log.warn(`${this.id}: fontSettings.sdf is required to render outline`)();\n    }\n  }\n\n  draw(params) {\n    const {sdf, smoothing, outlineWidth} = this.props;\n    const {outlineColor} = this.state;\n\n    params.uniforms = {\n      ...params.uniforms,\n      // Refer the following doc about gamma and buffer\n      // https://blog.mapbox.com/drawing-text-with-signed-distance-fields-in-mapbox-gl-b0933af6f817\n      buffer: DEFAULT_BUFFER,\n      outlineBuffer: outlineWidth ? Math.max(smoothing, DEFAULT_BUFFER * (1 - outlineWidth)) : -1,\n      gamma: smoothing,\n      sdf: Boolean(sdf),\n      outlineColor\n    };\n    super.draw(params);\n  }\n\n  getInstanceOffset(icons) {\n    return icons ? Array.from(icons).map(icon => super.getInstanceOffset(icon)) : EMPTY_ARRAY;\n  }\n\n  getInstanceColorMode(icons) {\n    return 1; // mask\n  }\n\n  getInstanceIconFrame(icons) {\n    return icons ? Array.from(icons).map(icon => super.getInstanceIconFrame(icon)) : EMPTY_ARRAY;\n  }\n}\n\nMultiIconLayer.layerName = 'MultiIconLayer';\nMultiIconLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}