{"ast":null,"code":"import { log } from '@luma.gl/webgl';\nimport Display from './display';\nimport { createEnterVRButton } from './vr-button';\nexport default class VRDisplay extends Display {\n  static isSupported() {\n    return typeof navigator !== 'undefined' && 'getVRDisplays' in navigator && 'VRFrameData' in window;\n  }\n\n  constructor(props) {\n    super(props);\n    this._vrSupported = VRDisplay.isSupported();\n\n    if (this._vrSupported) {\n      this.vrFrameData = new window.VRFrameData();\n      this.vrPresenting = false;\n      this.vrFrame = false;\n      window.addEventListener('vrdisplaypresentchange', this._vrDisplayPresentChange.bind(this));\n    }\n  }\n\n  delete() {\n    super.delete();\n\n    this._removeVRButton();\n  }\n\n  getViews(options) {\n    if (this._vrSupported) {\n      this._addVRButton();\n    }\n\n    if (this.vrPresenting && this.vrFrame) {\n      this.vrDisplay.getFrameData(this.vrFrameData);\n      const {\n        leftProjectionMatrix,\n        leftViewMatrix,\n        rightProjectionMatrix,\n        rightViewMatrix\n      } = this.vrFrameData;\n      const {\n        width,\n        height\n      } = options;\n      return [{\n        displayEye: 'left',\n        projectionMatrix: leftProjectionMatrix,\n        viewMatrix: leftViewMatrix,\n        params: {\n          viewport: [0, 0, width * 0.5, height],\n          scissor: [0, 0, width * 0.5, height],\n          scissorTest: true\n        }\n      }, {\n        displayEye: 'right',\n        projectionMatrix: rightProjectionMatrix,\n        viewMatrix: rightViewMatrix,\n        params: {\n          viewport: [width * 0.5, 0, width * 0.5, height],\n          scissor: [width * 0.5, 0, width * 0.5, height],\n          scissorTest: true\n        }\n      }];\n    }\n\n    return super.getViews(options);\n  }\n\n  submitFrame() {\n    if (this.vrPresenting && this.vrFrame) {\n      this.vrDisplay.submitFrame();\n      return true;\n    }\n\n    return false;\n  }\n\n  requestAnimationFrame(renderFrame) {\n    if (this.vrPresenting) {\n      this.vrDisplay.requestAnimationFrame(() => {\n        this.vrFrame = true;\n        renderFrame();\n        this.vrFrame = false;\n      });\n      return true;\n    }\n\n    return false;\n  }\n\n  async _addVRButton() {\n    if (this.vrButton) {\n      return;\n    }\n\n    const canvas = this._getCanvas();\n\n    if (!canvas) {\n      return;\n    }\n\n    const displays = await navigator.getVRDisplays();\n\n    if (displays && displays.length) {\n      log.info(2, 'Found VR Displays', displays)();\n      this.vrDisplay = displays[0];\n      this.vrButton = createEnterVRButton({\n        canvas,\n        title: `Enter VR (${this.vrDisplay.displayName})`\n      });\n\n      this.vrButton.onclick = () => this._startDisplay();\n    }\n  }\n\n  _getCanvas() {\n    return this.animationLoop.canvas || this.animationLoop.gl && this.animationLoop.gl.canvas;\n  }\n\n  _removeVRButton() {\n    if (this.vrButton) {}\n  }\n\n  _startDisplay() {\n    this.vrDisplay.requestPresent([{\n      source: this._getCanvas()\n    }]);\n  }\n\n  _vrDisplayPresentChange() {\n    if (this.vrDisplay.isPresenting) {\n      log.info(2, 'Entering VR')();\n      this.vrPresenting = true;\n      this.vrButton.style.display = 'none';\n    } else {\n      log.info(2, 'Exiting VR')();\n      this.vrPresenting = false;\n      this.vrButton.style.display = 'block';\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/webvr/vr-display.js"],"names":["isSupported","constructor","VRDisplay","window","delete","getViews","rightViewMatrix","height","displayEye","projectionMatrix","viewMatrix","params","viewport","width","scissor","scissorTest","submitFrame","requestAnimationFrame","renderFrame","_addVRButton","canvas","displays","navigator","log","createEnterVRButton","title","displayName","_getCanvas","_removeVRButton","_startDisplay","source","_vrDisplayPresentChange"],"mappings":"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","sourcesContent":["import {log} from '@luma.gl/webgl';\nimport Display from './display';\nimport {createEnterVRButton} from './vr-button';\n\nexport default class VRDisplay extends Display {\n  static isSupported() {\n    return (\n      typeof navigator !== 'undefined' && 'getVRDisplays' in navigator && 'VRFrameData' in window\n    );\n  }\n\n  constructor(props) {\n    super(props);\n\n    this._vrSupported = VRDisplay.isSupported();\n    if (this._vrSupported) {\n      this.vrFrameData = new window.VRFrameData();\n      this.vrPresenting = false;\n      this.vrFrame = false;\n      window.addEventListener('vrdisplaypresentchange', this._vrDisplayPresentChange.bind(this));\n    }\n  }\n\n  delete() {\n    super.delete();\n    this._removeVRButton();\n  }\n\n  getViews(options) {\n    if (this._vrSupported) {\n      this._addVRButton();\n    }\n\n    // Need both vrPresenting and vrFrame\n    // to avoid race conditions when we exit VR\n    // after we schedule an animation frame\n    if (this.vrPresenting && this.vrFrame) {\n      this.vrDisplay.getFrameData(this.vrFrameData);\n\n      const {\n        leftProjectionMatrix,\n        leftViewMatrix,\n        rightProjectionMatrix,\n        rightViewMatrix\n      } = this.vrFrameData;\n\n      const {width, height} = options;\n\n      return [\n        {\n          displayEye: 'left',\n          projectionMatrix: leftProjectionMatrix,\n          viewMatrix: leftViewMatrix,\n          params: {\n            viewport: [0, 0, width * 0.5, height],\n            scissor: [0, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        },\n        {\n          displayEye: 'right',\n          projectionMatrix: rightProjectionMatrix,\n          viewMatrix: rightViewMatrix,\n          params: {\n            viewport: [width * 0.5, 0, width * 0.5, height],\n            scissor: [width * 0.5, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        }\n      ];\n    }\n\n    return super.getViews(options);\n  }\n\n  submitFrame() {\n    if (this.vrPresenting && this.vrFrame) {\n      this.vrDisplay.submitFrame();\n      return true;\n    }\n\n    return false;\n  }\n\n  requestAnimationFrame(renderFrame) {\n    if (this.vrPresenting) {\n      this.vrDisplay.requestAnimationFrame(() => {\n        this.vrFrame = true;\n        renderFrame();\n        this.vrFrame = false;\n      });\n\n      return true;\n    }\n\n    return false;\n  }\n\n  // PRIVATE\n\n  // TODO: Consider resizing canvas to match vrDisplay.getEyeParameters()\n  // TODO: Maybe allow to select display?\n  async _addVRButton() {\n    if (this.vrButton) {\n      return;\n    }\n\n    const canvas = this._getCanvas();\n    if (!canvas) {\n      return;\n    }\n\n    const displays = await navigator.getVRDisplays();\n    if (displays && displays.length) {\n      log.info(2, 'Found VR Displays', displays)();\n\n      this.vrDisplay = displays[0];\n      this.vrButton = createEnterVRButton({\n        canvas,\n        title: `Enter VR (${this.vrDisplay.displayName})`\n      });\n      this.vrButton.onclick = () => this._startDisplay();\n    }\n  }\n\n  _getCanvas() {\n    return this.animationLoop.canvas || (this.animationLoop.gl && this.animationLoop.gl.canvas);\n  }\n\n  _removeVRButton() {\n    if (this.vrButton) {\n      // TODO\n    }\n  }\n\n  _startDisplay() {\n    // @ts-ignore\n    this.vrDisplay.requestPresent([\n      {\n        source: this._getCanvas()\n      }\n    ]);\n  }\n\n  _vrDisplayPresentChange() {\n    if (this.vrDisplay.isPresenting) {\n      log.info(2, 'Entering VR')();\n\n      this.vrPresenting = true;\n      this.vrButton.style.display = 'none';\n    } else {\n      log.info(2, 'Exiting VR')();\n\n      this.vrPresenting = false;\n      this.vrButton.style.display = 'block';\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}