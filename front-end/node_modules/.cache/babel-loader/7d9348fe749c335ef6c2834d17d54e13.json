{"ast":null,"code":"import { uid, assert } from '@luma.gl/webgl';\nexport const DRAW_MODE = {\n  POINTS: 0x0000,\n  LINES: 0x0001,\n  LINE_LOOP: 0x0002,\n  LINE_STRIP: 0x0003,\n  TRIANGLES: 0x0004,\n  TRIANGLE_STRIP: 0x0005,\n  TRIANGLE_FAN: 0x0006\n};\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n  }\n\n  get mode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  getAttributes() {\n    return this.indices ? {\n      indices: this.indices,\n      ...this.attributes\n    } : this.attributes;\n  }\n\n  _print(attributeName) {\n    return `Geometry ${this.id} attribute ${attributeName}`;\n  }\n\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {\n        value: indices,\n        size: 1\n      } : indices;\n    }\n\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n      attribute = ArrayBuffer.isView(attribute) ? {\n        value: attribute\n      } : attribute;\n      assert(ArrayBuffer.isView(attribute.value), `${this._print(attributeName)}: must be typed array or object with value as typed array`);\n\n      if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n        attribute.size = 3;\n      }\n\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n\n    return this;\n  }\n\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n\n    let vertexCount = Infinity;\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {\n        value,\n        size,\n        constant\n      } = attribute;\n\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n\n}","map":{"version":3,"sources":["../../../src/geometry/geometry.js"],"names":["DRAW_MODE","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","constructor","props","id","uid","drawMode","attributes","indices","vertexCount","mode","getVertexCount","getAttributes","_print","attributeName","_setAttributes","value","size","attribute","assert","ArrayBuffer","Object","_calculateVertexCount","constant","Math","Number"],"mappings":"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","sourcesContent":["import {uid, assert} from '@luma.gl/webgl';\n\n// Rendering primitives - specify how to extract primitives from vertices.\n// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants\nexport const DRAW_MODE = {\n  POINTS: 0x0000, // draw single points.\n  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.\n  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.\n  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last\n  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.\n  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.\n  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.\n  // Each vertex connects to the previous and the first vertex in the fan.\n};\n\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n\n  constructor(props = {}) {\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n\n    // stubRemovedMethods(this, [\n    //   'setNeedsRedraw', 'needsRedraw', 'setAttributes'\n    // ], 'Immutable');\n\n    // stubRemovedMethods(this, [\n    //   'hasAttribute', 'getAttribute', 'getArray'\n    // ], 'Use geometry.attributes and geometry.indices');\n\n    // deprecateMethods(this, ['getAttributes'])\n  }\n\n  get mode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  // Return an object with all attributes plus indices added as a field.\n  getAttributes() {\n    return this.indices ? {indices: this.indices, ...this.attributes} : this.attributes;\n  }\n\n  // PRIVATE\n\n  _print(attributeName) {\n    return `Geometry ${this.id} attribute ${attributeName}`;\n  }\n\n  // Attribute\n  // value: typed array\n  // type: indices, vertices, uvs\n  // size: elements per vertex\n  // target: WebGL buffer type (string or constant)\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {value: indices, size: 1} : indices;\n    }\n\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n\n      // Wrap \"unwrapped\" arrays and try to autodetect their type\n      attribute = ArrayBuffer.isView(attribute) ? {value: attribute} : attribute;\n\n      assert(\n        ArrayBuffer.isView(attribute.value),\n        `${this._print(attributeName)}: must be typed array or object with value as typed array`\n      );\n\n      if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n        attribute.size = 3;\n      }\n\n      // Move indices to separate field\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n\n    return this;\n  }\n\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n    let vertexCount = Infinity;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {value, size, constant} = attribute;\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}