{"ast":null,"code":"import DoublyLinkedListNode from '../utils/doubly-linked-list-node';\nexport default class DoublyLinkedList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n    this._length = 0;\n  }\n\n  get length() {\n    return this._length;\n  }\n\n  add(item) {\n    const node = new DoublyLinkedListNode(item, this.tail, null);\n\n    if (this.tail) {\n      this.tail.next = node;\n      this.tail = node;\n    } else {\n      this.head = node;\n      this.tail = node;\n    }\n\n    ++this._length;\n    return node;\n  }\n\n  remove(node) {\n    if (!node) {\n      return;\n    }\n\n    if (node.previous && node.next) {\n      node.previous.next = node.next;\n      node.next.previous = node.previous;\n    } else if (node.previous) {\n      node.previous.next = null;\n      this.tail = node.previous;\n    } else if (node.next) {\n      node.next.previous = null;\n      this.head = node.next;\n    } else {\n      this.head = null;\n      this.tail = null;\n    }\n\n    node.next = null;\n    node.previous = null;\n    --this._length;\n  }\n\n  splice(node, nextNode) {\n    if (node === nextNode) {\n      return;\n    }\n\n    this.remove(nextNode);\n\n    this._insert(node, nextNode);\n  }\n\n  _insert(node, nextNode) {\n    const oldNodeNext = node.next;\n    node.next = nextNode;\n\n    if (this.tail === node) {\n      this.tail = nextNode;\n    } else {\n      oldNodeNext.previous = nextNode;\n    }\n\n    nextNode.next = oldNodeNext;\n    nextNode.previous = node;\n    ++this._length;\n  }\n\n}","map":{"version":3,"sources":["../../../src/utils/doubly-linked-list.js"],"names":["constructor","length","add","node","remove","splice","_insert","oldNodeNext","nextNode"],"mappings":"AAGA,OAAA,oBAAA,MAAA,kCAAA;AAOA,eAAe,MAAA,gBAAA,CAAuB;AACpCA,EAAAA,WAAW,GAAG;AACZ,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,OAAA,GAAA,CAAA;AACD;;AAES,MAANC,MAAM,GAAG;AACX,WAAO,KAAP,OAAA;AACD;;AAODC,EAAAA,GAAG,CAAA,IAAA,EAAO;AACR,UAAMC,IAAI,GAAG,IAAA,oBAAA,CAAA,IAAA,EAA+B,KAA/B,IAAA,EAAb,IAAa,CAAb;;AAEA,QAAI,KAAJ,IAAA,EAAe;AACb,WAAA,IAAA,CAAA,IAAA,GAAA,IAAA;AACA,WAAA,IAAA,GAAA,IAAA;AAFF,KAAA,MAGO;AACL,WAAA,IAAA,GAAA,IAAA;AACA,WAAA,IAAA,GAAA,IAAA;AACD;;AAED,MAAE,KAAF,OAAA;AAEA,WAAA,IAAA;AACD;;AAMDC,EAAAA,MAAM,CAAA,IAAA,EAAO;AACX,QAAI,CAAJ,IAAA,EAAW;AACT;AACD;;AAED,QAAID,IAAI,CAAJA,QAAAA,IAAiBA,IAAI,CAAzB,IAAA,EAAgC;AAC9BA,MAAAA,IAAI,CAAJA,QAAAA,CAAAA,IAAAA,GAAqBA,IAAI,CAAzBA,IAAAA;AACAA,MAAAA,IAAI,CAAJA,IAAAA,CAAAA,QAAAA,GAAqBA,IAAI,CAAzBA,QAAAA;AAFF,KAAA,MAGO,IAAIA,IAAI,CAAR,QAAA,EAAmB;AAExBA,MAAAA,IAAI,CAAJA,QAAAA,CAAAA,IAAAA,GAAAA,IAAAA;AACA,WAAA,IAAA,GAAYA,IAAI,CAAhB,QAAA;AAHK,KAAA,MAIA,IAAIA,IAAI,CAAR,IAAA,EAAe;AAEpBA,MAAAA,IAAI,CAAJA,IAAAA,CAAAA,QAAAA,GAAAA,IAAAA;AACA,WAAA,IAAA,GAAYA,IAAI,CAAhB,IAAA;AAHK,KAAA,MAIA;AAEL,WAAA,IAAA,GAAA,IAAA;AACA,WAAA,IAAA,GAAA,IAAA;AACD;;AAEDA,IAAAA,IAAI,CAAJA,IAAAA,GAAAA,IAAAA;AACAA,IAAAA,IAAI,CAAJA,QAAAA,GAAAA,IAAAA;AAEA,MAAE,KAAF,OAAA;AACD;;AAODE,EAAAA,MAAM,CAAA,IAAA,EAAA,QAAA,EAAiB;AACrB,QAAIF,IAAI,KAAR,QAAA,EAAuB;AACrB;AACD;;AAGD,SAAA,MAAA,CAAA,QAAA;;AACA,SAAA,OAAA,CAAA,IAAA,EAAA,QAAA;AACD;;AAEDG,EAAAA,OAAO,CAAA,IAAA,EAAA,QAAA,EAAiB;AACtB,UAAMC,WAAW,GAAGJ,IAAI,CAAxB,IAAA;AACAA,IAAAA,IAAI,CAAJA,IAAAA,GAAAA,QAAAA;;AAGA,QAAI,KAAA,IAAA,KAAJ,IAAA,EAAwB;AACtB,WAAA,IAAA,GAAA,QAAA;AADF,KAAA,MAEO;AACLI,MAAAA,WAAW,CAAXA,QAAAA,GAAAA,QAAAA;AACD;;AAEDC,IAAAA,QAAQ,CAARA,IAAAA,GAAAA,WAAAA;AACAA,IAAAA,QAAQ,CAARA,QAAAA,GAAAA,IAAAA;AAEA,MAAE,KAAF,OAAA;AACD;;AA9FmC","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport DoublyLinkedListNode from '../utils/doubly-linked-list-node';\n\n/**\n * Doubly linked list\n *\n * @private\n */\nexport default class DoublyLinkedList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n    this._length = 0;\n  }\n\n  get length() {\n    return this._length;\n  }\n\n  /**\n   * Adds the item to the end of the list\n   * @param {*} [item]\n   * @return {DoublyLinkedListNode}\n   */\n  add(item) {\n    const node = new DoublyLinkedListNode(item, this.tail, null);\n\n    if (this.tail) {\n      this.tail.next = node;\n      this.tail = node;\n    } else {\n      this.head = node;\n      this.tail = node;\n    }\n\n    ++this._length;\n\n    return node;\n  }\n\n  /**\n   * Removes the given node from the list\n   * @param {DoublyLinkedListNode} node\n   */\n  remove(node) {\n    if (!node) {\n      return;\n    }\n\n    if (node.previous && node.next) {\n      node.previous.next = node.next;\n      node.next.previous = node.previous;\n    } else if (node.previous) {\n      // Remove last node\n      node.previous.next = null;\n      this.tail = node.previous;\n    } else if (node.next) {\n      // Remove first node\n      node.next.previous = null;\n      this.head = node.next;\n    } else {\n      // Remove last node in the linked list\n      this.head = null;\n      this.tail = null;\n    }\n\n    node.next = null;\n    node.previous = null;\n\n    --this._length;\n  }\n\n  /**\n   * Moves nextNode after node\n   * @param {DoublyLinkedListNode} node\n   * @param {DoublyLinkedListNode} nextNode\n   */\n  splice(node, nextNode) {\n    if (node === nextNode) {\n      return;\n    }\n\n    // Remove nextNode, then insert after node\n    this.remove(nextNode);\n    this._insert(node, nextNode);\n  }\n\n  _insert(node, nextNode) {\n    const oldNodeNext = node.next;\n    node.next = nextNode;\n\n    // nextNode is the new tail\n    if (this.tail === node) {\n      this.tail = nextNode;\n    } else {\n      oldNodeNext.previous = nextNode;\n    }\n\n    nextNode.next = oldNodeNext;\n    nextNode.previous = node;\n\n    ++this._length;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}