{"ast":null,"code":"import { log } from '@deck.gl/core';\nexport default class Tile2DHeader {\n  constructor(_ref) {\n    let {\n      x,\n      y,\n      z\n    } = _ref;\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.isVisible = false;\n    this.isSelected = false;\n    this.parent = null;\n    this.children = [];\n    this.content = null;\n    this._loaderId = 0;\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n  }\n\n  get data() {\n    return this.isLoading ? this._loader.then(() => this.data) : this.content;\n  }\n\n  get isLoaded() {\n    return this._isLoaded && !this._needsReload;\n  }\n\n  get isLoading() {\n    return Boolean(this._loader) && !this._isCancelled;\n  }\n\n  get needsReload() {\n    return this._needsReload || this._isCancelled;\n  }\n\n  get byteLength() {\n    const result = this.content ? this.content.byteLength : 0;\n\n    if (!Number.isFinite(result)) {\n      log.error('byteLength not defined in tile data')();\n    }\n\n    return result;\n  }\n\n  async _loadData(_ref2) {\n    let {\n      getData,\n      requestScheduler,\n      onLoad,\n      onError\n    } = _ref2;\n    const {\n      x,\n      y,\n      z,\n      bbox\n    } = this;\n    const loaderId = this._loaderId;\n    this._abortController = new AbortController();\n    const {\n      signal\n    } = this._abortController;\n    const requestToken = await requestScheduler.scheduleRequest(this, tile => {\n      return tile.isSelected ? 1 : -1;\n    });\n\n    if (!requestToken) {\n      this._isCancelled = true;\n      return;\n    }\n\n    if (this._isCancelled) {\n      requestToken.done();\n      return;\n    }\n\n    let tileData = null;\n    let error;\n\n    try {\n      tileData = await getData({\n        x,\n        y,\n        z,\n        bbox,\n        signal\n      });\n    } catch (err) {\n      error = err || true;\n    } finally {\n      requestToken.done();\n    }\n\n    if (loaderId !== this._loaderId) {\n      return;\n    }\n\n    this._loader = undefined;\n    this.content = tileData;\n\n    if (this._isCancelled && !tileData) {\n      this._isLoaded = false;\n      return;\n    }\n\n    this._isLoaded = true;\n    this._isCancelled = false;\n\n    if (error) {\n      onError(error, this);\n    } else {\n      onLoad(this);\n    }\n  }\n\n  loadData(opts) {\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n    this._loaderId++;\n    this._loader = this._loadData(opts);\n    return this._loader;\n  }\n\n  setNeedsReload() {\n    if (this.isLoading) {\n      this.abort();\n      this._loader = undefined;\n    }\n\n    this._needsReload = true;\n  }\n\n  abort() {\n    if (this.isLoaded) {\n      return;\n    }\n\n    this._isCancelled = true;\n\n    this._abortController.abort();\n  }\n\n}","map":{"version":3,"sources":["../../../src/tile-layer/tile-2d-header.js"],"names":["constructor","z","data","isLoaded","isLoading","Boolean","needsReload","byteLength","result","Number","log","_loadData","onError","bbox","loaderId","signal","requestToken","tile","tileData","getData","error","err","onLoad","loadData","setNeedsReload","abort"],"mappings":"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","sourcesContent":["/* eslint-env browser */\nimport {log} from '@deck.gl/core';\n\nexport default class Tile2DHeader {\n  constructor({x, y, z}) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.isVisible = false;\n    this.isSelected = false;\n    this.parent = null;\n    this.children = [];\n\n    this.content = null;\n\n    this._loaderId = 0;\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n  }\n\n  get data() {\n    return this.isLoading ? this._loader.then(() => this.data) : this.content;\n  }\n\n  get isLoaded() {\n    return this._isLoaded && !this._needsReload;\n  }\n\n  get isLoading() {\n    return Boolean(this._loader) && !this._isCancelled;\n  }\n\n  get needsReload() {\n    return this._needsReload || this._isCancelled;\n  }\n\n  get byteLength() {\n    const result = this.content ? this.content.byteLength : 0;\n    if (!Number.isFinite(result)) {\n      log.error('byteLength not defined in tile data')();\n    }\n    return result;\n  }\n\n  /* eslint-disable max-statements */\n  async _loadData({getData, requestScheduler, onLoad, onError}) {\n    const {x, y, z, bbox} = this;\n    const loaderId = this._loaderId;\n\n    this._abortController = new AbortController(); // eslint-disable-line no-undef\n    const {signal} = this._abortController;\n\n    const requestToken = await requestScheduler.scheduleRequest(this, tile => {\n      return tile.isSelected ? 1 : -1;\n    });\n\n    if (!requestToken) {\n      this._isCancelled = true;\n      return;\n    }\n    // A tile can be cancelled while being scheduled\n    if (this._isCancelled) {\n      requestToken.done();\n      return;\n    }\n\n    let tileData = null;\n    let error;\n    try {\n      tileData = await getData({x, y, z, bbox, signal});\n    } catch (err) {\n      error = err || true;\n    } finally {\n      requestToken.done();\n    }\n\n    // If loadData has been called with a newer version, discard the result from this operation\n    if (loaderId !== this._loaderId) {\n      return;\n    }\n    // Clear the `isLoading` flag\n    this._loader = undefined;\n    // Rewrite tile content with the result of getTileData if successful, or `null` in case of\n    // error or cancellation\n    this.content = tileData;\n    // If cancelled, do not invoke the callbacks\n    // Consider it loaded if we tried to cancel but `getTileData` still returned data\n    if (this._isCancelled && !tileData) {\n      this._isLoaded = false;\n      return;\n    }\n    this._isLoaded = true;\n    this._isCancelled = false;\n\n    if (error) {\n      onError(error, this);\n    } else {\n      onLoad(this);\n    }\n  }\n  /* eslint-enable max-statements */\n\n  loadData(opts) {\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n    this._loaderId++;\n    this._loader = this._loadData(opts);\n    return this._loader;\n  }\n\n  setNeedsReload() {\n    if (this.isLoading) {\n      this.abort();\n      this._loader = undefined;\n    }\n    this._needsReload = true;\n  }\n\n  abort() {\n    if (this.isLoaded) {\n      return;\n    }\n\n    this._isCancelled = true;\n    this._abortController.abort();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}