{"ast":null,"code":"import { assert } from '../env-utils/assert';\nexport function padToNBytes(byteLength, padding) {\n  assert(byteLength >= 0);\n  assert(padding > 0);\n  return byteLength + (padding - 1) & ~(padding - 1);\n}\nexport function copyArrayBuffer(targetBuffer, sourceBuffer, byteOffset) {\n  let byteLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : sourceBuffer.byteLength;\n  const targetArray = new Uint8Array(targetBuffer, byteOffset, byteLength);\n  const sourceArray = new Uint8Array(sourceBuffer);\n  targetArray.set(sourceArray);\n  return targetBuffer;\n}\nexport function copyToArray(source, target, targetOffset) {\n  let sourceArray;\n\n  if (source instanceof ArrayBuffer) {\n    sourceArray = new Uint8Array(source);\n  } else {\n    const srcByteOffset = source.byteOffset;\n    const srcByteLength = source.byteLength;\n    sourceArray = new Uint8Array(source.buffer || source.arrayBuffer, srcByteOffset, srcByteLength);\n  }\n\n  target.set(sourceArray, targetOffset);\n  return targetOffset + padToNBytes(sourceArray.byteLength, 4);\n}","map":{"version":3,"sources":["../../../../src/lib/binary-utils/memory-copy-utils.ts"],"names":["assert","byteLength","padding","sourceBuffer","targetArray","sourceArray","source","srcByteOffset","srcByteLength","target","targetOffset","padToNBytes"],"mappings":"AAAA,SAAA,MAAA,QAAA,qBAAA;AASA,OAAO,SAAA,WAAA,CAAA,UAAA,EAAA,OAAA,EAAkE;AACvEA,EAAAA,MAAM,CAACC,UAAU,IAAjBD,CAAM,CAANA;AACAA,EAAAA,MAAM,CAACE,OAAO,GAAdF,CAAM,CAANA;AACA,SAAQC,UAAU,IAAIC,OAAO,GAAtB,CAAW,CAAVD,GAA8B,EAAEC,OAAO,GAA/C,CAAsC,CAAtC;AACD;AAQD,OAAO,SAAA,eAAA,CAAA,YAAA,EAAA,YAAA,EAAA,UAAA,EAKQ;AAAA,MADbD,UACa,uEADQE,YAAY,CAJ5B,UAKQ;AACb,QAAMC,WAAW,GAAG,IAAA,UAAA,CAAA,YAAA,EAAA,UAAA,EAApB,UAAoB,CAApB;AACA,QAAMC,WAAW,GAAG,IAAA,UAAA,CAApB,YAAoB,CAApB;AACAD,EAAAA,WAAW,CAAXA,GAAAA,CAAAA,WAAAA;AACA,SAAA,YAAA;AACD;AAUD,OAAO,SAAA,WAAA,CAAA,MAAA,EAAA,MAAA,EAAA,YAAA,EAA2F;AAChG,MAAA,WAAA;;AAEA,MAAIE,MAAM,YAAV,WAAA,EAAmC;AACjCD,IAAAA,WAAW,GAAG,IAAA,UAAA,CAAdA,MAAc,CAAdA;AADF,GAAA,MAEO;AAOL,UAAME,aAAa,GAAGD,MAAM,CAA5B,UAAA;AACA,UAAME,aAAa,GAAGF,MAAM,CAA5B,UAAA;AAGAD,IAAAA,WAAW,GAAG,IAAA,UAAA,CAAeC,MAAM,CAANA,MAAAA,IAAiBA,MAAM,CAAtC,WAAA,EAAA,aAAA,EAAdD,aAAc,CAAdA;AACD;;AAGDI,EAAAA,MAAM,CAANA,GAAAA,CAAAA,WAAAA,EAAAA,YAAAA;AAEA,SAAOC,YAAY,GAAGC,WAAW,CAACN,WAAW,CAAZ,UAAA,EAAjC,CAAiC,CAAjC;AACD","sourcesContent":["import {assert} from '../env-utils/assert';\n\n/**\n * Calculate new size of an arrayBuffer to be aligned to an n-byte boundary\n * This function increases `byteLength` by the minimum delta,\n * allowing the total length to be divided by `padding`\n * @param byteLength\n * @param padding\n */\nexport function padToNBytes(byteLength: number, padding: number): number {\n  assert(byteLength >= 0); // `Incorrect 'byteLength' value: ${byteLength}`\n  assert(padding > 0); // `Incorrect 'padding' value: ${padding}`\n  return (byteLength + (padding - 1)) & ~(padding - 1);\n}\n\n/**\n * Creates a new Uint8Array based on two different ArrayBuffers\n * @param targetBuffer The first buffer.\n * @param sourceBuffer The second buffer.\n * @return The new ArrayBuffer created out of the two.\n */\nexport function copyArrayBuffer(\n  targetBuffer: ArrayBuffer,\n  sourceBuffer: ArrayBuffer,\n  byteOffset: number,\n  byteLength: number = sourceBuffer.byteLength\n): ArrayBuffer {\n  const targetArray = new Uint8Array(targetBuffer, byteOffset, byteLength);\n  const sourceArray = new Uint8Array(sourceBuffer);\n  targetArray.set(sourceArray);\n  return targetBuffer;\n}\n\n/**\n * Copy from source to target at the targetOffset\n *\n * @param source - The data to copy\n * @param target - The destination to copy data into\n * @param targetOffset - The start offset into target to place the copied data\n * @returns the new offset taking into account proper padding\n */\nexport function copyToArray(source: ArrayBuffer | any, target: any, targetOffset: number): number {\n  let sourceArray;\n\n  if (source instanceof ArrayBuffer) {\n    sourceArray = new Uint8Array(source);\n  } else {\n    // Pack buffer onto the big target array\n    //\n    // 'source.data.buffer' could be a view onto a larger buffer.\n    // We MUST use this constructor to ensure the byteOffset and byteLength is\n    // set to correct values from 'source.data' and not the underlying\n    // buffer for target.set() to work properly.\n    const srcByteOffset = source.byteOffset;\n    const srcByteLength = source.byteLength;\n    // In gltf parser it is set as \"arrayBuffer\" instead of \"buffer\"\n    // https://github.com/visgl/loaders.gl/blob/1e3a82a0a65d7b6a67b1e60633453e5edda2960a/modules/gltf/src/lib/parse-gltf.js#L85\n    sourceArray = new Uint8Array(source.buffer || source.arrayBuffer, srcByteOffset, srcByteLength);\n  }\n\n  // Pack buffer onto the big target array\n  target.set(sourceArray, targetOffset);\n\n  return targetOffset + padToNBytes(sourceArray.byteLength, 4);\n}\n"]},"metadata":{},"sourceType":"module"}