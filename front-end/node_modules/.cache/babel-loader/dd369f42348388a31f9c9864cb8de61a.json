{"ast":null,"code":"import { Buffer, assert } from '@luma.gl/webgl';\nconst GLTF_TO_LUMA_ATTRIBUTE_MAP = {\n  POSITION: 'positions',\n  NORMAL: 'normals',\n  COLOR_0: 'colors',\n  TEXCOORD_0: 'texCoords',\n  TEXCOORD_1: 'texCoords1',\n  TEXCOORD_2: 'texCoords2'\n};\nexport function getBuffersFromGeometry(gl, geometry, options) {\n  const buffers = {};\n  let indices = geometry.indices;\n\n  for (const name in geometry.attributes) {\n    const attribute = geometry.attributes[name];\n    const remappedName = mapAttributeName(name, options);\n\n    if (name === 'indices') {\n      indices = attribute;\n    } else if (attribute.constant) {\n      buffers[remappedName] = attribute.value;\n    } else {\n      const typedArray = attribute.value;\n      const accessor = { ...attribute\n      };\n      delete accessor.value;\n      buffers[remappedName] = [new Buffer(gl, typedArray), accessor];\n      inferAttributeAccessor(name, accessor);\n    }\n  }\n\n  if (indices) {\n    const data = indices.value || indices;\n    assert(data instanceof Uint16Array || data instanceof Uint32Array, 'attribute array for \"indices\" must be of integer type');\n    const accessor = {\n      size: 1,\n      isIndexed: indices.isIndexed === undefined ? true : indices.isIndexed\n    };\n    buffers.indices = [new Buffer(gl, {\n      data,\n      target: 34963\n    }), accessor];\n  }\n\n  return buffers;\n}\n\nfunction mapAttributeName(name, options) {\n  const {\n    attributeMap = GLTF_TO_LUMA_ATTRIBUTE_MAP\n  } = options || {};\n  return attributeMap && attributeMap[name] || name;\n}\n\nexport function inferAttributeAccessor(attributeName, attribute) {\n  let category;\n\n  switch (attributeName) {\n    case 'texCoords':\n    case 'texCoord1':\n    case 'texCoord2':\n    case 'texCoord3':\n      category = 'uvs';\n      break;\n\n    case 'vertices':\n    case 'positions':\n    case 'normals':\n    case 'pickingColors':\n      category = 'vectors';\n      break;\n\n    default:\n  }\n\n  switch (category) {\n    case 'vectors':\n      attribute.size = attribute.size || 3;\n      break;\n\n    case 'uvs':\n      attribute.size = attribute.size || 2;\n      break;\n\n    default:\n  }\n\n  assert(Number.isFinite(attribute.size), `attribute ${attributeName} needs size`);\n}","map":{"version":3,"sources":["../../../src/lib/model-utils.js"],"names":["GLTF_TO_LUMA_ATTRIBUTE_MAP","POSITION","NORMAL","COLOR_0","TEXCOORD_0","TEXCOORD_1","TEXCOORD_2","buffers","indices","geometry","attribute","remappedName","mapAttributeName","name","typedArray","accessor","inferAttributeAccessor","data","assert","size","isIndexed","target","attributeMap","options","category","Number","attributeName"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {Buffer, assert} from '@luma.gl/webgl';\n\n// Support for mapping new geometries with glTF attribute names to \"classic\" luma.gl shader names\nconst GLTF_TO_LUMA_ATTRIBUTE_MAP = {\n  POSITION: 'positions',\n  NORMAL: 'normals',\n  COLOR_0: 'colors',\n  TEXCOORD_0: 'texCoords',\n  TEXCOORD_1: 'texCoords1',\n  TEXCOORD_2: 'texCoords2'\n};\n\nexport function getBuffersFromGeometry(gl, geometry, options) {\n  const buffers = {};\n  let indices = geometry.indices;\n\n  for (const name in geometry.attributes) {\n    const attribute = geometry.attributes[name];\n    const remappedName = mapAttributeName(name, options);\n\n    if (name === 'indices') {\n      indices = attribute;\n    } else if (attribute.constant) {\n      buffers[remappedName] = attribute.value;\n    } else {\n      const typedArray = attribute.value;\n      // Create accessor by copying the attribute and removing `value``\n      const accessor = {...attribute};\n      delete accessor.value;\n      buffers[remappedName] = [new Buffer(gl, typedArray), accessor];\n\n      inferAttributeAccessor(name, accessor);\n    }\n  }\n\n  if (indices) {\n    const data = indices.value || indices;\n    assert(\n      data instanceof Uint16Array || data instanceof Uint32Array,\n      'attribute array for \"indices\" must be of integer type'\n    );\n    const accessor = {\n      size: 1,\n      isIndexed: indices.isIndexed === undefined ? true : indices.isIndexed\n    };\n    buffers.indices = [\n      new Buffer(gl, {\n        data,\n        target: GL.ELEMENT_ARRAY_BUFFER\n      }),\n      accessor\n    ];\n  }\n\n  return buffers;\n}\n\nfunction mapAttributeName(name, options) {\n  const {attributeMap = GLTF_TO_LUMA_ATTRIBUTE_MAP} = options || {};\n  return (attributeMap && attributeMap[name]) || name;\n}\n\n// Check for well known attribute names\n// eslint-disable-next-line complexity\nexport function inferAttributeAccessor(attributeName, attribute) {\n  let category;\n  switch (attributeName) {\n    case 'texCoords':\n    case 'texCoord1':\n    case 'texCoord2':\n    case 'texCoord3':\n      category = 'uvs';\n      break;\n    case 'vertices':\n    case 'positions':\n    case 'normals':\n    case 'pickingColors':\n      category = 'vectors';\n      break;\n    default:\n  }\n\n  // Check for categorys\n  switch (category) {\n    case 'vectors':\n      attribute.size = attribute.size || 3;\n      break;\n    case 'uvs':\n      attribute.size = attribute.size || 2;\n      break;\n    default:\n  }\n\n  assert(Number.isFinite(attribute.size), `attribute ${attributeName} needs size`);\n}\n"]},"metadata":{},"sourceType":"module"}