{"ast":null,"code":"import { Layer, project32, gouraudLighting, picking, UNIT } from '@deck.gl/core';\nimport { Model } from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  diskResolution: {\n    type: 'number',\n    min: 4,\n    value: 20\n  },\n  vertices: null,\n  radius: {\n    type: 'number',\n    min: 0,\n    value: 1000\n  },\n  angle: {\n    type: 'number',\n    value: 0\n  },\n  offset: {\n    type: 'array',\n    value: [0, 0]\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusUnits: 'meters',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  material: true,\n  getColor: {\n    deprecatedFor: ['getFillColor', 'getLineColor']\n  }\n};\nexport default class ColumnLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n  }\n\n  updateState(_ref) {\n    let {\n      props,\n      oldProps,\n      changeFlags\n    } = _ref;\n    super.updateState({\n      props,\n      oldProps,\n      changeFlags\n    });\n    const regenerateModels = changeFlags.extensionsChanged;\n\n    if (regenerateModels) {\n      var _this$state$model;\n\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (regenerateModels || props.diskResolution !== oldProps.diskResolution || props.vertices !== oldProps.vertices || (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)) {\n      this._updateGeometry(props);\n    }\n  }\n\n  getGeometry(diskResolution, vertices, hasThinkness) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: hasThinkness ? 2 : 0,\n      vertices,\n      nradial: diskResolution\n    });\n    let meanVertexDistance = 0;\n\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n    return geometry;\n  }\n\n  _getModel(gl) {\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      isInstanced: true\n    });\n  }\n\n  _updateGeometry(_ref2) {\n    let {\n      diskResolution,\n      vertices,\n      extruded,\n      stroked\n    } = _ref2;\n    const geometry = this.getGeometry(diskResolution, vertices, extruded || stroked);\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n      wireframeVertexCount: geometry.indices.value.length\n    });\n    this.state.model.setProps({\n      geometry\n    });\n  }\n\n  draw(_ref3) {\n    let {\n      uniforms\n    } = _ref3;\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      radiusUnits,\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const {\n      model,\n      fillVertexCount,\n      wireframeVertexCount,\n      edgeDistance\n    } = this.state;\n    model.setUniforms(uniforms).setUniforms({\n      radius,\n      angle: angle / 180 * Math.PI,\n      offset,\n      extruded,\n      coverage,\n      elevationScale,\n      edgeDistance,\n      radiusUnits: UNIT[radiusUnits],\n      widthUnits: UNIT[lineWidthUnits],\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels\n    });\n\n    if (extruded && wireframe) {\n      model.setProps({\n        isIndexed: true\n      });\n      model.setVertexCount(wireframeVertexCount).setDrawMode(1).setUniforms({\n        isStroke: true\n      }).draw();\n    }\n\n    if (filled) {\n      model.setProps({\n        isIndexed: false\n      });\n      model.setVertexCount(fillVertexCount).setDrawMode(5).setUniforms({\n        isStroke: false\n      }).draw();\n    }\n\n    if (!extruded && stroked) {\n      model.setProps({\n        isIndexed: false\n      });\n      model.setVertexCount(fillVertexCount * 2 / 3).setDrawMode(5).setUniforms({\n        isStroke: true\n      }).draw();\n    }\n  }\n\n}\nColumnLayer.layerName = 'ColumnLayer';\nColumnLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/column-layer/column-layer.js"],"names":["DEFAULT_COLOR","defaultProps","diskResolution","type","min","value","vertices","radius","angle","offset","coverage","max","elevationScale","radiusUnits","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","extruded","wireframe","filled","stroked","getPosition","x","position","getFillColor","getLineColor","getLineWidth","getElevation","material","getColor","deprecatedFor","getShaders","modules","initializeState","attributeManager","instancePositions","size","fp64","transition","accessor","instanceElevations","instanceFillColors","normalized","defaultValue","instanceLineColors","instanceStrokeWidths","updateState","changeFlags","regenerateModels","gl","props","oldProps","getGeometry","geometry","height","hasThinkness","nradial","meanVertexDistance","i","p","d","Math","edgeDistance","_getModel","id","isInstanced","_updateGeometry","fillVertexCount","wireframeVertexCount","length","draw","uniforms","model","UNIT","widthUnits","widthScale","widthMinPixels","widthMaxPixels","isIndexed","isStroke","ColumnLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model} from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\n\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  diskResolution: {type: 'number', min: 4, value: 20},\n  vertices: null,\n  radius: {type: 'number', min: 0, value: 1000},\n  angle: {type: 'number', value: 0},\n  offset: {type: 'array', value: [0, 0]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  radiusUnits: 'meters',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n  getElevation: {type: 'accessor', value: 1000},\n  material: true,\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\nexport default class ColumnLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, gouraudLighting, picking]});\n  }\n\n  /**\n   * DeckGL calls initializeState when GL context is available\n   * Essentially a deferred constructor\n   */\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const regenerateModels = changeFlags.extensionsChanged;\n\n    if (regenerateModels) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (\n      regenerateModels ||\n      props.diskResolution !== oldProps.diskResolution ||\n      props.vertices !== oldProps.vertices ||\n      (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)\n    ) {\n      this._updateGeometry(props);\n    }\n  }\n\n  getGeometry(diskResolution, vertices, hasThinkness) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: hasThinkness ? 2 : 0,\n      vertices,\n      nradial: diskResolution\n    });\n\n    let meanVertexDistance = 0;\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n\n    return geometry;\n  }\n\n  _getModel(gl) {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      isInstanced: true\n    });\n  }\n\n  _updateGeometry({diskResolution, vertices, extruded, stroked}) {\n    const geometry = this.getGeometry(diskResolution, vertices, extruded || stroked);\n\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n      wireframeVertexCount: geometry.indices.value.length\n    });\n\n    this.state.model.setProps({geometry});\n  }\n\n  draw({uniforms}) {\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      radiusUnits,\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const {model, fillVertexCount, wireframeVertexCount, edgeDistance} = this.state;\n\n    model.setUniforms(uniforms).setUniforms({\n      radius,\n      angle: (angle / 180) * Math.PI,\n      offset,\n      extruded,\n      coverage,\n      elevationScale,\n      edgeDistance,\n      radiusUnits: UNIT[radiusUnits],\n      widthUnits: UNIT[lineWidthUnits],\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels\n    });\n\n    // When drawing 3d: draw wireframe first so it doesn't get occluded by depth test\n    if (extruded && wireframe) {\n      model.setProps({isIndexed: true});\n      model\n        .setVertexCount(wireframeVertexCount)\n        .setDrawMode(GL.LINES)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n    if (filled) {\n      model.setProps({isIndexed: false});\n      model\n        .setVertexCount(fillVertexCount)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: false})\n        .draw();\n    }\n    // When drawing 2d: draw fill before stroke so that the outline is always on top\n    if (!extruded && stroked) {\n      model.setProps({isIndexed: false});\n      // The width of the stroke is achieved by flattening the side of the cylinder.\n      // Skip the last 1/3 of the vertices which is the top.\n      model\n        .setVertexCount((fillVertexCount * 2) / 3)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n  }\n}\n\nColumnLayer.layerName = 'ColumnLayer';\nColumnLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}