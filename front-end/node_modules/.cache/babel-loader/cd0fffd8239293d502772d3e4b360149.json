{"ast":null,"code":"export function padStringToByteAlignment(string, byteAlignment) {\n  const length = string.length;\n  const paddedLength = Math.ceil(length / byteAlignment) * byteAlignment;\n  const padding = paddedLength - length;\n  let whitespace = '';\n\n  for (let i = 0; i < padding; ++i) {\n    whitespace += ' ';\n  }\n\n  return string + whitespace;\n}\nexport function copyStringToDataView(dataView, byteOffset, string, byteLength) {\n  if (dataView) {\n    for (let i = 0; i < byteLength; i++) {\n      dataView.setUint8(byteOffset + i, string.charCodeAt(i));\n    }\n  }\n\n  return byteOffset + byteLength;\n}\nexport function copyBinaryToDataView(dataView, byteOffset, binary, byteLength) {\n  if (dataView) {\n    for (let i = 0; i < byteLength; i++) {\n      dataView.setUint8(byteOffset + i, binary[i]);\n    }\n  }\n\n  return byteOffset + byteLength;\n}","map":{"version":3,"sources":["../../../../src/lib/binary-utils/encode-utils.ts"],"names":["length","string","paddedLength","Math","padding","whitespace","i","dataView","byteOffset","binary"],"mappings":"AAIA,OAAO,SAAA,wBAAA,CAAA,MAAA,EAAA,aAAA,EAAyD;AAC9D,QAAMA,MAAM,GAAGC,MAAM,CAArB,MAAA;AACA,QAAMC,YAAY,GAAGC,IAAI,CAAJA,IAAAA,CAAUH,MAAM,GAAhBG,aAAAA,IAArB,aAAA;AACA,QAAMC,OAAO,GAAGF,YAAY,GAA5B,MAAA;AACA,MAAIG,UAAU,GAAd,EAAA;;AACA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,OAAA,EAA6B,EAA7B,CAAA,EAAkC;AAChCD,IAAAA,UAAU,IAAVA,GAAAA;AACD;;AACD,SAAOJ,MAAM,GAAb,UAAA;AACD;AAED,OAAO,SAAA,oBAAA,CAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,UAAA,EAAwE;AAC7E,MAAA,QAAA,EAAc;AACZ,SAAK,IAAIK,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,UAAA,EAAgCA,CAAhC,EAAA,EAAqC;AACnCC,MAAAA,QAAQ,CAARA,QAAAA,CAAkBC,UAAU,GAA5BD,CAAAA,EAAkCN,MAAM,CAANA,UAAAA,CAAlCM,CAAkCN,CAAlCM;AACD;AACF;;AACD,SAAOC,UAAU,GAAjB,UAAA;AACD;AAED,OAAO,SAAA,oBAAA,CAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,UAAA,EAAwE;AAC7E,MAAA,QAAA,EAAc;AACZ,SAAK,IAAIF,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,UAAA,EAAgCA,CAAhC,EAAA,EAAqC;AACnCC,MAAAA,QAAQ,CAARA,QAAAA,CAAkBC,UAAU,GAA5BD,CAAAA,EAAkCE,MAAM,CAAxCF,CAAwC,CAAxCA;AACD;AACF;;AACD,SAAOC,UAAU,GAAjB,UAAA;AACD","sourcesContent":["// Note: These were broken out from gltf loader...\n// eslint-disable-next-line complexity\n\n// PERFORMANCE IDEA: No need to copy string twice...\nexport function padStringToByteAlignment(string, byteAlignment) {\n  const length = string.length;\n  const paddedLength = Math.ceil(length / byteAlignment) * byteAlignment; // Round up to the required alignment\n  const padding = paddedLength - length;\n  let whitespace = '';\n  for (let i = 0; i < padding; ++i) {\n    whitespace += ' ';\n  }\n  return string + whitespace;\n}\n\nexport function copyStringToDataView(dataView, byteOffset, string, byteLength) {\n  if (dataView) {\n    for (let i = 0; i < byteLength; i++) {\n      dataView.setUint8(byteOffset + i, string.charCodeAt(i));\n    }\n  }\n  return byteOffset + byteLength;\n}\n\nexport function copyBinaryToDataView(dataView, byteOffset, binary, byteLength) {\n  if (dataView) {\n    for (let i = 0; i < byteLength; i++) {\n      dataView.setUint8(byteOffset + i, binary[i]);\n    }\n  }\n  return byteOffset + byteLength;\n}\n"]},"metadata":{},"sourceType":"module"}