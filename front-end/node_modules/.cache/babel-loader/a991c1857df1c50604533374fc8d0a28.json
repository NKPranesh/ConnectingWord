{"ast":null,"code":"import { DirectionalLight } from './directional-light';\nimport { getSunlightDirection } from './suncalc';\nexport default class SunLight extends DirectionalLight {\n  constructor(_ref) {\n    let {\n      timestamp,\n      ...others\n    } = _ref;\n    super(others);\n    this.timestamp = timestamp;\n  }\n\n  getProjectedLight(_ref2) {\n    let {\n      layer\n    } = _ref2;\n    const {\n      viewport\n    } = layer.context;\n    const isGlobe = viewport.resolution > 0;\n\n    if (isGlobe) {\n      const [x, y, z] = getSunlightDirection(this.timestamp, 0, 0);\n      this.direction = [x, -z, y];\n    } else {\n      const {\n        latitude,\n        longitude\n      } = viewport;\n      this.direction = getSunlightDirection(this.timestamp, latitude, longitude);\n    }\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/effects/lighting/sun-light.js"],"names":["constructor","others","getProjectedLight","layer","viewport","isGlobe","getSunlightDirection","longitude"],"mappings":"AAAA,SAAA,gBAAA,QAAA,qBAAA;AACA,SAAA,oBAAA,QAAA,WAAA;AAEA,eAAe,MAAA,QAAA,SAAA,gBAAA,CAAwC;AACrDA,EAAAA,WAAW,OAAyB;AAAA,QAAxB;AAAA,MAAA,SAAA;AAAY,SAAGC;AAAf,KAAwB;AAClC,UAAA,MAAA;AAEA,SAAA,SAAA,GAAA,SAAA;AACD;;AAEDC,EAAAA,iBAAiB,QAAU;AAAA,QAAT;AAACC,MAAAA;AAAD,KAAS;AACzB,UAAM;AAACC,MAAAA;AAAD,QAAaD,KAAK,CAAxB,OAAA;AACA,UAAME,OAAO,GAAGD,QAAQ,CAARA,UAAAA,GAAhB,CAAA;;AAEA,QAAA,OAAA,EAAa;AAEX,YAAM,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,IAAYE,oBAAoB,CAAC,KAAD,SAAA,EAAA,CAAA,EAAtC,CAAsC,CAAtC;AACA,WAAA,SAAA,GAAiB,CAAA,CAAA,EAAI,CAAJ,CAAA,EAAjB,CAAiB,CAAjB;AAHF,KAAA,MAIO;AACL,YAAM;AAAA,QAAA,QAAA;AAAWC,QAAAA;AAAX,UAAN,QAAA;AACA,WAAA,SAAA,GAAiBD,oBAAoB,CAAC,KAAD,SAAA,EAAA,QAAA,EAArC,SAAqC,CAArC;AACD;;AAED,WAAA,IAAA;AACD;;AArBoD","sourcesContent":["import {DirectionalLight} from './directional-light';\nimport {getSunlightDirection} from './suncalc';\n\nexport default class SunLight extends DirectionalLight {\n  constructor({timestamp, ...others}) {\n    super(others);\n\n    this.timestamp = timestamp;\n  }\n\n  getProjectedLight({layer}) {\n    const {viewport} = layer.context;\n    const isGlobe = viewport.resolution > 0;\n\n    if (isGlobe) {\n      // Rotate vector to align with the direction of the globe projection (up at lon:0,lat:0 is [0, -1, 0])\n      const [x, y, z] = getSunlightDirection(this.timestamp, 0, 0);\n      this.direction = [x, -z, y];\n    } else {\n      const {latitude, longitude} = viewport;\n      this.direction = getSunlightDirection(this.timestamp, latitude, longitude);\n    }\n\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}