{"ast":null,"code":"import TransitionManager, { TRANSITION_EVENTS } from './transition-manager';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\nconst DEFAULT_INERTIA = 300;\n\nconst INERTIA_EASING = t => 1 - (1 - t) * (1 - t);\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\nexport default class Controller {\n  constructor(ControllerState) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.ControllerState = ControllerState;\n    this.controllerState = null;\n    this.controllerStateProps = null;\n    this.eventManager = null;\n    this.transitionManager = new TransitionManager(ControllerState, { ...options,\n      onViewStateChange: this._onTransition.bind(this),\n      onStateChange: this._setInteractionState.bind(this)\n    });\n    const linearTransitionProps = this.linearTransitionProps;\n    this._transition = linearTransitionProps && { ...LINEAR_TRANSITION_PROPS,\n      transitionInterpolator: new LinearInterpolator({\n        transitionProps: linearTransitionProps\n      })\n    };\n    this._events = null;\n    this._interactionState = {\n      isDragging: false\n    };\n    this._customEvents = [];\n    this.onViewStateChange = null;\n    this.onStateChange = null;\n    this.handleEvent = this.handleEvent.bind(this);\n    this.setProps(options);\n  }\n\n  get linearTransitionProps() {\n    return null;\n  }\n\n  set events(customEvents) {\n    this.toggleEvents(this._customEvents, false);\n    this.toggleEvents(customEvents, true);\n    this._customEvents = customEvents;\n    this.setProps(this.controllerStateProps);\n  }\n\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        this.eventManager.off(eventName, this.handleEvent);\n      }\n    }\n\n    this.transitionManager.finalize();\n  }\n\n  handleEvent(event) {\n    const {\n      ControllerState\n    } = this;\n    this.controllerState = new ControllerState({\n      makeViewport: this.makeViewport,\n      ...this.controllerStateProps,\n      ...this._state\n    });\n    const eventStartBlocked = this._eventStartBlocked;\n\n    switch (event.type) {\n      case 'panstart':\n        return eventStartBlocked ? false : this._onPanStart(event);\n\n      case 'panmove':\n        return this._onPan(event);\n\n      case 'panend':\n        return this._onPanEnd(event);\n\n      case 'pinchstart':\n        return eventStartBlocked ? false : this._onPinchStart(event);\n\n      case 'pinchmove':\n        return this._onPinch(event);\n\n      case 'pinchend':\n        return this._onPinchEnd(event);\n\n      case 'tripanstart':\n        return eventStartBlocked ? false : this._onTriplePanStart(event);\n\n      case 'tripanmove':\n        return this._onTriplePan(event);\n\n      case 'tripanend':\n        return this._onTriplePanEnd(event);\n\n      case 'doubletap':\n        return this._onDoubleTap(event);\n\n      case 'wheel':\n        return this._onWheel(event);\n\n      case 'keydown':\n        return this._onKeyDown(event);\n\n      default:\n        return false;\n    }\n  }\n\n  getCenter(event) {\n    const {\n      x,\n      y\n    } = this.controllerStateProps;\n    const {\n      offsetCenter\n    } = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n\n  isPointInBounds(pos, event) {\n    const {\n      width,\n      height\n    } = this.controllerStateProps;\n\n    if (event && event.handled) {\n      return false;\n    }\n\n    const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n\n    if (inside && event) {\n      event.stopPropagation();\n    }\n\n    return inside;\n  }\n\n  isFunctionKeyPressed(event) {\n    const {\n      srcEvent\n    } = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging() {\n    return this._interactionState.isDragging;\n  }\n\n  blockEvents(timeout) {\n    const timer = setTimeout(() => {\n      if (this._eventStartBlocked === timer) {\n        this._eventStartBlocked = null;\n      }\n    }, timeout);\n    this._eventStartBlocked = timer;\n  }\n\n  setProps(props) {\n    if ('onViewStateChange' in props) {\n      this.onViewStateChange = props.onViewStateChange;\n    }\n\n    if ('onStateChange' in props) {\n      this.onStateChange = props.onStateChange;\n    }\n\n    if ('makeViewport' in props) {\n      this.makeViewport = props.makeViewport;\n    }\n\n    if ('dragMode' in props) {\n      this.dragMode = props.dragMode;\n    }\n\n    this.controllerStateProps = props;\n\n    if ('eventManager' in props && this.eventManager !== props.eventManager) {\n      this.eventManager = props.eventManager;\n      this._events = {};\n      this.toggleEvents(this._customEvents, true);\n    }\n\n    if (!('transitionInterpolator' in props)) {\n      props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;\n    }\n\n    this.transitionManager.processViewStateChange(props);\n    let {\n      inertia\n    } = props;\n\n    if (inertia === true) {\n      inertia = DEFAULT_INERTIA;\n    }\n\n    this.inertia = inertia;\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && touchRotate);\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  updateTransition() {\n    this.transitionManager.updateTransition();\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  updateViewport(newControllerState) {\n    let extraProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let interactionState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const viewState = { ...newControllerState.getViewportProps(),\n      ...extraProps\n    };\n    const changed = this.controllerState !== newControllerState;\n    this._state = newControllerState.getState();\n\n    this._setInteractionState(interactionState);\n\n    if (changed) {\n      const oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n\n      if (this.onViewStateChange) {\n        this.onViewStateChange({\n          viewState,\n          interactionState: this._interactionState,\n          oldViewState\n        });\n      }\n    }\n  }\n\n  _onTransition(params) {\n    if (this.onViewStateChange) {\n      params.interactionState = this._interactionState;\n      this.onViewStateChange(params);\n    }\n  }\n\n  _setInteractionState(newStates) {\n    Object.assign(this._interactionState, newStates);\n\n    if (this.onStateChange) {\n      this.onStateChange(this._interactionState);\n    }\n  }\n\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n\n    if (this.invertPan || this.dragMode === 'pan') {\n      alternateMode = !alternateMode;\n    }\n\n    const newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({\n      pos\n    });\n    this._panMove = alternateMode;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true\n    });\n    return true;\n  }\n\n  _onPan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  _onPanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);\n  }\n\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.pan({\n      pos\n    });\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  _onPanMoveEnd(event) {\n    const {\n      inertia\n    } = this;\n\n    if (this.dragPan && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos = [pos[0] + event.velocityX * inertia / 2, pos[1] + event.velocityY * inertia / 2];\n      const newControllerState = this.controllerState.pan({\n        pos: endPos\n      }).panEnd();\n      this.updateViewport(newControllerState, { ...this._getTransitionProps(),\n        transitionDuration: inertia,\n        transitionEasing: INERTIA_EASING\n      }, {\n        isDragging: false,\n        isPanning: true\n      });\n    } else {\n      const newControllerState = this.controllerState.panEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false\n      });\n    }\n\n    return true;\n  }\n\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.rotate({\n      pos\n    });\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  _onPanRotateEnd(event) {\n    const {\n      inertia\n    } = this;\n\n    if (this.dragRotate && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos = [pos[0] + event.velocityX * inertia / 2, pos[1] + event.velocityY * inertia / 2];\n      const newControllerState = this.controllerState.rotate({\n        pos: endPos\n      }).rotateEnd();\n      this.updateViewport(newControllerState, { ...this._getTransitionProps(),\n        transitionDuration: inertia,\n        transitionEasing: INERTIA_EASING\n      }, {\n        isDragging: false,\n        isRotating: true\n      });\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n\n    return true;\n  }\n\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n\n    event.preventDefault();\n    const pos = this.getCenter(event);\n\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const {\n      speed = 0.01,\n      smooth = false\n    } = this.scrollZoom;\n    const {\n      delta\n    } = event;\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({\n      pos,\n      scale\n    });\n    this.updateViewport(newControllerState, { ...this._getTransitionProps({\n        around: pos\n      }),\n      transitionDuration: smooth ? 250 : 1\n    }, {\n      isZooming: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  _onTriplePanStart(event) {\n    const pos = this.getCenter(event);\n\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.rotateStart({\n      pos\n    });\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true\n    });\n    return true;\n  }\n\n  _onTriplePan(event) {\n    if (!this.touchRotate) {\n      return false;\n    }\n\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    pos[0] -= event.deltaX;\n    const newControllerState = this.controllerState.rotate({\n      pos\n    });\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  _onTriplePanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const {\n      inertia\n    } = this;\n\n    if (this.touchRotate && inertia && event.velocityY) {\n      const pos = this.getCenter(event);\n      const endPos = [pos[0], pos[1] += event.velocityY * inertia / 2];\n      const newControllerState = this.controllerState.rotate({\n        pos: endPos\n      });\n      this.updateViewport(newControllerState, { ...this._getTransitionProps(),\n        transitionDuration: inertia,\n        transitionEasing: INERTIA_EASING\n      }, {\n        isDragging: false,\n        isRotating: true\n      });\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n\n    return true;\n  }\n\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.zoomStart({\n      pos\n    }).rotateStart({\n      pos\n    });\n    this._startPinchRotation = event.rotation;\n    this._lastPinchEvent = event;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true\n    });\n    return true;\n  }\n\n  _onPinch(event) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n\n    if (this.touchZoom) {\n      const {\n        scale\n      } = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({\n        pos,\n        scale\n      });\n    }\n\n    if (this.touchRotate) {\n      const {\n        rotation\n      } = event;\n      newControllerState = newControllerState.rotate({\n        deltaAngleX: this._startPinchRotation - rotation\n      });\n    }\n\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    this._lastPinchEvent = event;\n    return true;\n  }\n\n  _onPinchEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const {\n      inertia,\n      _lastPinchEvent\n    } = this;\n\n    if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n      const pos = this.getCenter(event);\n      let newControllerState = this.controllerState.rotateEnd();\n      const z = Math.log2(event.scale);\n\n      const velocityZ = (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n\n      const endScale = Math.pow(2, z + velocityZ * inertia / 2);\n      newControllerState = newControllerState.zoom({\n        pos,\n        scale: endScale\n      }).zoomEnd();\n      this.updateViewport(newControllerState, { ...this._getTransitionProps({\n          around: pos\n        }),\n        transitionDuration: inertia,\n        transitionEasing: INERTIA_EASING\n      }, {\n        isDragging: false,\n        isPanning: this.touchZoom,\n        isZooming: this.touchZoom,\n        isRotating: false\n      });\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n    }\n\n    this._startPinchRotation = null;\n    this._lastPinchEvent = null;\n    return true;\n  }\n\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const isZoomOut = this.isFunctionKeyPressed(event);\n    const newControllerState = this.controllerState.zoom({\n      pos,\n      scale: isZoomOut ? 0.5 : 2\n    });\n    this.updateViewport(newControllerState, this._getTransitionProps({\n      around: pos\n    }), {\n      isZooming: true,\n      isPanning: true\n    });\n    this.blockEvents(100);\n    return true;\n  }\n\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {\n      zoomSpeed,\n      moveSpeed,\n      rotateSpeedX,\n      rotateSpeedY\n    } = this.keyboard;\n    const {\n      controllerState\n    } = this;\n    let newControllerState;\n    const interactionState = {};\n\n    switch (event.srcEvent.code) {\n      case 'Minus':\n        newControllerState = funcKey ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed) : controllerState.zoomOut(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n\n      case 'Equal':\n        newControllerState = funcKey ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed) : controllerState.zoomIn(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n\n      case 'ArrowLeft':\n        if (funcKey) {\n          newControllerState = controllerState.rotateLeft(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveLeft(moveSpeed);\n          interactionState.isPanning = true;\n        }\n\n        break;\n\n      case 'ArrowRight':\n        if (funcKey) {\n          newControllerState = controllerState.rotateRight(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveRight(moveSpeed);\n          interactionState.isPanning = true;\n        }\n\n        break;\n\n      case 'ArrowUp':\n        if (funcKey) {\n          newControllerState = controllerState.rotateUp(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveUp(moveSpeed);\n          interactionState.isPanning = true;\n        }\n\n        break;\n\n      case 'ArrowDown':\n        if (funcKey) {\n          newControllerState = controllerState.rotateDown(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveDown(moveSpeed);\n          interactionState.isPanning = true;\n        }\n\n        break;\n\n      default:\n        return false;\n    }\n\n    this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n    return true;\n  }\n\n  _getTransitionProps(opts) {\n    const {\n      _transition\n    } = this;\n\n    if (!_transition) {\n      return NO_TRANSITION_PROPS;\n    }\n\n    return opts ? { ..._transition,\n      transitionInterpolator: new LinearInterpolator({ ...opts,\n        transitionProps: this.linearTransitionProps,\n        makeViewport: this.controllerState.makeViewport\n      })\n    } : _transition;\n  }\n\n}","map":{"version":3,"sources":["../../../src/controllers/controller.js"],"names":["NO_TRANSITION_PROPS","transitionDuration","LINEAR_TRANSITION_PROPS","transitionEasing","t","transitionInterruption","TRANSITION_EVENTS","BREAK","DEFAULT_INERTIA","INERTIA_EASING","EVENT_TYPES","WHEEL","PAN","PINCH","TRIPLE_PAN","DOUBLE_TAP","KEYBOARD","constructor","options","onViewStateChange","onStateChange","linearTransitionProps","transitionInterpolator","transitionProps","isDragging","events","finalize","handleEvent","ControllerState","makeViewport","_state","eventStartBlocked","event","getCenter","y","offsetCenter","isPointInBounds","height","inside","pos","isFunctionKeyPressed","srcEvent","Boolean","blockEvents","timer","setTimeout","setProps","props","inertia","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","isInteractive","updateTransition","toggleEvents","eventNames","eventName","updateViewport","extraProps","interactionState","viewState","newControllerState","changed","oldViewState","_onTransition","params","_setInteractionState","Object","_onPanStart","alternateMode","_onPan","_onPanEnd","_onPanMove","isPanning","_onPanMoveEnd","endPos","_onPanRotate","isRotating","_onPanRotateEnd","_onWheel","speed","smooth","delta","scale","Math","around","isZooming","_onTriplePanStart","_onTriplePan","_onTriplePanEnd","_onPinchStart","_onPinch","rotation","deltaAngleX","_onPinchEnd","_lastPinchEvent","z","velocityZ","endScale","_onDoubleTap","isZoomOut","_onKeyDown","funcKey","rotateSpeedY","controllerState","_getTransitionProps","_transition","opts"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable max-statements, complexity */\nimport TransitionManager, {TRANSITION_EVENTS} from './transition-manager';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\nconst DEFAULT_INERTIA = 300;\nconst INERTIA_EASING = t => 1 - (1 - t) * (1 - t);\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nexport default class Controller {\n  constructor(ControllerState, options = {}) {\n    this.ControllerState = ControllerState;\n    this.controllerState = null;\n    this.controllerStateProps = null;\n    this.eventManager = null;\n    this.transitionManager = new TransitionManager(ControllerState, {\n      ...options,\n      onViewStateChange: this._onTransition.bind(this),\n      onStateChange: this._setInteractionState.bind(this)\n    });\n\n    const linearTransitionProps = this.linearTransitionProps;\n    this._transition = linearTransitionProps && {\n      ...LINEAR_TRANSITION_PROPS,\n      transitionInterpolator: new LinearInterpolator({\n        transitionProps: linearTransitionProps\n      })\n    };\n\n    this._events = null;\n    this._interactionState = {\n      isDragging: false\n    };\n    this._customEvents = [];\n    this.onViewStateChange = null;\n    this.onStateChange = null;\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    this.setProps(options);\n  }\n\n  get linearTransitionProps() {\n    return null;\n  }\n\n  set events(customEvents) {\n    this.toggleEvents(this._customEvents, false);\n    this.toggleEvents(customEvents, true);\n    this._customEvents = customEvents;\n    // Make sure default events are not overwritten\n    this.setProps(this.controllerStateProps);\n  }\n\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        this.eventManager.off(eventName, this.handleEvent);\n      }\n    }\n    this.transitionManager.finalize();\n  }\n\n  /**\n   * Callback for events\n   * @param {hammer.Event} event\n   */\n  handleEvent(event) {\n    const {ControllerState} = this;\n    this.controllerState = new ControllerState({\n      makeViewport: this.makeViewport,\n      ...this.controllerStateProps,\n      ...this._state\n    });\n    const eventStartBlocked = this._eventStartBlocked;\n\n    switch (event.type) {\n      case 'panstart':\n        return eventStartBlocked ? false : this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return eventStartBlocked ? false : this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'tripanstart':\n        return eventStartBlocked ? false : this._onTriplePanStart(event);\n      case 'tripanmove':\n        return this._onTriplePan(event);\n      case 'tripanend':\n        return this._onTriplePanEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {x, y} = this.controllerStateProps;\n    const {offsetCenter} = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n\n  isPointInBounds(pos, event) {\n    const {width, height} = this.controllerStateProps;\n    if (event && event.handled) {\n      return false;\n    }\n\n    const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n    if (inside && event) {\n      event.stopPropagation();\n    }\n    return inside;\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging() {\n    return this._interactionState.isDragging;\n  }\n\n  // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.\n  // This triggers a brief `pan` event.\n  // Calling this method will temporarily disable *start events to avoid conflicting transitions.\n  blockEvents(timeout) {\n    /* global setTimeout */\n    const timer = setTimeout(() => {\n      if (this._eventStartBlocked === timer) {\n        this._eventStartBlocked = null;\n      }\n    }, timeout);\n    this._eventStartBlocked = timer;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  setProps(props) {\n    if ('onViewStateChange' in props) {\n      this.onViewStateChange = props.onViewStateChange;\n    }\n    if ('onStateChange' in props) {\n      this.onStateChange = props.onStateChange;\n    }\n    if ('makeViewport' in props) {\n      this.makeViewport = props.makeViewport;\n    }\n    if ('dragMode' in props) {\n      this.dragMode = props.dragMode;\n    }\n    this.controllerStateProps = props;\n\n    if ('eventManager' in props && this.eventManager !== props.eventManager) {\n      // EventManager has changed\n      this.eventManager = props.eventManager;\n      this._events = {};\n      this.toggleEvents(this._customEvents, true);\n    }\n\n    if (!('transitionInterpolator' in props)) {\n      // Add default transition interpolator\n      props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;\n    }\n\n    this.transitionManager.processViewStateChange(props);\n\n    let {inertia} = props;\n    if (inertia === true) {\n      inertia = DEFAULT_INERTIA;\n    }\n    this.inertia = inertia;\n\n    // TODO - make sure these are not reset on every setProps\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && touchRotate);\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  updateTransition() {\n    this.transitionManager.updateTransition();\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  // Private Methods\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newControllerState, extraProps = {}, interactionState = {}) {\n    const viewState = {...newControllerState.getViewportProps(), ...extraProps};\n\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = this.controllerState !== newControllerState;\n    // const oldViewState = this.controllerState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n\n    this._state = newControllerState.getState();\n    this._setInteractionState(interactionState);\n\n    if (changed) {\n      const oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n      if (this.onViewStateChange) {\n        this.onViewStateChange({viewState, interactionState: this._interactionState, oldViewState});\n      }\n    }\n  }\n\n  _onTransition(params) {\n    if (this.onViewStateChange) {\n      params.interactionState = this._interactionState;\n      this.onViewStateChange(params);\n    }\n  }\n\n  _setInteractionState(newStates) {\n    Object.assign(this._interactionState, newStates);\n    if (this.onStateChange) {\n      this.onStateChange(this._interactionState);\n    }\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n    if (this.invertPan || this.dragMode === 'pan') {\n      // invertPan is replaced by props.dragMode, keeping for backward compatibility\n      alternateMode = !alternateMode;\n    }\n    const newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({\n      pos\n    });\n    this._panMove = alternateMode;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` and `panend` event.\n  _onPan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  _onPanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.pan({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  _onPanMoveEnd(event) {\n    const {inertia} = this;\n    if (this.dragPan && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      const newControllerState = this.controllerState.pan({pos: endPos}).panEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: true\n        }\n      );\n    } else {\n      const newControllerState = this.controllerState.panEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  _onPanRotateEnd(event) {\n    const {inertia} = this;\n    if (this.dragRotate && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      const newControllerState = this.controllerState.rotate({pos: endPos}).rotateEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n    event.preventDefault();\n\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const {speed = 0.01, smooth = false} = this.scrollZoom;\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({pos, scale});\n    this.updateViewport(\n      newControllerState,\n      {...this._getTransitionProps({around: pos}), transitionDuration: smooth ? 250 : 1},\n      {\n        isZooming: true,\n        isPanning: true\n      }\n    );\n    return true;\n  }\n\n  _onTriplePanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    const newControllerState = this.controllerState.rotateStart({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  _onTriplePan(event) {\n    if (!this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    pos[0] -= event.deltaX;\n\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  _onTriplePanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia} = this;\n    if (this.touchRotate && inertia && event.velocityY) {\n      const pos = this.getCenter(event);\n      const endPos = [pos[0], (pos[1] += (event.velocityY * inertia) / 2)];\n      const newControllerState = this.controllerState.rotate({pos: endPos});\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._startPinchRotation = event.rotation;\n    this._lastPinchEvent = event;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinchmove` and `pinchend` events.\n  _onPinch(event) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      newControllerState = newControllerState.rotate({\n        deltaAngleX: this._startPinchRotation - rotation\n      });\n    }\n\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    this._lastPinchEvent = event;\n    return true;\n  }\n\n  _onPinchEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia, _lastPinchEvent} = this;\n    if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n      const pos = this.getCenter(event);\n      let newControllerState = this.controllerState.rotateEnd();\n      const z = Math.log2(event.scale);\n      const velocityZ =\n        (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n      const endScale = Math.pow(2, z + (velocityZ * inertia) / 2);\n      newControllerState = newControllerState.zoom({pos, scale: endScale}).zoomEnd();\n\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps({around: pos}),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: this.touchZoom,\n          isZooming: this.touchZoom,\n          isRotating: false\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n    }\n    this._startPinchRotation = null;\n    this._lastPinchEvent = null;\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newControllerState = this.controllerState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(newControllerState, this._getTransitionProps({around: pos}), {\n      isZooming: true,\n      isPanning: true\n    });\n    this.blockEvents(100);\n    return true;\n  }\n\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {zoomSpeed, moveSpeed, rotateSpeedX, rotateSpeedY} = this.keyboard;\n    const {controllerState} = this;\n    let newControllerState;\n    const interactionState = {};\n\n    switch (event.srcEvent.code) {\n      case 'Minus':\n        newControllerState = funcKey\n          ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed)\n          : controllerState.zoomOut(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'Equal':\n        newControllerState = funcKey\n          ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed)\n          : controllerState.zoomIn(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'ArrowLeft':\n        if (funcKey) {\n          newControllerState = controllerState.rotateLeft(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveLeft(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowRight':\n        if (funcKey) {\n          newControllerState = controllerState.rotateRight(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveRight(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowUp':\n        if (funcKey) {\n          newControllerState = controllerState.rotateUp(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveUp(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowDown':\n        if (funcKey) {\n          newControllerState = controllerState.rotateDown(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveDown(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      default:\n        return false;\n    }\n    this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n    return true;\n  }\n\n  _getTransitionProps(opts) {\n    const {_transition} = this;\n\n    if (!_transition) {\n      return NO_TRANSITION_PROPS;\n    }\n\n    // Enables Transitions on double-tap and key-down events.\n    return opts\n      ? {\n          ..._transition,\n          transitionInterpolator: new LinearInterpolator({\n            ...opts,\n            transitionProps: this.linearTransitionProps,\n            makeViewport: this.controllerState.makeViewport\n          })\n        }\n      : _transition;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}