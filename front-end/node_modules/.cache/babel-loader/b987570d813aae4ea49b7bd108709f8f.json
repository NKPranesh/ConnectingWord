{"ast":null,"code":"const vs = \"\\nuniform DATAFILTER_TYPE filter_min;\\nuniform DATAFILTER_TYPE filter_softMin;\\nuniform DATAFILTER_TYPE filter_softMax;\\nuniform DATAFILTER_TYPE filter_max;\\nuniform bool filter_useSoftMargin;\\nuniform bool filter_enabled;\\nuniform bool filter_transformSize;\\n\\n#ifdef NON_INSTANCED_MODEL\\n  #define DATAFILTER_ATTRIB filterValues\\n  #define DATAFILTER_ATTRIB_64LOW filterValues64Low\\n#else\\n  #define DATAFILTER_ATTRIB instanceFilterValues\\n  #define DATAFILTER_ATTRIB_64LOW instanceFilterValues64Low\\n#endif\\n\\nattribute DATAFILTER_TYPE DATAFILTER_ATTRIB;\\n#ifdef DATAFILTER_DOUBLE\\n  attribute DATAFILTER_TYPE DATAFILTER_ATTRIB_64LOW;\\n\\n  uniform DATAFILTER_TYPE filter_min64High;\\n  uniform DATAFILTER_TYPE filter_max64High;\\n#endif\\n\\nvarying float dataFilter_value;\\n\\nfloat dataFilter_reduceValue(float value) {\\n  return value;\\n}\\nfloat dataFilter_reduceValue(vec2 value) {\\n  return min(value.x, value.y);\\n}\\nfloat dataFilter_reduceValue(vec3 value) {\\n  return min(min(value.x, value.y), value.z);\\n}\\nfloat dataFilter_reduceValue(vec4 value) {\\n  return min(min(value.x, value.y), min(value.z, value.w));\\n}\\nvoid dataFilter_setValue(DATAFILTER_TYPE valueFromMin, DATAFILTER_TYPE valueFromMax) {\\n  if (filter_enabled) {\\n    if (filter_useSoftMargin) {\\n      dataFilter_value = dataFilter_reduceValue(\\n        smoothstep(filter_min, filter_softMin, valueFromMin) *\\n        (1.0 - smoothstep(filter_softMax, filter_max, valueFromMax))\\n      );\\n    } else {\\n      dataFilter_value = dataFilter_reduceValue(\\n        step(filter_min, valueFromMin) * step(valueFromMax, filter_max)\\n      );\\n    }\\n  } else {\\n    dataFilter_value = 1.0;\\n  }\\n}\\n\";\nconst fs = \"\\nuniform bool filter_transformColor;\\nvarying float dataFilter_value;\\n\";\n\nconst getUniforms = opts => {\n  if (!opts || !opts.extensions) {\n    return {};\n  }\n\n  const {\n    filterRange = [-1, 1],\n    filterEnabled = true,\n    filterTransformSize = true,\n    filterTransformColor = true\n  } = opts;\n  const filterSoftRange = opts.filterSoftRange || filterRange;\n  const uniforms = Number.isFinite(filterRange[0]) ? {\n    filter_min: filterRange[0],\n    filter_softMin: filterSoftRange[0],\n    filter_softMax: filterSoftRange[1],\n    filter_max: filterRange[1]\n  } : {\n    filter_min: filterRange.map(r => r[0]),\n    filter_softMin: filterSoftRange.map(r => r[0]),\n    filter_softMax: filterSoftRange.map(r => r[1]),\n    filter_max: filterRange.map(r => r[1])\n  };\n  uniforms.filter_enabled = filterEnabled;\n  uniforms.filter_useSoftMargin = Boolean(opts.filterSoftRange);\n  uniforms.filter_transformSize = filterEnabled && filterTransformSize;\n  uniforms.filter_transformColor = filterEnabled && filterTransformColor;\n  return uniforms;\n};\n\nconst getUniforms64 = opts => {\n  if (!opts || !opts.extensions) {\n    return {};\n  }\n\n  const uniforms = getUniforms(opts);\n\n  if (Number.isFinite(uniforms.filter_min)) {\n    const min64High = Math.fround(uniforms.filter_min);\n    uniforms.filter_min -= min64High;\n    uniforms.filter_softMin -= min64High;\n    uniforms.filter_min64High = min64High;\n    const max64High = Math.fround(uniforms.filter_max);\n    uniforms.filter_max -= max64High;\n    uniforms.filter_softMax -= max64High;\n    uniforms.filter_max64High = max64High;\n  } else {\n    const min64High = uniforms.filter_min.map(Math.fround);\n    uniforms.filter_min = uniforms.filter_min.map((x, i) => x - min64High[i]);\n    uniforms.filter_softMin = uniforms.filter_softMin.map((x, i) => x - min64High[i]);\n    uniforms.filter_min64High = min64High;\n    const max64High = uniforms.filter_max.map(Math.fround);\n    uniforms.filter_max = uniforms.filter_max.map((x, i) => x - max64High[i]);\n    uniforms.filter_softMax = uniforms.filter_softMax.map((x, i) => x - max64High[i]);\n    uniforms.filter_max64High = max64High;\n  }\n\n  return uniforms;\n};\n\nconst inject = {\n  'vs:#main-start': \"\\n    #ifdef DATAFILTER_DOUBLE\\n      dataFilter_setValue(\\n        DATAFILTER_ATTRIB - filter_min64High + DATAFILTER_ATTRIB_64LOW,\\n        DATAFILTER_ATTRIB - filter_max64High + DATAFILTER_ATTRIB_64LOW\\n      );\\n    #else\\n      dataFilter_setValue(DATAFILTER_ATTRIB, DATAFILTER_ATTRIB);\\n    #endif\\n  \",\n  'vs:DECKGL_FILTER_SIZE': \"\\n    if (filter_transformSize) {\\n      size = size * dataFilter_value;\\n    }\\n  \",\n  'fs:DECKGL_FILTER_COLOR': \"\\n    if (dataFilter_value == 0.0) discard;\\n    if (filter_transformColor) {\\n      color.a *= dataFilter_value;\\n    }\\n  \"\n};\nexport const shaderModule = {\n  name: 'data-filter',\n  vs,\n  fs,\n  inject,\n  getUniforms\n};\nexport const shaderModule64 = {\n  name: 'data-filter-fp64',\n  vs,\n  fs,\n  inject,\n  getUniforms: getUniforms64\n};","map":{"version":3,"sources":["../../../src/data-filter/shader-module.js"],"names":["vs","fs","getUniforms","opts","filterRange","filterEnabled","filterTransformSize","filterTransformColor","filterSoftRange","uniforms","filter_min","filter_softMin","filter_softMax","filter_max","r","Boolean","getUniforms64","Number","min64High","Math","max64High","x","inject","shaderModule","name","shaderModule64"],"mappings":"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","sourcesContent":["/*\n * data filter shader module\n */\nconst vs = `\nuniform DATAFILTER_TYPE filter_min;\nuniform DATAFILTER_TYPE filter_softMin;\nuniform DATAFILTER_TYPE filter_softMax;\nuniform DATAFILTER_TYPE filter_max;\nuniform bool filter_useSoftMargin;\nuniform bool filter_enabled;\nuniform bool filter_transformSize;\n\n#ifdef NON_INSTANCED_MODEL\n  #define DATAFILTER_ATTRIB filterValues\n  #define DATAFILTER_ATTRIB_64LOW filterValues64Low\n#else\n  #define DATAFILTER_ATTRIB instanceFilterValues\n  #define DATAFILTER_ATTRIB_64LOW instanceFilterValues64Low\n#endif\n\nattribute DATAFILTER_TYPE DATAFILTER_ATTRIB;\n#ifdef DATAFILTER_DOUBLE\n  attribute DATAFILTER_TYPE DATAFILTER_ATTRIB_64LOW;\n\n  uniform DATAFILTER_TYPE filter_min64High;\n  uniform DATAFILTER_TYPE filter_max64High;\n#endif\n\nvarying float dataFilter_value;\n\nfloat dataFilter_reduceValue(float value) {\n  return value;\n}\nfloat dataFilter_reduceValue(vec2 value) {\n  return min(value.x, value.y);\n}\nfloat dataFilter_reduceValue(vec3 value) {\n  return min(min(value.x, value.y), value.z);\n}\nfloat dataFilter_reduceValue(vec4 value) {\n  return min(min(value.x, value.y), min(value.z, value.w));\n}\nvoid dataFilter_setValue(DATAFILTER_TYPE valueFromMin, DATAFILTER_TYPE valueFromMax) {\n  if (filter_enabled) {\n    if (filter_useSoftMargin) {\n      dataFilter_value = dataFilter_reduceValue(\n        smoothstep(filter_min, filter_softMin, valueFromMin) *\n        (1.0 - smoothstep(filter_softMax, filter_max, valueFromMax))\n      );\n    } else {\n      dataFilter_value = dataFilter_reduceValue(\n        step(filter_min, valueFromMin) * step(valueFromMax, filter_max)\n      );\n    }\n  } else {\n    dataFilter_value = 1.0;\n  }\n}\n`;\n\nconst fs = `\nuniform bool filter_transformColor;\nvarying float dataFilter_value;\n`;\n\nconst getUniforms = opts => {\n  if (!opts || !opts.extensions) {\n    return {};\n  }\n  const {\n    filterRange = [-1, 1],\n    filterEnabled = true,\n    filterTransformSize = true,\n    filterTransformColor = true\n  } = opts;\n  const filterSoftRange = opts.filterSoftRange || filterRange;\n\n  const uniforms = Number.isFinite(filterRange[0])\n    ? {\n        filter_min: filterRange[0],\n        filter_softMin: filterSoftRange[0],\n        filter_softMax: filterSoftRange[1],\n        filter_max: filterRange[1]\n      }\n    : {\n        filter_min: filterRange.map(r => r[0]),\n        filter_softMin: filterSoftRange.map(r => r[0]),\n        filter_softMax: filterSoftRange.map(r => r[1]),\n        filter_max: filterRange.map(r => r[1])\n      };\n  uniforms.filter_enabled = filterEnabled;\n  uniforms.filter_useSoftMargin = Boolean(opts.filterSoftRange);\n  uniforms.filter_transformSize = filterEnabled && filterTransformSize;\n  uniforms.filter_transformColor = filterEnabled && filterTransformColor;\n\n  return uniforms;\n};\n\nconst getUniforms64 = opts => {\n  if (!opts || !opts.extensions) {\n    return {};\n  }\n  const uniforms = getUniforms(opts);\n  if (Number.isFinite(uniforms.filter_min)) {\n    const min64High = Math.fround(uniforms.filter_min);\n    uniforms.filter_min -= min64High;\n    uniforms.filter_softMin -= min64High;\n    uniforms.filter_min64High = min64High;\n\n    const max64High = Math.fround(uniforms.filter_max);\n    uniforms.filter_max -= max64High;\n    uniforms.filter_softMax -= max64High;\n    uniforms.filter_max64High = max64High;\n  } else {\n    const min64High = uniforms.filter_min.map(Math.fround);\n    uniforms.filter_min = uniforms.filter_min.map((x, i) => x - min64High[i]);\n    uniforms.filter_softMin = uniforms.filter_softMin.map((x, i) => x - min64High[i]);\n    uniforms.filter_min64High = min64High;\n\n    const max64High = uniforms.filter_max.map(Math.fround);\n    uniforms.filter_max = uniforms.filter_max.map((x, i) => x - max64High[i]);\n    uniforms.filter_softMax = uniforms.filter_softMax.map((x, i) => x - max64High[i]);\n    uniforms.filter_max64High = max64High;\n  }\n  return uniforms;\n};\n\nconst inject = {\n  'vs:#main-start': `\n    #ifdef DATAFILTER_DOUBLE\n      dataFilter_setValue(\n        DATAFILTER_ATTRIB - filter_min64High + DATAFILTER_ATTRIB_64LOW,\n        DATAFILTER_ATTRIB - filter_max64High + DATAFILTER_ATTRIB_64LOW\n      );\n    #else\n      dataFilter_setValue(DATAFILTER_ATTRIB, DATAFILTER_ATTRIB);\n    #endif\n  `,\n\n  'vs:DECKGL_FILTER_SIZE': `\n    if (filter_transformSize) {\n      size = size * dataFilter_value;\n    }\n  `,\n\n  'fs:DECKGL_FILTER_COLOR': `\n    if (dataFilter_value == 0.0) discard;\n    if (filter_transformColor) {\n      color.a *= dataFilter_value;\n    }\n  `\n};\n\nexport const shaderModule = {\n  name: 'data-filter',\n  vs,\n  fs,\n  inject,\n  getUniforms\n};\n\nexport const shaderModule64 = {\n  name: 'data-filter-fp64',\n  vs,\n  fs,\n  inject,\n  getUniforms: getUniforms64\n};\n"]},"metadata":{},"sourceType":"module"}