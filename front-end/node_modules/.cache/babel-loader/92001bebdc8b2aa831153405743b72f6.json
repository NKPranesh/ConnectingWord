{"ast":null,"code":"import { Layer, project32, picking, log } from '@deck.gl/core';\nimport { isWebGL2 } from '@luma.gl/core';\nimport { pbr } from '@luma.gl/shadertools';\nimport { ScenegraphNode, createGLTFObjects } from '@luma.gl/experimental';\nimport { GLTFLoader } from '@loaders.gl/gltf';\nimport { waitForGLTFAssets } from './gltf-utils';\nimport { MATRIX_ATTRIBUTES, shouldComposeModelMatrix } from '../utils/matrix';\nimport vs from './scenegraph-layer-vertex.glsl';\nimport fs from './scenegraph-layer-fragment.glsl';\nconst DEFAULT_COLOR = [255, 255, 255, 255];\nconst defaultProps = {\n  scenegraph: {\n    type: 'object',\n    value: null,\n    async: true\n  },\n  getScene: gltf => {\n    if (gltf && gltf.scenes) {\n      return typeof gltf.scene === 'object' ? gltf.scene : gltf.scenes[gltf.scene || 0];\n    }\n\n    return gltf;\n  },\n  getAnimator: scenegraph => scenegraph && scenegraph.animator,\n  _animations: null,\n  sizeScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  sizeMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  sizeMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  _lighting: 'flat',\n  _imageBasedLightingEnvironment: null,\n  getOrientation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getScale: {\n    type: 'accessor',\n    value: [1, 1, 1]\n  },\n  getTranslation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getTransformMatrix: {\n    type: 'accessor',\n    value: []\n  },\n  loaders: [GLTFLoader]\n};\nexport default class ScenegraphLayer extends Layer {\n  getShaders() {\n    const modules = [project32, picking];\n\n    if (this.props._lighting === 'pbr') {\n      modules.push(pbr);\n    }\n\n    return {\n      vs,\n      fs,\n      modules\n    };\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        accessor: 'getPosition',\n        transition: true\n      },\n      instanceColors: {\n        type: 5121,\n        size: this.props.colorFormat.length,\n        accessor: 'getColor',\n        normalized: true,\n        defaultValue: DEFAULT_COLOR,\n        transition: true\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      oldProps\n    } = params;\n\n    if (props.scenegraph !== oldProps.scenegraph) {\n      this._updateScenegraph(props);\n    } else if (props._animations !== oldProps._animations) {\n      this._applyAnimationsProp(this.state.scenegraph, this.state.animator, props._animations);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    this._deleteScenegraph();\n  }\n\n  _updateScenegraph(props) {\n    const {\n      gl\n    } = this.context;\n    let scenegraphData = null;\n\n    if (props.scenegraph instanceof ScenegraphNode) {\n      scenegraphData = {\n        scenes: [props.scenegraph]\n      };\n    } else if (props.scenegraph && !props.scenegraph.gltf) {\n      const gltf = props.scenegraph;\n      const gltfObjects = createGLTFObjects(gl, gltf, this._getModelOptions());\n      scenegraphData = {\n        gltf,\n        ...gltfObjects\n      };\n      waitForGLTFAssets(gltfObjects).then(() => this.setNeedsRedraw());\n    } else if (props.scenegraph) {\n      log.deprecated('ScenegraphLayer.props.scenegraph', 'Use GLTFLoader instead of GLTFScenegraphLoader')();\n      scenegraphData = props.scenegraph;\n    }\n\n    const options = {\n      layer: this,\n      gl\n    };\n    const scenegraph = props.getScene(scenegraphData, options);\n    const animator = props.getAnimator(scenegraphData, options);\n\n    if (scenegraph instanceof ScenegraphNode) {\n      this._deleteScenegraph();\n\n      this._applyAllAttributes(scenegraph);\n\n      this._applyAnimationsProp(scenegraph, animator, props._animations);\n\n      this.setState({\n        scenegraph,\n        animator\n      });\n    } else if (scenegraph !== null) {\n      log.warn('invalid scenegraph:', scenegraph)();\n    }\n  }\n\n  _applyAllAttributes(scenegraph) {\n    if (this.state.attributesAvailable) {\n      const allAttributes = this.getAttributeManager().getAttributes();\n      scenegraph.traverse(model => {\n        this._setModelAttributes(model.model, allAttributes);\n      });\n    }\n  }\n\n  _applyAnimationsProp(scenegraph, animator, animationsProp) {\n    if (!scenegraph || !animator || !animationsProp) {\n      return;\n    }\n\n    const animations = animator.getAnimations();\n    Object.keys(animationsProp).sort().forEach(key => {\n      const value = animationsProp[key];\n\n      if (key === '*') {\n        animations.forEach(animation => {\n          Object.assign(animation, value);\n        });\n      } else if (Number.isFinite(Number(key))) {\n        const number = Number(key);\n\n        if (number >= 0 && number < animations.length) {\n          Object.assign(animations[number], value);\n        } else {\n          log.warn(\"animation \".concat(key, \" not found\"))();\n        }\n      } else {\n        const findResult = animations.find(_ref => {\n          let {\n            name\n          } = _ref;\n          return name === key;\n        });\n\n        if (findResult) {\n          Object.assign(findResult, value);\n        } else {\n          log.warn(\"animation \".concat(key, \" not found\"))();\n        }\n      }\n    });\n  }\n\n  _deleteScenegraph() {\n    const {\n      scenegraph\n    } = this.state;\n\n    if (scenegraph instanceof ScenegraphNode) {\n      scenegraph.delete();\n    }\n  }\n\n  _getModelOptions() {\n    const {\n      _imageBasedLightingEnvironment\n    } = this.props;\n    let env = null;\n\n    if (_imageBasedLightingEnvironment) {\n      if (typeof _imageBasedLightingEnvironment === 'function') {\n        env = _imageBasedLightingEnvironment({\n          gl: this.context.gl,\n          layer: this\n        });\n      } else {\n        env = _imageBasedLightingEnvironment;\n      }\n    }\n\n    return {\n      gl: this.context.gl,\n      waitForFullLoad: true,\n      imageBasedLightingEnvironment: env,\n      modelOptions: {\n        isInstanced: true,\n        transpileToGLSL100: !isWebGL2(this.context.gl),\n        ...this.getShaders()\n      },\n      useTangents: false\n    };\n  }\n\n  updateAttributes(changedAttributes) {\n    this.setState({\n      attributesAvailable: true\n    });\n    if (!this.state.scenegraph) return;\n    this.state.scenegraph.traverse(model => {\n      this._setModelAttributes(model.model, changedAttributes);\n    });\n  }\n\n  draw(_ref2) {\n    let {\n      moduleParameters = null,\n      parameters = {},\n      context\n    } = _ref2;\n    if (!this.state.scenegraph) return;\n\n    if (this.props._animations && this.state.animator) {\n      this.state.animator.animate(context.timeline.getTime());\n      this.setNeedsRedraw();\n    }\n\n    const {\n      viewport\n    } = this.context;\n    const {\n      sizeScale,\n      sizeMinPixels,\n      sizeMaxPixels,\n      opacity,\n      coordinateSystem\n    } = this.props;\n    const numInstances = this.getNumInstances();\n    this.state.scenegraph.traverse((model, _ref3) => {\n      let {\n        worldMatrix\n      } = _ref3;\n      model.model.setInstanceCount(numInstances);\n      model.updateModuleSettings(moduleParameters);\n      model.draw({\n        parameters,\n        uniforms: {\n          sizeScale,\n          opacity,\n          sizeMinPixels,\n          sizeMaxPixels,\n          composeModelMatrix: shouldComposeModelMatrix(viewport, coordinateSystem),\n          sceneModelMatrix: worldMatrix,\n          u_Camera: model.model.getUniforms().project_uCameraPosition\n        }\n      });\n    });\n  }\n\n}\nScenegraphLayer.layerName = 'ScenegraphLayer';\nScenegraphLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/scenegraph-layer/scenegraph-layer.js"],"names":["DEFAULT_COLOR","defaultProps","scenegraph","type","value","async","getScene","gltf","getAnimator","_animations","sizeScale","min","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","getPosition","x","position","getColor","_lighting","_imageBasedLightingEnvironment","getOrientation","getScale","getTranslation","getTransformMatrix","loaders","getShaders","modules","initializeState","attributeManager","instancePositions","size","fp64","accessor","transition","instanceColors","normalized","defaultValue","instanceModelMatrix","MATRIX_ATTRIBUTES","updateState","oldProps","props","finalizeState","_updateScenegraph","gl","scenegraphData","scenes","gltfObjects","createGLTFObjects","waitForGLTFAssets","log","options","layer","animator","_applyAllAttributes","allAttributes","model","_applyAnimationsProp","animations","Object","key","animationsProp","animation","number","findResult","name","_deleteScenegraph","_getModelOptions","env","waitForFullLoad","imageBasedLightingEnvironment","modelOptions","isInstanced","transpileToGLSL100","isWebGL2","useTangents","updateAttributes","attributesAvailable","draw","moduleParameters","parameters","context","viewport","coordinateSystem","numInstances","worldMatrix","uniforms","composeModelMatrix","shouldComposeModelMatrix","sceneModelMatrix","u_Camera","project_uCameraPosition","ScenegraphLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, log} from '@deck.gl/core';\nimport {isWebGL2} from '@luma.gl/core';\nimport {pbr} from '@luma.gl/shadertools';\nimport {ScenegraphNode, createGLTFObjects} from '@luma.gl/experimental';\nimport GL from '@luma.gl/constants';\nimport {GLTFLoader} from '@loaders.gl/gltf';\nimport {waitForGLTFAssets} from './gltf-utils';\n\nimport {MATRIX_ATTRIBUTES, shouldComposeModelMatrix} from '../utils/matrix';\n\nimport vs from './scenegraph-layer-vertex.glsl';\nimport fs from './scenegraph-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [255, 255, 255, 255];\n\nconst defaultProps = {\n  scenegraph: {type: 'object', value: null, async: true},\n  getScene: gltf => {\n    if (gltf && gltf.scenes) {\n      // gltf post processor replaces `gltf.scene` number with the scene `object`\n      return typeof gltf.scene === 'object' ? gltf.scene : gltf.scenes[gltf.scene || 0];\n    }\n    return gltf;\n  },\n  getAnimator: scenegraph => scenegraph && scenegraph.animator,\n  _animations: null,\n\n  sizeScale: {type: 'number', value: 1, min: 0},\n  sizeMinPixels: {type: 'number', min: 0, value: 0},\n  sizeMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // flat or pbr\n  _lighting: 'flat',\n  // _lighting must be pbr for this to work\n  _imageBasedLightingEnvironment: null,\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []},\n\n  loaders: [GLTFLoader]\n};\n\nexport default class ScenegraphLayer extends Layer {\n  getShaders() {\n    const modules = [project32, picking];\n\n    if (this.props._lighting === 'pbr') {\n      modules.push(pbr);\n    }\n\n    return {vs, fs, modules};\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        accessor: 'getPosition',\n        transition: true\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        size: this.props.colorFormat.length,\n        accessor: 'getColor',\n        normalized: true,\n        defaultValue: DEFAULT_COLOR,\n        transition: true\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {props, oldProps} = params;\n\n    if (props.scenegraph !== oldProps.scenegraph) {\n      this._updateScenegraph(props);\n    } else if (props._animations !== oldProps._animations) {\n      this._applyAnimationsProp(this.state.scenegraph, this.state.animator, props._animations);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    this._deleteScenegraph();\n  }\n\n  _updateScenegraph(props) {\n    const {gl} = this.context;\n    let scenegraphData = null;\n    if (props.scenegraph instanceof ScenegraphNode) {\n      // Signature 1: props.scenegraph is a proper luma.gl Scenegraph\n      scenegraphData = {scenes: [props.scenegraph]};\n    } else if (props.scenegraph && !props.scenegraph.gltf) {\n      // Converts loaders.gl gltf to luma.gl scenegraph using the undocumented @luma.gl/experimental function\n      const gltf = props.scenegraph;\n      const gltfObjects = createGLTFObjects(gl, gltf, this._getModelOptions());\n      scenegraphData = {gltf, ...gltfObjects};\n\n      waitForGLTFAssets(gltfObjects).then(() => this.setNeedsRedraw());\n    } else if (props.scenegraph) {\n      // DEPRECATED PATH: Assumes this data was loaded through GLTFScenegraphLoader\n      log.deprecated(\n        'ScenegraphLayer.props.scenegraph',\n        'Use GLTFLoader instead of GLTFScenegraphLoader'\n      )();\n      scenegraphData = props.scenegraph;\n    }\n\n    const options = {layer: this, gl};\n    const scenegraph = props.getScene(scenegraphData, options);\n    const animator = props.getAnimator(scenegraphData, options);\n\n    if (scenegraph instanceof ScenegraphNode) {\n      this._deleteScenegraph();\n      this._applyAllAttributes(scenegraph);\n      this._applyAnimationsProp(scenegraph, animator, props._animations);\n      this.setState({scenegraph, animator});\n    } else if (scenegraph !== null) {\n      log.warn('invalid scenegraph:', scenegraph)();\n    }\n  }\n\n  _applyAllAttributes(scenegraph) {\n    if (this.state.attributesAvailable) {\n      const allAttributes = this.getAttributeManager().getAttributes();\n      scenegraph.traverse(model => {\n        this._setModelAttributes(model.model, allAttributes);\n      });\n    }\n  }\n\n  _applyAnimationsProp(scenegraph, animator, animationsProp) {\n    if (!scenegraph || !animator || !animationsProp) {\n      return;\n    }\n\n    const animations = animator.getAnimations();\n\n    // sort() to ensure '*' comes first so that other values can override\n    Object.keys(animationsProp)\n      .sort()\n      .forEach(key => {\n        // Key can be:\n        //  - number for index number\n        //  - name for animation name\n        //  - * to affect all animations\n        const value = animationsProp[key];\n\n        if (key === '*') {\n          animations.forEach(animation => {\n            Object.assign(animation, value);\n          });\n        } else if (Number.isFinite(Number(key))) {\n          const number = Number(key);\n          if (number >= 0 && number < animations.length) {\n            Object.assign(animations[number], value);\n          } else {\n            log.warn(`animation ${key} not found`)();\n          }\n        } else {\n          const findResult = animations.find(({name}) => name === key);\n          if (findResult) {\n            Object.assign(findResult, value);\n          } else {\n            log.warn(`animation ${key} not found`)();\n          }\n        }\n      });\n  }\n\n  _deleteScenegraph() {\n    const {scenegraph} = this.state;\n    if (scenegraph instanceof ScenegraphNode) {\n      scenegraph.delete();\n    }\n  }\n\n  _getModelOptions() {\n    const {_imageBasedLightingEnvironment} = this.props;\n\n    let env = null;\n    if (_imageBasedLightingEnvironment) {\n      if (typeof _imageBasedLightingEnvironment === 'function') {\n        env = _imageBasedLightingEnvironment({gl: this.context.gl, layer: this});\n      } else {\n        env = _imageBasedLightingEnvironment;\n      }\n    }\n\n    return {\n      gl: this.context.gl,\n      waitForFullLoad: true,\n      imageBasedLightingEnvironment: env,\n      modelOptions: {\n        isInstanced: true,\n        transpileToGLSL100: !isWebGL2(this.context.gl),\n        ...this.getShaders()\n      },\n      // tangents are not supported\n      useTangents: false\n    };\n  }\n\n  updateAttributes(changedAttributes) {\n    this.setState({attributesAvailable: true});\n    if (!this.state.scenegraph) return;\n\n    this.state.scenegraph.traverse(model => {\n      this._setModelAttributes(model.model, changedAttributes);\n    });\n  }\n\n  draw({moduleParameters = null, parameters = {}, context}) {\n    if (!this.state.scenegraph) return;\n\n    if (this.props._animations && this.state.animator) {\n      this.state.animator.animate(context.timeline.getTime());\n      this.setNeedsRedraw();\n    }\n\n    const {viewport} = this.context;\n    const {sizeScale, sizeMinPixels, sizeMaxPixels, opacity, coordinateSystem} = this.props;\n    const numInstances = this.getNumInstances();\n    this.state.scenegraph.traverse((model, {worldMatrix}) => {\n      model.model.setInstanceCount(numInstances);\n      model.updateModuleSettings(moduleParameters);\n      model.draw({\n        parameters,\n        uniforms: {\n          sizeScale,\n          opacity,\n          sizeMinPixels,\n          sizeMaxPixels,\n          composeModelMatrix: shouldComposeModelMatrix(viewport, coordinateSystem),\n          sceneModelMatrix: worldMatrix,\n          // Needed for PBR (TODO: find better way to get it)\n          u_Camera: model.model.getUniforms().project_uCameraPosition\n        }\n      });\n    });\n  }\n}\n\nScenegraphLayer.layerName = 'ScenegraphLayer';\nScenegraphLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}