{"ast":null,"code":"import { assert } from '@loaders.gl/loader-utils';\nexport function getStringFromArrayBuffer(arrayBuffer, byteOffset, byteLength) {\n  assert(arrayBuffer instanceof ArrayBuffer);\n  const textDecoder = new TextDecoder('utf8');\n  const typedArray = new Uint8Array(arrayBuffer, byteOffset, byteLength);\n  const string = textDecoder.decode(typedArray);\n  return string;\n}\nexport function getStringFromTypedArray(typedArray) {\n  assert(ArrayBuffer.isView(typedArray));\n  const textDecoder = new TextDecoder('utf8');\n  const string = textDecoder.decode(typedArray);\n  return string;\n}\nexport function getMagicString(arrayBuffer) {\n  let byteOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const dataView = new DataView(arrayBuffer);\n  return \"\".concat(String.fromCharCode(dataView.getUint8(byteOffset + 0))).concat(String.fromCharCode(dataView.getUint8(byteOffset + 1))).concat(String.fromCharCode(dataView.getUint8(byteOffset + 2))).concat(String.fromCharCode(dataView.getUint8(byteOffset + 3)));\n}","map":{"version":3,"sources":["../../../../../src/lib/parsers/helpers/parse-utils.js"],"names":["assert","arrayBuffer","textDecoder","typedArray","string","ArrayBuffer","byteOffset","dataView","String"],"mappings":"AAGA,SAAA,MAAA,QAAA,0BAAA;AAGA,OAAO,SAAA,wBAAA,CAAA,WAAA,EAAA,UAAA,EAAA,UAAA,EAAuE;AAC5EA,EAAAA,MAAM,CAACC,WAAW,YAAlBD,WAAM,CAANA;AACA,QAAME,WAAW,GAAG,IAAA,WAAA,CAApB,MAAoB,CAApB;AACA,QAAMC,UAAU,GAAG,IAAA,UAAA,CAAA,WAAA,EAAA,UAAA,EAAnB,UAAmB,CAAnB;AACA,QAAMC,MAAM,GAAGF,WAAW,CAAXA,MAAAA,CAAf,UAAeA,CAAf;AACA,SAAA,MAAA;AACD;AAGD,OAAO,SAAA,uBAAA,CAAA,UAAA,EAA6C;AAClDF,EAAAA,MAAM,CAACK,WAAW,CAAXA,MAAAA,CAAPL,UAAOK,CAAD,CAANL;AACA,QAAME,WAAW,GAAG,IAAA,WAAA,CAApB,MAAoB,CAApB;AACA,QAAME,MAAM,GAAGF,WAAW,CAAXA,MAAAA,CAAf,UAAeA,CAAf;AACA,SAAA,MAAA;AACD;AAED,OAAO,SAAA,cAAA,CAAA,WAAA,EAAqD;AAAA,MAAhBI,UAAgB,uEAArD,CAAqD;AAC1D,QAAMC,QAAQ,GAAG,IAAA,QAAA,CAAjB,WAAiB,CAAjB;AACA,SAAA,GAAA,MAAA,CACAC,MAAM,CAANA,YAAAA,CAAoBD,QAAQ,CAARA,QAAAA,CAAkBD,UAAU,GADhD,CACoBC,CAApBC,CADA,EAAA,MAAA,CAEAA,MAAM,CAANA,YAAAA,CAAoBD,QAAQ,CAARA,QAAAA,CAAkBD,UAAU,GAFhD,CAEoBC,CAApBC,CAFA,EAAA,MAAA,CAGAA,MAAM,CAANA,YAAAA,CAAoBD,QAAQ,CAARA,QAAAA,CAAkBD,UAAU,GAHhD,CAGoBC,CAApBC,CAHA,EAAA,MAAA,CAIAA,MAAM,CAANA,YAAAA,CAAoBD,QAAQ,CAARA,QAAAA,CAAkBD,UAAU,GAJhD,CAIoBC,CAApBC,CAJA,CAAA;AAKD","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {assert} from '@loaders.gl/loader-utils';\n\n// Decode the JSON binary array into clear text\nexport function getStringFromArrayBuffer(arrayBuffer, byteOffset, byteLength) {\n  assert(arrayBuffer instanceof ArrayBuffer);\n  const textDecoder = new TextDecoder('utf8');\n  const typedArray = new Uint8Array(arrayBuffer, byteOffset, byteLength);\n  const string = textDecoder.decode(typedArray);\n  return string;\n}\n\n// Decode the JSON binary array into clear text\nexport function getStringFromTypedArray(typedArray) {\n  assert(ArrayBuffer.isView(typedArray));\n  const textDecoder = new TextDecoder('utf8');\n  const string = textDecoder.decode(typedArray);\n  return string;\n}\n\nexport function getMagicString(arrayBuffer, byteOffset = 0) {\n  const dataView = new DataView(arrayBuffer);\n  return `\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 0))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 1))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 2))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 3))}`;\n}\n"]},"metadata":{},"sourceType":"module"}