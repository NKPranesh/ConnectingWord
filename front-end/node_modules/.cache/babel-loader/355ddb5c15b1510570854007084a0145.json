{"ast":null,"code":"export default class ShaderAttribute {\n  constructor(dataColumn, opts) {\n    this.opts = opts;\n    this.source = dataColumn;\n  }\n\n  get value() {\n    return this.source.value;\n  }\n\n  getValue() {\n    const buffer = this.source.getBuffer();\n    const accessor = this.getAccessor();\n\n    if (buffer) {\n      return [buffer, accessor];\n    }\n\n    const {\n      value\n    } = this.source;\n    const {\n      size\n    } = accessor;\n    let constantValue = value;\n\n    if (value && value.length !== size) {\n      constantValue = new Float32Array(size);\n      const index = accessor.elementOffset || 0;\n\n      for (let i = 0; i < size; ++i) {\n        constantValue[i] = value[index + i];\n      }\n    }\n\n    return constantValue;\n  }\n\n  getAccessor() {\n    return { ...this.source.getAccessor(),\n      ...this.opts\n    };\n  }\n\n}","map":{"version":3,"sources":["../../../../src/lib/attribute/shader-attribute.js"],"names":["constructor","value","getValue","buffer","accessor","size","constantValue","index","i","getAccessor","opts"],"mappings":"AAGA,eAAe,MAAA,eAAA,CAAsB;AACnCA,EAAAA,WAAW,CAAA,UAAA,EAAA,IAAA,EAAmB;AAE5B,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,MAAA,GAAA,UAAA;AACD;;AAED,MAAIC,KAAJ,GAAY;AACV,WAAO,KAAA,MAAA,CAAP,KAAA;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,UAAMC,MAAM,GAAG,KAAA,MAAA,CAAf,SAAe,EAAf;AACA,UAAMC,QAAQ,GAAG,KAAjB,WAAiB,EAAjB;;AACA,QAAA,MAAA,EAAY;AACV,aAAO,CAAA,MAAA,EAAP,QAAO,CAAP;AACD;;AAED,UAAM;AAACH,MAAAA;AAAD,QAAU,KAAhB,MAAA;AACA,UAAM;AAACI,MAAAA;AAAD,QAAN,QAAA;AACA,QAAIC,aAAa,GAAjB,KAAA;;AAEA,QAAIL,KAAK,IAAIA,KAAK,CAALA,MAAAA,KAAb,IAAA,EAAoC;AAClCK,MAAAA,aAAa,GAAG,IAAA,YAAA,CAAhBA,IAAgB,CAAhBA;AAEA,YAAMC,KAAK,GAAGH,QAAQ,CAARA,aAAAA,IAAd,CAAA;;AACA,WAAK,IAAII,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,IAAA,EAA0B,EAA1B,CAAA,EAA+B;AAC7BF,QAAAA,aAAa,CAAbA,CAAa,CAAbA,GAAmBL,KAAK,CAACM,KAAK,GAA9BD,CAAwB,CAAxBA;AACD;AACF;;AAED,WAAA,aAAA;AACD;;AAEDG,EAAAA,WAAW,GAAG;AACZ,WAAO,EAEL,GAAG,KAAA,MAAA,CAFE,WAEF,EAFE;AAIL,SAAG,KAAKC;AAJH,KAAP;AAMD;;AAzCkC","sourcesContent":["/* eslint-disable complexity */\n\n/* This class creates a luma.gl-compatible \"view\" on top of a DataColumn instance */\nexport default class ShaderAttribute {\n  constructor(dataColumn, opts) {\n    // Options that cannot be changed later\n    this.opts = opts;\n    this.source = dataColumn;\n  }\n\n  get value() {\n    return this.source.value;\n  }\n\n  getValue() {\n    const buffer = this.source.getBuffer();\n    const accessor = this.getAccessor();\n    if (buffer) {\n      return [buffer, accessor];\n    }\n\n    const {value} = this.source;\n    const {size} = accessor;\n    let constantValue = value;\n\n    if (value && value.length !== size) {\n      constantValue = new Float32Array(size);\n      // initiate offset values\n      const index = accessor.elementOffset || 0; // element offset\n      for (let i = 0; i < size; ++i) {\n        constantValue[i] = value[index + i];\n      }\n    }\n\n    return constantValue;\n  }\n\n  getAccessor() {\n    return {\n      // source data accessor\n      ...this.source.getAccessor(),\n      // shader attribute overrides\n      ...this.opts\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}