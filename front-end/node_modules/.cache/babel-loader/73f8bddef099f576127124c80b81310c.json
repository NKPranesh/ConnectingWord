{"ast":null,"code":"export default class Delatin {\n  constructor(data, width) {\n    let height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : width;\n    this.data = data;\n    this.width = width;\n    this.height = height;\n    this.coords = [];\n    this.triangles = [];\n    this._halfedges = [];\n    this._candidates = [];\n    this._queueIndices = [];\n    this._queue = [];\n    this._errors = [];\n    this._rms = [];\n    this._pending = [];\n    this._pendingLen = 0;\n    this._rmsSum = 0;\n    const x1 = width - 1;\n    const y1 = height - 1;\n\n    const p0 = this._addPoint(0, 0);\n\n    const p1 = this._addPoint(x1, 0);\n\n    const p2 = this._addPoint(0, y1);\n\n    const p3 = this._addPoint(x1, y1);\n\n    const t0 = this._addTriangle(p3, p0, p2, -1, -1, -1);\n\n    this._addTriangle(p0, p3, p1, t0, -1, -1);\n\n    this._flush();\n  }\n\n  run() {\n    let maxError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n    while (this.getMaxError() > maxError) {\n      this.refine();\n    }\n  }\n\n  refine() {\n    this._step();\n\n    this._flush();\n  }\n\n  getMaxError() {\n    return this._errors[0];\n  }\n\n  getRMSD() {\n    return this._rmsSum > 0 ? Math.sqrt(this._rmsSum / (this.width * this.height)) : 0;\n  }\n\n  heightAt(x, y) {\n    return this.data[this.width * y + x];\n  }\n\n  _flush() {\n    const coords = this.coords;\n\n    for (let i = 0; i < this._pendingLen; i++) {\n      const t = this._pending[i];\n      const a = 2 * this.triangles[t * 3 + 0];\n      const b = 2 * this.triangles[t * 3 + 1];\n      const c = 2 * this.triangles[t * 3 + 2];\n\n      this._findCandidate(coords[a], coords[a + 1], coords[b], coords[b + 1], coords[c], coords[c + 1], t);\n    }\n\n    this._pendingLen = 0;\n  }\n\n  _findCandidate(p0x, p0y, p1x, p1y, p2x, p2y, t) {\n    const minX = Math.min(p0x, p1x, p2x);\n    const minY = Math.min(p0y, p1y, p2y);\n    const maxX = Math.max(p0x, p1x, p2x);\n    const maxY = Math.max(p0y, p1y, p2y);\n    let w00 = orient(p1x, p1y, p2x, p2y, minX, minY);\n    let w01 = orient(p2x, p2y, p0x, p0y, minX, minY);\n    let w02 = orient(p0x, p0y, p1x, p1y, minX, minY);\n    const a01 = p1y - p0y;\n    const b01 = p0x - p1x;\n    const a12 = p2y - p1y;\n    const b12 = p1x - p2x;\n    const a20 = p0y - p2y;\n    const b20 = p2x - p0x;\n    const a = orient(p0x, p0y, p1x, p1y, p2x, p2y);\n    const z0 = this.heightAt(p0x, p0y) / a;\n    const z1 = this.heightAt(p1x, p1y) / a;\n    const z2 = this.heightAt(p2x, p2y) / a;\n    let maxError = 0;\n    let mx = 0;\n    let my = 0;\n    let rms = 0;\n\n    for (let y = minY; y <= maxY; y++) {\n      let dx = 0;\n\n      if (w00 < 0 && a12 !== 0) {\n        dx = Math.max(dx, Math.floor(-w00 / a12));\n      }\n\n      if (w01 < 0 && a20 !== 0) {\n        dx = Math.max(dx, Math.floor(-w01 / a20));\n      }\n\n      if (w02 < 0 && a01 !== 0) {\n        dx = Math.max(dx, Math.floor(-w02 / a01));\n      }\n\n      let w0 = w00 + a12 * dx;\n      let w1 = w01 + a20 * dx;\n      let w2 = w02 + a01 * dx;\n      let wasInside = false;\n\n      for (let x = minX + dx; x <= maxX; x++) {\n        if (w0 >= 0 && w1 >= 0 && w2 >= 0) {\n          wasInside = true;\n          const z = z0 * w0 + z1 * w1 + z2 * w2;\n          const dz = Math.abs(z - this.heightAt(x, y));\n          rms += dz * dz;\n\n          if (dz > maxError) {\n            maxError = dz;\n            mx = x;\n            my = y;\n          }\n        } else if (wasInside) {\n          break;\n        }\n\n        w0 += a12;\n        w1 += a20;\n        w2 += a01;\n      }\n\n      w00 += b12;\n      w01 += b20;\n      w02 += b01;\n    }\n\n    if (mx === p0x && my === p0y || mx === p1x && my === p1y || mx === p2x && my === p2y) {\n      maxError = 0;\n    }\n\n    this._candidates[2 * t] = mx;\n    this._candidates[2 * t + 1] = my;\n    this._rms[t] = rms;\n\n    this._queuePush(t, maxError, rms);\n  }\n\n  _step() {\n    const t = this._queuePop();\n\n    const e0 = t * 3 + 0;\n    const e1 = t * 3 + 1;\n    const e2 = t * 3 + 2;\n    const p0 = this.triangles[e0];\n    const p1 = this.triangles[e1];\n    const p2 = this.triangles[e2];\n    const ax = this.coords[2 * p0];\n    const ay = this.coords[2 * p0 + 1];\n    const bx = this.coords[2 * p1];\n    const by = this.coords[2 * p1 + 1];\n    const cx = this.coords[2 * p2];\n    const cy = this.coords[2 * p2 + 1];\n    const px = this._candidates[2 * t];\n    const py = this._candidates[2 * t + 1];\n\n    const pn = this._addPoint(px, py);\n\n    if (orient(ax, ay, bx, by, px, py) === 0) {\n      this._handleCollinear(pn, e0);\n    } else if (orient(bx, by, cx, cy, px, py) === 0) {\n      this._handleCollinear(pn, e1);\n    } else if (orient(cx, cy, ax, ay, px, py) === 0) {\n      this._handleCollinear(pn, e2);\n    } else {\n      const h0 = this._halfedges[e0];\n      const h1 = this._halfedges[e1];\n      const h2 = this._halfedges[e2];\n\n      const t0 = this._addTriangle(p0, p1, pn, h0, -1, -1, e0);\n\n      const t1 = this._addTriangle(p1, p2, pn, h1, -1, t0 + 1);\n\n      const t2 = this._addTriangle(p2, p0, pn, h2, t0 + 2, t1 + 1);\n\n      this._legalize(t0);\n\n      this._legalize(t1);\n\n      this._legalize(t2);\n    }\n  }\n\n  _addPoint(x, y) {\n    const i = this.coords.length >> 1;\n    this.coords.push(x, y);\n    return i;\n  }\n\n  _addTriangle(a, b, c, ab, bc, ca) {\n    let e = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : this.triangles.length;\n    const t = e / 3;\n    this.triangles[e + 0] = a;\n    this.triangles[e + 1] = b;\n    this.triangles[e + 2] = c;\n    this._halfedges[e + 0] = ab;\n    this._halfedges[e + 1] = bc;\n    this._halfedges[e + 2] = ca;\n\n    if (ab >= 0) {\n      this._halfedges[ab] = e + 0;\n    }\n\n    if (bc >= 0) {\n      this._halfedges[bc] = e + 1;\n    }\n\n    if (ca >= 0) {\n      this._halfedges[ca] = e + 2;\n    }\n\n    this._candidates[2 * t + 0] = 0;\n    this._candidates[2 * t + 1] = 0;\n    this._queueIndices[t] = -1;\n    this._rms[t] = 0;\n    this._pending[this._pendingLen++] = t;\n    return e;\n  }\n\n  _legalize(a) {\n    const b = this._halfedges[a];\n\n    if (b < 0) {\n      return;\n    }\n\n    const a0 = a - a % 3;\n    const b0 = b - b % 3;\n    const al = a0 + (a + 1) % 3;\n    const ar = a0 + (a + 2) % 3;\n    const bl = b0 + (b + 2) % 3;\n    const br = b0 + (b + 1) % 3;\n    const p0 = this.triangles[ar];\n    const pr = this.triangles[a];\n    const pl = this.triangles[al];\n    const p1 = this.triangles[bl];\n    const coords = this.coords;\n\n    if (!inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1])) {\n      return;\n    }\n\n    const hal = this._halfedges[al];\n    const har = this._halfedges[ar];\n    const hbl = this._halfedges[bl];\n    const hbr = this._halfedges[br];\n\n    this._queueRemove(a0 / 3);\n\n    this._queueRemove(b0 / 3);\n\n    const t0 = this._addTriangle(p0, p1, pl, -1, hbl, hal, a0);\n\n    const t1 = this._addTriangle(p1, p0, pr, t0, har, hbr, b0);\n\n    this._legalize(t0 + 1);\n\n    this._legalize(t1 + 2);\n  }\n\n  _handleCollinear(pn, a) {\n    const a0 = a - a % 3;\n    const al = a0 + (a + 1) % 3;\n    const ar = a0 + (a + 2) % 3;\n    const p0 = this.triangles[ar];\n    const pr = this.triangles[a];\n    const pl = this.triangles[al];\n    const hal = this._halfedges[al];\n    const har = this._halfedges[ar];\n    const b = this._halfedges[a];\n\n    if (b < 0) {\n      const t0 = this._addTriangle(pn, p0, pr, -1, har, -1, a0);\n\n      const t1 = this._addTriangle(p0, pn, pl, t0, -1, hal);\n\n      this._legalize(t0 + 1);\n\n      this._legalize(t1 + 2);\n\n      return;\n    }\n\n    const b0 = b - b % 3;\n    const bl = b0 + (b + 2) % 3;\n    const br = b0 + (b + 1) % 3;\n    const p1 = this.triangles[bl];\n    const hbl = this._halfedges[bl];\n    const hbr = this._halfedges[br];\n\n    this._queueRemove(b0 / 3);\n\n    const t0 = this._addTriangle(p0, pr, pn, har, -1, -1, a0);\n\n    const t1 = this._addTriangle(pr, p1, pn, hbr, -1, t0 + 1, b0);\n\n    const t2 = this._addTriangle(p1, pl, pn, hbl, -1, t1 + 1);\n\n    const t3 = this._addTriangle(pl, p0, pn, hal, t0 + 2, t2 + 1);\n\n    this._legalize(t0);\n\n    this._legalize(t1);\n\n    this._legalize(t2);\n\n    this._legalize(t3);\n  }\n\n  _queuePush(t, error, rms) {\n    const i = this._queue.length;\n    this._queueIndices[t] = i;\n\n    this._queue.push(t);\n\n    this._errors.push(error);\n\n    this._rmsSum += rms;\n\n    this._queueUp(i);\n  }\n\n  _queuePop() {\n    const n = this._queue.length - 1;\n\n    this._queueSwap(0, n);\n\n    this._queueDown(0, n);\n\n    return this._queuePopBack();\n  }\n\n  _queuePopBack() {\n    const t = this._queue.pop();\n\n    this._errors.pop();\n\n    this._rmsSum -= this._rms[t];\n    this._queueIndices[t] = -1;\n    return t;\n  }\n\n  _queueRemove(t) {\n    const i = this._queueIndices[t];\n\n    if (i < 0) {\n      const it = this._pending.indexOf(t);\n\n      if (it !== -1) {\n        this._pending[it] = this._pending[--this._pendingLen];\n      } else {\n        throw new Error('Broken triangulation (something went wrong).');\n      }\n\n      return;\n    }\n\n    const n = this._queue.length - 1;\n\n    if (n !== i) {\n      this._queueSwap(i, n);\n\n      if (!this._queueDown(i, n)) {\n        this._queueUp(i);\n      }\n    }\n\n    this._queuePopBack();\n  }\n\n  _queueLess(i, j) {\n    return this._errors[i] > this._errors[j];\n  }\n\n  _queueSwap(i, j) {\n    const pi = this._queue[i];\n    const pj = this._queue[j];\n    this._queue[i] = pj;\n    this._queue[j] = pi;\n    this._queueIndices[pi] = j;\n    this._queueIndices[pj] = i;\n    const e = this._errors[i];\n    this._errors[i] = this._errors[j];\n    this._errors[j] = e;\n  }\n\n  _queueUp(j0) {\n    let j = j0;\n\n    while (true) {\n      const i = j - 1 >> 1;\n\n      if (i === j || !this._queueLess(j, i)) {\n        break;\n      }\n\n      this._queueSwap(i, j);\n\n      j = i;\n    }\n  }\n\n  _queueDown(i0, n) {\n    let i = i0;\n\n    while (true) {\n      const j1 = 2 * i + 1;\n\n      if (j1 >= n || j1 < 0) {\n        break;\n      }\n\n      const j2 = j1 + 1;\n      let j = j1;\n\n      if (j2 < n && this._queueLess(j2, j1)) {\n        j = j2;\n      }\n\n      if (!this._queueLess(j, i)) {\n        break;\n      }\n\n      this._queueSwap(i, j);\n\n      i = j;\n    }\n\n    return i > i0;\n  }\n\n}\n\nfunction orient(ax, ay, bx, by, cx, cy) {\n  return (bx - cx) * (ay - cy) - (by - cy) * (ax - cx);\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n  const dx = ax - px;\n  const dy = ay - py;\n  const ex = bx - px;\n  const ey = by - py;\n  const fx = cx - px;\n  const fy = cy - py;\n  const ap = dx * dx + dy * dy;\n  const bp = ex * ex + ey * ey;\n  const cp = fx * fx + fy * fy;\n  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;\n}","map":{"version":3,"sources":["../../../../src/lib/delatin/index.js"],"names":["constructor","height","x1","width","y1","p0","p1","p2","p3","t0","run","maxError","refine","getMaxError","getRMSD","Math","heightAt","_flush","coords","i","t","a","b","c","_findCandidate","minX","minY","maxX","maxY","w00","orient","w01","w02","a01","p1y","b01","p0x","a12","p2y","b12","p1x","a20","p0y","b20","p2x","z0","z1","z2","mx","my","rms","y","dx","w0","w1","w2","wasInside","x","z","dz","_step","e0","e1","e2","ax","ay","bx","by","cx","cy","px","py","pn","h0","h1","h2","t1","t2","_addPoint","_addTriangle","e","ab","bc","ca","_legalize","a0","b0","al","ar","bl","br","pr","pl","inCircle","hal","har","hbl","hbr","_handleCollinear","t3","_queuePush","_queuePop","n","_queuePopBack","_queueRemove","it","_queueLess","_queueSwap","pi","pj","_queueUp","j","_queueDown","j1","j2","dy","ex","ey","fx","fy","ap","bp","cp"],"mappings":"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","sourcesContent":["// ISC License\n\n// Copyright(c) 2019, Michael Fogleman, Vladimir Agafonkin\n\n// Permission to use, copy, modify, and / or distribute this software for any purpose\n// with or without fee is hereby granted, provided that the above copyright notice\n// and this permission notice appear in all copies.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n// REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n// FITNESS.IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n//   INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n// OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\n// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n// THIS SOFTWARE.\n\n/* eslint-disable complexity, max-params, max-statements, max-depth, no-constant-condition */\nexport default class Delatin {\n  constructor(data, width, height = width) {\n    this.data = data; // height data\n    this.width = width;\n    this.height = height;\n\n    this.coords = []; // vertex coordinates (x, y)\n    this.triangles = []; // mesh triangle indices\n\n    // additional triangle data\n    this._halfedges = [];\n    this._candidates = [];\n    this._queueIndices = [];\n\n    this._queue = []; // queue of added triangles\n    this._errors = [];\n    this._rms = [];\n    this._pending = []; // triangles pending addition to queue\n    this._pendingLen = 0;\n\n    this._rmsSum = 0;\n\n    const x1 = width - 1;\n    const y1 = height - 1;\n    const p0 = this._addPoint(0, 0);\n    const p1 = this._addPoint(x1, 0);\n    const p2 = this._addPoint(0, y1);\n    const p3 = this._addPoint(x1, y1);\n\n    // add initial two triangles\n    const t0 = this._addTriangle(p3, p0, p2, -1, -1, -1);\n    this._addTriangle(p0, p3, p1, t0, -1, -1);\n    this._flush();\n  }\n\n  // refine the mesh until its maximum error gets below the given one\n  run(maxError = 1) {\n    while (this.getMaxError() > maxError) {\n      this.refine();\n    }\n  }\n\n  // refine the mesh with a single point\n  refine() {\n    this._step();\n    this._flush();\n  }\n\n  // max error of the current mesh\n  getMaxError() {\n    return this._errors[0];\n  }\n\n  // root-mean-square deviation of the current mesh\n  getRMSD() {\n    return this._rmsSum > 0 ? Math.sqrt(this._rmsSum / (this.width * this.height)) : 0;\n  }\n\n  // height value at a given position\n  heightAt(x, y) {\n    return this.data[this.width * y + x];\n  }\n\n  // rasterize and queue all triangles that got added or updated in _step\n  _flush() {\n    const coords = this.coords;\n    for (let i = 0; i < this._pendingLen; i++) {\n      const t = this._pending[i];\n      // rasterize triangle to find maximum pixel error\n      const a = 2 * this.triangles[t * 3 + 0];\n      const b = 2 * this.triangles[t * 3 + 1];\n      const c = 2 * this.triangles[t * 3 + 2];\n      this._findCandidate(\n        coords[a],\n        coords[a + 1],\n        coords[b],\n        coords[b + 1],\n        coords[c],\n        coords[c + 1],\n        t\n      );\n    }\n    this._pendingLen = 0;\n  }\n\n  // rasterize a triangle, find its max error, and queue it for processing\n  _findCandidate(p0x, p0y, p1x, p1y, p2x, p2y, t) {\n    // triangle bounding box\n    const minX = Math.min(p0x, p1x, p2x);\n    const minY = Math.min(p0y, p1y, p2y);\n    const maxX = Math.max(p0x, p1x, p2x);\n    const maxY = Math.max(p0y, p1y, p2y);\n\n    // forward differencing variables\n    let w00 = orient(p1x, p1y, p2x, p2y, minX, minY);\n    let w01 = orient(p2x, p2y, p0x, p0y, minX, minY);\n    let w02 = orient(p0x, p0y, p1x, p1y, minX, minY);\n    const a01 = p1y - p0y;\n    const b01 = p0x - p1x;\n    const a12 = p2y - p1y;\n    const b12 = p1x - p2x;\n    const a20 = p0y - p2y;\n    const b20 = p2x - p0x;\n\n    // pre-multiplied z values at vertices\n    const a = orient(p0x, p0y, p1x, p1y, p2x, p2y);\n    const z0 = this.heightAt(p0x, p0y) / a;\n    const z1 = this.heightAt(p1x, p1y) / a;\n    const z2 = this.heightAt(p2x, p2y) / a;\n\n    // iterate over pixels in bounding box\n    let maxError = 0;\n    let mx = 0;\n    let my = 0;\n    let rms = 0;\n    for (let y = minY; y <= maxY; y++) {\n      // compute starting offset\n      let dx = 0;\n      if (w00 < 0 && a12 !== 0) {\n        dx = Math.max(dx, Math.floor(-w00 / a12));\n      }\n      if (w01 < 0 && a20 !== 0) {\n        dx = Math.max(dx, Math.floor(-w01 / a20));\n      }\n      if (w02 < 0 && a01 !== 0) {\n        dx = Math.max(dx, Math.floor(-w02 / a01));\n      }\n\n      let w0 = w00 + a12 * dx;\n      let w1 = w01 + a20 * dx;\n      let w2 = w02 + a01 * dx;\n\n      let wasInside = false;\n\n      for (let x = minX + dx; x <= maxX; x++) {\n        // check if inside triangle\n        if (w0 >= 0 && w1 >= 0 && w2 >= 0) {\n          wasInside = true;\n\n          // compute z using barycentric coordinates\n          const z = z0 * w0 + z1 * w1 + z2 * w2;\n          const dz = Math.abs(z - this.heightAt(x, y));\n          rms += dz * dz;\n          if (dz > maxError) {\n            maxError = dz;\n            mx = x;\n            my = y;\n          }\n        } else if (wasInside) {\n          break;\n        }\n\n        w0 += a12;\n        w1 += a20;\n        w2 += a01;\n      }\n\n      w00 += b12;\n      w01 += b20;\n      w02 += b01;\n    }\n\n    if ((mx === p0x && my === p0y) || (mx === p1x && my === p1y) || (mx === p2x && my === p2y)) {\n      maxError = 0;\n    }\n\n    // update triangle metadata\n    this._candidates[2 * t] = mx;\n    this._candidates[2 * t + 1] = my;\n    this._rms[t] = rms;\n\n    // add triangle to priority queue\n    this._queuePush(t, maxError, rms);\n  }\n\n  // process the next triangle in the queue, splitting it with a new point\n  _step() {\n    // pop triangle with highest error from priority queue\n    const t = this._queuePop();\n\n    const e0 = t * 3 + 0;\n    const e1 = t * 3 + 1;\n    const e2 = t * 3 + 2;\n\n    const p0 = this.triangles[e0];\n    const p1 = this.triangles[e1];\n    const p2 = this.triangles[e2];\n\n    const ax = this.coords[2 * p0];\n    const ay = this.coords[2 * p0 + 1];\n    const bx = this.coords[2 * p1];\n    const by = this.coords[2 * p1 + 1];\n    const cx = this.coords[2 * p2];\n    const cy = this.coords[2 * p2 + 1];\n    const px = this._candidates[2 * t];\n    const py = this._candidates[2 * t + 1];\n\n    const pn = this._addPoint(px, py);\n\n    if (orient(ax, ay, bx, by, px, py) === 0) {\n      this._handleCollinear(pn, e0);\n    } else if (orient(bx, by, cx, cy, px, py) === 0) {\n      this._handleCollinear(pn, e1);\n    } else if (orient(cx, cy, ax, ay, px, py) === 0) {\n      this._handleCollinear(pn, e2);\n    } else {\n      const h0 = this._halfedges[e0];\n      const h1 = this._halfedges[e1];\n      const h2 = this._halfedges[e2];\n\n      const t0 = this._addTriangle(p0, p1, pn, h0, -1, -1, e0);\n      const t1 = this._addTriangle(p1, p2, pn, h1, -1, t0 + 1);\n      const t2 = this._addTriangle(p2, p0, pn, h2, t0 + 2, t1 + 1);\n\n      this._legalize(t0);\n      this._legalize(t1);\n      this._legalize(t2);\n    }\n  }\n\n  // add coordinates for a new vertex\n  _addPoint(x, y) {\n    const i = this.coords.length >> 1;\n    this.coords.push(x, y);\n    return i;\n  }\n\n  // add or update a triangle in the mesh\n  _addTriangle(a, b, c, ab, bc, ca, e = this.triangles.length) {\n    const t = e / 3; // new triangle index\n\n    // add triangle vertices\n    this.triangles[e + 0] = a;\n    this.triangles[e + 1] = b;\n    this.triangles[e + 2] = c;\n\n    // add triangle halfedges\n    this._halfedges[e + 0] = ab;\n    this._halfedges[e + 1] = bc;\n    this._halfedges[e + 2] = ca;\n\n    // link neighboring halfedges\n    if (ab >= 0) {\n      this._halfedges[ab] = e + 0;\n    }\n    if (bc >= 0) {\n      this._halfedges[bc] = e + 1;\n    }\n    if (ca >= 0) {\n      this._halfedges[ca] = e + 2;\n    }\n\n    // init triangle metadata\n    this._candidates[2 * t + 0] = 0;\n    this._candidates[2 * t + 1] = 0;\n    this._queueIndices[t] = -1;\n    this._rms[t] = 0;\n\n    // add triangle to pending queue for later rasterization\n    this._pending[this._pendingLen++] = t;\n\n    // return first halfedge index\n    return e;\n  }\n\n  _legalize(a) {\n    // if the pair of triangles doesn't satisfy the Delaunay condition\n    // (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n    // then do the same check/flip recursively for the new pair of triangles\n    //\n    //           pl                    pl\n    //          /||\\                  /  \\\n    //       al/ || \\bl            al/    \\a\n    //        /  ||  \\              /      \\\n    //       /  a||b  \\    flip    /___ar___\\\n    //     p0\\   ||   /p1   =>   p0\\---bl---/p1\n    //        \\  ||  /              \\      /\n    //       ar\\ || /br             b\\    /br\n    //          \\||/                  \\  /\n    //           pr                    pr\n\n    const b = this._halfedges[a];\n\n    if (b < 0) {\n      return;\n    }\n\n    const a0 = a - (a % 3);\n    const b0 = b - (b % 3);\n    const al = a0 + ((a + 1) % 3);\n    const ar = a0 + ((a + 2) % 3);\n    const bl = b0 + ((b + 2) % 3);\n    const br = b0 + ((b + 1) % 3);\n    const p0 = this.triangles[ar];\n    const pr = this.triangles[a];\n    const pl = this.triangles[al];\n    const p1 = this.triangles[bl];\n    const coords = this.coords;\n\n    if (\n      !inCircle(\n        coords[2 * p0],\n        coords[2 * p0 + 1],\n        coords[2 * pr],\n        coords[2 * pr + 1],\n        coords[2 * pl],\n        coords[2 * pl + 1],\n        coords[2 * p1],\n        coords[2 * p1 + 1]\n      )\n    ) {\n      return;\n    }\n\n    const hal = this._halfedges[al];\n    const har = this._halfedges[ar];\n    const hbl = this._halfedges[bl];\n    const hbr = this._halfedges[br];\n\n    this._queueRemove(a0 / 3);\n    this._queueRemove(b0 / 3);\n\n    const t0 = this._addTriangle(p0, p1, pl, -1, hbl, hal, a0);\n    const t1 = this._addTriangle(p1, p0, pr, t0, har, hbr, b0);\n\n    this._legalize(t0 + 1);\n    this._legalize(t1 + 2);\n  }\n\n  // handle a case where new vertex is on the edge of a triangle\n  _handleCollinear(pn, a) {\n    const a0 = a - (a % 3);\n    const al = a0 + ((a + 1) % 3);\n    const ar = a0 + ((a + 2) % 3);\n    const p0 = this.triangles[ar];\n    const pr = this.triangles[a];\n    const pl = this.triangles[al];\n    const hal = this._halfedges[al];\n    const har = this._halfedges[ar];\n\n    const b = this._halfedges[a];\n\n    if (b < 0) {\n      const t0 = this._addTriangle(pn, p0, pr, -1, har, -1, a0);\n      const t1 = this._addTriangle(p0, pn, pl, t0, -1, hal);\n      this._legalize(t0 + 1);\n      this._legalize(t1 + 2);\n      return;\n    }\n\n    const b0 = b - (b % 3);\n    const bl = b0 + ((b + 2) % 3);\n    const br = b0 + ((b + 1) % 3);\n    const p1 = this.triangles[bl];\n    const hbl = this._halfedges[bl];\n    const hbr = this._halfedges[br];\n\n    this._queueRemove(b0 / 3);\n\n    const t0 = this._addTriangle(p0, pr, pn, har, -1, -1, a0);\n    const t1 = this._addTriangle(pr, p1, pn, hbr, -1, t0 + 1, b0);\n    const t2 = this._addTriangle(p1, pl, pn, hbl, -1, t1 + 1);\n    const t3 = this._addTriangle(pl, p0, pn, hal, t0 + 2, t2 + 1);\n\n    this._legalize(t0);\n    this._legalize(t1);\n    this._legalize(t2);\n    this._legalize(t3);\n  }\n\n  // priority queue methods\n\n  _queuePush(t, error, rms) {\n    const i = this._queue.length;\n    this._queueIndices[t] = i;\n    this._queue.push(t);\n    this._errors.push(error);\n    this._rmsSum += rms;\n    this._queueUp(i);\n  }\n\n  _queuePop() {\n    const n = this._queue.length - 1;\n    this._queueSwap(0, n);\n    this._queueDown(0, n);\n    return this._queuePopBack();\n  }\n\n  _queuePopBack() {\n    const t = this._queue.pop();\n    this._errors.pop();\n    this._rmsSum -= this._rms[t];\n    this._queueIndices[t] = -1;\n    return t;\n  }\n\n  _queueRemove(t) {\n    const i = this._queueIndices[t];\n    if (i < 0) {\n      const it = this._pending.indexOf(t);\n      if (it !== -1) {\n        this._pending[it] = this._pending[--this._pendingLen];\n      } else {\n        throw new Error('Broken triangulation (something went wrong).');\n      }\n      return;\n    }\n    const n = this._queue.length - 1;\n    if (n !== i) {\n      this._queueSwap(i, n);\n      if (!this._queueDown(i, n)) {\n        this._queueUp(i);\n      }\n    }\n    this._queuePopBack();\n  }\n\n  _queueLess(i, j) {\n    return this._errors[i] > this._errors[j];\n  }\n\n  _queueSwap(i, j) {\n    const pi = this._queue[i];\n    const pj = this._queue[j];\n    this._queue[i] = pj;\n    this._queue[j] = pi;\n    this._queueIndices[pi] = j;\n    this._queueIndices[pj] = i;\n    const e = this._errors[i];\n    this._errors[i] = this._errors[j];\n    this._errors[j] = e;\n  }\n\n  _queueUp(j0) {\n    let j = j0;\n    while (true) {\n      const i = (j - 1) >> 1;\n      if (i === j || !this._queueLess(j, i)) {\n        break;\n      }\n      this._queueSwap(i, j);\n      j = i;\n    }\n  }\n\n  _queueDown(i0, n) {\n    let i = i0;\n    while (true) {\n      const j1 = 2 * i + 1;\n      if (j1 >= n || j1 < 0) {\n        break;\n      }\n      const j2 = j1 + 1;\n      let j = j1;\n      if (j2 < n && this._queueLess(j2, j1)) {\n        j = j2;\n      }\n      if (!this._queueLess(j, i)) {\n        break;\n      }\n      this._queueSwap(i, j);\n      i = j;\n    }\n    return i > i0;\n  }\n}\n\nfunction orient(ax, ay, bx, by, cx, cy) {\n  return (bx - cx) * (ay - cy) - (by - cy) * (ax - cx);\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n  const dx = ax - px;\n  const dy = ay - py;\n  const ex = bx - px;\n  const ey = by - py;\n  const fx = cx - px;\n  const fy = cy - py;\n\n  const ap = dx * dx + dy * dy;\n  const bp = ex * ex + ey * ey;\n  const cp = fx * fx + fy * fy;\n\n  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;\n}\n"]},"metadata":{},"sourceType":"module"}