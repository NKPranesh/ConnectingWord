{"ast":null,"code":"import { CompositeLayer } from '@deck.gl/core';\nimport { PolygonLayer } from '@deck.gl/layers';\nimport { getS2Polygon } from './s2-utils';\nconst defaultProps = { ...PolygonLayer.defaultProps,\n  getS2Token: {\n    type: 'accessor',\n    value: d => d.token\n  }\n};\nexport default class S2Layer extends CompositeLayer {\n  renderLayers() {\n    const {\n      data,\n      getS2Token\n    } = this.props;\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray\n    } = this.props;\n    const {\n      updateTriggers,\n      material\n    } = this.props;\n    const CellLayer = this.getSubLayerClass('cell', PolygonLayer);\n    return new CellLayer({\n      filled,\n      wireframe,\n      extruded,\n      elevationScale,\n      stroked,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      material,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray\n    }, this.getSubLayerProps({\n      id: 'cell',\n      updateTriggers: {\n        getElevation: updateTriggers.getElevation,\n        getFillColor: updateTriggers.getFillColor,\n        getLineColor: updateTriggers.getLineColor,\n        getLineWidth: updateTriggers.getLineWidth,\n        getLineDashArray: updateTriggers.getLineDashArray\n      }\n    }), {\n      data,\n      _normalize: false,\n      positionFormat: 'XY',\n      getPolygon: (x, objectInfo) => getS2Polygon(getS2Token(x, objectInfo))\n    });\n  }\n\n}\nS2Layer.layerName = 'S2Layer';\nS2Layer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/s2-layer/s2-layer.js"],"names":["defaultProps","PolygonLayer","getS2Token","type","value","d","token","renderLayers","getLineDashArray","material","CellLayer","id","updateTriggers","getElevation","getFillColor","getLineColor","getLineWidth","_normalize","positionFormat","getPolygon","getS2Polygon","S2Layer"],"mappings":"AAoBA,SAAA,cAAA,QAAA,eAAA;AACA,SAAA,YAAA,QAAA,iBAAA;AAEA,SAAA,YAAA,QAAA,YAAA;AAEA,MAAMA,YAAY,GAAG,EACnB,GAAGC,YAAY,CADI,YAAA;AAEnBC,EAAAA,UAAU,EAAE;AAACC,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAEC,CAAC,IAAIA,CAAC,CAACC;AAAjC;AAFO,CAArB;AAKA,eAAe,MAAA,OAAA,SAAA,cAAA,CAAqC;AAClDC,EAAAA,YAAY,GAAG;AAEb,UAAM;AAAA,MAAA,IAAA;AAAOL,MAAAA;AAAP,QAAqB,KAA3B,KAAA;AAGA,UAAM;AAAA,MAAA,cAAA;AAAA,MAAA,QAAA;AAAA,MAAA,SAAA;AAAA,MAAA,MAAA;AAAA,MAAA,OAAA;AAAA,MAAA,cAAA;AAAA,MAAA,cAAA;AAAA,MAAA,kBAAA;AAAA,MAAA,kBAAA;AAAA,MAAA,gBAAA;AAAA,MAAA,cAAA;AAAA,MAAA,iBAAA;AAAA,MAAA,YAAA;AAAA,MAAA,YAAA;AAAA,MAAA,YAAA;AAAA,MAAA,YAAA;AAiBJM,MAAAA;AAjBI,QAkBF,KAlBJ,KAAA;AAqBA,UAAM;AAAA,MAAA,cAAA;AAAiBC,MAAAA;AAAjB,QAA6B,KAAnC,KAAA;AAGA,UAAMC,SAAS,GAAG,KAAA,gBAAA,CAAA,MAAA,EAAlB,YAAkB,CAAlB;AACA,WAAO,IAAA,SAAA,CACL;AAAA,MAAA,MAAA;AAAA,MAAA,SAAA;AAAA,MAAA,QAAA;AAAA,MAAA,cAAA;AAAA,MAAA,OAAA;AAAA,MAAA,cAAA;AAAA,MAAA,cAAA;AAAA,MAAA,kBAAA;AAAA,MAAA,kBAAA;AAAA,MAAA,gBAAA;AAAA,MAAA,cAAA;AAAA,MAAA,iBAAA;AAAA,MAAA,QAAA;AAAA,MAAA,YAAA;AAAA,MAAA,YAAA;AAAA,MAAA,YAAA;AAAA,MAAA,YAAA;AAsBEF,MAAAA;AAtBF,KADK,EAyBL,KAAA,gBAAA,CAAsB;AACpBG,MAAAA,EAAE,EADkB,MAAA;AAEpBC,MAAAA,cAAc,EAAE;AACdC,QAAAA,YAAY,EAAED,cAAc,CADd,YAAA;AAEdE,QAAAA,YAAY,EAAEF,cAAc,CAFd,YAAA;AAGdG,QAAAA,YAAY,EAAEH,cAAc,CAHd,YAAA;AAIdI,QAAAA,YAAY,EAAEJ,cAAc,CAJd,YAAA;AAKdJ,QAAAA,gBAAgB,EAAEI,cAAc,CAACJ;AALnB;AAFI,KAAtB,CAzBK,EAmCL;AAAA,MAAA,IAAA;AAEES,MAAAA,UAAU,EAFZ,KAAA;AAGEC,MAAAA,cAAc,EAHhB,IAAA;AAIEC,MAAAA,UAAU,EAAE,CAAA,CAAA,EAAA,UAAA,KAAmBC,YAAY,CAAClB,UAAU,CAAA,CAAA,EAAX,UAAW,CAAX;AAJ7C,KAnCK,CAAP;AA0CD;;AAzEiD;AA4EpDmB,OAAO,CAAPA,SAAAA,GAAAA,SAAAA;AACAA,OAAO,CAAPA,YAAAA,GAAAA,YAAAA","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer} from '@deck.gl/core';\nimport {PolygonLayer} from '@deck.gl/layers';\n\nimport {getS2Polygon} from './s2-utils';\n\nconst defaultProps = {\n  ...PolygonLayer.defaultProps,\n  getS2Token: {type: 'accessor', value: d => d.token}\n};\n\nexport default class S2Layer extends CompositeLayer {\n  renderLayers() {\n    // Layer prop\n    const {data, getS2Token} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {updateTriggers, material} = this.props;\n\n    // Filled Polygon Layer\n    const CellLayer = this.getSubLayerClass('cell', PolygonLayer);\n    return new CellLayer(\n      {\n        filled,\n        wireframe,\n\n        extruded,\n        elevationScale,\n\n        stroked,\n        lineWidthUnits,\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels,\n        lineJointRounded,\n        lineMiterLimit,\n        lineDashJustified,\n\n        material,\n\n        getElevation,\n        getFillColor,\n        getLineColor,\n        getLineWidth,\n        getLineDashArray\n      },\n      this.getSubLayerProps({\n        id: 'cell',\n        updateTriggers: {\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor,\n          getLineWidth: updateTriggers.getLineWidth,\n          getLineDashArray: updateTriggers.getLineDashArray\n        }\n      }),\n      {\n        data,\n        _normalize: false,\n        positionFormat: 'XY',\n        getPolygon: (x, objectInfo) => getS2Polygon(getS2Token(x, objectInfo))\n      }\n    );\n  }\n}\n\nS2Layer.layerName = 'S2Layer';\nS2Layer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}