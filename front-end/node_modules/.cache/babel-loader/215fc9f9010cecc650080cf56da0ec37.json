{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { convertToArrayRow, convertToObjectRow } from '../utils/row-utils';\nconst DEFAULT_ROW_COUNT = 100;\nexport default class RowTableBatchAggregator {\n  constructor(schema, options) {\n    _defineProperty(this, \"schema\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"length\", 0);\n\n    _defineProperty(this, \"objectRows\", null);\n\n    _defineProperty(this, \"arrayRows\", null);\n\n    _defineProperty(this, \"cursor\", 0);\n\n    _defineProperty(this, \"_headers\", []);\n\n    this.options = options;\n    this.schema = schema;\n\n    if (!Array.isArray(schema)) {\n      this._headers = [];\n\n      for (const key in schema) {\n        this._headers[schema[key].index] = schema[key].name;\n      }\n    }\n  }\n\n  rowCount() {\n    return this.length;\n  }\n\n  addArrayRow(row, cursor) {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor;\n    }\n\n    switch (this.options.shape) {\n      case 'object-row-table':\n        const rowObject = convertToObjectRow(row, this._headers);\n        this.addObjectRow(rowObject, cursor);\n        break;\n\n      case 'array-row-table':\n        this.arrayRows = this.arrayRows || new Array(DEFAULT_ROW_COUNT);\n        this.arrayRows[this.length] = row;\n        this.length++;\n        break;\n    }\n  }\n\n  addObjectRow(row, cursor) {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor;\n    }\n\n    switch (this.options.shape) {\n      case 'array-row-table':\n        const rowArray = convertToArrayRow(row, this._headers);\n        this.addArrayRow(rowArray, cursor);\n        break;\n\n      case 'object-row-table':\n        this.objectRows = this.objectRows || new Array(DEFAULT_ROW_COUNT);\n        this.objectRows[this.length] = row;\n        this.length++;\n        break;\n    }\n  }\n\n  getBatch() {\n    let rows = this.arrayRows || this.objectRows;\n\n    if (!rows) {\n      return null;\n    }\n\n    rows = rows.slice(0, this.length);\n    this.arrayRows = null;\n    this.objectRows = null;\n    return {\n      shape: this.options.shape,\n      batchType: 'data',\n      data: rows,\n      length: this.length,\n      schema: this.schema,\n      cursor: this.cursor\n    };\n  }\n\n}","map":{"version":3,"sources":["../../../../src/lib/table/row-table-batch-aggregator.ts"],"names":["DEFAULT_ROW_COUNT","constructor","Array","schema","rowCount","addArrayRow","Number","rowObject","convertToObjectRow","addObjectRow","rowArray","convertToArrayRow","getBatch","rows","shape","batchType","data","length","cursor"],"mappings":"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","sourcesContent":["import type {Schema} from '../schema';\nimport type {TableBatch} from '../../category/table';\n// import type {ArrayRowTableBatch, ObjectRowTableBatch} from '../../category/table';\nimport {convertToArrayRow, convertToObjectRow} from '../utils/row-utils';\nimport {TableBatchAggregator, TableBatchOptions} from './table-batch-aggregator';\n\nconst DEFAULT_ROW_COUNT = 100;\n\nexport default class RowTableBatchAggregator implements TableBatchAggregator {\n  schema: Schema;\n  options: TableBatchOptions;\n\n  length: number = 0;\n  objectRows: {[columnName: string]: any} | null = null;\n  arrayRows: any[] | null = null;\n  cursor: number = 0;\n  private _headers: string[] = [];\n\n  constructor(schema: Schema, options: TableBatchOptions) {\n    this.options = options;\n    this.schema = schema;\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    if (!Array.isArray(schema)) {\n      this._headers = [];\n      for (const key in schema) {\n        this._headers[schema[key].index] = schema[key].name;\n      }\n    }\n  }\n\n  rowCount(): number {\n    return this.length;\n  }\n\n  addArrayRow(row: any[], cursor?: number): void {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor as number;\n    }\n\n    // eslint-disable-next-line default-case\n    switch (this.options.shape) {\n      case 'object-row-table':\n        const rowObject = convertToObjectRow(row, this._headers);\n        this.addObjectRow(rowObject, cursor);\n        break;\n      case 'array-row-table':\n        this.arrayRows = this.arrayRows || new Array(DEFAULT_ROW_COUNT);\n        this.arrayRows[this.length] = row;\n        this.length++;\n        break;\n    }\n  }\n\n  addObjectRow(row: {[columnName: string]: any}, cursor?: number): void {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor as number;\n    }\n\n    // eslint-disable-next-line default-case\n    switch (this.options.shape) {\n      case 'array-row-table':\n        const rowArray = convertToArrayRow(row, this._headers);\n        this.addArrayRow(rowArray, cursor);\n        break;\n      case 'object-row-table':\n        this.objectRows = this.objectRows || new Array(DEFAULT_ROW_COUNT);\n        this.objectRows[this.length] = row;\n        this.length++;\n        break;\n    }\n  }\n\n  getBatch(): TableBatch | null {\n    let rows = this.arrayRows || this.objectRows;\n    if (!rows) {\n      return null;\n    }\n\n    rows = rows.slice(0, this.length);\n    this.arrayRows = null;\n    this.objectRows = null;\n\n    return {\n      shape: this.options.shape,\n      batchType: 'data',\n      data: rows,\n      length: this.length,\n      schema: this.schema,\n      cursor: this.cursor\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}