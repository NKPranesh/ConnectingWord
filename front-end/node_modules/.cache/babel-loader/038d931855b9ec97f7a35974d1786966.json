{"ast":null,"code":"import log from '../utils/log';\nimport { isAsyncIterable } from '../utils/iterable-utils';\nimport { parsePropTypes } from './prop-types';\nimport { PROP_SYMBOLS } from './constants';\nconst {\n  COMPONENT,\n  ASYNC_ORIGINAL,\n  ASYNC_RESOLVED,\n  ASYNC_DEFAULTS\n} = PROP_SYMBOLS;\nexport function createProps() {\n  const component = this;\n  const propsPrototype = getPropsPrototype(component.constructor);\n  const propsInstance = Object.create(propsPrototype);\n  propsInstance[COMPONENT] = component;\n  propsInstance[ASYNC_ORIGINAL] = {};\n  propsInstance[ASYNC_RESOLVED] = {};\n\n  for (let i = 0; i < arguments.length; ++i) {\n    const props = arguments[i];\n\n    for (const key in props) {\n      propsInstance[key] = props[key];\n    }\n  }\n\n  Object.freeze(propsInstance);\n  return propsInstance;\n}\n\nfunction getPropsPrototype(componentClass) {\n  const defaultProps = getOwnProperty(componentClass, '_mergedDefaultProps');\n\n  if (!defaultProps) {\n    createPropsPrototypeAndTypes(componentClass);\n    return componentClass._mergedDefaultProps;\n  }\n\n  return defaultProps;\n}\n\nfunction createPropsPrototypeAndTypes(componentClass) {\n  const parent = componentClass.prototype;\n\n  if (!parent) {\n    return;\n  }\n\n  const parentClass = Object.getPrototypeOf(componentClass);\n  const parentDefaultProps = getPropsPrototype(parentClass);\n  const componentDefaultProps = getOwnProperty(componentClass, 'defaultProps') || {};\n  const componentPropDefs = parsePropTypes(componentDefaultProps);\n  const defaultProps = createPropsPrototype(componentPropDefs.defaultProps, parentDefaultProps, componentClass);\n  const propTypes = { ...parentClass._propTypes,\n    ...componentPropDefs.propTypes\n  };\n  addAsyncPropsToPropPrototype(defaultProps, propTypes);\n  const deprecatedProps = { ...parentClass._deprecatedProps,\n    ...componentPropDefs.deprecatedProps\n  };\n  addDeprecatedPropsToPropPrototype(defaultProps, deprecatedProps);\n  componentClass._mergedDefaultProps = defaultProps;\n  componentClass._propTypes = propTypes;\n  componentClass._deprecatedProps = deprecatedProps;\n}\n\nfunction createPropsPrototype(props, parentProps, componentClass) {\n  const defaultProps = Object.create(null);\n  Object.assign(defaultProps, parentProps, props);\n  const id = getComponentName(componentClass);\n  delete props.id;\n  Object.defineProperties(defaultProps, {\n    id: {\n      writable: true,\n      value: id\n    }\n  });\n  return defaultProps;\n}\n\nfunction addDeprecatedPropsToPropPrototype(defaultProps, deprecatedProps) {\n  for (const propName in deprecatedProps) {\n    Object.defineProperty(defaultProps, propName, {\n      enumerable: false,\n\n      set(newValue) {\n        const nameStr = \"\".concat(this.id, \": \").concat(propName);\n\n        for (const newPropName of deprecatedProps[propName]) {\n          if (!hasOwnProperty(this, newPropName)) {\n            this[newPropName] = newValue;\n          }\n        }\n\n        log.deprecated(nameStr, deprecatedProps[propName].join('/'))();\n      }\n\n    });\n  }\n}\n\nfunction addAsyncPropsToPropPrototype(defaultProps, propTypes) {\n  const defaultValues = {};\n  const descriptors = {};\n\n  for (const propName in propTypes) {\n    const propType = propTypes[propName];\n    const {\n      name,\n      value\n    } = propType;\n\n    if (propType.async) {\n      defaultValues[name] = value;\n      descriptors[name] = getDescriptorForAsyncProp(name, value);\n    }\n  }\n\n  defaultProps[ASYNC_DEFAULTS] = defaultValues;\n  defaultProps[ASYNC_ORIGINAL] = {};\n  Object.defineProperties(defaultProps, descriptors);\n}\n\nfunction getDescriptorForAsyncProp(name) {\n  return {\n    enumerable: true,\n\n    set(newValue) {\n      if (typeof newValue === 'string' || newValue instanceof Promise || isAsyncIterable(newValue)) {\n        this[ASYNC_ORIGINAL][name] = newValue;\n      } else {\n        this[ASYNC_RESOLVED][name] = newValue;\n      }\n    },\n\n    get() {\n      if (this[ASYNC_RESOLVED]) {\n        if (name in this[ASYNC_RESOLVED]) {\n          const value = this[ASYNC_RESOLVED][name];\n          return value || this[ASYNC_DEFAULTS][name];\n        }\n\n        if (name in this[ASYNC_ORIGINAL]) {\n          const state = this[COMPONENT] && this[COMPONENT].internalState;\n\n          if (state && state.hasAsyncProp(name)) {\n            return state.getAsyncProp(name) || this[ASYNC_DEFAULTS][name];\n          }\n        }\n      }\n\n      return this[ASYNC_DEFAULTS][name];\n    }\n\n  };\n}\n\nfunction hasOwnProperty(object, prop) {\n  return Object.prototype.hasOwnProperty.call(object, prop);\n}\n\nfunction getOwnProperty(object, prop) {\n  return hasOwnProperty(object, prop) && object[prop];\n}\n\nfunction getComponentName(componentClass) {\n  const componentName = getOwnProperty(componentClass, 'layerName') || getOwnProperty(componentClass, 'componentName');\n\n  if (!componentName) {\n    log.once(0, \"\".concat(componentClass.name, \".componentName not specified\"))();\n  }\n\n  return componentName || componentClass.name;\n}","map":{"version":3,"sources":["../../../src/lifecycle/create-props.js"],"names":["ASYNC_DEFAULTS","component","propsPrototype","getPropsPrototype","propsInstance","Object","i","arguments","props","defaultProps","getOwnProperty","createPropsPrototypeAndTypes","componentClass","parent","parentClass","parentDefaultProps","componentDefaultProps","componentPropDefs","parsePropTypes","createPropsPrototype","propTypes","addAsyncPropsToPropPrototype","deprecatedProps","addDeprecatedPropsToPropPrototype","id","getComponentName","writable","value","enumerable","set","nameStr","hasOwnProperty","log","defaultValues","descriptors","propType","getDescriptorForAsyncProp","newValue","isAsyncIterable","get","name","state","object","componentName"],"mappings":"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","sourcesContent":["import log from '../utils/log';\nimport {isAsyncIterable} from '../utils/iterable-utils';\nimport {parsePropTypes} from './prop-types';\nimport {PROP_SYMBOLS} from './constants';\n\nconst {COMPONENT, ASYNC_ORIGINAL, ASYNC_RESOLVED, ASYNC_DEFAULTS} = PROP_SYMBOLS;\n\n// Create a property object\nexport function createProps() {\n  const component = this; // eslint-disable-line\n\n  // Get default prop object (a prototype chain for now)\n  const propsPrototype = getPropsPrototype(component.constructor);\n\n  // Create a new prop object with default props object in prototype chain\n  const propsInstance = Object.create(propsPrototype);\n\n  // Props need a back pointer to the owning component\n  propsInstance[COMPONENT] = component;\n  // The supplied (original) values for those async props that are set to url strings or Promises.\n  // In this case, the actual (i.e. resolved) values are looked up from component.internalState\n  propsInstance[ASYNC_ORIGINAL] = {};\n  // Note: the actual (resolved) values for props that are NOT set to urls or Promises.\n  // in this case the values are served directly from this map\n  propsInstance[ASYNC_RESOLVED] = {};\n\n  // \"Copy\" all sync props\n  for (let i = 0; i < arguments.length; ++i) {\n    const props = arguments[i];\n    // Do not use Object.assign here to avoid Symbols in props overwriting our private fields\n    // This might happen if one of the arguments is another props instance\n    for (const key in props) {\n      propsInstance[key] = props[key];\n    }\n  }\n\n  // Props must be immutable\n  Object.freeze(propsInstance);\n\n  return propsInstance;\n}\n\n// Return precalculated defaultProps and propType objects if available\n// build them if needed\nfunction getPropsPrototype(componentClass) {\n  const defaultProps = getOwnProperty(componentClass, '_mergedDefaultProps');\n  if (!defaultProps) {\n    createPropsPrototypeAndTypes(componentClass);\n    return componentClass._mergedDefaultProps;\n  }\n  return defaultProps;\n}\n\n// Build defaultProps and propType objects by walking component prototype chain\nfunction createPropsPrototypeAndTypes(componentClass) {\n  const parent = componentClass.prototype;\n  if (!parent) {\n    return;\n  }\n\n  const parentClass = Object.getPrototypeOf(componentClass);\n  const parentDefaultProps = getPropsPrototype(parentClass);\n\n  // Parse propTypes from Component.defaultProps\n  const componentDefaultProps = getOwnProperty(componentClass, 'defaultProps') || {};\n  const componentPropDefs = parsePropTypes(componentDefaultProps);\n\n  // Create any necessary property descriptors and create the default prop object\n  // Assign merged default props\n  const defaultProps = createPropsPrototype(\n    componentPropDefs.defaultProps,\n    parentDefaultProps,\n    componentClass\n  );\n\n  // Create a merged type object\n  const propTypes = {...parentClass._propTypes, ...componentPropDefs.propTypes};\n  // Add getters/setters for async props\n  addAsyncPropsToPropPrototype(defaultProps, propTypes);\n\n  // Create a map for prop whose default value is a callback\n  const deprecatedProps = {\n    ...parentClass._deprecatedProps,\n    ...componentPropDefs.deprecatedProps\n  };\n  // Add setters for deprecated props\n  addDeprecatedPropsToPropPrototype(defaultProps, deprecatedProps);\n\n  // Store the precalculated props\n  componentClass._mergedDefaultProps = defaultProps;\n  componentClass._propTypes = propTypes;\n  componentClass._deprecatedProps = deprecatedProps;\n}\n\n// Builds a pre-merged default props object that component props can inherit from\nfunction createPropsPrototype(props, parentProps, componentClass) {\n  const defaultProps = Object.create(null);\n\n  Object.assign(defaultProps, parentProps, props);\n\n  // Avoid freezing `id` prop\n  const id = getComponentName(componentClass);\n  delete props.id;\n\n  Object.defineProperties(defaultProps, {\n    // `id` is treated specially because layer might need to override it\n    id: {\n      writable: true,\n      value: id\n    }\n  });\n\n  return defaultProps;\n}\n\nfunction addDeprecatedPropsToPropPrototype(defaultProps, deprecatedProps) {\n  for (const propName in deprecatedProps) {\n    /* eslint-disable accessor-pairs */\n    Object.defineProperty(defaultProps, propName, {\n      enumerable: false,\n      set(newValue) {\n        const nameStr = `${this.id}: ${propName}`;\n\n        for (const newPropName of deprecatedProps[propName]) {\n          if (!hasOwnProperty(this, newPropName)) {\n            this[newPropName] = newValue;\n          }\n        }\n\n        log.deprecated(nameStr, deprecatedProps[propName].join('/'))();\n      }\n    });\n    /* eslint-enable accessor-pairs */\n  }\n}\n\n// Create descriptors for overridable props\nfunction addAsyncPropsToPropPrototype(defaultProps, propTypes) {\n  const defaultValues = {};\n\n  const descriptors = {};\n\n  // Move async props into shadow values\n  for (const propName in propTypes) {\n    const propType = propTypes[propName];\n    const {name, value} = propType;\n\n    // Note: async is ES7 keyword, can't destructure\n    if (propType.async) {\n      defaultValues[name] = value;\n      descriptors[name] = getDescriptorForAsyncProp(name, value);\n    }\n  }\n\n  // Default \"resolved\" values for async props, returned if value not yet resolved/set.\n  defaultProps[ASYNC_DEFAULTS] = defaultValues;\n  // Shadowed object, just to make sure \"early indexing\" into the instance does not fail\n  defaultProps[ASYNC_ORIGINAL] = {};\n\n  Object.defineProperties(defaultProps, descriptors);\n}\n\n// Helper: Configures getter and setter for one async prop\nfunction getDescriptorForAsyncProp(name) {\n  return {\n    enumerable: true,\n    // Save the provided value for async props in a special map\n    set(newValue) {\n      if (\n        typeof newValue === 'string' ||\n        newValue instanceof Promise ||\n        isAsyncIterable(newValue)\n      ) {\n        this[ASYNC_ORIGINAL][name] = newValue;\n      } else {\n        this[ASYNC_RESOLVED][name] = newValue;\n      }\n    },\n    // Only the component's state knows the true value of async prop\n    get() {\n      if (this[ASYNC_RESOLVED]) {\n        // Prop value isn't async, so just return it\n        if (name in this[ASYNC_RESOLVED]) {\n          const value = this[ASYNC_RESOLVED][name];\n\n          return value || this[ASYNC_DEFAULTS][name];\n        }\n\n        if (name in this[ASYNC_ORIGINAL]) {\n          // It's an async prop value: look into component state\n          const state = this[COMPONENT] && this[COMPONENT].internalState;\n          if (state && state.hasAsyncProp(name)) {\n            return state.getAsyncProp(name) || this[ASYNC_DEFAULTS][name];\n          }\n        }\n      }\n\n      // the prop is not supplied, or\n      // component not yet initialized/matched, return the component's default value for the prop\n      return this[ASYNC_DEFAULTS][name];\n    }\n  };\n}\n\n// HELPER METHODS\n\nfunction hasOwnProperty(object, prop) {\n  return Object.prototype.hasOwnProperty.call(object, prop);\n}\n\n// Constructors have their super class constructors as prototypes\nfunction getOwnProperty(object, prop) {\n  return hasOwnProperty(object, prop) && object[prop];\n}\n\nfunction getComponentName(componentClass) {\n  const componentName =\n    getOwnProperty(componentClass, 'layerName') || getOwnProperty(componentClass, 'componentName');\n  if (!componentName) {\n    log.once(0, `${componentClass.name}.componentName not specified`)();\n  }\n  return componentName || componentClass.name;\n}\n"]},"metadata":{},"sourceType":"module"}