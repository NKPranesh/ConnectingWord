{"ast":null,"code":"import { VERSION } from './lib/utils/version';\nimport parseGLBSync from './lib/parsers/parse-glb';\nexport const GLBLoader = {\n  name: 'GLB',\n  id: 'glb',\n  module: 'gltf',\n  version: VERSION,\n  extensions: ['glb'],\n  mimeTypes: ['model/gltf-binary'],\n  binary: true,\n  parse,\n  parseSync,\n  options: {\n    glb: {\n      strict: false\n    }\n  }\n};\n\nasync function parse(arrayBuffer, options) {\n  return parseSync(arrayBuffer, options);\n}\n\nfunction parseSync(arrayBuffer, options) {\n  const {\n    byteOffset = 0\n  } = options || {};\n  const glb = {};\n  parseGLBSync(glb, arrayBuffer, byteOffset, options === null || options === void 0 ? void 0 : options.glb);\n  return glb;\n}\n\nexport const _TypecheckGLBLoader = GLBLoader;","map":{"version":3,"sources":["../../src/glb-loader.ts"],"names":["GLBLoader","name","id","module","version","extensions","mimeTypes","binary","options","glb","strict","parseSync","byteOffset","parseGLBSync","_TypecheckGLBLoader"],"mappings":"AAGA,SAAA,OAAA,QAAA,qBAAA;AACA,OAAA,YAAA,MAAA,yBAAA;AAWA,OAAO,MAAMA,SAA2B,GAAG;AACzCC,EAAAA,IAAI,EADqC,KAAA;AAEzCC,EAAAA,EAAE,EAFuC,KAAA;AAGzCC,EAAAA,MAAM,EAHmC,MAAA;AAIzCC,EAAAA,OAAO,EAJkC,OAAA;AAKzCC,EAAAA,UAAU,EAAE,CAL6B,KAK7B,CAL6B;AAMzCC,EAAAA,SAAS,EAAE,CAN8B,mBAM9B,CAN8B;AAOzCC,EAAAA,MAAM,EAPmC,IAAA;AAAA,EAAA,KAAA;AAAA,EAAA,SAAA;AAUzCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE;AACHC,MAAAA,MAAM,EAAE;AADL;AADE;AAVgC,CAApC;;AAiBP,eAAA,KAAA,CAAA,WAAA,EAAA,OAAA,EAAyF;AACvF,SAAOC,SAAS,CAAA,WAAA,EAAhB,OAAgB,CAAhB;AACD;;AAED,SAAA,SAAA,CAAA,WAAA,EAAA,OAAA,EAA8E;AAC5E,QAAM;AAACC,IAAAA,UAAU,GAAG;AAAd,MAAmBJ,OAAO,IAAhC,EAAA;AACA,QAAMC,GAAQ,GAAd,EAAA;AACAI,EAAAA,YAAY,CAAA,GAAA,EAAA,WAAA,EAAA,UAAA,EAA+BL,OAA/B,KAAA,IAA+BA,IAAAA,OAA/B,KAAA,KAAA,CAA+BA,GAA/B,KAAA,CAA+BA,GAAAA,OAAO,CAAlDK,GAAY,CAAZA;AACA,SAAA,GAAA;AACD;;AAGD,OAAO,MAAMC,mBAAqC,GAA3C,SAAA","sourcesContent":["import type {LoaderWithParser, LoaderOptions} from '@loaders.gl/loader-utils';\nimport type {GLB} from './lib/types/glb-types';\nimport type {GLBParseOptions} from './lib/parsers/parse-glb';\nimport {VERSION} from './lib/utils/version';\nimport parseGLBSync from './lib/parsers/parse-glb';\n\nexport type GLBLoaderOptions = LoaderOptions & {\n  glb?: GLBParseOptions;\n  byteOffset?: number;\n};\n\n/**\n * GLB Loader -\n * GLB is the binary container format for GLTF\n */\nexport const GLBLoader: LoaderWithParser = {\n  name: 'GLB',\n  id: 'glb',\n  module: 'gltf',\n  version: VERSION,\n  extensions: ['glb'],\n  mimeTypes: ['model/gltf-binary'],\n  binary: true,\n  parse,\n  parseSync,\n  options: {\n    glb: {\n      strict: false // Enables deprecated XVIZ support (illegal CHUNK formats)\n    }\n  }\n};\n\nasync function parse(arrayBuffer: ArrayBuffer, options?: GLBLoaderOptions): Promise<GLB> {\n  return parseSync(arrayBuffer, options);\n}\n\nfunction parseSync(arrayBuffer: ArrayBuffer, options?: GLBLoaderOptions): GLB {\n  const {byteOffset = 0} = options || {};\n  const glb: GLB = {} as GLB;\n  parseGLBSync(glb, arrayBuffer, byteOffset, options?.glb);\n  return glb;\n}\n\n// TYPE TESTS - TODO find a better way than exporting junk\nexport const _TypecheckGLBLoader: LoaderWithParser = GLBLoader;\n"]},"metadata":{},"sourceType":"module"}