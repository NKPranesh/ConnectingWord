{"ast":null,"code":"import Viewport from './viewport';\nimport { pixelsToWorld, getViewMatrix, addMetersToLngLat, getProjectionParameters, altitudeToFovy, fovyToAltitude, fitBounds, getBounds } from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\nimport { Matrix4 } from 'math.gl';\nconst TILE_SIZE = 512;\nconst EARTH_CIRCUMFERENCE = 40.03e6;\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction unitsPerMeter(latitude) {\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;\n}\n\nexport default class WebMercatorViewport extends Viewport {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 11,\n      pitch = 0,\n      bearing = 0,\n      nearZMultiplier = 0.1,\n      farZMultiplier = 1.01,\n      orthographic = false,\n      projectionMatrix,\n      repeat = false,\n      worldOffset = 0,\n      legacyMeterSizes = false\n    } = opts;\n    let {\n      width,\n      height,\n      altitude = 1.5\n    } = opts;\n    const scale = Math.pow(2, zoom);\n    width = width || 1;\n    height = height || 1;\n    let fovy;\n    let projectionParameters = null;\n\n    if (projectionMatrix) {\n      altitude = projectionMatrix[5] / 2;\n      fovy = altitudeToFovy(altitude);\n    } else {\n      if (opts.fovy) {\n        fovy = opts.fovy;\n        altitude = fovyToAltitude(fovy);\n      } else {\n        fovy = altitudeToFovy(altitude);\n      }\n\n      projectionParameters = getProjectionParameters({\n        width,\n        height,\n        pitch,\n        fovy,\n        nearZMultiplier,\n        farZMultiplier\n      });\n    }\n\n    let viewMatrixUncentered = getViewMatrix({\n      height,\n      pitch,\n      bearing,\n      scale,\n      altitude\n    });\n\n    if (worldOffset) {\n      const viewOffset = new Matrix4().translate([512 * worldOffset, 0, 0]);\n      viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);\n    }\n\n    super({ ...opts,\n      width,\n      height,\n      viewMatrix: viewMatrixUncentered,\n      longitude,\n      latitude,\n      zoom,\n      ...projectionParameters,\n      fovy,\n      focalDistance: altitude\n    });\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n    this.orthographic = orthographic;\n    this._subViewports = repeat ? [] : null;\n    this._pseudoMeters = legacyMeterSizes;\n    Object.freeze(this);\n  }\n\n  get subViewports() {\n    if (this._subViewports && !this._subViewports.length) {\n      const bounds = this.getBounds();\n      const minOffset = Math.floor((bounds[0] + 180) / 360);\n      const maxOffset = Math.ceil((bounds[2] - 180) / 360);\n\n      for (let x = minOffset; x <= maxOffset; x++) {\n        const offsetViewport = x ? new WebMercatorViewport({ ...this,\n          worldOffset: x\n        }) : this;\n\n        this._subViewports.push(offsetViewport);\n      }\n    }\n\n    return this._subViewports;\n  }\n\n  projectPosition(xyz) {\n    if (this._pseudoMeters) {\n      return super.projectPosition(xyz);\n    }\n\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * unitsPerMeter(xyz[1]);\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    if (this._pseudoMeters) {\n      return super.unprojectPosition(xyz);\n    }\n\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) / unitsPerMeter(Y);\n    return [X, Y, Z];\n  }\n\n  addMetersToLngLat(lngLatZ, xyz) {\n    return addMetersToLngLat(lngLatZ, xyz);\n  }\n\n  panByPosition(coords, pixel) {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(coords);\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n    const [longitude, latitude] = this.unprojectFlat(newCenter);\n    return {\n      longitude,\n      latitude\n    };\n  }\n\n  getBounds() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const corners = getBounds(this, options.z || 0);\n    return [Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]), Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]), Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]), Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])];\n  }\n\n  fitBounds(bounds) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      width,\n      height\n    } = this;\n    const {\n      longitude,\n      latitude,\n      zoom\n    } = fitBounds({\n      width,\n      height,\n      bounds,\n      ...options\n    });\n    return new WebMercatorViewport({\n      width,\n      height,\n      longitude,\n      latitude,\n      zoom\n    });\n  }\n\n}\nWebMercatorViewport.displayName = 'WebMercatorViewport';","map":{"version":3,"sources":["../../../src/viewports/web-mercator-viewport.js"],"names":["TILE_SIZE","EARTH_CIRCUMFERENCE","DEGREES_TO_RADIANS","Math","latCosine","latitude","constructor","opts","longitude","zoom","pitch","bearing","nearZMultiplier","farZMultiplier","orthographic","repeat","worldOffset","legacyMeterSizes","altitude","scale","width","height","projectionParameters","projectionMatrix","fovy","altitudeToFovy","fovyToAltitude","getProjectionParameters","viewMatrixUncentered","getViewMatrix","viewOffset","viewMatrix","focalDistance","Object","subViewports","bounds","minOffset","maxOffset","x","offsetViewport","projectPosition","Z","xyz","unitsPerMeter","unprojectPosition","addMetersToLngLat","panByPosition","fromLocation","pixelsToWorld","toLocation","translate","vec2","newCenter","getBounds","options","corners","fitBounds","WebMercatorViewport"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// View and Projection Matrix calculations for mapbox-js style\n// map view properties\nimport Viewport from './viewport';\n\nimport {\n  pixelsToWorld,\n  getViewMatrix,\n  addMetersToLngLat,\n  getProjectionParameters,\n  altitudeToFovy,\n  fovyToAltitude,\n  fitBounds,\n  getBounds\n} from '@math.gl/web-mercator';\n\n// TODO - import from math.gl\nimport * as vec2 from 'gl-matrix/vec2';\nimport {Matrix4} from 'math.gl';\n\nconst TILE_SIZE = 512;\nconst EARTH_CIRCUMFERENCE = 40.03e6;\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction unitsPerMeter(latitude) {\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;\n}\n\nexport default class WebMercatorViewport extends Viewport {\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  /* eslint-disable complexity, max-statements */\n  constructor(opts = {}) {\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 11,\n      pitch = 0,\n      bearing = 0,\n      nearZMultiplier = 0.1,\n      farZMultiplier = 1.01,\n      orthographic = false,\n      projectionMatrix,\n\n      repeat = false,\n      worldOffset = 0,\n\n      // backward compatibility\n      // TODO: remove in v9\n      legacyMeterSizes = false\n    } = opts;\n\n    let {width, height, altitude = 1.5} = opts;\n    const scale = Math.pow(2, zoom);\n\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    let fovy;\n    let projectionParameters = null;\n    if (projectionMatrix) {\n      altitude = projectionMatrix[5] / 2;\n      fovy = altitudeToFovy(altitude);\n    } else {\n      if (opts.fovy) {\n        fovy = opts.fovy;\n        altitude = fovyToAltitude(fovy);\n      } else {\n        fovy = altitudeToFovy(altitude);\n      }\n      projectionParameters = getProjectionParameters({\n        width,\n        height,\n        pitch,\n        fovy,\n        nearZMultiplier,\n        farZMultiplier\n      });\n    }\n\n    // The uncentered matrix allows us two move the center addition to the\n    // shader (cheap) which gives a coordinate system that has its center in\n    // the layer's center position. This makes rotations and other modelMatrx\n    // transforms much more useful.\n    let viewMatrixUncentered = getViewMatrix({\n      height,\n      pitch,\n      bearing,\n      scale,\n      altitude\n    });\n\n    if (worldOffset) {\n      const viewOffset = new Matrix4().translate([512 * worldOffset, 0, 0]);\n      viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);\n    }\n\n    super({\n      ...opts,\n      // x, y,\n      width,\n      height,\n\n      // view matrix\n      viewMatrix: viewMatrixUncentered,\n      longitude,\n      latitude,\n      zoom,\n\n      // projection matrix parameters\n      ...projectionParameters,\n      fovy,\n      focalDistance: altitude\n    });\n\n    // Save parameters\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n\n    this.orthographic = orthographic;\n\n    this._subViewports = repeat ? [] : null;\n    this._pseudoMeters = legacyMeterSizes;\n\n    Object.freeze(this);\n  }\n  /* eslint-enable complexity, max-statements */\n\n  get subViewports() {\n    if (this._subViewports && !this._subViewports.length) {\n      // Cache sub viewports so that we only calculate them once\n      const bounds = this.getBounds();\n\n      const minOffset = Math.floor((bounds[0] + 180) / 360);\n      const maxOffset = Math.ceil((bounds[2] - 180) / 360);\n\n      for (let x = minOffset; x <= maxOffset; x++) {\n        const offsetViewport = x\n          ? new WebMercatorViewport({\n              ...this,\n              worldOffset: x\n            })\n          : this;\n        this._subViewports.push(offsetViewport);\n      }\n    }\n    return this._subViewports;\n  }\n\n  projectPosition(xyz) {\n    if (this._pseudoMeters) {\n      // Backward compatibility\n      return super.projectPosition(xyz);\n    }\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * unitsPerMeter(xyz[1]);\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    if (this._pseudoMeters) {\n      // Backward compatibility\n      return super.unprojectPosition(xyz);\n    }\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) / unitsPerMeter(Y);\n    return [X, Y, Z];\n  }\n\n  /**\n   * Add a meter delta to a base lnglat coordinate, returning a new lnglat array\n   *\n   * Note: Uses simple linear approximation around the viewport center\n   * Error increases with size of offset (roughly 1% per 100km)\n   *\n   * @param {[Number,Number]|[Number,Number,Number]) lngLatZ - base coordinate\n   * @param {[Number,Number]|[Number,Number,Number]) xyz - array of meter deltas\n   * @return {[Number,Number]|[Number,Number,Number]) array of [lng,lat,z] deltas\n   */\n  addMetersToLngLat(lngLatZ, xyz) {\n    return addMetersToLngLat(lngLatZ, xyz);\n  }\n\n  panByPosition(coords, pixel) {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(coords);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    const [longitude, latitude] = this.unprojectFlat(newCenter);\n    return {longitude, latitude};\n  }\n\n  getBounds(options = {}) {\n    const corners = getBounds(this, options.z || 0);\n\n    return [\n      Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n      Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]),\n      Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n      Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])\n    ];\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param {Array} bounds - [[lon, lat], [lon, lat]]\n   * @param {Number} [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param {Array} [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds({width, height, bounds, ...options});\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n}\n\nWebMercatorViewport.displayName = 'WebMercatorViewport';\n"]},"metadata":{},"sourceType":"module"}