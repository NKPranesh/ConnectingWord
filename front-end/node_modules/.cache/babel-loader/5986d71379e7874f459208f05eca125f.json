{"ast":null,"code":"import IconLayer from '../icon-layer/icon-layer';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport TextLayer from '../text-layer/text-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nexport const POINT_LAYER = {\n  circle: {\n    type: ScatterplotLayer,\n    props: {\n      filled: 'filled',\n      stroked: 'stroked',\n      lineWidthMaxPixels: 'lineWidthMaxPixels',\n      lineWidthMinPixels: 'lineWidthMinPixels',\n      lineWidthScale: 'lineWidthScale',\n      lineWidthUnits: 'lineWidthUnits',\n      pointRadiusMaxPixels: 'radiusMaxPixels',\n      pointRadiusMinPixels: 'radiusMinPixels',\n      pointRadiusScale: 'radiusScale',\n      pointRadiusUnits: 'radiusUnits',\n      pointAntialiasing: 'antialiasing',\n      pointBillboard: 'billboard',\n      getFillColor: 'getFillColor',\n      getLineColor: 'getLineColor',\n      getLineWidth: 'getLineWidth',\n      getPointRadius: 'getRadius'\n    }\n  },\n  icon: {\n    type: IconLayer,\n    props: {\n      iconAtlas: 'iconAtlas',\n      iconMapping: 'iconMapping',\n      iconSizeMaxPixels: 'sizeMaxPixels',\n      iconSizeMinPixels: 'sizeMinPixels',\n      iconSizeScale: 'sizeScale',\n      iconSizeUnits: 'sizeUnits',\n      iconAlphaCutoff: 'alphaCutoff',\n      iconBillboard: 'billboard',\n      getIcon: 'getIcon',\n      getIconAngle: 'getAngle',\n      getIconColor: 'getColor',\n      getIconPixelOffset: 'getPixelOffset',\n      getIconSize: 'getSize'\n    }\n  },\n  text: {\n    type: TextLayer,\n    props: {\n      textSizeMaxPixels: 'sizeMaxPixels',\n      textSizeMinPixels: 'sizeMinPixels',\n      textSizeScale: 'sizeScale',\n      textSizeUnits: 'sizeUnits',\n      textBackground: 'background',\n      textBackgroundPadding: 'backgroundPadding',\n      textFontFamily: 'fontFamily',\n      textFontWeight: 'fontWeight',\n      textLineHeight: 'lineHeight',\n      textMaxWidth: 'maxWidth',\n      textOutlineColor: 'outlineColor',\n      textOutlineWidth: 'outlineWidth',\n      textWordBreak: 'wordBreak',\n      textCharacterSet: 'characterSet',\n      textBillboard: 'billboard',\n      textFontSettings: 'fontSettings',\n      getText: 'getText',\n      getTextAngle: 'getAngle',\n      getTextColor: 'getColor',\n      getTextPixelOffset: 'getPixelOffset',\n      getTextSize: 'getSize',\n      getTextAnchor: 'getTextAnchor',\n      getTextAlignmentBaseline: 'getAlignmentBaseline',\n      getTextBackgroundColor: 'getBackgroundColor',\n      getTextBorderColor: 'getBorderColor',\n      getTextBorderWidth: 'getBorderWidth'\n    }\n  }\n};\nexport const LINE_LAYER = {\n  type: PathLayer,\n  props: {\n    lineWidthUnits: 'widthUnits',\n    lineWidthScale: 'widthScale',\n    lineWidthMinPixels: 'widthMinPixels',\n    lineWidthMaxPixels: 'widthMaxPixels',\n    lineJointRounded: 'jointRounded',\n    lineCapRounded: 'capRounded',\n    lineMiterLimit: 'miterLimit',\n    lineBillboard: 'billboard',\n    getLineColor: 'getColor',\n    getLineWidth: 'getWidth'\n  }\n};\nexport const POLYGON_LAYER = {\n  type: SolidPolygonLayer,\n  props: {\n    extruded: 'extruded',\n    filled: 'filled',\n    wireframe: 'wireframe',\n    elevationScale: 'elevationScale',\n    material: 'material',\n    getElevation: 'getElevation',\n    getFillColor: 'getFillColor',\n    getLineColor: 'getLineColor'\n  }\n};\nexport function getDefaultProps(_ref) {\n  let {\n    type,\n    props\n  } = _ref;\n  const result = {};\n\n  for (const key in props) {\n    result[key] = type.defaultProps[props[key]];\n  }\n\n  return result;\n}\nexport function forwardProps(layer, mapping) {\n  const {\n    transitions,\n    updateTriggers\n  } = layer.props;\n  const result = {\n    updateTriggers: {},\n    transitions: transitions && {\n      getPosition: transitions.geometry\n    }\n  };\n\n  for (const sourceKey in mapping) {\n    const targetKey = mapping[sourceKey];\n    let value = layer.props[sourceKey];\n\n    if (sourceKey.startsWith('get')) {\n      value = layer.getSubLayerAccessor(value);\n      result.updateTriggers[targetKey] = updateTriggers[sourceKey];\n\n      if (transitions) {\n        result.transitions[targetKey] = transitions[sourceKey];\n      }\n    }\n\n    result[targetKey] = value;\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../../src/geojson-layer/sub-layer-map.js"],"names":["POINT_LAYER","circle","type","props","filled","stroked","lineWidthMaxPixels","lineWidthMinPixels","lineWidthScale","lineWidthUnits","pointRadiusMaxPixels","pointRadiusMinPixels","pointRadiusScale","pointRadiusUnits","pointAntialiasing","pointBillboard","getFillColor","getLineColor","getLineWidth","getPointRadius","icon","iconAtlas","iconMapping","iconSizeMaxPixels","iconSizeMinPixels","iconSizeScale","iconSizeUnits","iconAlphaCutoff","iconBillboard","getIcon","getIconAngle","getIconColor","getIconPixelOffset","getIconSize","text","textSizeMaxPixels","textSizeMinPixels","textSizeScale","textSizeUnits","textBackground","textBackgroundPadding","textFontFamily","textFontWeight","textLineHeight","textMaxWidth","textOutlineColor","textOutlineWidth","textWordBreak","textCharacterSet","textBillboard","textFontSettings","getText","getTextAngle","getTextColor","getTextPixelOffset","getTextSize","getTextAnchor","getTextAlignmentBaseline","getTextBackgroundColor","getTextBorderColor","getTextBorderWidth","LINE_LAYER","lineJointRounded","lineCapRounded","lineMiterLimit","lineBillboard","POLYGON_LAYER","extruded","wireframe","elevationScale","material","getElevation","result","updateTriggers","layer","transitions","getPosition","geometry","targetKey","mapping","value","sourceKey"],"mappings":"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","sourcesContent":["import IconLayer from '../icon-layer/icon-layer';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport TextLayer from '../text-layer/text-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\n\nexport const POINT_LAYER = {\n  circle: {\n    type: ScatterplotLayer,\n    props: {\n      filled: 'filled',\n      stroked: 'stroked',\n\n      lineWidthMaxPixels: 'lineWidthMaxPixels',\n      lineWidthMinPixels: 'lineWidthMinPixels',\n      lineWidthScale: 'lineWidthScale',\n      lineWidthUnits: 'lineWidthUnits',\n      pointRadiusMaxPixels: 'radiusMaxPixels',\n      pointRadiusMinPixels: 'radiusMinPixels',\n      pointRadiusScale: 'radiusScale',\n      pointRadiusUnits: 'radiusUnits',\n      pointAntialiasing: 'antialiasing',\n      pointBillboard: 'billboard',\n\n      getFillColor: 'getFillColor',\n      getLineColor: 'getLineColor',\n      getLineWidth: 'getLineWidth',\n      getPointRadius: 'getRadius'\n    }\n  },\n  icon: {\n    type: IconLayer,\n    props: {\n      iconAtlas: 'iconAtlas',\n      iconMapping: 'iconMapping',\n\n      iconSizeMaxPixels: 'sizeMaxPixels',\n      iconSizeMinPixels: 'sizeMinPixels',\n      iconSizeScale: 'sizeScale',\n      iconSizeUnits: 'sizeUnits',\n      iconAlphaCutoff: 'alphaCutoff',\n      iconBillboard: 'billboard',\n\n      getIcon: 'getIcon',\n      getIconAngle: 'getAngle',\n      getIconColor: 'getColor',\n      getIconPixelOffset: 'getPixelOffset',\n      getIconSize: 'getSize'\n    }\n  },\n  text: {\n    type: TextLayer,\n    props: {\n      textSizeMaxPixels: 'sizeMaxPixels',\n      textSizeMinPixels: 'sizeMinPixels',\n      textSizeScale: 'sizeScale',\n      textSizeUnits: 'sizeUnits',\n\n      textBackground: 'background',\n      textBackgroundPadding: 'backgroundPadding',\n      textFontFamily: 'fontFamily',\n      textFontWeight: 'fontWeight',\n      textLineHeight: 'lineHeight',\n      textMaxWidth: 'maxWidth',\n      textOutlineColor: 'outlineColor',\n      textOutlineWidth: 'outlineWidth',\n      textWordBreak: 'wordBreak',\n      textCharacterSet: 'characterSet',\n      textBillboard: 'billboard',\n      textFontSettings: 'fontSettings',\n\n      getText: 'getText',\n      getTextAngle: 'getAngle',\n      getTextColor: 'getColor',\n      getTextPixelOffset: 'getPixelOffset',\n      getTextSize: 'getSize',\n      getTextAnchor: 'getTextAnchor',\n      getTextAlignmentBaseline: 'getAlignmentBaseline',\n      getTextBackgroundColor: 'getBackgroundColor',\n      getTextBorderColor: 'getBorderColor',\n      getTextBorderWidth: 'getBorderWidth'\n    }\n  }\n};\n\nexport const LINE_LAYER = {\n  type: PathLayer,\n  props: {\n    lineWidthUnits: 'widthUnits',\n    lineWidthScale: 'widthScale',\n    lineWidthMinPixels: 'widthMinPixels',\n    lineWidthMaxPixels: 'widthMaxPixels',\n    lineJointRounded: 'jointRounded',\n    lineCapRounded: 'capRounded',\n    lineMiterLimit: 'miterLimit',\n    lineBillboard: 'billboard',\n\n    getLineColor: 'getColor',\n    getLineWidth: 'getWidth'\n  }\n};\n\nexport const POLYGON_LAYER = {\n  type: SolidPolygonLayer,\n  props: {\n    extruded: 'extruded',\n    filled: 'filled',\n    wireframe: 'wireframe',\n    elevationScale: 'elevationScale',\n    material: 'material',\n\n    getElevation: 'getElevation',\n    getFillColor: 'getFillColor',\n    getLineColor: 'getLineColor'\n  }\n};\n\nexport function getDefaultProps({type, props}) {\n  const result = {};\n  for (const key in props) {\n    result[key] = type.defaultProps[props[key]];\n  }\n  return result;\n}\n\nexport function forwardProps(layer, mapping) {\n  const {transitions, updateTriggers} = layer.props;\n  const result = {\n    updateTriggers: {},\n    transitions: transitions && {\n      getPosition: transitions.geometry\n    }\n  };\n\n  for (const sourceKey in mapping) {\n    const targetKey = mapping[sourceKey];\n    let value = layer.props[sourceKey];\n    if (sourceKey.startsWith('get')) {\n      // isAccessor\n      value = layer.getSubLayerAccessor(value);\n      result.updateTriggers[targetKey] = updateTriggers[sourceKey];\n      if (transitions) {\n        result.transitions[targetKey] = transitions[sourceKey];\n      }\n    }\n    result[targetKey] = value;\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}