{"ast":null,"code":"import Accessor from './accessor';\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { decomposeCompositeGLType } from '../webgl-utils/attribute-utils';\nexport default class ProgramConfiguration {\n  constructor(program) {\n    this.id = program.id;\n    this.attributeInfos = [];\n    this.attributeInfosByName = {};\n    this.attributeInfosByLocation = [];\n    this.varyingInfos = [];\n    this.varyingInfosByName = {};\n    Object.seal(this);\n\n    this._readAttributesFromProgram(program);\n\n    this._readVaryingsFromProgram(program);\n  }\n\n  getAttributeInfo(locationOrName) {\n    const location = Number(locationOrName);\n\n    if (Number.isFinite(location)) {\n      return this.attributeInfosByLocation[location];\n    }\n\n    return this.attributeInfosByName[locationOrName] || null;\n  }\n\n  getAttributeLocation(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.location : -1;\n  }\n\n  getAttributeAccessor(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.accessor : null;\n  }\n\n  getVaryingInfo(locationOrName) {\n    const location = Number(locationOrName);\n\n    if (Number.isFinite(location)) {\n      return this.varyingInfos[location];\n    }\n\n    return this.varyingInfosByName[locationOrName] || null;\n  }\n\n  getVaryingIndex(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.location : -1;\n  }\n\n  getVaryingAccessor(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.accessor : null;\n  }\n\n  _readAttributesFromProgram(program) {\n    const {\n      gl\n    } = program;\n    const count = gl.getProgramParameter(program.handle, 35721);\n\n    for (let index = 0; index < count; index++) {\n      const {\n        name,\n        type,\n        size\n      } = gl.getActiveAttrib(program.handle, index);\n      const location = gl.getAttribLocation(program.handle, name);\n\n      if (location >= 0) {\n        this._addAttribute(location, name, type, size);\n      }\n    }\n\n    this.attributeInfos.sort((a, b) => a.location - b.location);\n  }\n\n  _readVaryingsFromProgram(program) {\n    const {\n      gl\n    } = program;\n\n    if (!isWebGL2(gl)) {\n      return;\n    }\n\n    const count = gl.getProgramParameter(program.handle, 35971);\n\n    for (let location = 0; location < count; location++) {\n      const {\n        name,\n        type,\n        size\n      } = gl.getTransformFeedbackVarying(program.handle, location);\n\n      this._addVarying(location, name, type, size);\n    }\n\n    this.varyingInfos.sort((a, b) => a.location - b.location);\n  }\n\n  _addAttribute(location, name, compositeType, size) {\n    const {\n      type,\n      components\n    } = decomposeCompositeGLType(compositeType);\n    const accessor = {\n      type,\n      size: size * components\n    };\n\n    this._inferProperties(location, name, accessor);\n\n    const attributeInfo = {\n      location,\n      name,\n      accessor: new Accessor(accessor)\n    };\n    this.attributeInfos.push(attributeInfo);\n    this.attributeInfosByLocation[location] = attributeInfo;\n    this.attributeInfosByName[attributeInfo.name] = attributeInfo;\n  }\n\n  _inferProperties(location, name, accessor) {\n    if (/instance/i.test(name)) {\n      accessor.divisor = 1;\n    }\n  }\n\n  _addVarying(location, name, compositeType, size) {\n    const {\n      type,\n      components\n    } = decomposeCompositeGLType(compositeType);\n    const accessor = new Accessor({\n      type,\n      size: size * components\n    });\n    const varying = {\n      location,\n      name,\n      accessor\n    };\n    this.varyingInfos.push(varying);\n    this.varyingInfosByName[varying.name] = varying;\n  }\n\n}","map":{"version":3,"sources":["../../../src/classes/program-configuration.js"],"names":["constructor","program","Object","getAttributeInfo","location","Number","getAttributeLocation","attributeInfo","getAttributeAccessor","getVaryingInfo","getVaryingIndex","varying","getVaryingAccessor","_readAttributesFromProgram","gl","count","index","size","a","b","_readVaryingsFromProgram","isWebGL2","_addAttribute","components","decomposeCompositeGLType","accessor","_inferProperties","_addVarying"],"mappings":"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","sourcesContent":["// Contains metadata describing attribute configurations for a program's shaders\n// Much of this is automatically extracted from shaders after program linking\nimport Accessor from './accessor';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {decomposeCompositeGLType} from '../webgl-utils/attribute-utils';\n\nexport default class ProgramConfiguration {\n  constructor(program) {\n    this.id = program.id;\n    this.attributeInfos = [];\n    this.attributeInfosByName = {};\n\n    // Locations may not be contiguous the case of matrix attributes\n    // so keep a separate location->attribute map.\n    this.attributeInfosByLocation = [];\n    this.varyingInfos = [];\n    this.varyingInfosByName = {};\n    Object.seal(this);\n    this._readAttributesFromProgram(program);\n    this._readVaryingsFromProgram(program);\n  }\n\n  getAttributeInfo(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return this.attributeInfosByLocation[location];\n    }\n    return this.attributeInfosByName[locationOrName] || null;\n  }\n\n  // Resolves an attribute name or index to an index\n  getAttributeLocation(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.location : -1;\n  }\n\n  getAttributeAccessor(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.accessor : null;\n  }\n\n  getVaryingInfo(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return this.varyingInfos[location];\n    }\n    return this.varyingInfosByName[locationOrName] || null;\n  }\n\n  getVaryingIndex(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.location : -1;\n  }\n\n  getVaryingAccessor(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.accessor : null;\n  }\n\n  // PRIVATE METHODS\n\n  // linkProgram needs to have been called, although linking does not need to have been successful\n  _readAttributesFromProgram(program) {\n    const {gl} = program;\n    const count = gl.getProgramParameter(program.handle, gl.ACTIVE_ATTRIBUTES);\n\n    for (let index = 0; index < count; index++) {\n      const {name, type, size} = gl.getActiveAttrib(program.handle, index);\n      const location = gl.getAttribLocation(program.handle, name);\n      // Add only user provided attributes, for built-in attributes like\n      // `gl_InstanceID` locaiton will be < 0\n      if (location >= 0) {\n        this._addAttribute(location, name, type, size);\n      }\n    }\n\n    this.attributeInfos.sort((a, b) => a.location - b.location);\n  }\n\n  // linkProgram needs to have been called, although linking does not need to have been successful\n  _readVaryingsFromProgram(program) {\n    const {gl} = program;\n    if (!isWebGL2(gl)) {\n      return;\n    }\n\n    const count = gl.getProgramParameter(program.handle, gl.TRANSFORM_FEEDBACK_VARYINGS);\n    for (let location = 0; location < count; location++) {\n      const {name, type, size} = gl.getTransformFeedbackVarying(program.handle, location);\n      this._addVarying(location, name, type, size);\n    }\n\n    this.varyingInfos.sort((a, b) => a.location - b.location);\n  }\n\n  _addAttribute(location, name, compositeType, size) {\n    const {type, components} = decomposeCompositeGLType(compositeType);\n    const accessor = {type, size: size * components};\n    this._inferProperties(location, name, accessor);\n\n    const attributeInfo = {location, name, accessor: new Accessor(accessor)}; // Base values\n    this.attributeInfos.push(attributeInfo);\n    this.attributeInfosByLocation[location] = attributeInfo; // For quick location based lookup\n    this.attributeInfosByName[attributeInfo.name] = attributeInfo; // For quick name based lookup\n  }\n\n  // Extract additional attribute metadata from shader names (based on attribute naming conventions)\n  _inferProperties(location, name, accessor) {\n    if (/instance/i.test(name)) {\n      // Any attribute containing the word \"instance\" will be assumed to be instanced\n      accessor.divisor = 1;\n    }\n  }\n\n  _addVarying(location, name, compositeType, size) {\n    const {type, components} = decomposeCompositeGLType(compositeType);\n    const accessor = new Accessor({type, size: size * components});\n\n    const varying = {location, name, accessor}; // Base values\n    this.varyingInfos.push(varying);\n    this.varyingInfosByName[varying.name] = varying; // For quick name based lookup\n  }\n}\n"]},"metadata":{},"sourceType":"module"}