{"ast":null,"code":"import { isWebGL2 } from '../utils/webgl-checks';\nconst OES_element_index = 'OES_element_index';\nconst WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nconst EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nconst EXT_disjoint_timer_query_webgl2 = 'EXT_disjoint_timer_query_webgl2';\nconst EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\nconst WEBGL_debug_renderer_info = 'WEBGL_debug_renderer_info';\nconst GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8b8b;\nconst GL_DONT_CARE = 0x1100;\nconst GL_GPU_DISJOINT_EXT = 0x8fbb;\nconst GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84ff;\nconst GL_UNMASKED_VENDOR_WEBGL = 0x9245;\nconst GL_UNMASKED_RENDERER_WEBGL = 0x9246;\n\nconst getWebGL2ValueOrZero = gl => !isWebGL2(gl) ? 0 : undefined;\n\nconst WEBGL_PARAMETERS = {\n  [3074]: gl => !isWebGL2(gl) ? 36064 : undefined,\n  [GL_FRAGMENT_SHADER_DERIVATIVE_HINT]: gl => !isWebGL2(gl) ? GL_DONT_CARE : undefined,\n  [35977]: getWebGL2ValueOrZero,\n  [32937]: getWebGL2ValueOrZero,\n  [GL_GPU_DISJOINT_EXT]: (gl, getParameter) => {\n    const ext = isWebGL2(gl) ? gl.getExtension(EXT_disjoint_timer_query_webgl2) : gl.getExtension(EXT_disjoint_timer_query);\n    return ext && ext.GPU_DISJOINT_EXT ? getParameter(ext.GPU_DISJOINT_EXT) : 0;\n  },\n  [GL_UNMASKED_VENDOR_WEBGL]: (gl, getParameter) => {\n    const ext = gl.getExtension(WEBGL_debug_renderer_info);\n    return getParameter(ext && ext.UNMASKED_VENDOR_WEBGL || 7936);\n  },\n  [GL_UNMASKED_RENDERER_WEBGL]: (gl, getParameter) => {\n    const ext = gl.getExtension(WEBGL_debug_renderer_info);\n    return getParameter(ext && ext.UNMASKED_RENDERER_WEBGL || 7937);\n  },\n  [GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT]: (gl, getParameter) => {\n    const ext = gl.luma.extensions[EXT_texture_filter_anisotropic];\n    return ext ? getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1.0;\n  },\n  [32883]: getWebGL2ValueOrZero,\n  [35071]: getWebGL2ValueOrZero,\n  [37447]: getWebGL2ValueOrZero,\n  [36063]: (gl, getParameter) => {\n    if (!isWebGL2(gl)) {\n      const ext = gl.getExtension(WEBGL_draw_buffers);\n      return ext ? getParameter(ext.MAX_COLOR_ATTACHMENTS_WEBGL) : 0;\n    }\n\n    return undefined;\n  },\n  [35379]: getWebGL2ValueOrZero,\n  [35374]: getWebGL2ValueOrZero,\n  [35377]: getWebGL2ValueOrZero,\n  [34852]: gl => {\n    if (!isWebGL2(gl)) {\n      const ext = gl.getExtension(WEBGL_draw_buffers);\n      return ext ? ext.MAX_DRAW_BUFFERS_WEBGL : 0;\n    }\n\n    return undefined;\n  },\n  [36203]: gl => gl.getExtension(OES_element_index) ? 2147483647 : 65535,\n  [33001]: gl => gl.getExtension(OES_element_index) ? 16777216 : 65535,\n  [33000]: gl => 16777216,\n  [37157]: getWebGL2ValueOrZero,\n  [35373]: getWebGL2ValueOrZero,\n  [35657]: getWebGL2ValueOrZero,\n  [36183]: getWebGL2ValueOrZero,\n  [37137]: getWebGL2ValueOrZero,\n  [34045]: getWebGL2ValueOrZero,\n  [35978]: getWebGL2ValueOrZero,\n  [35979]: getWebGL2ValueOrZero,\n  [35968]: getWebGL2ValueOrZero,\n  [35376]: getWebGL2ValueOrZero,\n  [35375]: getWebGL2ValueOrZero,\n  [35659]: getWebGL2ValueOrZero,\n  [37154]: getWebGL2ValueOrZero,\n  [35371]: getWebGL2ValueOrZero,\n  [35658]: getWebGL2ValueOrZero,\n  [35076]: getWebGL2ValueOrZero,\n  [35077]: getWebGL2ValueOrZero,\n  [35380]: getWebGL2ValueOrZero\n};\nexport function getParameterPolyfill(gl, originalGetParameter, pname) {\n  const limit = WEBGL_PARAMETERS[pname];\n  const value = typeof limit === 'function' ? limit(gl, originalGetParameter, pname) : limit;\n  const result = value !== undefined ? value : originalGetParameter(pname);\n  return result;\n}","map":{"version":3,"sources":["../../../src/polyfill/get-parameter-polyfill.js"],"names":["OES_element_index","WEBGL_draw_buffers","EXT_disjoint_timer_query","EXT_disjoint_timer_query_webgl2","EXT_texture_filter_anisotropic","WEBGL_debug_renderer_info","GL_FRAGMENT_SHADER_DERIVATIVE_HINT","GL_DONT_CARE","GL_GPU_DISJOINT_EXT","GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT","GL_UNMASKED_VENDOR_WEBGL","GL_UNMASKED_RENDERER_WEBGL","getWebGL2ValueOrZero","gl","isWebGL2","WEBGL_PARAMETERS","ext","getParameter","limit","value","result","originalGetParameter"],"mappings":"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","sourcesContent":["/* eslint-disable no-inline-comments, max-len, camelcase */\nimport GL from '@luma.gl/constants';\nimport {isWebGL2} from '../utils/webgl-checks';\n\nconst OES_element_index = 'OES_element_index';\nconst WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nconst EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nconst EXT_disjoint_timer_query_webgl2 = 'EXT_disjoint_timer_query_webgl2';\nconst EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\nconst WEBGL_debug_renderer_info = 'WEBGL_debug_renderer_info';\n\nconst GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8b8b;\nconst GL_DONT_CARE = 0x1100;\nconst GL_GPU_DISJOINT_EXT = 0x8fbb;\nconst GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84ff;\nconst GL_UNMASKED_VENDOR_WEBGL = 0x9245; // vendor string of the graphics driver.\nconst GL_UNMASKED_RENDERER_WEBGL = 0x9246; // renderer string of the graphics driver.\n\nconst getWebGL2ValueOrZero = gl => (!isWebGL2(gl) ? 0 : undefined);\n\n// if a function returns undefined in this table,\n// the original getParameter will be called, defeating the override\nconst WEBGL_PARAMETERS = {\n  [GL.READ_BUFFER]: gl => (!isWebGL2(gl) ? GL.COLOR_ATTACHMENT0 : undefined),\n\n  // WebGL2 context parameters\n  [GL_FRAGMENT_SHADER_DERIVATIVE_HINT]: gl => (!isWebGL2(gl) ? GL_DONT_CARE : undefined),\n\n  [GL.RASTERIZER_DISCARD]: getWebGL2ValueOrZero,\n\n  [GL.SAMPLES]: getWebGL2ValueOrZero,\n\n  // WebGL2 extension context parameters\n  [GL_GPU_DISJOINT_EXT]: (gl, getParameter) => {\n    const ext = isWebGL2(gl)\n      ? gl.getExtension(EXT_disjoint_timer_query_webgl2)\n      : gl.getExtension(EXT_disjoint_timer_query);\n    return ext && ext.GPU_DISJOINT_EXT ? getParameter(ext.GPU_DISJOINT_EXT) : 0;\n  },\n\n  // Extension fixed values\n  [GL_UNMASKED_VENDOR_WEBGL]: (gl, getParameter) => {\n    const ext = gl.getExtension(WEBGL_debug_renderer_info);\n    return getParameter((ext && ext.UNMASKED_VENDOR_WEBGL) || GL.VENDOR);\n  },\n\n  [GL_UNMASKED_RENDERER_WEBGL]: (gl, getParameter) => {\n    const ext = gl.getExtension(WEBGL_debug_renderer_info);\n    return getParameter((ext && ext.UNMASKED_RENDERER_WEBGL) || GL.RENDERER);\n  },\n\n  // Extension LIMITS\n  [GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT]: (gl, getParameter) => {\n    const ext = gl.luma.extensions[EXT_texture_filter_anisotropic];\n    return ext ? getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1.0;\n  },\n\n  // WebGL2 Limits\n  [GL.MAX_3D_TEXTURE_SIZE]: getWebGL2ValueOrZero,\n  [GL.MAX_ARRAY_TEXTURE_LAYERS]: getWebGL2ValueOrZero,\n  [GL.MAX_CLIENT_WAIT_TIMEOUT_WEBGL]: getWebGL2ValueOrZero,\n  [GL.MAX_COLOR_ATTACHMENTS]: (gl, getParameter) => {\n    if (!isWebGL2(gl)) {\n      const ext = gl.getExtension(WEBGL_draw_buffers);\n      return ext ? getParameter(ext.MAX_COLOR_ATTACHMENTS_WEBGL) : 0;\n    }\n    return undefined;\n  },\n  [GL.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_COMBINED_UNIFORM_BLOCKS]: getWebGL2ValueOrZero,\n  [GL.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_DRAW_BUFFERS]: gl => {\n    if (!isWebGL2(gl)) {\n      const ext = gl.getExtension(WEBGL_draw_buffers);\n      return ext ? ext.MAX_DRAW_BUFFERS_WEBGL : 0;\n    }\n    return undefined;\n  },\n  [GL.MAX_ELEMENT_INDEX]:\n    // Guess: per webglstats.com 99.6% of webgl2 supports 2147483647\n    gl => (gl.getExtension(OES_element_index) ? 2147483647 : 65535),\n  [GL.MAX_ELEMENTS_INDICES]:\n    // Guess: \"Reasonably safe\" per webglstats.com - could be higher/lower (on some mobile devices)\n    gl => (gl.getExtension(OES_element_index) ? 16777216 : 65535),\n  [GL.MAX_ELEMENTS_VERTICES]:\n    // Guess: \"Reasonably safe\" per webglstats.com - could be higher/lower (on some mobile devices)\n    gl => 16777216,\n  [GL.MAX_FRAGMENT_INPUT_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_FRAGMENT_UNIFORM_BLOCKS]: getWebGL2ValueOrZero,\n  [GL.MAX_FRAGMENT_UNIFORM_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_SAMPLES]: getWebGL2ValueOrZero,\n  [GL.MAX_SERVER_WAIT_TIMEOUT]: getWebGL2ValueOrZero,\n  [GL.MAX_TEXTURE_LOD_BIAS]: getWebGL2ValueOrZero,\n  [GL.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS]: getWebGL2ValueOrZero,\n  [GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_UNIFORM_BLOCK_SIZE]: getWebGL2ValueOrZero,\n  [GL.MAX_UNIFORM_BUFFER_BINDINGS]: getWebGL2ValueOrZero,\n  [GL.MAX_VARYING_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_VERTEX_OUTPUT_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_VERTEX_UNIFORM_BLOCKS]: getWebGL2ValueOrZero,\n  [GL.MAX_VERTEX_UNIFORM_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MIN_PROGRAM_TEXEL_OFFSET]: getWebGL2ValueOrZero,\n  [GL.MAX_PROGRAM_TEXEL_OFFSET]: getWebGL2ValueOrZero,\n  [GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT]: getWebGL2ValueOrZero\n};\n\n// A \"replacement\" gl.getParameter that accepts \"enums\" from extensions and WebGL2\n// and returns reasonably safe defaults\nexport function getParameterPolyfill(gl, originalGetParameter, pname) {\n  // Return mock limits (usually 0) for WebGL2 constants to ensure these\n  // can be queries without error\n  const limit = WEBGL_PARAMETERS[pname];\n  // @ts-ignore TODO pname parameter not declared\n  const value = typeof limit === 'function' ? limit(gl, originalGetParameter, pname) : limit;\n  const result = value !== undefined ? value : originalGetParameter(pname);\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}