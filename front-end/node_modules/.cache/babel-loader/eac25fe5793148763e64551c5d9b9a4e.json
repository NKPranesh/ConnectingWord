{"ast":null,"code":"import { Vector3 } from '@math.gl/core';\nimport * as mat4 from 'gl-matrix/mat4';\nimport { INTERSECTION } from '../../constants';\nconst scratchVector = new Vector3();\nconst scratchVector2 = new Vector3();\nexport default class BoundingSphere {\n  constructor() {\n    let center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0, 0];\n    let radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;\n    this.radius = -0;\n    this.center = new Vector3();\n    this.fromCenterRadius(center, radius);\n  }\n\n  fromCenterRadius(center, radius) {\n    this.center.from(center);\n    this.radius = radius;\n    return this;\n  }\n\n  fromCornerPoints(corner, oppositeCorner) {\n    oppositeCorner = scratchVector.from(oppositeCorner);\n    this.center = new Vector3().from(corner).add(oppositeCorner).scale(0.5);\n    this.radius = this.center.distance(oppositeCorner);\n    return this;\n  }\n\n  equals(right) {\n    return this === right || Boolean(right) && this.center.equals(right.center) && this.radius === right.radius;\n  }\n\n  clone() {\n    return new BoundingSphere(this.center, this.radius);\n  }\n\n  union(boundingSphere) {\n    const leftCenter = this.center;\n    const leftRadius = this.radius;\n    const rightCenter = boundingSphere.center;\n    const rightRadius = boundingSphere.radius;\n    const toRightCenter = scratchVector.copy(rightCenter).subtract(leftCenter);\n    const centerSeparation = toRightCenter.magnitude();\n\n    if (leftRadius >= centerSeparation + rightRadius) {\n      return this.clone();\n    }\n\n    if (rightRadius >= centerSeparation + leftRadius) {\n      return boundingSphere.clone();\n    }\n\n    const halfDistanceBetweenTangentPoints = (leftRadius + centerSeparation + rightRadius) * 0.5;\n    scratchVector2.copy(toRightCenter).scale((-leftRadius + halfDistanceBetweenTangentPoints) / centerSeparation).add(leftCenter);\n    this.center.copy(scratchVector2);\n    this.radius = halfDistanceBetweenTangentPoints;\n    return this;\n  }\n\n  expand(point) {\n    point = scratchVector.from(point);\n    const radius = point.subtract(this.center).magnitude();\n\n    if (radius > this.radius) {\n      this.radius = radius;\n    }\n\n    return this;\n  }\n\n  transform(transform) {\n    this.center.transform(transform);\n    const scale = mat4.getScaling(scratchVector, transform);\n    this.radius = Math.max(scale[0], Math.max(scale[1], scale[2])) * this.radius;\n    return this;\n  }\n\n  distanceSquaredTo(point) {\n    const d = this.distanceTo(point);\n    return d * d;\n  }\n\n  distanceTo(point) {\n    point = scratchVector.from(point);\n    const delta = point.subtract(this.center);\n    return Math.max(0, delta.len() - this.radius);\n  }\n\n  intersectPlane(plane) {\n    const center = this.center;\n    const radius = this.radius;\n    const normal = plane.normal;\n    const distanceToPlane = normal.dot(center) + plane.distance;\n\n    if (distanceToPlane < -radius) {\n      return INTERSECTION.OUTSIDE;\n    }\n\n    if (distanceToPlane < radius) {\n      return INTERSECTION.INTERSECTING;\n    }\n\n    return INTERSECTION.INSIDE;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/lib/bounding-volumes/bounding-sphere.js"],"names":["scratchVector","scratchVector2","constructor","center","radius","fromCenterRadius","fromCornerPoints","oppositeCorner","equals","Boolean","right","clone","union","leftCenter","leftRadius","rightCenter","boundingSphere","rightRadius","toRightCenter","centerSeparation","halfDistanceBetweenTangentPoints","expand","point","transform","scale","mat4","Math","distanceSquaredTo","d","distanceTo","delta","intersectPlane","normal","plane","distanceToPlane","INTERSECTION"],"mappings":"AAGA,SAAA,OAAA,QAAA,eAAA;AACA,OAAO,KAAP,IAAA,MAAA,gBAAA;AACA,SAAA,YAAA,QAAA,iBAAA;AAYA,MAAMA,aAAa,GAAG,IAAtB,OAAsB,EAAtB;AACA,MAAMC,cAAc,GAAG,IAAvB,OAAuB,EAAvB;AAEA,eAAe,MAAA,cAAA,CAAqB;AAClCC,EAAAA,WAAW,GAAmC;AAAA,QAAlCC,MAAkC,uEAAzB,CAAA,CAAA,EAAA,CAAA,EAAV,CAAU,CAAyB;AAAA,QAAdC,MAAc,uEAAnC,GAAmC;AAC5C,SAAA,MAAA,GAAc,CAAd,CAAA;AACA,SAAA,MAAA,GAAc,IAAd,OAAc,EAAd;AACA,SAAA,gBAAA,CAAA,MAAA,EAAA,MAAA;AACD;;AAEDC,EAAAA,gBAAgB,CAAA,MAAA,EAAA,MAAA,EAAiB;AAC/B,SAAA,MAAA,CAAA,IAAA,CAAA,MAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACA,WAAA,IAAA;AACD;;AAEDC,EAAAA,gBAAgB,CAAA,MAAA,EAAA,cAAA,EAAyB;AACvCC,IAAAA,cAAc,GAAGP,aAAa,CAAbA,IAAAA,CAAjBO,cAAiBP,CAAjBO;AACA,SAAA,MAAA,GAAc,IAAA,OAAA,GAAA,IAAA,CAAA,MAAA,EAAA,GAAA,CAAA,cAAA,EAAA,KAAA,CAAd,GAAc,CAAd;AACA,SAAA,MAAA,GAAc,KAAA,MAAA,CAAA,QAAA,CAAd,cAAc,CAAd;AACA,WAAA,IAAA;AACD;;AAEDC,EAAAA,MAAM,CAAA,KAAA,EAAQ;AACZ,WACE,SAAA,KAAA,IACCC,OAAO,CAAPA,KAAO,CAAPA,IAAkB,KAAA,MAAA,CAAA,MAAA,CAAmBC,KAAK,CAA1CD,MAAkB,CAAlBA,IAAsD,KAAA,MAAA,KAAgBC,KAAK,CAF9E,MAAA;AAID;;AAEDC,EAAAA,KAAK,GAAG;AACN,WAAO,IAAA,cAAA,CAAmB,KAAnB,MAAA,EAAgC,KAAvC,MAAO,CAAP;AACD;;AAEDC,EAAAA,KAAK,CAAA,cAAA,EAAiB;AACpB,UAAMC,UAAU,GAAG,KAAnB,MAAA;AACA,UAAMC,UAAU,GAAG,KAAnB,MAAA;AACA,UAAMC,WAAW,GAAGC,cAAc,CAAlC,MAAA;AACA,UAAMC,WAAW,GAAGD,cAAc,CAAlC,MAAA;AAEA,UAAME,aAAa,GAAGlB,aAAa,CAAbA,IAAAA,CAAAA,WAAAA,EAAAA,QAAAA,CAAtB,UAAsBA,CAAtB;AACA,UAAMmB,gBAAgB,GAAGD,aAAa,CAAtC,SAAyBA,EAAzB;;AAEA,QAAIJ,UAAU,IAAIK,gBAAgB,GAAlC,WAAA,EAAkD;AAEhD,aAAO,KAAP,KAAO,EAAP;AACD;;AAED,QAAIF,WAAW,IAAIE,gBAAgB,GAAnC,UAAA,EAAkD;AAEhD,aAAOH,cAAc,CAArB,KAAOA,EAAP;AACD;;AAGD,UAAMI,gCAAgC,GAAG,CAACN,UAAU,GAAVA,gBAAAA,GAAD,WAAA,IAAzC,GAAA;AAGAb,IAAAA,cAAc,CAAdA,IAAAA,CAAAA,aAAAA,EAAAA,KAAAA,CAES,CAAC,CAAA,UAAA,GAAD,gCAAA,IAFTA,gBAAAA,EAAAA,GAAAA,CAAAA,UAAAA;AAKA,SAAA,MAAA,CAAA,IAAA,CAAA,cAAA;AACA,SAAA,MAAA,GAAA,gCAAA;AAEA,WAAA,IAAA;AACD;;AAEDoB,EAAAA,MAAM,CAAA,KAAA,EAAQ;AACZC,IAAAA,KAAK,GAAGtB,aAAa,CAAbA,IAAAA,CAARsB,KAAQtB,CAARsB;AACA,UAAMlB,MAAM,GAAGkB,KAAK,CAALA,QAAAA,CAAe,KAAfA,MAAAA,EAAf,SAAeA,EAAf;;AACA,QAAIlB,MAAM,GAAG,KAAb,MAAA,EAA0B;AACxB,WAAA,MAAA,GAAA,MAAA;AACD;;AACD,WAAA,IAAA;AACD;;AAEDmB,EAAAA,SAAS,CAAA,SAAA,EAAY;AACnB,SAAA,MAAA,CAAA,SAAA,CAAA,SAAA;AACA,UAAMC,KAAK,GAAGC,IAAI,CAAJA,UAAAA,CAAAA,aAAAA,EAAd,SAAcA,CAAd;AACA,SAAA,MAAA,GAAcC,IAAI,CAAJA,GAAAA,CAASF,KAAK,CAAdE,CAAc,CAAdA,EAAmBA,IAAI,CAAJA,GAAAA,CAASF,KAAK,CAAdE,CAAc,CAAdA,EAAmBF,KAAK,CAA3CE,CAA2C,CAAxBA,CAAnBA,IAAmD,KAAjE,MAAA;AACA,WAAA,IAAA;AACD;;AAGDC,EAAAA,iBAAiB,CAAA,KAAA,EAAQ;AACvB,UAAMC,CAAC,GAAG,KAAA,UAAA,CAAV,KAAU,CAAV;AACA,WAAOA,CAAC,GAAR,CAAA;AACD;;AAEDC,EAAAA,UAAU,CAAA,KAAA,EAAQ;AAChBP,IAAAA,KAAK,GAAGtB,aAAa,CAAbA,IAAAA,CAARsB,KAAQtB,CAARsB;AACA,UAAMQ,KAAK,GAAGR,KAAK,CAALA,QAAAA,CAAe,KAA7B,MAAcA,CAAd;AACA,WAAOI,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYI,KAAK,CAALA,GAAAA,KAAc,KAAjC,MAAOJ,CAAP;AACD;;AAGDK,EAAAA,cAAc,CAAA,KAAA,EAAQ;AACpB,UAAM5B,MAAM,GAAG,KAAf,MAAA;AACA,UAAMC,MAAM,GAAG,KAAf,MAAA;AACA,UAAM4B,MAAM,GAAGC,KAAK,CAApB,MAAA;AACA,UAAMC,eAAe,GAAGF,MAAM,CAANA,GAAAA,CAAAA,MAAAA,IAAqBC,KAAK,CAAlD,QAAA;;AAGA,QAAIC,eAAe,GAAG,CAAtB,MAAA,EAA+B;AAC7B,aAAOC,YAAY,CAAnB,OAAA;AACD;;AAED,QAAID,eAAe,GAAnB,MAAA,EAA8B;AAC5B,aAAOC,YAAY,CAAnB,YAAA;AACD;;AAED,WAAOA,YAAY,CAAnB,MAAA;AACD;;AA9GiC","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3} from '@math.gl/core';\nimport * as mat4 from 'gl-matrix/mat4';\nimport {INTERSECTION} from '../../constants';\n\n// import Rectangle from './rectangle';\n\n// const defaultProjection = new GeographicProjection();\n// const fromRectangle2DLowerLeft = new Vector3();\n// const fromRectangle2DUpperRight = new Vector3();\n// const fromRectangle2DSouthwest = new Cartographic();\n// const fromRectangle2DNortheast = new Cartographic();\n\n// const fromRectangle3DScratch = [];\n\nconst scratchVector = new Vector3();\nconst scratchVector2 = new Vector3();\n\nexport default class BoundingSphere {\n  constructor(center = [0, 0, 0], radius = 0.0) {\n    this.radius = -0;\n    this.center = new Vector3();\n    this.fromCenterRadius(center, radius);\n  }\n\n  fromCenterRadius(center, radius) {\n    this.center.from(center);\n    this.radius = radius;\n    return this;\n  }\n\n  fromCornerPoints(corner, oppositeCorner) {\n    oppositeCorner = scratchVector.from(oppositeCorner);\n    this.center = new Vector3().from(corner).add(oppositeCorner).scale(0.5);\n    this.radius = this.center.distance(oppositeCorner);\n    return this;\n  }\n\n  equals(right) {\n    return (\n      this === right ||\n      (Boolean(right) && this.center.equals(right.center) && this.radius === right.radius)\n    );\n  }\n\n  clone() {\n    return new BoundingSphere(this.center, this.radius);\n  }\n\n  union(boundingSphere) {\n    const leftCenter = this.center;\n    const leftRadius = this.radius;\n    const rightCenter = boundingSphere.center;\n    const rightRadius = boundingSphere.radius;\n\n    const toRightCenter = scratchVector.copy(rightCenter).subtract(leftCenter);\n    const centerSeparation = toRightCenter.magnitude();\n\n    if (leftRadius >= centerSeparation + rightRadius) {\n      // Left sphere wins.\n      return this.clone();\n    }\n\n    if (rightRadius >= centerSeparation + leftRadius) {\n      // Right sphere wins.\n      return boundingSphere.clone();\n    }\n\n    // There are two tangent points, one on far side of each sphere.\n    const halfDistanceBetweenTangentPoints = (leftRadius + centerSeparation + rightRadius) * 0.5;\n\n    // Compute the center point halfway between the two tangent points.\n    scratchVector2\n      .copy(toRightCenter)\n      .scale((-leftRadius + halfDistanceBetweenTangentPoints) / centerSeparation)\n      .add(leftCenter);\n\n    this.center.copy(scratchVector2);\n    this.radius = halfDistanceBetweenTangentPoints;\n\n    return this;\n  }\n\n  expand(point) {\n    point = scratchVector.from(point);\n    const radius = point.subtract(this.center).magnitude();\n    if (radius > this.radius) {\n      this.radius = radius;\n    }\n    return this;\n  }\n\n  transform(transform) {\n    this.center.transform(transform);\n    const scale = mat4.getScaling(scratchVector, transform);\n    this.radius = Math.max(scale[0], Math.max(scale[1], scale[2])) * this.radius;\n    return this;\n  }\n\n  // Computes the estimated distance squared from the closest point on a bounding sphere to a point.\n  distanceSquaredTo(point) {\n    const d = this.distanceTo(point);\n    return d * d;\n  }\n\n  distanceTo(point) {\n    point = scratchVector.from(point);\n    const delta = point.subtract(this.center);\n    return Math.max(0, delta.len() - this.radius);\n  }\n\n  // Determines which side of a plane a sphere is located.\n  intersectPlane(plane) {\n    const center = this.center;\n    const radius = this.radius;\n    const normal = plane.normal;\n    const distanceToPlane = normal.dot(center) + plane.distance;\n\n    // The center point is negative side of the plane normal\n    if (distanceToPlane < -radius) {\n      return INTERSECTION.OUTSIDE;\n    }\n    // The center point is positive side of the plane, but radius extends beyond it; partial overlap\n    if (distanceToPlane < radius) {\n      return INTERSECTION.INTERSECTING;\n    }\n    // The center point and radius is positive side of the plane\n    return INTERSECTION.INSIDE;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}