{"ast":null,"code":"import { log } from '@luma.gl/gltools';\nexport function checkProps(className, props, propChecks) {\n  const {\n    removedProps = {},\n    deprecatedProps = {},\n    replacedProps = {}\n  } = propChecks;\n\n  for (const propName in removedProps) {\n    if (propName in props) {\n      const replacementProp = removedProps[propName];\n      const replacement = replacementProp ? `${className}.${removedProps[propName]}` : 'N/A';\n      log.removed(`${className}.${propName}`, replacement)();\n    }\n  }\n\n  for (const propName in deprecatedProps) {\n    if (propName in props) {\n      const replacementProp = deprecatedProps[propName];\n      log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();\n    }\n  }\n\n  let newProps = null;\n\n  for (const propName in replacedProps) {\n    if (propName in props) {\n      const replacementProp = replacedProps[propName];\n      log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();\n      newProps = newProps || Object.assign({}, props);\n      newProps[replacementProp] = props[propName];\n      delete newProps[propName];\n    }\n  }\n\n  return newProps || props;\n}","map":{"version":3,"sources":["../../../src/utils/check-props.js"],"names":["removedProps","deprecatedProps","replacedProps","propName","replacementProp","replacement","className","log","newProps","Object","props"],"mappings":"AA6BA,SAAA,GAAA,QAAA,kBAAA;AAEA,OAAO,SAAA,UAAA,CAAA,SAAA,EAAA,KAAA,EAAA,UAAA,EAAkD;AACvD,QAAM;AAACA,IAAAA,YAAY,GAAb,EAAA;AAAoBC,IAAAA,eAAe,GAAnC,EAAA;AAA0CC,IAAAA,aAAa,GAAG;AAA1D,MAAN,UAAA;;AAIA,OAAK,MAAL,QAAA,IAAA,YAAA,EAAqC;AACnC,QAAIC,QAAQ,IAAZ,KAAA,EAAuB;AACrB,YAAMC,eAAe,GAAGJ,YAAY,CAApC,QAAoC,CAApC;AACA,YAAMK,WAAW,GAAGD,eAAe,GAAI,GAAEE,SAAU,IAAGN,YAAY,CAAA,QAAA,CAA/B,EAAA,GAAnC,KAAA;AACAO,MAAAA,GAAG,CAAHA,OAAAA,CAAa,GAAED,SAAU,IAAGH,QAA5BI,EAAAA,EAAAA,WAAAA;AACD;AACF;;AAID,OAAK,MAAL,QAAA,IAAA,eAAA,EAAwC;AACtC,QAAIJ,QAAQ,IAAZ,KAAA,EAAuB;AACrB,YAAMC,eAAe,GAAGH,eAAe,CAAvC,QAAuC,CAAvC;AACAM,MAAAA,GAAG,CAAHA,UAAAA,CAAgB,GAAED,SAAU,IAAGH,QAA/BI,EAAAA,EAA4C,GAAED,SAAU,IAAGF,eAA3DG,EAAAA;AACD;AACF;;AAID,MAAIC,QAAQ,GAAZ,IAAA;;AACA,OAAK,MAAL,QAAA,IAAA,aAAA,EAAsC;AACpC,QAAIL,QAAQ,IAAZ,KAAA,EAAuB;AACrB,YAAMC,eAAe,GAAGF,aAAa,CAArC,QAAqC,CAArC;AACAK,MAAAA,GAAG,CAAHA,UAAAA,CAAgB,GAAED,SAAU,IAAGH,QAA/BI,EAAAA,EAA4C,GAAED,SAAU,IAAGF,eAA3DG,EAAAA;AACAC,MAAAA,QAAQ,GAAGA,QAAQ,IAAIC,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAvBD,KAAuBC,CAAvBD;AACAA,MAAAA,QAAQ,CAARA,eAAQ,CAARA,GAA4BE,KAAK,CAAjCF,QAAiC,CAAjCA;AACA,aAAOA,QAAQ,CAAf,QAAe,CAAf;AACD;AACF;;AAED,SAAOA,QAAQ,IAAf,KAAA;AACD","sourcesContent":["/* Use as\nimport {checkProps} from '../util/check-props;'\n\nconst PROP_CHECKS = {\n  // Removed props no longer supported, print error and link to upgrade guide\n  removedProps: {\n  },\n  // Deprecated props\n  deprecatedProps: {\n    offset: 'accessor',\n    stride: 'accessor',\n    type: 'accessor',\n    size: 'accessor',\n    divisor: 'accessor',\n    normalized: 'accessor',\n    integer: 'accessor'\n  },\n  // Deprecated props that can be autosubstituted, print warning and return updated props object\n  replacedProps: {\n    bytes: 'byteLength'\n  }\n}\n\nclass Buffer {\n  setProps(props) {\n    checkProps('Buffer', props, PROP_CHECKS);\n  }\n}\n*/\nimport {log} from '@luma.gl/gltools';\n\nexport function checkProps(className, props, propChecks) {\n  const {removedProps = {}, deprecatedProps = {}, replacedProps = {}} = propChecks;\n\n  // removedProps: Removed props no longer supported\n  // print error and link to upgrade guide\n  for (const propName in removedProps) {\n    if (propName in props) {\n      const replacementProp = removedProps[propName];\n      const replacement = replacementProp ? `${className}.${removedProps[propName]}` : 'N/A';\n      log.removed(`${className}.${propName}`, replacement)();\n    }\n  }\n\n  // deprecatedProps: Deprecated props that can not be autosubstituted\n  // print warning and rely on caller to substitute\n  for (const propName in deprecatedProps) {\n    if (propName in props) {\n      const replacementProp = deprecatedProps[propName];\n      log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();\n    }\n  }\n\n  // replacedProps: Deprecated props that can be autosubstituted\n  // print warning and return updated props object\n  let newProps = null;\n  for (const propName in replacedProps) {\n    if (propName in props) {\n      const replacementProp = replacedProps[propName];\n      log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();\n      newProps = newProps || Object.assign({}, props);\n      newProps[replacementProp] = props[propName];\n      delete newProps[propName];\n    }\n  }\n\n  return newProps || props;\n}\n"]},"metadata":{},"sourceType":"module"}