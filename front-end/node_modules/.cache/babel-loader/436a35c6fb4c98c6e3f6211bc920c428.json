{"ast":null,"code":"import { fp64 } from '@luma.gl/shadertools';\nconst {\n  fp64ify,\n  fp64ifyMatrix4\n} = fp64;\nimport { project, _memoize as memoize } from '@deck.gl/core';\nimport project64Shader from './project64.glsl';\nexport default {\n  name: 'project64',\n  dependencies: [project, fp64],\n  vs: project64Shader,\n  getUniforms\n};\nconst DEFAULT_MODULE_OPTIONS = {};\nconst getMemoizedUniforms = memoize(calculateUniforms);\n\nfunction getUniforms() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;\n\n  if (opts.viewport) {\n    const {\n      viewProjectionMatrix,\n      scale\n    } = opts.viewport;\n    return getMemoizedUniforms({\n      viewProjectionMatrix,\n      scale\n    });\n  }\n\n  return {};\n}\n\nfunction calculateUniforms(_ref) {\n  let {\n    viewProjectionMatrix,\n    scale\n  } = _ref;\n  const glViewProjectionMatrixFP64 = fp64ifyMatrix4(viewProjectionMatrix);\n  const scaleFP64 = fp64ify(scale);\n  return {\n    project_uViewProjectionMatrixFP64: glViewProjectionMatrixFP64,\n    project64_uViewProjectionMatrix: glViewProjectionMatrixFP64,\n    project64_uScale: scaleFP64\n  };\n}","map":{"version":3,"sources":["../../../src/fp64/project64.js"],"names":["fp64ifyMatrix4","_memoize","name","dependencies","vs","getUniforms","DEFAULT_MODULE_OPTIONS","getMemoizedUniforms","memoize","opts","scale","glViewProjectionMatrixFP64","scaleFP64","fp64ify","project_uViewProjectionMatrixFP64","project64_uViewProjectionMatrix","project64_uScale"],"mappings":"AAoBA,SAAA,IAAA,QAAA,sBAAA;AACA,MAAM;AAAA,EAAA,OAAA;AAAUA,EAAAA;AAAV,IAAN,IAAA;AACA,SAAA,OAAA,EAAiBC,QAAQ,IAAzB,OAAA,QAAA,eAAA;AAEA,OAAA,eAAA,MAAA,kBAAA;AAEA,eAAe;AACbC,EAAAA,IAAI,EADS,WAAA;AAEbC,EAAAA,YAAY,EAAE,CAAA,OAAA,EAFD,IAEC,CAFD;AAGbC,EAAAA,EAAE,EAHW,eAAA;AAIbC,EAAAA;AAJa,CAAf;AAUA,MAAMC,sBAAsB,GAA5B,EAAA;AACA,MAAMC,mBAAmB,GAAGC,OAAO,CAAnC,iBAAmC,CAAnC;;AAEA,SAAA,WAAA,GAAoD;AAAA,MAA/BC,IAA+B,uEAApD,sBAAoD;;AAClD,MAAIA,IAAI,CAAR,QAAA,EAAmB;AACjB,UAAM;AAAA,MAAA,oBAAA;AAAuBC,MAAAA;AAAvB,QAAgCD,IAAI,CAA1C,QAAA;AAEA,WAAOF,mBAAmB,CAAC;AAAA,MAAA,oBAAA;AAAuBG,MAAAA;AAAvB,KAAD,CAA1B;AACD;;AACD,SAAA,EAAA;AACD;;AAED,SAAA,iBAAA,OAA0D;AAAA,MAA/B;AAAA,IAAA,oBAAA;AAAuBA,IAAAA;AAAvB,GAA+B;AACxD,QAAMC,0BAA0B,GAAGX,cAAc,CAAjD,oBAAiD,CAAjD;AACA,QAAMY,SAAS,GAAGC,OAAO,CAAzB,KAAyB,CAAzB;AAEA,SAAO;AACLC,IAAAA,iCAAiC,EAD5B,0BAAA;AAELC,IAAAA,+BAA+B,EAF1B,0BAAA;AAGLC,IAAAA,gBAAgB,EAAEJ;AAHb,GAAP;AAKD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {fp64} from '@luma.gl/shadertools';\nconst {fp64ify, fp64ifyMatrix4} = fp64;\nimport {project, _memoize as memoize} from '@deck.gl/core';\n\nimport project64Shader from './project64.glsl';\n\nexport default {\n  name: 'project64',\n  dependencies: [project, fp64],\n  vs: project64Shader,\n  getUniforms\n};\n\n// TODO - this module should calculate the 64 bit uniforms\n// It is currently done by project to minimize duplicated work\n\nconst DEFAULT_MODULE_OPTIONS = {};\nconst getMemoizedUniforms = memoize(calculateUniforms);\n\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS) {\n  if (opts.viewport) {\n    const {viewProjectionMatrix, scale} = opts.viewport;\n    // We only need to update fp64 uniforms if fp32 projection is being updated\n    return getMemoizedUniforms({viewProjectionMatrix, scale});\n  }\n  return {};\n}\n\nfunction calculateUniforms({viewProjectionMatrix, scale}) {\n  const glViewProjectionMatrixFP64 = fp64ifyMatrix4(viewProjectionMatrix);\n  const scaleFP64 = fp64ify(scale);\n\n  return {\n    project_uViewProjectionMatrixFP64: glViewProjectionMatrixFP64,\n    project64_uViewProjectionMatrix: glViewProjectionMatrixFP64,\n    project64_uScale: scaleFP64\n  };\n}\n"]},"metadata":{},"sourceType":"module"}