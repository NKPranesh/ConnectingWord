{"ast":null,"code":"import { Vector3 } from '@math.gl/core';\nimport { CullingVolume, Plane } from '@math.gl/culling';\nimport { Ellipsoid } from '@math.gl/geospatial';\nconst scratchVector = new Vector3();\nconst scratchPosition = new Vector3();\nconst cullingVolume = new CullingVolume([new Plane(), new Plane(), new Plane(), new Plane(), new Plane(), new Plane()]);\nexport function getFrameState(viewport, frameNumber) {\n  const {\n    cameraDirection,\n    cameraUp,\n    height\n  } = viewport;\n  const {\n    metersPerUnit\n  } = viewport.distanceScales;\n  const viewportCenterCartographic = [viewport.longitude, viewport.latitude, 0];\n  const viewportCenterCartesian = Ellipsoid.WGS84.cartographicToCartesian(viewportCenterCartographic, new Vector3());\n  const enuToFixedTransform = Ellipsoid.WGS84.eastNorthUpToFixedFrame(viewportCenterCartesian);\n  const cameraPositionCartographic = viewport.unprojectPosition(viewport.cameraPosition);\n  const cameraPositionCartesian = Ellipsoid.WGS84.cartographicToCartesian(cameraPositionCartographic, new Vector3());\n  const cameraDirectionCartesian = new Vector3(enuToFixedTransform.transformAsVector(new Vector3(cameraDirection).scale(metersPerUnit))).normalize();\n  const cameraUpCartesian = new Vector3(enuToFixedTransform.transformAsVector(new Vector3(cameraUp).scale(metersPerUnit))).normalize();\n  commonSpacePlanesToWGS84(viewport, viewportCenterCartesian);\n  return {\n    camera: {\n      position: cameraPositionCartesian,\n      direction: cameraDirectionCartesian,\n      up: cameraUpCartesian\n    },\n    viewport,\n    height,\n    cullingVolume,\n    frameNumber,\n    sseDenominator: 1.15\n  };\n}\n\nfunction commonSpacePlanesToWGS84(viewport, viewportCenterCartesian) {\n  const frustumPlanes = viewport.getFrustumPlanes();\n  let i = 0;\n\n  for (const dir in frustumPlanes) {\n    const plane = frustumPlanes[dir];\n    const distanceToCenter = plane.normal.dot(viewport.center);\n    scratchPosition.copy(plane.normal).scale(plane.distance - distanceToCenter).add(viewport.center);\n    const cartographicPos = viewport.unprojectPosition(scratchPosition);\n    const cartesianPos = Ellipsoid.WGS84.cartographicToCartesian(cartographicPos, new Vector3());\n    cullingVolume.planes[i++].fromPointNormal(cartesianPos, scratchVector.copy(viewportCenterCartesian).subtract(cartesianPos));\n  }\n}","map":{"version":3,"sources":["../../../../src/tileset/helpers/frame-state.ts"],"names":["scratchVector","scratchPosition","cullingVolume","height","metersPerUnit","viewport","viewportCenterCartographic","viewportCenterCartesian","Ellipsoid","enuToFixedTransform","cameraPositionCartographic","cameraPositionCartesian","cameraDirectionCartesian","cameraUpCartesian","commonSpacePlanesToWGS84","camera","position","direction","up","sseDenominator","frustumPlanes","i","plane","distanceToCenter","cartographicPos","cartesianPos"],"mappings":"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","sourcesContent":["import {Vector3} from '@math.gl/core';\nimport {CullingVolume, Plane} from '@math.gl/culling';\nimport {Ellipsoid} from '@math.gl/geospatial';\n\nexport type FrameState = {\n  camera: {\n    position: number[];\n    direction: number[];\n    up: number[];\n  };\n  viewport: {[key: string]: any};\n  height: number;\n  cullingVolume: CullingVolume;\n  frameNumber: number; // TODO: This can be the same between updates, what number is unique for between updates?\n  sseDenominator: number; // Assumes fovy = 60 degrees\n};\n\nconst scratchVector = new Vector3();\nconst scratchPosition = new Vector3();\nconst cullingVolume = new CullingVolume([\n  new Plane(),\n  new Plane(),\n  new Plane(),\n  new Plane(),\n  new Plane(),\n  new Plane()\n]);\n\n// Extracts a frame state appropriate for tile culling from a deck.gl viewport\n// TODO - this could likely be generalized and merged back into deck.gl for other culling scenarios\nexport function getFrameState(viewport, frameNumber: number): FrameState {\n  // Traverse and and request. Update _selectedTiles so that we know what to render.\n  const {cameraDirection, cameraUp, height} = viewport;\n  const {metersPerUnit} = viewport.distanceScales;\n\n  const viewportCenterCartographic = [viewport.longitude, viewport.latitude, 0];\n  // TODO - Ellipsoid.eastNorthUpToFixedFrame() breaks on raw array, create a Vector.\n  // TODO - Ellipsoid.eastNorthUpToFixedFrame() takes a cartesian, is that intuitive?\n  const viewportCenterCartesian = Ellipsoid.WGS84.cartographicToCartesian(\n    viewportCenterCartographic,\n    new Vector3()\n  );\n  const enuToFixedTransform = Ellipsoid.WGS84.eastNorthUpToFixedFrame(viewportCenterCartesian);\n\n  const cameraPositionCartographic = viewport.unprojectPosition(viewport.cameraPosition);\n  const cameraPositionCartesian = Ellipsoid.WGS84.cartographicToCartesian(\n    cameraPositionCartographic,\n    new Vector3()\n  );\n\n  // These should still be normalized as the transform has scale 1 (goes from meters to meters)\n  const cameraDirectionCartesian = new Vector3(\n    // @ts-ignore\n    enuToFixedTransform.transformAsVector(new Vector3(cameraDirection).scale(metersPerUnit))\n  ).normalize();\n  const cameraUpCartesian = new Vector3(\n    // @ts-ignore\n    enuToFixedTransform.transformAsVector(new Vector3(cameraUp).scale(metersPerUnit))\n  ).normalize();\n\n  commonSpacePlanesToWGS84(viewport, viewportCenterCartesian);\n\n  // TODO: make a file/class for frameState and document what needs to be attached to this so that traversal can function\n  return {\n    camera: {\n      position: cameraPositionCartesian,\n      direction: cameraDirectionCartesian,\n      up: cameraUpCartesian\n    },\n    viewport,\n    height,\n    cullingVolume,\n    frameNumber, // TODO: This can be the same between updates, what number is unique for between updates?\n    sseDenominator: 1.15 // Assumes fovy = 60 degrees\n  };\n}\n\nfunction commonSpacePlanesToWGS84(viewport, viewportCenterCartesian) {\n  // Extract frustum planes based on current view.\n  const frustumPlanes = viewport.getFrustumPlanes();\n  let i = 0;\n  for (const dir in frustumPlanes) {\n    const plane = frustumPlanes[dir];\n    const distanceToCenter = plane.normal.dot(viewport.center);\n    scratchPosition\n      .copy(plane.normal)\n      .scale(plane.distance - distanceToCenter)\n      .add(viewport.center);\n    const cartographicPos = viewport.unprojectPosition(scratchPosition);\n\n    const cartesianPos = Ellipsoid.WGS84.cartographicToCartesian(cartographicPos, new Vector3());\n\n    cullingVolume.planes[i++].fromPointNormal(\n      cartesianPos,\n      // Want the normal to point into the frustum since that's what culling expects\n      scratchVector.copy(viewportCenterCartesian).subtract(cartesianPos)\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}