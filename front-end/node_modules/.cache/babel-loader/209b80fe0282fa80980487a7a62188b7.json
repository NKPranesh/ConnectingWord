{"ast":null,"code":"import { CompositeLayer, log } from '@deck.gl/core';\nimport { SimpleMeshLayer } from '@deck.gl/mesh-layers';\nimport { WebMercatorViewport, COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { TerrainWorkerLoader } from '@loaders.gl/terrain';\nimport TileLayer from '../tile-layer/tile-layer';\nimport { urlType, getURLFromTemplate } from '../tile-layer/utils';\nconst DUMMY_DATA = [1];\nconst defaultProps = { ...TileLayer.defaultProps,\n  elevationData: urlType,\n  texture: { ...urlType,\n    optional: true\n  },\n  meshMaxError: {\n    type: 'number',\n    value: 4.0\n  },\n  bounds: {\n    type: 'array',\n    value: null,\n    optional: true,\n    compare: true\n  },\n  color: {\n    type: 'color',\n    value: [255, 255, 255]\n  },\n  elevationDecoder: {\n    type: 'object',\n    value: {\n      rScaler: 1,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    }\n  },\n  workerUrl: {\n    type: 'string',\n    value: null\n  },\n  wireframe: false,\n  material: true,\n  loaders: [TerrainWorkerLoader]\n};\n\nfunction urlTemplateToUpdateTrigger(template) {\n  if (Array.isArray(template)) {\n    return template.join(';');\n  }\n\n  return template;\n}\n\nexport default class TerrainLayer extends CompositeLayer {\n  updateState(_ref) {\n    let {\n      props,\n      oldProps\n    } = _ref;\n    const elevationDataChanged = props.elevationData !== oldProps.elevationData;\n\n    if (elevationDataChanged) {\n      const {\n        elevationData\n      } = props;\n      const isTiled = elevationData && (Array.isArray(elevationData) || elevationData.includes('{x}') && elevationData.includes('{y}'));\n      this.setState({\n        isTiled\n      });\n    }\n\n    const shouldReload = elevationDataChanged || props.meshMaxError !== oldProps.meshMaxError || props.elevationDecoder !== oldProps.elevationDecoder || props.bounds !== oldProps.bounds;\n\n    if (!this.state.isTiled && shouldReload) {\n      const terrain = this.loadTerrain(props);\n      this.setState({\n        terrain\n      });\n    }\n\n    if (props.workerUrl) {\n      log.removed('workerUrl', 'loadOptions.terrain.workerUrl')();\n    }\n  }\n\n  loadTerrain(_ref2) {\n    let {\n      elevationData,\n      bounds,\n      elevationDecoder,\n      meshMaxError,\n      signal\n    } = _ref2;\n\n    var _loadOptions;\n\n    if (!elevationData) {\n      return null;\n    }\n\n    let loadOptions = this.getLoadOptions();\n    loadOptions = { ...loadOptions,\n      terrain: {\n        skirtHeight: this.state.isTiled ? meshMaxError * 2 : 0,\n        ...((_loadOptions = loadOptions) === null || _loadOptions === void 0 ? void 0 : _loadOptions.terrain),\n        bounds,\n        meshMaxError,\n        elevationDecoder\n      }\n    };\n    const {\n      fetch\n    } = this.props;\n    return fetch(elevationData, {\n      propName: 'elevationData',\n      layer: this,\n      loadOptions,\n      signal\n    });\n  }\n\n  getTiledTerrainData(tile) {\n    const {\n      elevationData,\n      fetch,\n      texture,\n      elevationDecoder,\n      meshMaxError\n    } = this.props;\n    const dataUrl = getURLFromTemplate(elevationData, tile);\n    const textureUrl = getURLFromTemplate(texture, tile);\n    const {\n      bbox,\n      signal,\n      z\n    } = tile;\n    const viewport = new WebMercatorViewport({\n      longitude: (bbox.west + bbox.east) / 2,\n      latitude: (bbox.north + bbox.south) / 2,\n      zoom: z\n    });\n    const bottomLeft = viewport.projectFlat([bbox.west, bbox.south]);\n    const topRight = viewport.projectFlat([bbox.east, bbox.north]);\n    const bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];\n    const terrain = this.loadTerrain({\n      elevationData: dataUrl,\n      bounds,\n      elevationDecoder,\n      meshMaxError,\n      signal\n    });\n    const surface = textureUrl ? fetch(textureUrl, {\n      propName: 'texture',\n      layer: this,\n      loaders: [],\n      signal\n    }).catch(_ => null) : Promise.resolve(null);\n    return Promise.all([terrain, surface]);\n  }\n\n  renderSubLayers(props) {\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    const {\n      data,\n      color\n    } = props;\n\n    if (!data) {\n      return null;\n    }\n\n    const [mesh, texture] = data;\n    return new SubLayerClass(props, {\n      data: DUMMY_DATA,\n      mesh,\n      texture,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getPosition: d => [0, 0, 0],\n      getColor: color\n    });\n  }\n\n  onViewportLoad(tiles) {\n    if (!tiles) {\n      return;\n    }\n\n    const {\n      zRange\n    } = this.state;\n    const ranges = tiles.map(tile => tile.content).filter(Boolean).map(arr => {\n      const bounds = arr[0].header.boundingBox;\n      return bounds.map(bound => bound[2]);\n    });\n\n    if (ranges.length === 0) {\n      return;\n    }\n\n    const minZ = Math.min(...ranges.map(x => x[0]));\n    const maxZ = Math.max(...ranges.map(x => x[1]));\n\n    if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {\n      this.setState({\n        zRange: [minZ, maxZ]\n      });\n    }\n  }\n\n  renderLayers() {\n    const {\n      color,\n      material,\n      elevationData,\n      texture,\n      wireframe,\n      meshMaxError,\n      elevationDecoder,\n      tileSize,\n      maxZoom,\n      minZoom,\n      extent,\n      maxRequests,\n      onTileLoad,\n      onTileUnload,\n      onTileError,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy\n    } = this.props;\n\n    if (this.state.isTiled) {\n      return new TileLayer(this.getSubLayerProps({\n        id: 'tiles'\n      }), {\n        wireframe,\n        color,\n        material,\n        getTileData: this.getTiledTerrainData.bind(this),\n        renderSubLayers: this.renderSubLayers.bind(this),\n        updateTriggers: {\n          getTileData: {\n            elevationData: urlTemplateToUpdateTrigger(elevationData),\n            texture: urlTemplateToUpdateTrigger(texture),\n            meshMaxError,\n            elevationDecoder\n          }\n        },\n        onViewportLoad: this.onViewportLoad.bind(this),\n        zRange: this.state.zRange || null,\n        tileSize,\n        maxZoom,\n        minZoom,\n        extent,\n        maxRequests,\n        onTileLoad,\n        onTileUnload,\n        onTileError,\n        maxCacheSize,\n        maxCacheByteSize,\n        refinementStrategy\n      });\n    }\n\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    return new SubLayerClass(this.getSubLayerProps({\n      id: 'mesh'\n    }), {\n      data: DUMMY_DATA,\n      mesh: this.state.terrain,\n      texture,\n      _instanced: false,\n      getPosition: d => [0, 0, 0],\n      getColor: color,\n      material,\n      wireframe\n    });\n  }\n\n}\nTerrainLayer.layerName = 'TerrainLayer';\nTerrainLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/terrain-layer/terrain-layer.js"],"names":["DUMMY_DATA","defaultProps","TileLayer","elevationData","texture","optional","meshMaxError","type","value","bounds","compare","color","elevationDecoder","rScaler","gScaler","bScaler","offset","workerUrl","wireframe","material","loaders","Array","template","updateState","oldProps","elevationDataChanged","props","isTiled","shouldReload","terrain","log","loadTerrain","signal","loadOptions","skirtHeight","fetch","propName","layer","getTiledTerrainData","dataUrl","getURLFromTemplate","textureUrl","z","viewport","longitude","bbox","latitude","zoom","bottomLeft","topRight","surface","_","Promise","renderSubLayers","SubLayerClass","data","coordinateSystem","COORDINATE_SYSTEM","getPosition","d","getColor","onViewportLoad","zRange","ranges","tile","arr","bound","minZ","Math","x","maxZ","renderLayers","refinementStrategy","id","getTileData","updateTriggers","urlTemplateToUpdateTrigger","mesh","_instanced","TerrainLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, log} from '@deck.gl/core';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {WebMercatorViewport, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {TerrainWorkerLoader} from '@loaders.gl/terrain';\nimport TileLayer from '../tile-layer/tile-layer';\nimport {urlType, getURLFromTemplate} from '../tile-layer/utils';\n\nconst DUMMY_DATA = [1];\n\nconst defaultProps = {\n  ...TileLayer.defaultProps,\n  // Image url that encodes height data\n  elevationData: urlType,\n  // Image url to use as texture\n  texture: {...urlType, optional: true},\n  // Martini error tolerance in meters, smaller number -> more detailed mesh\n  meshMaxError: {type: 'number', value: 4.0},\n  // Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates\n  bounds: {type: 'array', value: null, optional: true, compare: true},\n  // Color to use if texture is unavailable\n  color: {type: 'color', value: [255, 255, 255]},\n  // Object to decode height data, from (r, g, b) to height in meters\n  elevationDecoder: {\n    type: 'object',\n    value: {\n      rScaler: 1,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    }\n  },\n  // Supply url to local terrain worker bundle. Only required if running offline and cannot access CDN.\n  workerUrl: {type: 'string', value: null},\n  // Same as SimpleMeshLayer wireframe\n  wireframe: false,\n  material: true,\n\n  loaders: [TerrainWorkerLoader]\n};\n\n// Turns array of templates into a single string to work around shallow change\nfunction urlTemplateToUpdateTrigger(template) {\n  if (Array.isArray(template)) {\n    return template.join(';');\n  }\n  return template;\n}\n\n/**\n * state: {\n *   isTiled: True renders TileLayer of many SimpleMeshLayers, false renders one SimpleMeshLayer\n *   terrain: Mesh object. Only defined when isTiled is false.\n * }\n */\nexport default class TerrainLayer extends CompositeLayer {\n  updateState({props, oldProps}) {\n    const elevationDataChanged = props.elevationData !== oldProps.elevationData;\n    if (elevationDataChanged) {\n      const {elevationData} = props;\n      const isTiled =\n        elevationData &&\n        (Array.isArray(elevationData) ||\n          (elevationData.includes('{x}') && elevationData.includes('{y}')));\n      this.setState({isTiled});\n    }\n\n    // Reloading for single terrain mesh\n    const shouldReload =\n      elevationDataChanged ||\n      props.meshMaxError !== oldProps.meshMaxError ||\n      props.elevationDecoder !== oldProps.elevationDecoder ||\n      props.bounds !== oldProps.bounds;\n\n    if (!this.state.isTiled && shouldReload) {\n      const terrain = this.loadTerrain(props);\n      this.setState({terrain});\n    }\n\n    // TODO - remove in v9\n    if (props.workerUrl) {\n      log.removed('workerUrl', 'loadOptions.terrain.workerUrl')();\n    }\n  }\n\n  loadTerrain({elevationData, bounds, elevationDecoder, meshMaxError, signal}) {\n    if (!elevationData) {\n      return null;\n    }\n    let loadOptions = this.getLoadOptions();\n    loadOptions = {\n      ...loadOptions,\n      terrain: {\n        skirtHeight: this.state.isTiled ? meshMaxError * 2 : 0,\n        ...loadOptions?.terrain,\n        bounds,\n        meshMaxError,\n        elevationDecoder\n      }\n    };\n    const {fetch} = this.props;\n    return fetch(elevationData, {propName: 'elevationData', layer: this, loadOptions, signal});\n  }\n\n  getTiledTerrainData(tile) {\n    const {elevationData, fetch, texture, elevationDecoder, meshMaxError} = this.props;\n    const dataUrl = getURLFromTemplate(elevationData, tile);\n    const textureUrl = getURLFromTemplate(texture, tile);\n\n    const {bbox, signal, z} = tile;\n    const viewport = new WebMercatorViewport({\n      longitude: (bbox.west + bbox.east) / 2,\n      latitude: (bbox.north + bbox.south) / 2,\n      zoom: z\n    });\n    const bottomLeft = viewport.projectFlat([bbox.west, bbox.south]);\n    const topRight = viewport.projectFlat([bbox.east, bbox.north]);\n    const bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];\n\n    const terrain = this.loadTerrain({\n      elevationData: dataUrl,\n      bounds,\n      elevationDecoder,\n      meshMaxError,\n      signal\n    });\n    const surface = textureUrl\n      ? // If surface image fails to load, the tile should still be displayed\n        fetch(textureUrl, {propName: 'texture', layer: this, loaders: [], signal}).catch(_ => null)\n      : Promise.resolve(null);\n\n    return Promise.all([terrain, surface]);\n  }\n\n  renderSubLayers(props) {\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    const {data, color} = props;\n\n    if (!data) {\n      return null;\n    }\n\n    const [mesh, texture] = data;\n\n    return new SubLayerClass(props, {\n      data: DUMMY_DATA,\n      mesh,\n      texture,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getPosition: d => [0, 0, 0],\n      getColor: color\n    });\n  }\n\n  // Update zRange of viewport\n  onViewportLoad(tiles) {\n    if (!tiles) {\n      return;\n    }\n\n    const {zRange} = this.state;\n    const ranges = tiles\n      .map(tile => tile.content)\n      .filter(Boolean)\n      .map(arr => {\n        const bounds = arr[0].header.boundingBox;\n        return bounds.map(bound => bound[2]);\n      });\n    if (ranges.length === 0) {\n      return;\n    }\n    const minZ = Math.min(...ranges.map(x => x[0]));\n    const maxZ = Math.max(...ranges.map(x => x[1]));\n\n    if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {\n      this.setState({zRange: [minZ, maxZ]});\n    }\n  }\n\n  renderLayers() {\n    const {\n      color,\n      material,\n      elevationData,\n      texture,\n      wireframe,\n      meshMaxError,\n      elevationDecoder,\n      tileSize,\n      maxZoom,\n      minZoom,\n      extent,\n      maxRequests,\n      onTileLoad,\n      onTileUnload,\n      onTileError,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy\n    } = this.props;\n\n    if (this.state.isTiled) {\n      return new TileLayer(\n        this.getSubLayerProps({\n          id: 'tiles'\n        }),\n        {\n          wireframe,\n          color,\n          material,\n          getTileData: this.getTiledTerrainData.bind(this),\n          renderSubLayers: this.renderSubLayers.bind(this),\n          updateTriggers: {\n            getTileData: {\n              elevationData: urlTemplateToUpdateTrigger(elevationData),\n              texture: urlTemplateToUpdateTrigger(texture),\n              meshMaxError,\n              elevationDecoder\n            }\n          },\n          onViewportLoad: this.onViewportLoad.bind(this),\n          zRange: this.state.zRange || null,\n          tileSize,\n          maxZoom,\n          minZoom,\n          extent,\n          maxRequests,\n          onTileLoad,\n          onTileUnload,\n          onTileError,\n          maxCacheSize,\n          maxCacheByteSize,\n          refinementStrategy\n        }\n      );\n    }\n\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    return new SubLayerClass(\n      this.getSubLayerProps({\n        id: 'mesh'\n      }),\n      {\n        data: DUMMY_DATA,\n        mesh: this.state.terrain,\n        texture,\n        _instanced: false,\n        getPosition: d => [0, 0, 0],\n        getColor: color,\n        material,\n        wireframe\n      }\n    );\n  }\n}\n\nTerrainLayer.layerName = 'TerrainLayer';\nTerrainLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}