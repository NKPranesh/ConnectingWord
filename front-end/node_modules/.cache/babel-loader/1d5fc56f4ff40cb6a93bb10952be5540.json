{"ast":null,"code":"const BIG_ENDIAN = false;\nconst LITTLE_ENDIAN = true;\nexport function getBinaryImageMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  return getPngMetadata(dataView) || getJpegMetadata(dataView) || getGifMetadata(dataView) || getBmpMetadata(dataView);\n}\n\nfunction getPngMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  const isPng = dataView.byteLength >= 24 && dataView.getUint32(0, BIG_ENDIAN) === 0x89504e47;\n\n  if (!isPng) {\n    return null;\n  }\n\n  return {\n    mimeType: 'image/png',\n    width: dataView.getUint32(16, BIG_ENDIAN),\n    height: dataView.getUint32(20, BIG_ENDIAN)\n  };\n}\n\nfunction getGifMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  const isGif = dataView.byteLength >= 10 && dataView.getUint32(0, BIG_ENDIAN) === 0x47494638;\n\n  if (!isGif) {\n    return null;\n  }\n\n  return {\n    mimeType: 'image/gif',\n    width: dataView.getUint16(6, LITTLE_ENDIAN),\n    height: dataView.getUint16(8, LITTLE_ENDIAN)\n  };\n}\n\nexport function getBmpMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  const isBmp = dataView.byteLength >= 14 && dataView.getUint16(0, BIG_ENDIAN) === 0x424d && dataView.getUint32(2, LITTLE_ENDIAN) === dataView.byteLength;\n\n  if (!isBmp) {\n    return null;\n  }\n\n  return {\n    mimeType: 'image/bmp',\n    width: dataView.getUint32(18, LITTLE_ENDIAN),\n    height: dataView.getUint32(22, LITTLE_ENDIAN)\n  };\n}\n\nfunction getJpegMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  const isJpeg = dataView.byteLength >= 3 && dataView.getUint16(0, BIG_ENDIAN) === 0xffd8 && dataView.getUint8(2) === 0xff;\n\n  if (!isJpeg) {\n    return null;\n  }\n\n  const {\n    tableMarkers,\n    sofMarkers\n  } = getJpegMarkers();\n  let i = 2;\n\n  while (i + 9 < dataView.byteLength) {\n    const marker = dataView.getUint16(i, BIG_ENDIAN);\n\n    if (sofMarkers.has(marker)) {\n      return {\n        mimeType: 'image/jpeg',\n        height: dataView.getUint16(i + 5, BIG_ENDIAN),\n        width: dataView.getUint16(i + 7, BIG_ENDIAN)\n      };\n    }\n\n    if (!tableMarkers.has(marker)) {\n      return null;\n    }\n\n    i += 2;\n    i += dataView.getUint16(i, BIG_ENDIAN);\n  }\n\n  return null;\n}\n\nfunction getJpegMarkers() {\n  const tableMarkers = new Set([0xffdb, 0xffc4, 0xffcc, 0xffdd, 0xfffe]);\n\n  for (let i = 0xffe0; i < 0xfff0; ++i) {\n    tableMarkers.add(i);\n  }\n\n  const sofMarkers = new Set([0xffc0, 0xffc1, 0xffc2, 0xffc3, 0xffc5, 0xffc6, 0xffc7, 0xffc9, 0xffca, 0xffcb, 0xffcd, 0xffce, 0xffcf, 0xffde]);\n  return {\n    tableMarkers,\n    sofMarkers\n  };\n}\n\nfunction toDataView(data) {\n  if (data instanceof DataView) {\n    return data;\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new DataView(data.buffer);\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return new DataView(data);\n  }\n\n  throw new Error('toDataView');\n}","map":{"version":3,"sources":["../../../../src/lib/category-api/binary-image-api.ts"],"names":["BIG_ENDIAN","LITTLE_ENDIAN","dataView","toDataView","getPngMetadata","getJpegMetadata","getGifMetadata","getBmpMetadata","isPng","mimeType","width","height","isGif","isBmp","isJpeg","sofMarkers","getJpegMarkers","i","marker","tableMarkers","data","ArrayBuffer"],"mappings":"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","sourcesContent":["// Attributions\n// * Based on binary-gltf-utils under MIT license: Copyright (c) 2016-17 Karl Cheng\n\n// TODO: make these functions work for Node.js buffers?\n// Quarantine references to Buffer to prevent bundler from adding big polyfills\n// import {bufferToArrayBuffer} from '../node/buffer-to-array-buffer';\n// TODO - this should be handled in @loaders.gl/polyfills\n\n/** MIME type, width and height extracted from binary compressed image data */\nexport type BinaryImageMetadata = {\n  mimeType: string;\n  width: number;\n  height: number;\n};\n\nconst BIG_ENDIAN = false;\nconst LITTLE_ENDIAN = true;\n\n/**\n * Extracts `{mimeType, width and height}` from a memory buffer containing a known image format\n * Currently supports `image/png`, `image/jpeg`, `image/bmp` and `image/gif`.\n * @param binaryData image file memory to parse\n * @returns metadata or null if memory is not a valid image file format layout.\n */\nexport function getBinaryImageMetadata(\n  binaryData: DataView | ArrayBuffer\n): BinaryImageMetadata | null {\n  const dataView = toDataView(binaryData);\n  return (\n    getPngMetadata(dataView) ||\n    getJpegMetadata(dataView) ||\n    getGifMetadata(dataView) ||\n    getBmpMetadata(dataView)\n  );\n}\n\n// PNG\n\nfunction getPngMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  // Check file contains the first 4 bytes of the PNG signature.\n  const isPng = dataView.byteLength >= 24 && dataView.getUint32(0, BIG_ENDIAN) === 0x89504e47;\n  if (!isPng) {\n    return null;\n  }\n\n  // Extract size from a binary PNG file\n  return {\n    mimeType: 'image/png',\n    width: dataView.getUint32(16, BIG_ENDIAN),\n    height: dataView.getUint32(20, BIG_ENDIAN)\n  };\n}\n\n// GIF\n\n// Extract size from a binary GIF file\n// TODO: GIF is not this simple\nfunction getGifMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  // Check first 4 bytes of the GIF signature (\"GIF8\").\n  const isGif = dataView.byteLength >= 10 && dataView.getUint32(0, BIG_ENDIAN) === 0x47494638;\n  if (!isGif) {\n    return null;\n  }\n\n  // GIF is little endian.\n  return {\n    mimeType: 'image/gif',\n    width: dataView.getUint16(6, LITTLE_ENDIAN),\n    height: dataView.getUint16(8, LITTLE_ENDIAN)\n  };\n}\n\n// BMP\n\n// TODO: BMP is not this simple\nexport function getBmpMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  // Check magic number is valid (first 2 characters should be \"BM\").\n  // The mandatory bitmap file header is 14 bytes long.\n  const isBmp =\n    dataView.byteLength >= 14 &&\n    dataView.getUint16(0, BIG_ENDIAN) === 0x424d &&\n    dataView.getUint32(2, LITTLE_ENDIAN) === dataView.byteLength;\n\n  if (!isBmp) {\n    return null;\n  }\n\n  // BMP is little endian.\n  return {\n    mimeType: 'image/bmp',\n    width: dataView.getUint32(18, LITTLE_ENDIAN),\n    height: dataView.getUint32(22, LITTLE_ENDIAN)\n  };\n}\n\n// JPEG\n\n// Extract width and height from a binary JPEG file\nfunction getJpegMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  // Check file contains the JPEG \"start of image\" (SOI) marker\n  // followed by another marker.\n  const isJpeg =\n    dataView.byteLength >= 3 &&\n    dataView.getUint16(0, BIG_ENDIAN) === 0xffd8 &&\n    dataView.getUint8(2) === 0xff;\n\n  if (!isJpeg) {\n    return null;\n  }\n\n  const {tableMarkers, sofMarkers} = getJpegMarkers();\n\n  // Exclude the two byte SOI marker.\n  let i = 2;\n  while (i + 9 < dataView.byteLength) {\n    const marker = dataView.getUint16(i, BIG_ENDIAN);\n\n    // The frame that contains the width and height of the JPEG image.\n    if (sofMarkers.has(marker)) {\n      return {\n        mimeType: 'image/jpeg',\n        height: dataView.getUint16(i + 5, BIG_ENDIAN), // Number of lines\n        width: dataView.getUint16(i + 7, BIG_ENDIAN) // Number of pixels per line\n      };\n    }\n\n    // Miscellaneous tables/data preceding the frame header.\n    if (!tableMarkers.has(marker)) {\n      return null;\n    }\n\n    // Length includes size of length parameter but not the two byte header.\n    i += 2;\n    i += dataView.getUint16(i, BIG_ENDIAN);\n  }\n\n  return null;\n}\n\nfunction getJpegMarkers() {\n  // Tables/misc header markers.\n  // DQT, DHT, DAC, DRI, COM, APP_n\n  const tableMarkers = new Set([0xffdb, 0xffc4, 0xffcc, 0xffdd, 0xfffe]);\n  for (let i = 0xffe0; i < 0xfff0; ++i) {\n    tableMarkers.add(i);\n  }\n\n  // SOF markers and DHP marker.\n  // These markers are after tables/misc data.\n  const sofMarkers = new Set([\n    0xffc0, 0xffc1, 0xffc2, 0xffc3, 0xffc5, 0xffc6, 0xffc7, 0xffc9, 0xffca, 0xffcb, 0xffcd, 0xffce,\n    0xffcf, 0xffde\n  ]);\n\n  return {tableMarkers, sofMarkers};\n}\n\n// TODO - move into image module?\nfunction toDataView(data) {\n  if (data instanceof DataView) {\n    return data;\n  }\n  if (ArrayBuffer.isView(data)) {\n    return new DataView(data.buffer);\n  }\n\n  // TODO: make these functions work for Node.js buffers?\n  // if (bufferToArrayBuffer) {\n  //   data = bufferToArrayBuffer(data);\n  // }\n\n  // Careful - Node Buffers will look like ArrayBuffers (keep after isBuffer)\n  if (data instanceof ArrayBuffer) {\n    return new DataView(data);\n  }\n  throw new Error('toDataView');\n}\n"]},"metadata":{},"sourceType":"module"}