{"ast":null,"code":"import { log } from '@luma.gl/gltools';\nimport Framebuffer from './framebuffer';\nimport Renderbuffer from './renderbuffer';\nimport Texture from './texture';\nimport { assert } from '../utils/assert';\nconst UNIFORM_SETTERS = {\n  [5126]: getArraySetter.bind(null, 'uniform1fv', toFloatArray, 1, setVectorUniform),\n  [35664]: getArraySetter.bind(null, 'uniform2fv', toFloatArray, 2, setVectorUniform),\n  [35665]: getArraySetter.bind(null, 'uniform3fv', toFloatArray, 3, setVectorUniform),\n  [35666]: getArraySetter.bind(null, 'uniform4fv', toFloatArray, 4, setVectorUniform),\n  [5124]: getArraySetter.bind(null, 'uniform1iv', toIntArray, 1, setVectorUniform),\n  [35667]: getArraySetter.bind(null, 'uniform2iv', toIntArray, 2, setVectorUniform),\n  [35668]: getArraySetter.bind(null, 'uniform3iv', toIntArray, 3, setVectorUniform),\n  [35669]: getArraySetter.bind(null, 'uniform4iv', toIntArray, 4, setVectorUniform),\n  [35670]: getArraySetter.bind(null, 'uniform1iv', toIntArray, 1, setVectorUniform),\n  [35671]: getArraySetter.bind(null, 'uniform2iv', toIntArray, 2, setVectorUniform),\n  [35672]: getArraySetter.bind(null, 'uniform3iv', toIntArray, 3, setVectorUniform),\n  [35673]: getArraySetter.bind(null, 'uniform4iv', toIntArray, 4, setVectorUniform),\n  [35674]: getArraySetter.bind(null, 'uniformMatrix2fv', toFloatArray, 4, setMatrixUniform),\n  [35675]: getArraySetter.bind(null, 'uniformMatrix3fv', toFloatArray, 9, setMatrixUniform),\n  [35676]: getArraySetter.bind(null, 'uniformMatrix4fv', toFloatArray, 16, setMatrixUniform),\n  [35678]: getSamplerSetter,\n  [35680]: getSamplerSetter,\n  [5125]: getArraySetter.bind(null, 'uniform1uiv', toUIntArray, 1, setVectorUniform),\n  [36294]: getArraySetter.bind(null, 'uniform2uiv', toUIntArray, 2, setVectorUniform),\n  [36295]: getArraySetter.bind(null, 'uniform3uiv', toUIntArray, 3, setVectorUniform),\n  [36296]: getArraySetter.bind(null, 'uniform4uiv', toUIntArray, 4, setVectorUniform),\n  [35685]: getArraySetter.bind(null, 'uniformMatrix2x3fv', toFloatArray, 6, setMatrixUniform),\n  [35686]: getArraySetter.bind(null, 'uniformMatrix2x4fv', toFloatArray, 8, setMatrixUniform),\n  [35687]: getArraySetter.bind(null, 'uniformMatrix3x2fv', toFloatArray, 6, setMatrixUniform),\n  [35688]: getArraySetter.bind(null, 'uniformMatrix3x4fv', toFloatArray, 12, setMatrixUniform),\n  [35689]: getArraySetter.bind(null, 'uniformMatrix4x2fv', toFloatArray, 8, setMatrixUniform),\n  [35690]: getArraySetter.bind(null, 'uniformMatrix4x3fv', toFloatArray, 12, setMatrixUniform),\n  [35678]: getSamplerSetter,\n  [35680]: getSamplerSetter,\n  [35679]: getSamplerSetter,\n  [35682]: getSamplerSetter,\n  [36289]: getSamplerSetter,\n  [36292]: getSamplerSetter,\n  [36293]: getSamplerSetter,\n  [36298]: getSamplerSetter,\n  [36299]: getSamplerSetter,\n  [36300]: getSamplerSetter,\n  [36303]: getSamplerSetter,\n  [36306]: getSamplerSetter,\n  [36307]: getSamplerSetter,\n  [36308]: getSamplerSetter,\n  [36311]: getSamplerSetter\n};\nconst FLOAT_ARRAY = {};\nconst INT_ARRAY = {};\nconst UINT_ARRAY = {};\nconst array1 = [0];\n\nfunction toTypedArray(value, uniformLength, Type, cache) {\n  if (uniformLength === 1 && typeof value === 'boolean') {\n    value = value ? 1 : 0;\n  }\n\n  if (Number.isFinite(value)) {\n    array1[0] = value;\n    value = array1;\n  }\n\n  const length = value.length;\n\n  if (length % uniformLength) {\n    log.warn(`Uniform size should be multiples of ${uniformLength}`, value)();\n  }\n\n  if (value instanceof Type) {\n    return value;\n  }\n\n  let result = cache[length];\n\n  if (!result) {\n    result = new Type(length);\n    cache[length] = result;\n  }\n\n  for (let i = 0; i < length; i++) {\n    result[i] = value[i];\n  }\n\n  return result;\n}\n\nfunction toFloatArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Float32Array, FLOAT_ARRAY);\n}\n\nfunction toIntArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Int32Array, INT_ARRAY);\n}\n\nfunction toUIntArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Uint32Array, UINT_ARRAY);\n}\n\nexport function getUniformSetter(gl, location, info) {\n  const setter = UNIFORM_SETTERS[info.type];\n\n  if (!setter) {\n    throw new Error(`Unknown GLSL uniform type ${info.type}`);\n  }\n\n  return setter().bind(null, gl, location);\n}\nexport function parseUniformName(name) {\n  if (name[name.length - 1] !== ']') {\n    return {\n      name,\n      length: 1,\n      isArray: false\n    };\n  }\n\n  const UNIFORM_NAME_REGEXP = /([^[]*)(\\[[0-9]+\\])?/;\n  const matches = name.match(UNIFORM_NAME_REGEXP);\n\n  if (!matches || matches.length < 2) {\n    throw new Error(`Failed to parse GLSL uniform name ${name}`);\n  }\n\n  return {\n    name: matches[1],\n    length: matches[2] || 1,\n    isArray: Boolean(matches[2])\n  };\n}\nexport function checkUniformValues(uniforms, source, uniformMap) {\n  for (const uniformName in uniforms) {\n    const value = uniforms[uniformName];\n    const shouldCheck = !uniformMap || Boolean(uniformMap[uniformName]);\n\n    if (shouldCheck && !checkUniformValue(value)) {\n      source = source ? `${source} ` : '';\n      console.error(`${source} Bad uniform ${uniformName}`, value);\n      throw new Error(`${source} Bad uniform ${uniformName}`);\n    }\n  }\n\n  return true;\n}\n\nfunction checkUniformValue(value) {\n  if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n    return checkUniformArray(value);\n  }\n\n  if (isFinite(value)) {\n    return true;\n  } else if (value === true || value === false) {\n    return true;\n  } else if (value instanceof Texture) {\n    return true;\n  } else if (value instanceof Renderbuffer) {\n    return true;\n  } else if (value instanceof Framebuffer) {\n    return Boolean(value.texture);\n  }\n\n  return false;\n}\n\nexport function copyUniform(uniforms, key, value) {\n  if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n    if (uniforms[key]) {\n      const dest = uniforms[key];\n\n      for (let i = 0, len = value.length; i < len; ++i) {\n        dest[i] = value[i];\n      }\n    } else {\n      uniforms[key] = value.slice();\n    }\n  } else {\n    uniforms[key] = value;\n  }\n}\n\nfunction checkUniformArray(value) {\n  if (value.length === 0) {\n    return false;\n  }\n\n  const checkLength = Math.min(value.length, 16);\n\n  for (let i = 0; i < checkLength; ++i) {\n    if (!Number.isFinite(value[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getSamplerSetter() {\n  let cache = null;\n  return (gl, location, value) => {\n    const update = cache !== value;\n\n    if (update) {\n      gl.uniform1i(location, value);\n      cache = value;\n    }\n\n    return update;\n  };\n}\n\nfunction getArraySetter(functionName, toArray, size, uniformSetter) {\n  let cache = null;\n  let cacheLength = null;\n  return (gl, location, value) => {\n    const arrayValue = toArray(value, size);\n    const length = arrayValue.length;\n    let update = false;\n\n    if (cache === null) {\n      cache = new Float32Array(length);\n      cacheLength = length;\n      update = true;\n    } else {\n      assert(cacheLength === length, 'Uniform length cannot change.');\n\n      for (let i = 0; i < length; ++i) {\n        if (arrayValue[i] !== cache[i]) {\n          update = true;\n          break;\n        }\n      }\n    }\n\n    if (update) {\n      uniformSetter(gl, functionName, location, arrayValue);\n      cache.set(arrayValue);\n    }\n\n    return update;\n  };\n}\n\nfunction setVectorUniform(gl, functionName, location, value) {\n  gl[functionName](location, value);\n}\n\nfunction setMatrixUniform(gl, functionName, location, value) {\n  gl[functionName](location, false, value);\n}","map":{"version":3,"sources":["../../../src/classes/uniforms.js"],"names":["UNIFORM_SETTERS","getArraySetter","getSamplerSetter","FLOAT_ARRAY","INT_ARRAY","UINT_ARRAY","array1","uniformLength","value","Number","length","log","result","cache","i","toTypedArray","setter","info","type","name","isArray","UNIFORM_NAME_REGEXP","matches","Boolean","uniforms","shouldCheck","uniformMap","checkUniformValue","source","console","uniformName","Array","ArrayBuffer","checkUniformArray","isFinite","dest","len","checkLength","Math","update","gl","cacheLength","arrayValue","toArray","assert","uniformSetter"],"mappings":"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","sourcesContent":["/** @typedef {import('./uniforms')} types */\n\nimport GL from '@luma.gl/constants';\nimport {log} from '@luma.gl/gltools';\n\nimport Framebuffer from './framebuffer';\nimport Renderbuffer from './renderbuffer';\nimport Texture from './texture';\nimport {assert} from '../utils/assert';\n\nconst UNIFORM_SETTERS = {\n  // WEBGL1\n\n  /* eslint-disable max-len */\n  [GL.FLOAT]: getArraySetter.bind(null, 'uniform1fv', toFloatArray, 1, setVectorUniform),\n  [GL.FLOAT_VEC2]: getArraySetter.bind(null, 'uniform2fv', toFloatArray, 2, setVectorUniform),\n  [GL.FLOAT_VEC3]: getArraySetter.bind(null, 'uniform3fv', toFloatArray, 3, setVectorUniform),\n  [GL.FLOAT_VEC4]: getArraySetter.bind(null, 'uniform4fv', toFloatArray, 4, setVectorUniform),\n\n  [GL.INT]: getArraySetter.bind(null, 'uniform1iv', toIntArray, 1, setVectorUniform),\n  [GL.INT_VEC2]: getArraySetter.bind(null, 'uniform2iv', toIntArray, 2, setVectorUniform),\n  [GL.INT_VEC3]: getArraySetter.bind(null, 'uniform3iv', toIntArray, 3, setVectorUniform),\n  [GL.INT_VEC4]: getArraySetter.bind(null, 'uniform4iv', toIntArray, 4, setVectorUniform),\n\n  [GL.BOOL]: getArraySetter.bind(null, 'uniform1iv', toIntArray, 1, setVectorUniform),\n  [GL.BOOL_VEC2]: getArraySetter.bind(null, 'uniform2iv', toIntArray, 2, setVectorUniform),\n  [GL.BOOL_VEC3]: getArraySetter.bind(null, 'uniform3iv', toIntArray, 3, setVectorUniform),\n  [GL.BOOL_VEC4]: getArraySetter.bind(null, 'uniform4iv', toIntArray, 4, setVectorUniform),\n\n  // uniformMatrix(false): don't transpose the matrix\n  [GL.FLOAT_MAT2]: getArraySetter.bind(null, 'uniformMatrix2fv', toFloatArray, 4, setMatrixUniform),\n  [GL.FLOAT_MAT3]: getArraySetter.bind(null, 'uniformMatrix3fv', toFloatArray, 9, setMatrixUniform),\n  [GL.FLOAT_MAT4]: getArraySetter.bind(\n    null,\n    'uniformMatrix4fv',\n    toFloatArray,\n    16,\n    setMatrixUniform\n  ),\n\n  [GL.SAMPLER_2D]: getSamplerSetter,\n  [GL.SAMPLER_CUBE]: getSamplerSetter,\n\n  // WEBGL2 - unsigned integers, irregular matrices, additional texture samplers\n\n  [GL.UNSIGNED_INT]: getArraySetter.bind(null, 'uniform1uiv', toUIntArray, 1, setVectorUniform),\n  [GL.UNSIGNED_INT_VEC2]: getArraySetter.bind(\n    null,\n    'uniform2uiv',\n    toUIntArray,\n    2,\n    setVectorUniform\n  ),\n  [GL.UNSIGNED_INT_VEC3]: getArraySetter.bind(\n    null,\n    'uniform3uiv',\n    toUIntArray,\n    3,\n    setVectorUniform\n  ),\n  [GL.UNSIGNED_INT_VEC4]: getArraySetter.bind(\n    null,\n    'uniform4uiv',\n    toUIntArray,\n    4,\n    setVectorUniform\n  ),\n\n  // uniformMatrix(false): don't transpose the matrix\n  [GL.FLOAT_MAT2x3]: getArraySetter.bind(\n    null,\n    'uniformMatrix2x3fv',\n    toFloatArray,\n    6,\n    setMatrixUniform\n  ),\n  [GL.FLOAT_MAT2x4]: getArraySetter.bind(\n    null,\n    'uniformMatrix2x4fv',\n    toFloatArray,\n    8,\n    setMatrixUniform\n  ),\n  [GL.FLOAT_MAT3x2]: getArraySetter.bind(\n    null,\n    'uniformMatrix3x2fv',\n    toFloatArray,\n    6,\n    setMatrixUniform\n  ),\n  [GL.FLOAT_MAT3x4]: getArraySetter.bind(\n    null,\n    'uniformMatrix3x4fv',\n    toFloatArray,\n    12,\n    setMatrixUniform\n  ),\n  [GL.FLOAT_MAT4x2]: getArraySetter.bind(\n    null,\n    'uniformMatrix4x2fv',\n    toFloatArray,\n    8,\n    setMatrixUniform\n  ),\n  [GL.FLOAT_MAT4x3]: getArraySetter.bind(\n    null,\n    'uniformMatrix4x3fv',\n    toFloatArray,\n    12,\n    setMatrixUniform\n  ),\n\n  [GL.SAMPLER_2D]: getSamplerSetter,\n  [GL.SAMPLER_CUBE]: getSamplerSetter,\n\n  [GL.SAMPLER_3D]: getSamplerSetter,\n  [GL.SAMPLER_2D_SHADOW]: getSamplerSetter,\n  [GL.SAMPLER_2D_ARRAY]: getSamplerSetter,\n  [GL.SAMPLER_2D_ARRAY_SHADOW]: getSamplerSetter,\n  [GL.SAMPLER_CUBE_SHADOW]: getSamplerSetter,\n  [GL.INT_SAMPLER_2D]: getSamplerSetter,\n  [GL.INT_SAMPLER_3D]: getSamplerSetter,\n  [GL.INT_SAMPLER_CUBE]: getSamplerSetter,\n  [GL.INT_SAMPLER_2D_ARRAY]: getSamplerSetter,\n  [GL.UNSIGNED_INT_SAMPLER_2D]: getSamplerSetter,\n  [GL.UNSIGNED_INT_SAMPLER_3D]: getSamplerSetter,\n  [GL.UNSIGNED_INT_SAMPLER_CUBE]: getSamplerSetter,\n  [GL.UNSIGNED_INT_SAMPLER_2D_ARRAY]: getSamplerSetter\n  /* eslint-enable max-len */\n};\n\n// Pre-allocated typed arrays for temporary conversion\nconst FLOAT_ARRAY = {};\nconst INT_ARRAY = {};\nconst UINT_ARRAY = {};\n\nconst array1 = [0];\n\n// Functions to ensure the type of uniform values\n// This is done because uniform*v functions\n// are extremely slow when consuming JS arrays directly.\nfunction toTypedArray(value, uniformLength, Type, cache) {\n  // convert boolean uniforms to Number\n  if (uniformLength === 1 && typeof value === 'boolean') {\n    value = value ? 1 : 0;\n  }\n  if (Number.isFinite(value)) {\n    array1[0] = value;\n    value = array1;\n  }\n  const length = value.length;\n  if (length % uniformLength) {\n    log.warn(`Uniform size should be multiples of ${uniformLength}`, value)();\n  }\n\n  if (value instanceof Type) {\n    return value;\n  }\n  let result = cache[length];\n  if (!result) {\n    result = new Type(length);\n    cache[length] = result;\n  }\n  for (let i = 0; i < length; i++) {\n    result[i] = value[i];\n  }\n  return result;\n}\n\nfunction toFloatArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Float32Array, FLOAT_ARRAY);\n}\n\nfunction toIntArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Int32Array, INT_ARRAY);\n}\n\nfunction toUIntArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Uint32Array, UINT_ARRAY);\n} // Returns a Magic Uniform Setter\n\n// PUBLIC API\n\n/** @type {types['getUniformSetter']} */ export function getUniformSetter(gl, location, info) {\n  const setter = UNIFORM_SETTERS[info.type];\n  if (!setter) {\n    throw new Error(`Unknown GLSL uniform type ${info.type}`);\n  }\n\n  // NOTE(Tarek): This construction is the ensure\n  // separate caches for all setters.\n  return setter().bind(null, gl, location);\n}\n\n/** @type {types['parseUniformName']} */\nexport function parseUniformName(name) {\n  // Shortcut to avoid redundant or bad matches\n  if (name[name.length - 1] !== ']') {\n    return {\n      name,\n      length: 1,\n      isArray: false\n    };\n  }\n\n  // if array name then clean the array brackets\n  const UNIFORM_NAME_REGEXP = /([^[]*)(\\[[0-9]+\\])?/;\n  const matches = name.match(UNIFORM_NAME_REGEXP);\n  if (!matches || matches.length < 2) {\n    throw new Error(`Failed to parse GLSL uniform name ${name}`);\n  }\n\n  return {\n    name: matches[1],\n    length: matches[2] || 1,\n    isArray: Boolean(matches[2])\n  };\n} // To facilitate early detection of e.g. undefined values in JavaScript\n\n// Basic checks of uniform values (with or without knowledge of program)\n\n/** @type {types['checkUniformValues']} */\nexport function checkUniformValues(uniforms, source, uniformMap) {\n  for (const uniformName in uniforms) {\n    const value = uniforms[uniformName];\n    const shouldCheck = !uniformMap || Boolean(uniformMap[uniformName]);\n    if (shouldCheck && !checkUniformValue(value)) {\n      // Add space to source\n      source = source ? `${source} ` : '';\n      // Value could be unprintable so write the object on console\n      console.error(`${source} Bad uniform ${uniformName}`, value); // eslint-disable-line\n      /* eslint-enable no-console */\n      throw new Error(`${source} Bad uniform ${uniformName}`);\n    }\n  }\n  return true;\n}\n\n// TODO use type information during validation\nfunction checkUniformValue(value) {\n  if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n    return checkUniformArray(value);\n  }\n\n  // Check if single value is a number\n  if (isFinite(value)) {\n    return true;\n  } else if (value === true || value === false) {\n    return true;\n  } else if (value instanceof Texture) {\n    return true;\n  } else if (value instanceof Renderbuffer) {\n    return true;\n  } else if (value instanceof Framebuffer) {\n    return Boolean(value.texture);\n  }\n  return false;\n}\n\n/** @type {types['copyUniform']} */\nexport function copyUniform(uniforms, key, value) {\n  if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n    if (uniforms[key]) {\n      const dest = uniforms[key];\n      // @ts-ignore\n      for (let i = 0, len = value.length; i < len; ++i) {\n        dest[i] = value[i];\n      }\n    } else {\n      // @ts-ignore\n      uniforms[key] = value.slice();\n    }\n  } else {\n    uniforms[key] = value;\n  }\n}\n\n// HELPERS\n\nfunction checkUniformArray(value) {\n  // Check that every element in array is a number, and at least 1 element\n  if (value.length === 0) {\n    return false;\n  }\n\n  const checkLength = Math.min(value.length, 16);\n\n  for (let i = 0; i < checkLength; ++i) {\n    if (!Number.isFinite(value[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// NOTE(Tarek): Setters maintain a cache\n// of the previously set value, and\n// avoid resetting it if it's the same.\nfunction getSamplerSetter() {\n  let cache = null;\n  return (gl, location, value) => {\n    const update = cache !== value;\n    if (update) {\n      gl.uniform1i(location, value);\n      cache = value;\n    }\n\n    return update;\n  };\n}\n\nfunction getArraySetter(functionName, toArray, size, uniformSetter) {\n  let cache = null;\n  let cacheLength = null;\n  return (gl, location, value) => {\n    const arrayValue = toArray(value, size);\n    const length = arrayValue.length;\n    let update = false;\n    if (cache === null) {\n      cache = new Float32Array(length);\n      cacheLength = length;\n      update = true;\n    } else {\n      assert(cacheLength === length, 'Uniform length cannot change.');\n      for (let i = 0; i < length; ++i) {\n        if (arrayValue[i] !== cache[i]) {\n          update = true;\n          break;\n        }\n      }\n    }\n    if (update) {\n      uniformSetter(gl, functionName, location, arrayValue);\n      cache.set(arrayValue);\n    }\n\n    return update;\n  };\n}\n\nfunction setVectorUniform(gl, functionName, location, value) {\n  gl[functionName](location, value);\n}\n\nfunction setMatrixUniform(gl, functionName, location, value) {\n  gl[functionName](location, false, value);\n}\n"]},"metadata":{},"sourceType":"module"}