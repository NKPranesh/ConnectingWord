{"ast":null,"code":"export class TypedArrayManager {\n  constructor(props) {\n    this._pool = [];\n    this.props = {\n      overAlloc: 2,\n      poolSize: 100\n    };\n    this.setProps(props);\n  }\n\n  setProps(props) {\n    Object.assign(this.props, props);\n  }\n\n  allocate(typedArray, count, _ref) {\n    let {\n      size = 1,\n      type,\n      padding = 0,\n      copy = false,\n      initialize = false,\n      maxCount\n    } = _ref;\n    const Type = type || typedArray && typedArray.constructor || Float32Array;\n    const newSize = count * size + padding;\n\n    if (ArrayBuffer.isView(typedArray)) {\n      if (newSize <= typedArray.length) {\n        return typedArray;\n      }\n\n      if (newSize * typedArray.BYTES_PER_ELEMENT <= typedArray.buffer.byteLength) {\n        return new Type(typedArray.buffer, 0, newSize);\n      }\n    }\n\n    let maxSize;\n\n    if (maxCount) {\n      maxSize = maxCount * size + padding;\n    }\n\n    const newArray = this._allocate(Type, newSize, initialize, maxSize);\n\n    if (typedArray && copy) {\n      newArray.set(typedArray);\n    } else if (!initialize) {\n      newArray.fill(0, 0, 4);\n    }\n\n    this._release(typedArray);\n\n    return newArray;\n  }\n\n  release(typedArray) {\n    this._release(typedArray);\n  }\n\n  _allocate(Type, size, initialize, maxSize) {\n    let sizeToAllocate = Math.max(Math.ceil(size * this.props.overAlloc), 1);\n\n    if (sizeToAllocate > maxSize) {\n      sizeToAllocate = maxSize;\n    }\n\n    const pool = this._pool;\n    const byteLength = Type.BYTES_PER_ELEMENT * sizeToAllocate;\n    const i = pool.findIndex(b => b.byteLength >= byteLength);\n\n    if (i >= 0) {\n      const array = new Type(pool.splice(i, 1)[0], 0, sizeToAllocate);\n\n      if (initialize) {\n        array.fill(0);\n      }\n\n      return array;\n    }\n\n    return new Type(sizeToAllocate);\n  }\n\n  _release(typedArray) {\n    if (!ArrayBuffer.isView(typedArray)) {\n      return;\n    }\n\n    const pool = this._pool;\n    const {\n      buffer\n    } = typedArray;\n    const {\n      byteLength\n    } = buffer;\n    const i = pool.findIndex(b => b.byteLength >= byteLength);\n\n    if (i < 0) {\n      pool.push(buffer);\n    } else if (i > 0 || pool.length < this.props.poolSize) {\n      pool.splice(i, 0, buffer);\n    }\n\n    if (pool.length > this.props.poolSize) {\n      pool.shift();\n    }\n  }\n\n}\nexport default new TypedArrayManager();","map":{"version":3,"sources":["../../../src/utils/typed-array-manager.js"],"names":["constructor","overAlloc","poolSize","setProps","Object","allocate","size","padding","copy","initialize","maxCount","Type","type","typedArray","newSize","count","ArrayBuffer","maxSize","newArray","release","_allocate","sizeToAllocate","Math","pool","byteLength","i","b","array","_release","buffer"],"mappings":"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","sourcesContent":["export class TypedArrayManager {\n  constructor(props) {\n    this._pool = [];\n    this.props = {overAlloc: 2, poolSize: 100};\n    this.setProps(props);\n  }\n\n  setProps(props) {\n    Object.assign(this.props, props);\n  }\n\n  allocate(\n    typedArray,\n    count,\n    {size = 1, type, padding = 0, copy = false, initialize = false, maxCount}\n  ) {\n    const Type = type || (typedArray && typedArray.constructor) || Float32Array;\n\n    const newSize = count * size + padding;\n    if (ArrayBuffer.isView(typedArray)) {\n      if (newSize <= typedArray.length) {\n        return typedArray;\n      }\n      if (newSize * typedArray.BYTES_PER_ELEMENT <= typedArray.buffer.byteLength) {\n        return new Type(typedArray.buffer, 0, newSize);\n      }\n    }\n\n    let maxSize;\n    if (maxCount) {\n      maxSize = maxCount * size + padding;\n    }\n\n    const newArray = this._allocate(Type, newSize, initialize, maxSize);\n\n    if (typedArray && copy) {\n      newArray.set(typedArray);\n    } else if (!initialize) {\n      // Hack - always initialize the first 4 elements. NaNs crash the Attribute validation\n      newArray.fill(0, 0, 4);\n    }\n\n    this._release(typedArray);\n    return newArray;\n  }\n\n  release(typedArray) {\n    this._release(typedArray);\n  }\n\n  _allocate(Type, size, initialize, maxSize) {\n    // Allocate at least one element to ensure a valid buffer\n    let sizeToAllocate = Math.max(Math.ceil(size * this.props.overAlloc), 1);\n    // Don't over allocate after certain specified number of elements\n    if (sizeToAllocate > maxSize) {\n      sizeToAllocate = maxSize;\n    }\n\n    // Check if available in pool\n    const pool = this._pool;\n    const byteLength = Type.BYTES_PER_ELEMENT * sizeToAllocate;\n    const i = pool.findIndex(b => b.byteLength >= byteLength);\n    if (i >= 0) {\n      // Create a new array using an existing buffer\n      const array = new Type(pool.splice(i, 1)[0], 0, sizeToAllocate);\n      if (initialize) {\n        // Viewing a buffer with a different type may create NaNs\n        array.fill(0);\n      }\n      return array;\n    }\n    return new Type(sizeToAllocate);\n  }\n\n  _release(typedArray) {\n    if (!ArrayBuffer.isView(typedArray)) {\n      return;\n    }\n    const pool = this._pool;\n    const {buffer} = typedArray;\n    // Save the buffer of the released array into the pool\n    // Sort buffers by size\n    // TODO - implement binary search?\n    const {byteLength} = buffer;\n    const i = pool.findIndex(b => b.byteLength >= byteLength);\n    if (i < 0) {\n      pool.push(buffer);\n    } else if (i > 0 || pool.length < this.props.poolSize) {\n      pool.splice(i, 0, buffer);\n    }\n    if (pool.length > this.props.poolSize) {\n      // Drop the smallest one\n      pool.shift();\n    }\n  }\n}\n\nexport default new TypedArrayManager();\n"]},"metadata":{},"sourceType":"module"}