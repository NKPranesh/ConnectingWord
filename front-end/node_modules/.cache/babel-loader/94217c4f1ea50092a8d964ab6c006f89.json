{"ast":null,"code":"import { GL } from '../constants';\nimport { getPrimitiveModeType } from '../primitives/modes';\nimport { assert } from '@loaders.gl/loader-utils';\nexport function* makePrimitiveIterator(indices) {\n  let attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let mode = arguments.length > 2 ? arguments[2] : undefined;\n  let start = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  let end = arguments.length > 4 ? arguments[4] : undefined;\n\n  if (indices) {\n    indices = indices.values || indices.value || indices;\n  }\n\n  if (end === undefined) {\n    end = indices ? indices.length : start;\n  }\n\n  const info = {\n    attributes,\n    type: getPrimitiveModeType(mode),\n    i1: 0,\n    i2: 0,\n    i3: 0\n  };\n  let i = start;\n\n  while (i < end) {\n    switch (mode) {\n      case GL.POINTS:\n        info.i1 = i;\n        i += 1;\n        break;\n\n      case GL.LINES:\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 2;\n        break;\n\n      case GL.LINE_STRIP:\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n\n      case GL.LINE_LOOP:\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n\n      case GL.TRIANGLES:\n        info.i1 = i;\n        info.i2 = i + 1;\n        info.i3 = i + 2;\n        i += 3;\n        break;\n\n      case GL.TRIANGLE_STRIP:\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n\n      case GL.TRIANGLE_FAN:\n        info.i1 = 1;\n        info.i2 = i;\n        info.i3 = i + 1;\n        i += 1;\n        break;\n\n      default:\n        assert(false);\n    }\n\n    if (indices) {\n      if ('i1' in info) {\n        info.i1 = indices[info.i1];\n        info.i2 = indices[info.i2];\n        info.i3 = indices[info.i3];\n      }\n    }\n\n    yield info;\n  }\n}","map":{"version":3,"sources":["../../../../src/geometry/iterators/primitive-iterator.ts"],"names":["attributes","start","indices","end","info","type","getPrimitiveModeType","i1","i2","i3","i","GL","assert"],"mappings":"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","sourcesContent":["import {GL} from '../constants';\nimport {getPrimitiveModeType} from '../primitives/modes';\nimport {assert} from '@loaders.gl/loader-utils';\n\n/**\n * Iteration info for making primitive iterator\n */\ntype Information = {\n  attributes: object;\n  type: number | void;\n  i1: number;\n  i2: number;\n  i3: number;\n  primitiveIndex?: object;\n};\n/**\n * Will iterate over each primitive, expanding (dereferencing) indices\n * @param indices\n * @param attributes\n * @param mode\n * @param start\n * @param end\n */\n// eslint-disable-next-line complexity\nexport function* makePrimitiveIterator(\n  indices?: any,\n  attributes: object = {},\n  mode?: number,\n  start = 0,\n  end?: number\n): Iterable<{attributes: object; type: number; i1: number; i2: number; i3: number}> {\n  // support indices being an object with a values array\n  if (indices) {\n    indices = indices.values || indices.value || indices;\n  }\n\n  // Autodeduce length from indices\n  if (end === undefined) {\n    end = indices ? indices.length : start;\n  }\n\n  // iteration info\n  const info: Information = {\n    attributes,\n    type: getPrimitiveModeType(mode),\n    i1: 0,\n    i2: 0,\n    i3: 0\n  };\n\n  let i = start;\n  // @ts-ignore\n  while (i < end) {\n    switch (mode) {\n      case GL.POINTS: // draw single points.\n        info.i1 = i;\n        i += 1;\n        break;\n      case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 2;\n        break;\n      case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n        info.i1 = i;\n        info.i2 = i + 1;\n        info.i3 = i + 2;\n        i += 3;\n        break;\n      case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n        info.i1 = 1;\n        info.i2 = i;\n        info.i3 = i + 1;\n        i += 1;\n        break;\n\n      default:\n        assert(false);\n    }\n\n    // if indices are present, lookup actual vertices in indices\n    if (indices) {\n      if ('i1' in info) {\n        info.i1 = indices[info.i1];\n        info.i2 = indices[info.i2];\n        info.i3 = indices[info.i3];\n      }\n    }\n    // @ts-ignore\n    yield info;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}