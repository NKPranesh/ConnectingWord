{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nlet _Symbol$asyncIterator;\n\n_Symbol$asyncIterator = Symbol.asyncIterator;\nexport default class AsyncQueue {\n  constructor() {\n    _defineProperty(this, \"_values\", void 0);\n\n    _defineProperty(this, \"_settlers\", void 0);\n\n    _defineProperty(this, \"_closed\", void 0);\n\n    this._values = [];\n    this._settlers = [];\n    this._closed = false;\n  }\n\n  [_Symbol$asyncIterator]() {\n    return this;\n  }\n\n  push(value) {\n    return this.enqueue(value);\n  }\n\n  enqueue(value) {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n\n      const settler = this._settlers.shift();\n\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({\n          value\n        });\n      }\n    } else {\n      this._values.push(value);\n    }\n  }\n\n  close() {\n    while (this._settlers.length > 0) {\n      const settler = this._settlers.shift();\n\n      settler.resolve({\n        done: true\n      });\n    }\n\n    this._closed = true;\n  }\n\n  next() {\n    if (this._values.length > 0) {\n      const value = this._values.shift();\n\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n\n      return Promise.resolve({\n        done: false,\n        value\n      });\n    }\n\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n\n      return Promise.resolve({\n        done: true,\n        value: undefined\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._settlers.push({\n        resolve,\n        reject\n      });\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../../src/lib/async-queue/async-queue.ts"],"names":["constructor","Symbol","asyncIterator","push","enqueue","settler","value","close","done","next","Promise","undefined","reject"],"mappings":";;;;wBA2BGC,MAAM,CAACC,a;AAZV,eAAe,MAAA,UAAA,CAAoB;AAKjCF,EAAAA,WAAW,GAAG;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA;;AACZ,SAAA,OAAA,GAAA,EAAA;AACA,SAAA,SAAA,GAAA,EAAA;AACA,SAAA,OAAA,GAAA,KAAA;AACD;;AAGD,GAAA,qBAAA,IAA2C;AACzC,WAAA,IAAA;AACD;;AAGDG,EAAAA,IAAI,CAAA,KAAA,EAAiB;AACnB,WAAO,KAAA,OAAA,CAAP,KAAO,CAAP;AACD;;AAMDC,EAAAA,OAAO,CAAA,KAAA,EAAyB;AAC9B,QAAI,KAAJ,OAAA,EAAkB;AAChB,YAAM,IAAA,KAAA,CAAN,QAAM,CAAN;AACD;;AAED,QAAI,KAAA,SAAA,CAAA,MAAA,GAAJ,CAAA,EAA+B;AAC7B,UAAI,KAAA,OAAA,CAAA,MAAA,GAAJ,CAAA,EAA6B;AAC3B,cAAM,IAAA,KAAA,CAAN,wBAAM,CAAN;AACD;;AACD,YAAMC,OAAO,GAAG,KAAA,SAAA,CAAhB,KAAgB,EAAhB;;AACA,UAAIC,KAAK,YAAT,KAAA,EAA4B;AAC1BD,QAAAA,OAAO,CAAPA,MAAAA,CAAAA,KAAAA;AADF,OAAA,MAEO;AACLA,QAAAA,OAAO,CAAPA,OAAAA,CAAgB;AAACC,UAAAA;AAAD,SAAhBD;AACD;AATH,KAAA,MAUO;AACL,WAAA,OAAA,CAAA,IAAA,CAAA,KAAA;AACD;AACF;;AAGDE,EAAAA,KAAK,GAAS;AACZ,WAAO,KAAA,SAAA,CAAA,MAAA,GAAP,CAAA,EAAkC;AAChC,YAAMF,OAAO,GAAG,KAAA,SAAA,CAAhB,KAAgB,EAAhB;;AACAA,MAAAA,OAAO,CAAPA,OAAAA,CAAgB;AAACG,QAAAA,IAAI,EAAE;AAAP,OAAhBH;AACD;;AACD,SAAA,OAAA,GAAA,IAAA;AACD;;AAKDI,EAAAA,IAAI,GAAoC;AAEtC,QAAI,KAAA,OAAA,CAAA,MAAA,GAAJ,CAAA,EAA6B;AAC3B,YAAMH,KAAK,GAAG,KAAA,OAAA,CAAd,KAAc,EAAd;;AACA,UAAIA,KAAK,YAAT,KAAA,EAA4B;AAC1B,eAAOI,OAAO,CAAPA,MAAAA,CAAP,KAAOA,CAAP;AACD;;AACD,aAAO,OAAO,CAAP,OAAA,CAAgB;AAACF,QAAAA,IAAI,EAAL,KAAA;AAAcF,QAAAA;AAAd,OAAhB,CAAP;AACD;;AAGD,QAAI,KAAJ,OAAA,EAAkB;AAChB,UAAI,KAAA,SAAA,CAAA,MAAA,GAAJ,CAAA,EAA+B;AAC7B,cAAM,IAAA,KAAA,CAAN,wBAAM,CAAN;AACD;;AACD,aAAO,OAAO,CAAP,OAAA,CAAgB;AAACE,QAAAA,IAAI,EAAL,IAAA;AAAaF,QAAAA,KAAK,EAAEK;AAApB,OAAhB,CAAP;AACD;;AAGD,WAAO,IAAA,OAAA,CAAY,CAAA,OAAA,EAAA,MAAA,KAAqB;AACtC,WAAA,SAAA,CAAA,IAAA,CAAoB;AAAA,QAAA,OAAA;AAAUC,QAAAA;AAAV,OAApB;AADF,KAAO,CAAP;AAGD;;AA/EgC","sourcesContent":["// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license\n// http://2ality.com/2016/10/asynchronous-iteration.html\n\n/**\n * Async Queue\n * - AsyncIterable: An async iterator can be\n * - Values can be pushed onto the queue\n * @example\n *   const asyncQueue = new AsyncQueue();\n *   setTimeout(() => asyncQueue.enqueue('tick'), 1000);\n *   setTimeout(() => asyncQueue.enqueue(new Error('done')), 10000);\n *   for await (const value of asyncQueue) {\n *     console.log(value); // tick\n *   }\n */\nexport default class AsyncQueue<T> {\n  private _values: any[];\n  private _settlers: any[];\n  private _closed: boolean;\n\n  constructor() {\n    this._values = []; // enqueues > dequeues\n    this._settlers = []; // dequeues > enqueues\n    this._closed = false;\n  }\n\n  /** Return an async iterator for this queue */\n  [Symbol.asyncIterator](): AsyncIterator<T> {\n    return this;\n  }\n\n  /** Push a new value - the async iterator will yield a promise resolved to this value */\n  push(value: T): void {\n    return this.enqueue(value);\n  }\n\n  /**\n   * Push a new value - the async iterator will yield a promise resolved to this value\n   * Add an error - the async iterator will yield a promise rejected with this value\n   */\n  enqueue(value: T | Error): void {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      const settler = this._settlers.shift();\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({value});\n      }\n    } else {\n      this._values.push(value);\n    }\n  }\n\n  /** Indicate that we not waiting for more values - The async iterator will be done */\n  close(): void {\n    while (this._settlers.length > 0) {\n      const settler = this._settlers.shift();\n      settler.resolve({done: true});\n    }\n    this._closed = true;\n  }\n\n  // ITERATOR IMPLEMENTATION\n\n  /** @returns a Promise for an IteratorResult */\n  next(): Promise<IteratorResult<T, any>> {\n    // If values in queue, yield the first value\n    if (this._values.length > 0) {\n      const value = this._values.shift();\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n      return Promise.resolve({done: false, value});\n    }\n\n    // If queue is closed, the iterator is done\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      return Promise.resolve({done: true, value: undefined});\n    }\n\n    // Yield a promise that waits for new values to be enqueued\n    return new Promise((resolve, reject) => {\n      this._settlers.push({resolve, reject});\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}