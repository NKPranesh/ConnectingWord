{"ast":null,"code":"import Transition from './transition';\nconst EPSILON = 1e-5;\n\nfunction updateSpringElement(prev, cur, dest, damping, stiffness) {\n  const velocity = cur - prev;\n  const delta = dest - cur;\n  const spring = delta * stiffness;\n  const damper = -velocity * damping;\n  return spring + damper + velocity + cur;\n}\n\nfunction updateSpring(prev, cur, dest, damping, stiffness) {\n  if (Array.isArray(dest)) {\n    const next = [];\n\n    for (let i = 0; i < dest.length; i++) {\n      next[i] = updateSpringElement(prev[i], cur[i], dest[i], damping, stiffness);\n    }\n\n    return next;\n  }\n\n  return updateSpringElement(prev, cur, dest, damping, stiffness);\n}\n\nfunction distance(value1, value2) {\n  if (Array.isArray(value1)) {\n    let distanceSquare = 0;\n\n    for (let i = 0; i < value1.length; i++) {\n      const d = value1[i] - value2[i];\n      distanceSquare += d * d;\n    }\n\n    return Math.sqrt(distanceSquare);\n  }\n\n  return Math.abs(value1 - value2);\n}\n\nexport default class CPUSpringTransition extends Transition {\n  get value() {\n    return this._currValue;\n  }\n\n  _onUpdate() {\n    const {\n      fromValue,\n      toValue,\n      damping,\n      stiffness\n    } = this.settings;\n    const {\n      _prevValue = fromValue,\n      _currValue = fromValue\n    } = this;\n    let nextValue = updateSpring(_prevValue, _currValue, toValue, damping, stiffness);\n    const delta = distance(nextValue, toValue);\n    const velocity = distance(nextValue, _currValue);\n\n    if (delta < EPSILON && velocity < EPSILON) {\n      nextValue = toValue;\n      this.end();\n    }\n\n    this._prevValue = _currValue;\n    this._currValue = nextValue;\n  }\n\n}","map":{"version":3,"sources":["../../../src/transitions/cpu-spring-transition.js"],"names":["EPSILON","velocity","cur","delta","dest","spring","damper","Array","next","i","updateSpringElement","prev","distanceSquare","value1","d","value2","Math","value","_onUpdate","stiffness","_prevValue","_currValue","fromValue","nextValue","updateSpring","distance"],"mappings":"AAAA,OAAA,UAAA,MAAA,cAAA;AAEA,MAAMA,OAAO,GAAb,IAAA;;AAUA,SAAA,mBAAA,CAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,SAAA,EAAkE;AAChE,QAAMC,QAAQ,GAAGC,GAAG,GAApB,IAAA;AACA,QAAMC,KAAK,GAAGC,IAAI,GAAlB,GAAA;AACA,QAAMC,MAAM,GAAGF,KAAK,GAApB,SAAA;AACA,QAAMG,MAAM,GAAG,CAAA,QAAA,GAAf,OAAA;AACA,SAAOD,MAAM,GAANA,MAAAA,GAAAA,QAAAA,GAAP,GAAA;AACD;;AAUD,SAAA,YAAA,CAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,SAAA,EAA2D;AACzD,MAAIE,KAAK,CAALA,OAAAA,CAAJ,IAAIA,CAAJ,EAAyB;AACvB,UAAMC,IAAI,GAAV,EAAA;;AACA,SAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGL,IAAI,CAAxB,MAAA,EAAiCK,CAAjC,EAAA,EAAsC;AACpCD,MAAAA,IAAI,CAAJA,CAAI,CAAJA,GAAUE,mBAAmB,CAACC,IAAI,CAAL,CAAK,CAAL,EAAUT,GAAG,CAAb,CAAa,CAAb,EAAkBE,IAAI,CAAtB,CAAsB,CAAtB,EAAA,OAAA,EAA7BI,SAA6B,CAA7BA;AACD;;AACD,WAAA,IAAA;AACD;;AACD,SAAOE,mBAAmB,CAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAA1B,SAA0B,CAA1B;AACD;;AAKD,SAAA,QAAA,CAAA,MAAA,EAAA,MAAA,EAAkC;AAChC,MAAIH,KAAK,CAALA,OAAAA,CAAJ,MAAIA,CAAJ,EAA2B;AACzB,QAAIK,cAAc,GAAlB,CAAA;;AACA,SAAK,IAAIH,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGI,MAAM,CAA1B,MAAA,EAAmCJ,CAAnC,EAAA,EAAwC;AACtC,YAAMK,CAAC,GAAGD,MAAM,CAANA,CAAM,CAANA,GAAYE,MAAM,CAA5B,CAA4B,CAA5B;AACAH,MAAAA,cAAc,IAAIE,CAAC,GAAnBF,CAAAA;AACD;;AACD,WAAOI,IAAI,CAAJA,IAAAA,CAAP,cAAOA,CAAP;AACD;;AACD,SAAOA,IAAI,CAAJA,GAAAA,CAASH,MAAM,GAAtB,MAAOG,CAAP;AACD;;AAED,eAAe,MAAA,mBAAA,SAAA,UAAA,CAA6C;AAC1D,MAAIC,KAAJ,GAAY;AACV,WAAO,KAAP,UAAA;AACD;;AAEDC,EAAAA,SAAS,GAAG;AAIV,UAAM;AAAA,MAAA,SAAA;AAAA,MAAA,OAAA;AAAA,MAAA,OAAA;AAA8BC,MAAAA;AAA9B,QAA2C,KAAjD,QAAA;AACA,UAAM;AAACC,MAAAA,UAAU,GAAX,SAAA;AAAyBC,MAAAA,UAAU,GAAGC;AAAtC,QAAN,IAAA;AACA,QAAIC,SAAS,GAAGC,YAAY,CAAA,UAAA,EAAA,UAAA,EAAA,OAAA,EAAA,OAAA,EAA5B,SAA4B,CAA5B;AACA,UAAMrB,KAAK,GAAGsB,QAAQ,CAAA,SAAA,EAAtB,OAAsB,CAAtB;AACA,UAAMxB,QAAQ,GAAGwB,QAAQ,CAAA,SAAA,EAAzB,UAAyB,CAAzB;;AAEA,QAAItB,KAAK,GAALA,OAAAA,IAAmBF,QAAQ,GAA/B,OAAA,EAA2C;AACzCsB,MAAAA,SAAS,GAATA,OAAAA;AACA,WAAA,GAAA;AACD;;AAED,SAAA,UAAA,GAAA,UAAA;AACA,SAAA,UAAA,GAAA,SAAA;AACD;;AAtByD","sourcesContent":["import Transition from './transition';\n\nconst EPSILON = 1e-5;\n\n/*\n * Calculate the next value in the spring transition\n * @param prev {Number} - previous value\n * @param cur {Number} - current value\n * @param dest {Number} - destination value\n * @param damping {Number}\n * @param stiffness {Number}\n */\nfunction updateSpringElement(prev, cur, dest, damping, stiffness) {\n  const velocity = cur - prev;\n  const delta = dest - cur;\n  const spring = delta * stiffness;\n  const damper = -velocity * damping;\n  return spring + damper + velocity + cur;\n}\n\n/*\n * Calculate the next value in the spring transition\n * @param prev {Number|Array} - previous value\n * @param cur {Number|Array} - current value\n * @param dest {Number|Array} - destination value\n * @param damping {Number}\n * @param stiffness {Number}\n */\nfunction updateSpring(prev, cur, dest, damping, stiffness) {\n  if (Array.isArray(dest)) {\n    const next = [];\n    for (let i = 0; i < dest.length; i++) {\n      next[i] = updateSpringElement(prev[i], cur[i], dest[i], damping, stiffness);\n    }\n    return next;\n  }\n  return updateSpringElement(prev, cur, dest, damping, stiffness);\n}\n\n/*\n * Calculate the distance between two numbers or two vectors\n */\nfunction distance(value1, value2) {\n  if (Array.isArray(value1)) {\n    let distanceSquare = 0;\n    for (let i = 0; i < value1.length; i++) {\n      const d = value1[i] - value2[i];\n      distanceSquare += d * d;\n    }\n    return Math.sqrt(distanceSquare);\n  }\n  return Math.abs(value1 - value2);\n}\n\nexport default class CPUSpringTransition extends Transition {\n  get value() {\n    return this._currValue;\n  }\n\n  _onUpdate() {\n    // TODO - use timeline\n    // const {time} = this;\n\n    const {fromValue, toValue, damping, stiffness} = this.settings;\n    const {_prevValue = fromValue, _currValue = fromValue} = this;\n    let nextValue = updateSpring(_prevValue, _currValue, toValue, damping, stiffness);\n    const delta = distance(nextValue, toValue);\n    const velocity = distance(nextValue, _currValue);\n\n    if (delta < EPSILON && velocity < EPSILON) {\n      nextValue = toValue;\n      this.end();\n    }\n\n    this._prevValue = _currValue;\n    this._currValue = nextValue;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}