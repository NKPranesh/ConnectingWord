{"ast":null,"code":"import { project } from '../project/project';\nconst DEFAULT_LIGHT_DIRECTION = new Float32Array([1, 1, 2]);\nconst DEFAULT_MODULE_OPTIONS = {\n  lightDirection: DEFAULT_LIGHT_DIRECTION\n};\n\nfunction getUniforms() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;\n  const uniforms = {};\n\n  if (opts.lightDirection) {\n    uniforms.dirlight_uLightDirection = opts.lightDirection;\n  }\n\n  return uniforms;\n}\n\nconst vs = null;\nconst fs = `\\\nuniform vec3 dirlight_uLightDirection;\nvec4 dirlight_filterColor(vec4 color) {\n  vec3 normal = project_getNormal_World();\n  float d = abs(dot(normalize(normal), normalize(dirlight_uLightDirection)));\n  return vec4(color.rgb * d, color.a);\n}\n`;\nexport const dirlight = {\n  name: 'dirlight',\n  vs,\n  fs,\n  getUniforms,\n  dependencies: [project]\n};","map":{"version":3,"sources":["../../../../src/modules/dirlight/dirlight.js"],"names":["DEFAULT_LIGHT_DIRECTION","DEFAULT_MODULE_OPTIONS","lightDirection","opts","uniforms","vs","fs","dirlight","name","dependencies"],"mappings":"AAIA,SAAA,OAAA,QAAA,oBAAA;AAGA,MAAMA,uBAAuB,GAAG,IAAA,YAAA,CAAiB,CAAA,CAAA,EAAA,CAAA,EAAjD,CAAiD,CAAjB,CAAhC;AAEA,MAAMC,sBAAsB,GAAG;AAC7BC,EAAAA,cAAc,EAAEF;AADa,CAA/B;;AAIA,SAAA,WAAA,GAAoD;AAAA,MAA/BG,IAA+B,uEAApD,sBAAoD;AAClD,QAAMC,QAAQ,GAAd,EAAA;;AACA,MAAID,IAAI,CAAR,cAAA,EAAyB;AACvBC,IAAAA,QAAQ,CAARA,wBAAAA,GAAoCD,IAAI,CAAxCC,cAAAA;AACD;;AACD,SAAA,QAAA;AACD;;AAGD,MAAMC,EAAE,GAAR,IAAA;AAEA,MAAMC,EAAE,GAAI;AACZ;AACA;AACA;AACA;AACA;AACA;AANA,CAAA;AAaA,OAAO,MAAMC,QAAQ,GAAG;AACtBC,EAAAA,IAAI,EADkB,UAAA;AAAA,EAAA,EAAA;AAAA,EAAA,EAAA;AAAA,EAAA,WAAA;AAKtBC,EAAAA,YAAY,EAAE,CAAA,OAAA;AALQ,CAAjB","sourcesContent":["/** @typedef {import('../../types').ShaderModule} ShaderModule */\n\n// Cheap lighting - single directional light, single dot product, one uniform\n\nimport {project} from '../project/project';\n\n/* eslint-disable camelcase */\nconst DEFAULT_LIGHT_DIRECTION = new Float32Array([1, 1, 2]);\n\nconst DEFAULT_MODULE_OPTIONS = {\n  lightDirection: DEFAULT_LIGHT_DIRECTION\n};\n\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS) {\n  const uniforms = {};\n  if (opts.lightDirection) {\n    uniforms.dirlight_uLightDirection = opts.lightDirection;\n  }\n  return uniforms;\n}\n\n// TODO - reuse normal from geometry module\nconst vs = null;\n\nconst fs = `\\\nuniform vec3 dirlight_uLightDirection;\n\n/*\n * Returns color attenuated by angle from light source\n */\nvec4 dirlight_filterColor(vec4 color) {\n  vec3 normal = project_getNormal_World();\n  float d = abs(dot(normalize(normal), normalize(dirlight_uLightDirection)));\n  return vec4(color.rgb * d, color.a);\n}\n`;\n\nexport const dirlight = {\n  name: 'dirlight',\n  vs,\n  fs,\n  getUniforms,\n  dependencies: [project]\n};\n"]},"metadata":{},"sourceType":"module"}