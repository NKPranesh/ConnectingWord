{"ast":null,"code":"import { Model } from '@luma.gl/engine';\nimport ScenegraphNode from './scenegraph-node';\nexport default class ModelNode extends ScenegraphNode {\n  constructor(gl) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(props);\n    this.onBeforeRender = null;\n    this.AfterRender = null;\n\n    if (gl instanceof Model) {\n      this.model = gl;\n\n      this._setModelNodeProps(props);\n    } else {\n      this.model = new Model(gl, props);\n    }\n\n    this.managedResources = props.managedResources || [];\n  }\n\n  setProps(props) {\n    super.setProps(props);\n\n    this._setModelNodeProps(props);\n\n    return this;\n  }\n\n  delete() {\n    if (this.model) {\n      this.model.delete();\n      this.model = null;\n    }\n\n    this.managedResources.forEach(resource => resource.delete());\n    this.managedResources = [];\n  }\n\n  draw() {\n    return this.model.draw(...arguments);\n  }\n\n  setUniforms() {\n    this.model.setUniforms(...arguments);\n    return this;\n  }\n\n  setAttributes() {\n    this.model.setAttributes(...arguments);\n    return this;\n  }\n\n  updateModuleSettings() {\n    this.model.updateModuleSettings(...arguments);\n    return this;\n  }\n\n  _setModelNodeProps(props) {\n    this.model.setProps(props);\n  }\n\n}","map":{"version":3,"sources":["../../../src/scenegraph/model-node.js"],"names":["constructor","props","gl","setProps","delete","resource","draw","setUniforms","setAttributes","updateModuleSettings","_setModelNodeProps"],"mappings":"AAAA,SAAA,KAAA,QAAA,iBAAA;AACA,OAAA,cAAA,MAAA,mBAAA;AAEA,eAAe,MAAA,SAAA,SAAA,cAAA,CAAuC;AACpDA,EAAAA,WAAW,CAAA,EAAA,EAAiB;AAAA,QAAZC,KAAY,uEAAjB,EAAiB;AAC1B,UAAA,KAAA;AAGA,SAAA,cAAA,GAAA,IAAA;AACA,SAAA,WAAA,GAAA,IAAA;;AAGA,QAAIC,EAAE,YAAN,KAAA,EAAyB;AACvB,WAAA,KAAA,GAAA,EAAA;;AACA,WAAA,kBAAA,CAAA,KAAA;AAFF,KAAA,MAGO;AACL,WAAA,KAAA,GAAa,IAAA,KAAA,CAAA,EAAA,EAAb,KAAa,CAAb;AACD;;AAED,SAAA,gBAAA,GAAwBD,KAAK,CAALA,gBAAAA,IAAxB,EAAA;AACD;;AAEDE,EAAAA,QAAQ,CAAA,KAAA,EAAQ;AACd,UAAA,QAAA,CAAA,KAAA;;AACA,SAAA,kBAAA,CAAA,KAAA;;AACA,WAAA,IAAA;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAI,KAAJ,KAAA,EAAgB;AACd,WAAA,KAAA,CAAA,MAAA;AACA,WAAA,KAAA,GAAA,IAAA;AACD;;AAED,SAAA,gBAAA,CAAA,OAAA,CAA8BC,QAAQ,IAAIA,QAAQ,CAAlD,MAA0CA,EAA1C;AACA,SAAA,gBAAA,GAAA,EAAA;AACD;;AAGDC,EAAAA,IAAI,GAAU;AAEZ,WAAO,KAAA,KAAA,CAAA,IAAA,CAAP,YAAO,CAAP;AACD;;AAEDC,EAAAA,WAAW,GAAU;AACnB,SAAA,KAAA,CAAA,WAAA,CAAA,YAAA;AACA,WAAA,IAAA;AACD;;AAEDC,EAAAA,aAAa,GAAU;AACrB,SAAA,KAAA,CAAA,aAAA,CAAA,YAAA;AACA,WAAA,IAAA;AACD;;AAEDC,EAAAA,oBAAoB,GAAU;AAC5B,SAAA,KAAA,CAAA,oBAAA,CAAA,YAAA;AACA,WAAA,IAAA;AACD;;AAIDC,EAAAA,kBAAkB,CAAA,KAAA,EAAQ;AACxB,SAAA,KAAA,CAAA,QAAA,CAAA,KAAA;AACD;;AA5DmD","sourcesContent":["import {Model} from '@luma.gl/engine';\nimport ScenegraphNode from './scenegraph-node';\n\nexport default class ModelNode extends ScenegraphNode {\n  constructor(gl, props = {}) {\n    super(props);\n\n    // pverride callbacks to make sure we call them with this\n    this.onBeforeRender = null;\n    this.AfterRender = null;\n\n    // Create new Model or used supplied Model\n    if (gl instanceof Model) {\n      this.model = gl;\n      this._setModelNodeProps(props);\n    } else {\n      this.model = new Model(gl, props);\n    }\n\n    this.managedResources = props.managedResources || [];\n  }\n\n  setProps(props) {\n    super.setProps(props);\n    this._setModelNodeProps(props);\n    return this;\n  }\n\n  delete() {\n    if (this.model) {\n      this.model.delete();\n      this.model = null;\n    }\n\n    this.managedResources.forEach(resource => resource.delete());\n    this.managedResources = [];\n  }\n\n  // Forward node methods\n  draw(...args) {\n    // Return value indicates if something was actually drawn\n    return this.model.draw(...args);\n  }\n\n  setUniforms(...args) {\n    this.model.setUniforms(...args);\n    return this;\n  }\n\n  setAttributes(...args) {\n    this.model.setAttributes(...args);\n    return this;\n  }\n\n  updateModuleSettings(...args) {\n    this.model.updateModuleSettings(...args);\n    return this;\n  }\n\n  // PRIVATE\n\n  _setModelNodeProps(props) {\n    this.model.setProps(props);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}