{"ast":null,"code":"import { GL } from '@loaders.gl/math';\nimport Tile3DFeatureTable from '../classes/tile-3d-feature-table';\nimport { parse3DTileHeaderSync } from './helpers/parse-3d-tile-header';\nimport { parse3DTileTablesHeaderSync, parse3DTileTablesSync } from './helpers/parse-3d-tile-tables';\nimport { parse3DTileGLTFViewSync, extractGLTF, GLTF_FORMAT } from './helpers/parse-3d-tile-gltf-view';\nexport async function parseBatchedModel3DTile(tile, arrayBuffer, byteOffset, options, context) {\n  var _tile$gltf;\n\n  byteOffset = parseBatchedModel(tile, arrayBuffer, byteOffset, options, context);\n  await extractGLTF(tile, GLTF_FORMAT.EMBEDDED, options, context);\n  const extensions = tile === null || tile === void 0 ? void 0 : (_tile$gltf = tile.gltf) === null || _tile$gltf === void 0 ? void 0 : _tile$gltf.extensions;\n\n  if (extensions && extensions.CESIUM_RTC) {\n    tile.rtcCenter = extensions.CESIUM_RTC.center;\n  }\n\n  return byteOffset;\n}\n\nfunction parseBatchedModel(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n  byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset);\n  byteOffset = parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileGLTFViewSync(tile, arrayBuffer, byteOffset, options);\n  const featureTable = new Tile3DFeatureTable(tile.featureTableJson, tile.featureTableBinary);\n  tile.rtcCenter = featureTable.getGlobalProperty('RTC_CENTER', GL.FLOAT, 3);\n  return byteOffset;\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-3d-tile-batched-model.js"],"names":["byteOffset","parseBatchedModel","extractGLTF","GLTF_FORMAT","extensions","tile","parse3DTileHeaderSync","parse3DTileTablesHeaderSync","parse3DTileTablesSync","parse3DTileGLTFViewSync","featureTable","GL"],"mappings":"AAGA,SAAA,EAAA,QAAA,kBAAA;AACA,OAAA,kBAAA,MAAA,kCAAA;AAGA,SAAA,qBAAA,QAAA,gCAAA;AACA,SAAA,2BAAA,EAAA,qBAAA,QAAA,gCAAA;AACA,SAAA,uBAAA,EAAA,WAAA,EAAA,WAAA,QAAA,mCAAA;AAEA,OAAO,eAAA,uBAAA,CAAA,IAAA,EAAA,WAAA,EAAA,UAAA,EAAA,OAAA,EAAA,OAAA,EAAwF;AAAA,MAAA,UAAA;;AAC7FA,EAAAA,UAAU,GAAGC,iBAAiB,CAAA,IAAA,EAAA,WAAA,EAAA,UAAA,EAAA,OAAA,EAA9BD,OAA8B,CAA9BA;AACA,QAAME,WAAW,CAAA,IAAA,EAAOC,WAAW,CAAlB,QAAA,EAAA,OAAA,EAAjB,OAAiB,CAAjB;AAEA,QAAMC,UAAU,GAAGC,IAAH,KAAA,IAAGA,IAAAA,IAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAH,CAAA,UAAA,GAAGA,IAAI,CAAP,IAAA,MAAA,IAAA,IAAA,UAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,UAAAA,CAAnB,UAAA;;AACA,MAAID,UAAU,IAAIA,UAAU,CAA5B,UAAA,EAAyC;AACvCC,IAAAA,IAAI,CAAJA,SAAAA,GAAiBD,UAAU,CAAVA,UAAAA,CAAjBC,MAAAA;AACD;;AAED,SAAA,UAAA;AACD;;AAED,SAAA,iBAAA,CAAA,IAAA,EAAA,WAAA,EAAA,UAAA,EAAA,OAAA,EAAA,OAAA,EAA4E;AAC1EL,EAAAA,UAAU,GAAGM,qBAAqB,CAAA,IAAA,EAAA,WAAA,EAAlCN,UAAkC,CAAlCA;AAEAA,EAAAA,UAAU,GAAGO,2BAA2B,CAAA,IAAA,EAAA,WAAA,EAAxCP,UAAwC,CAAxCA;AACAA,EAAAA,UAAU,GAAGQ,qBAAqB,CAAA,IAAA,EAAA,WAAA,EAAA,UAAA,EAAlCR,OAAkC,CAAlCA;AAEAA,EAAAA,UAAU,GAAGS,uBAAuB,CAAA,IAAA,EAAA,WAAA,EAAA,UAAA,EAApCT,OAAoC,CAApCA;AAEA,QAAMU,YAAY,GAAG,IAAA,kBAAA,CAAuBL,IAAI,CAA3B,gBAAA,EAA8CA,IAAI,CAAvE,kBAAqB,CAArB;AACAA,EAAAA,IAAI,CAAJA,SAAAA,GAAiBK,YAAY,CAAZA,iBAAAA,CAAAA,YAAAA,EAA6CC,EAAE,CAA/CD,KAAAA,EAAjBL,CAAiBK,CAAjBL;AAEA,SAAA,UAAA;AACD","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {GL} from '@loaders.gl/math'; // math.gl/geometry;\nimport Tile3DFeatureTable from '../classes/tile-3d-feature-table';\n// import Tile3DBatchTable from '../classes/tile-3d-batch-table';\n\nimport {parse3DTileHeaderSync} from './helpers/parse-3d-tile-header';\nimport {parse3DTileTablesHeaderSync, parse3DTileTablesSync} from './helpers/parse-3d-tile-tables';\nimport {parse3DTileGLTFViewSync, extractGLTF, GLTF_FORMAT} from './helpers/parse-3d-tile-gltf-view';\n\nexport async function parseBatchedModel3DTile(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parseBatchedModel(tile, arrayBuffer, byteOffset, options, context);\n  await extractGLTF(tile, GLTF_FORMAT.EMBEDDED, options, context);\n\n  const extensions = tile?.gltf?.extensions;\n  if (extensions && extensions.CESIUM_RTC) {\n    tile.rtcCenter = extensions.CESIUM_RTC.center;\n  }\n\n  return byteOffset;\n}\n\nfunction parseBatchedModel(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n\n  byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset);\n  byteOffset = parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options);\n\n  byteOffset = parse3DTileGLTFViewSync(tile, arrayBuffer, byteOffset, options);\n\n  const featureTable = new Tile3DFeatureTable(tile.featureTableJson, tile.featureTableBinary);\n  tile.rtcCenter = featureTable.getGlobalProperty('RTC_CENTER', GL.FLOAT, 3);\n\n  return byteOffset;\n}\n"]},"metadata":{},"sourceType":"module"}