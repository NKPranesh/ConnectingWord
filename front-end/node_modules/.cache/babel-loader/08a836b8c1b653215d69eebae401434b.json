{"ast":null,"code":"import { assert } from '../utils/assert';\nimport { getAccessorArrayTypeAndLength } from '../gltf-utils/gltf-utils';\nconst COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\nconst BYTES = {\n  5120: 1,\n  5121: 1,\n  5122: 2,\n  5123: 2,\n  5125: 4,\n  5126: 4\n};\nconst GL_SAMPLER = {\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803,\n  REPEAT: 0x2901,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_LINEAR: 0x2702\n};\nconst SAMPLER_PARAMETER_GLTF_TO_GL = {\n  magFilter: GL_SAMPLER.TEXTURE_MAG_FILTER,\n  minFilter: GL_SAMPLER.TEXTURE_MIN_FILTER,\n  wrapS: GL_SAMPLER.TEXTURE_WRAP_S,\n  wrapT: GL_SAMPLER.TEXTURE_WRAP_T\n};\nconst DEFAULT_SAMPLER = {\n  [GL_SAMPLER.TEXTURE_MAG_FILTER]: GL_SAMPLER.LINEAR,\n  [GL_SAMPLER.TEXTURE_MIN_FILTER]: GL_SAMPLER.NEAREST_MIPMAP_LINEAR,\n  [GL_SAMPLER.TEXTURE_WRAP_S]: GL_SAMPLER.REPEAT,\n  [GL_SAMPLER.TEXTURE_WRAP_]: GL_SAMPLER.REPEAT\n};\n\nfunction getBytesFromComponentType(componentType) {\n  return BYTES[componentType];\n}\n\nfunction getSizeFromAccessorType(type) {\n  return COMPONENTS[type];\n}\n\nclass GLTFPostProcessor {\n  postProcess(gltf) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      json,\n      buffers = [],\n      images = [],\n      baseUri = ''\n    } = gltf;\n    assert(json);\n    this.baseUri = baseUri;\n    this.json = json;\n    this.buffers = buffers;\n    this.images = images;\n\n    this._resolveTree(this.json, options);\n\n    return this.json;\n  }\n\n  _resolveTree(json) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (json.bufferViews) {\n      json.bufferViews = json.bufferViews.map((bufView, i) => this._resolveBufferView(bufView, i));\n    }\n\n    if (json.images) {\n      json.images = json.images.map((image, i) => this._resolveImage(image, i));\n    }\n\n    if (json.samplers) {\n      json.samplers = json.samplers.map((sampler, i) => this._resolveSampler(sampler, i));\n    }\n\n    if (json.textures) {\n      json.textures = json.textures.map((texture, i) => this._resolveTexture(texture, i));\n    }\n\n    if (json.accessors) {\n      json.accessors = json.accessors.map((accessor, i) => this._resolveAccessor(accessor, i));\n    }\n\n    if (json.materials) {\n      json.materials = json.materials.map((material, i) => this._resolveMaterial(material, i));\n    }\n\n    if (json.meshes) {\n      json.meshes = json.meshes.map((mesh, i) => this._resolveMesh(mesh, i));\n    }\n\n    if (json.nodes) {\n      json.nodes = json.nodes.map((node, i) => this._resolveNode(node, i));\n    }\n\n    if (json.skins) {\n      json.skins = json.skins.map((skin, i) => this._resolveSkin(skin, i));\n    }\n\n    if (json.scenes) {\n      json.scenes = json.scenes.map((scene, i) => this._resolveScene(scene, i));\n    }\n\n    if (json.scene !== undefined) {\n      json.scene = json.scenes[this.json.scene];\n    }\n  }\n\n  getScene(index) {\n    return this._get('scenes', index);\n  }\n\n  getNode(index) {\n    return this._get('nodes', index);\n  }\n\n  getSkin(index) {\n    return this._get('skins', index);\n  }\n\n  getMesh(index) {\n    return this._get('meshes', index);\n  }\n\n  getMaterial(index) {\n    return this._get('materials', index);\n  }\n\n  getAccessor(index) {\n    return this._get('accessors', index);\n  }\n\n  getCamera(index) {\n    return null;\n  }\n\n  getTexture(index) {\n    return this._get('textures', index);\n  }\n\n  getSampler(index) {\n    return this._get('samplers', index);\n  }\n\n  getImage(index) {\n    return this._get('images', index);\n  }\n\n  getBufferView(index) {\n    return this._get('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this._get('buffers', index);\n  }\n\n  _get(array, index) {\n    if (typeof index === 'object') {\n      return index;\n    }\n\n    const object = this.json[array] && this.json[array][index];\n\n    if (!object) {\n      console.warn(\"glTF file error: Could not find \".concat(array, \"[\").concat(index, \"]\"));\n    }\n\n    return object;\n  }\n\n  _resolveScene(scene, index) {\n    scene.id = scene.id || \"scene-\".concat(index);\n    scene.nodes = (scene.nodes || []).map(node => this.getNode(node));\n    return scene;\n  }\n\n  _resolveNode(node, index) {\n    node.id = node.id || \"node-\".concat(index);\n\n    if (node.children) {\n      node.children = node.children.map(child => this.getNode(child));\n    }\n\n    if (node.mesh !== undefined) {\n      node.mesh = this.getMesh(node.mesh);\n    } else if (node.meshes !== undefined && node.meshes.length) {\n      node.mesh = node.meshes.reduce((accum, meshIndex) => {\n        const mesh = this.getMesh(meshIndex);\n        accum.id = mesh.id;\n        accum.primitives = accum.primitives.concat(mesh.primitives);\n        return accum;\n      }, {\n        primitives: []\n      });\n    }\n\n    if (node.camera !== undefined) {\n      node.camera = this.getCamera(node.camera);\n    }\n\n    if (node.skin !== undefined) {\n      node.skin = this.getSkin(node.skin);\n    }\n\n    return node;\n  }\n\n  _resolveSkin(skin, index) {\n    skin.id = skin.id || \"skin-\".concat(index);\n    skin.inverseBindMatrices = this.getAccessor(skin.inverseBindMatrices);\n    return skin;\n  }\n\n  _resolveMesh(mesh, index) {\n    mesh.id = mesh.id || \"mesh-\".concat(index);\n\n    if (mesh.primitives) {\n      mesh.primitives = mesh.primitives.map(primitive => {\n        primitive = { ...primitive\n        };\n        const attributes = primitive.attributes;\n        primitive.attributes = {};\n\n        for (const attribute in attributes) {\n          primitive.attributes[attribute] = this.getAccessor(attributes[attribute]);\n        }\n\n        if (primitive.indices !== undefined) {\n          primitive.indices = this.getAccessor(primitive.indices);\n        }\n\n        if (primitive.material !== undefined) {\n          primitive.material = this.getMaterial(primitive.material);\n        }\n\n        return primitive;\n      });\n    }\n\n    return mesh;\n  }\n\n  _resolveMaterial(material, index) {\n    material.id = material.id || \"material-\".concat(index);\n\n    if (material.normalTexture) {\n      material.normalTexture = { ...material.normalTexture\n      };\n      material.normalTexture.texture = this.getTexture(material.normalTexture.index);\n    }\n\n    if (material.occlusionTexture) {\n      material.occlustionTexture = { ...material.occlustionTexture\n      };\n      material.occlusionTexture.texture = this.getTexture(material.occlusionTexture.index);\n    }\n\n    if (material.emissiveTexture) {\n      material.emmisiveTexture = { ...material.emmisiveTexture\n      };\n      material.emissiveTexture.texture = this.getTexture(material.emissiveTexture.index);\n    }\n\n    if (!material.emissiveFactor) {\n      material.emissiveFactor = material.emmisiveTexture ? [1, 1, 1] : [0, 0, 0];\n    }\n\n    if (material.pbrMetallicRoughness) {\n      material.pbrMetallicRoughness = { ...material.pbrMetallicRoughness\n      };\n      const mr = material.pbrMetallicRoughness;\n\n      if (mr.baseColorTexture) {\n        mr.baseColorTexture = { ...mr.baseColorTexture\n        };\n        mr.baseColorTexture.texture = this.getTexture(mr.baseColorTexture.index);\n      }\n\n      if (mr.metallicRoughnessTexture) {\n        mr.metallicRoughnessTexture = { ...mr.metallicRoughnessTexture\n        };\n        mr.metallicRoughnessTexture.texture = this.getTexture(mr.metallicRoughnessTexture.index);\n      }\n    }\n\n    return material;\n  }\n\n  _resolveAccessor(accessor, index) {\n    accessor.id = accessor.id || \"accessor-\".concat(index);\n\n    if (accessor.bufferView !== undefined) {\n      accessor.bufferView = this.getBufferView(accessor.bufferView);\n    }\n\n    accessor.bytesPerComponent = getBytesFromComponentType(accessor.componentType);\n    accessor.components = getSizeFromAccessorType(accessor.type);\n    accessor.bytesPerElement = accessor.bytesPerComponent * accessor.components;\n\n    if (accessor.bufferView) {\n      const buffer = accessor.bufferView.buffer;\n      const {\n        ArrayType,\n        byteLength\n      } = getAccessorArrayTypeAndLength(accessor, accessor.bufferView);\n      const byteOffset = (accessor.bufferView.byteOffset || 0) + (accessor.byteOffset || 0) + buffer.byteOffset;\n      const cutBufffer = buffer.arrayBuffer.slice(byteOffset, byteOffset + byteLength);\n      accessor.value = new ArrayType(cutBufffer);\n    }\n\n    return accessor;\n  }\n\n  _resolveTexture(texture, index) {\n    texture.id = texture.id || \"texture-\".concat(index);\n    texture.sampler = 'sampler' in texture ? this.getSampler(texture.sampler) : DEFAULT_SAMPLER;\n    texture.source = this.getImage(texture.source);\n    return texture;\n  }\n\n  _resolveSampler(sampler, index) {\n    sampler.id = sampler.id || \"sampler-\".concat(index);\n    sampler.parameters = {};\n\n    for (const key in sampler) {\n      const glEnum = this._enumSamplerParameter(key);\n\n      if (glEnum !== undefined) {\n        sampler.parameters[glEnum] = sampler[key];\n      }\n    }\n\n    return sampler;\n  }\n\n  _enumSamplerParameter(key) {\n    return SAMPLER_PARAMETER_GLTF_TO_GL[key];\n  }\n\n  _resolveImage(image, index) {\n    image.id = image.id || \"image-\".concat(index);\n\n    if (image.bufferView !== undefined) {\n      image.bufferView = this.getBufferView(image.bufferView);\n    }\n\n    const preloadedImage = this.images[index];\n\n    if (preloadedImage) {\n      image.image = preloadedImage;\n    }\n\n    return image;\n  }\n\n  _resolveBufferView(bufferView, index) {\n    bufferView.id = bufferView.id || \"bufferView-\".concat(index);\n    const bufferIndex = bufferView.buffer;\n    bufferView.buffer = this.buffers[bufferIndex];\n    const arrayBuffer = this.buffers[bufferIndex].arrayBuffer;\n    let byteOffset = this.buffers[bufferIndex].byteOffset || 0;\n\n    if ('byteOffset' in bufferView) {\n      byteOffset += bufferView.byteOffset;\n    }\n\n    bufferView.data = new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n    return bufferView;\n  }\n\n  _resolveCamera(camera, index) {\n    camera.id = camera.id || \"camera-\".concat(index);\n\n    if (camera.perspective) {}\n\n    if (camera.orthographic) {}\n\n    return camera;\n  }\n\n}\n\nexport function postProcessGLTF(gltf, options) {\n  return new GLTFPostProcessor().postProcess(gltf, options);\n}","map":{"version":3,"sources":["../../../../src/lib/api/post-process-gltf.js"],"names":["COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","BYTES","GL_SAMPLER","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","REPEAT","LINEAR","NEAREST_MIPMAP_LINEAR","SAMPLER_PARAMETER_GLTF_TO_GL","magFilter","minFilter","wrapS","wrapT","DEFAULT_SAMPLER","postProcess","options","buffers","images","baseUri","assert","_resolveTree","json","getScene","getNode","getSkin","getMesh","getMaterial","getAccessor","getCamera","getTexture","getSampler","getImage","getBufferView","getBuffer","_get","object","console","_resolveScene","scene","node","_resolveNode","child","mesh","accum","primitives","_resolveSkin","skin","_resolveMesh","primitive","attributes","_resolveMaterial","material","normalTexture","occlustionTexture","emmisiveTexture","pbrMetallicRoughness","mr","baseColorTexture","metallicRoughnessTexture","_resolveAccessor","accessor","getBytesFromComponentType","getSizeFromAccessorType","buffer","byteLength","getAccessorArrayTypeAndLength","byteOffset","cutBufffer","_resolveTexture","texture","_resolveSampler","sampler","glEnum","_enumSamplerParameter","_resolveImage","image","preloadedImage","_resolveBufferView","bufferView","bufferIndex","arrayBuffer","_resolveCamera","camera"],"mappings":"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","sourcesContent":["import {assert} from '../utils/assert';\nimport {getAccessorArrayTypeAndLength} from '../gltf-utils/gltf-utils';\n\n// This is a post processor for loaded glTF files\n// The goal is to make the loaded data easier to use in WebGL applications\n//\n// Functions:\n// * Resolve indexed arrays structure of glTF into a linked tree.\n// * Translate stringified enum keys and values into WebGL constants.\n// * Load images (optional)\n\n// ENUM LOOKUP\n\nconst COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\nconst BYTES = {\n  5120: 1, // BYTE\n  5121: 1, // UNSIGNED_BYTE\n  5122: 2, // SHORT\n  5123: 2, // UNSIGNED_SHORT\n  5125: 4, // UNSIGNED_INT\n  5126: 4 // FLOAT\n};\n\nconst GL_SAMPLER = {\n  // Sampler parameters\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803,\n\n  // Sampler default values\n  REPEAT: 0x2901,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_LINEAR: 0x2702\n};\n\nconst SAMPLER_PARAMETER_GLTF_TO_GL = {\n  magFilter: GL_SAMPLER.TEXTURE_MAG_FILTER,\n  minFilter: GL_SAMPLER.TEXTURE_MIN_FILTER,\n  wrapS: GL_SAMPLER.TEXTURE_WRAP_S,\n  wrapT: GL_SAMPLER.TEXTURE_WRAP_T\n};\n\n// When undefined, a sampler with repeat wrapping and auto filtering should be used.\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#texture\nconst DEFAULT_SAMPLER = {\n  [GL_SAMPLER.TEXTURE_MAG_FILTER]: GL_SAMPLER.LINEAR,\n  [GL_SAMPLER.TEXTURE_MIN_FILTER]: GL_SAMPLER.NEAREST_MIPMAP_LINEAR,\n  [GL_SAMPLER.TEXTURE_WRAP_S]: GL_SAMPLER.REPEAT,\n  [GL_SAMPLER.TEXTURE_WRAP_]: GL_SAMPLER.REPEAT\n};\n\nfunction getBytesFromComponentType(componentType) {\n  return BYTES[componentType];\n}\n\nfunction getSizeFromAccessorType(type) {\n  return COMPONENTS[type];\n}\n\nclass GLTFPostProcessor {\n  postProcess(gltf, options = {}) {\n    const {json, buffers = [], images = [], baseUri = ''} = gltf;\n    assert(json);\n\n    this.baseUri = baseUri;\n    this.json = json;\n    this.buffers = buffers;\n    this.images = images;\n\n    this._resolveTree(this.json, options);\n\n    return this.json;\n  }\n\n  // Convert indexed glTF structure into tree structure\n  // cross-link index resolution, enum lookup, convenience calculations\n  // eslint-disable-next-line complexity\n  _resolveTree(json, options = {}) {\n    if (json.bufferViews) {\n      json.bufferViews = json.bufferViews.map((bufView, i) => this._resolveBufferView(bufView, i));\n    }\n    if (json.images) {\n      json.images = json.images.map((image, i) => this._resolveImage(image, i));\n    }\n    if (json.samplers) {\n      json.samplers = json.samplers.map((sampler, i) => this._resolveSampler(sampler, i));\n    }\n    if (json.textures) {\n      json.textures = json.textures.map((texture, i) => this._resolveTexture(texture, i));\n    }\n    if (json.accessors) {\n      json.accessors = json.accessors.map((accessor, i) => this._resolveAccessor(accessor, i));\n    }\n    if (json.materials) {\n      json.materials = json.materials.map((material, i) => this._resolveMaterial(material, i));\n    }\n    if (json.meshes) {\n      json.meshes = json.meshes.map((mesh, i) => this._resolveMesh(mesh, i));\n    }\n    if (json.nodes) {\n      json.nodes = json.nodes.map((node, i) => this._resolveNode(node, i));\n    }\n    if (json.skins) {\n      json.skins = json.skins.map((skin, i) => this._resolveSkin(skin, i));\n    }\n    if (json.scenes) {\n      json.scenes = json.scenes.map((scene, i) => this._resolveScene(scene, i));\n    }\n    if (json.scene !== undefined) {\n      json.scene = json.scenes[this.json.scene];\n    }\n  }\n\n  getScene(index) {\n    return this._get('scenes', index);\n  }\n\n  getNode(index) {\n    return this._get('nodes', index);\n  }\n\n  getSkin(index) {\n    return this._get('skins', index);\n  }\n\n  getMesh(index) {\n    return this._get('meshes', index);\n  }\n\n  getMaterial(index) {\n    return this._get('materials', index);\n  }\n\n  getAccessor(index) {\n    return this._get('accessors', index);\n  }\n\n  getCamera(index) {\n    return null; // TODO: fix this\n  }\n\n  getTexture(index) {\n    return this._get('textures', index);\n  }\n\n  getSampler(index) {\n    return this._get('samplers', index);\n  }\n\n  getImage(index) {\n    return this._get('images', index);\n  }\n\n  getBufferView(index) {\n    return this._get('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this._get('buffers', index);\n  }\n\n  _get(array, index) {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.json[array] && this.json[array][index];\n    if (!object) {\n      console.warn(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  // PARSING HELPERS\n\n  _resolveScene(scene, index) {\n    // scene = {...scene};\n    scene.id = scene.id || `scene-${index}`;\n    scene.nodes = (scene.nodes || []).map((node) => this.getNode(node));\n    return scene;\n  }\n\n  _resolveNode(node, index) {\n    // node = {...node};\n    node.id = node.id || `node-${index}`;\n    if (node.children) {\n      node.children = node.children.map((child) => this.getNode(child));\n    }\n    if (node.mesh !== undefined) {\n      node.mesh = this.getMesh(node.mesh);\n    } else if (node.meshes !== undefined && node.meshes.length) {\n      node.mesh = node.meshes.reduce(\n        (accum, meshIndex) => {\n          const mesh = this.getMesh(meshIndex);\n          accum.id = mesh.id;\n          accum.primitives = accum.primitives.concat(mesh.primitives);\n          return accum;\n        },\n        {primitives: []}\n      );\n    }\n    if (node.camera !== undefined) {\n      node.camera = this.getCamera(node.camera);\n    }\n    if (node.skin !== undefined) {\n      node.skin = this.getSkin(node.skin);\n    }\n    return node;\n  }\n\n  _resolveSkin(skin, index) {\n    // skin = {...skin};\n    skin.id = skin.id || `skin-${index}`;\n    skin.inverseBindMatrices = this.getAccessor(skin.inverseBindMatrices);\n    return skin;\n  }\n\n  _resolveMesh(mesh, index) {\n    // mesh = {...mesh};\n    mesh.id = mesh.id || `mesh-${index}`;\n    if (mesh.primitives) {\n      mesh.primitives = mesh.primitives.map((primitive) => {\n        primitive = {...primitive};\n        const attributes = primitive.attributes;\n        primitive.attributes = {};\n        for (const attribute in attributes) {\n          primitive.attributes[attribute] = this.getAccessor(attributes[attribute]);\n        }\n        if (primitive.indices !== undefined) {\n          primitive.indices = this.getAccessor(primitive.indices);\n        }\n        if (primitive.material !== undefined) {\n          primitive.material = this.getMaterial(primitive.material);\n        }\n        return primitive;\n      });\n    }\n    return mesh;\n  }\n\n  _resolveMaterial(material, index) {\n    // material = {...material};\n    material.id = material.id || `material-${index}`;\n    if (material.normalTexture) {\n      material.normalTexture = {...material.normalTexture};\n      material.normalTexture.texture = this.getTexture(material.normalTexture.index);\n    }\n    if (material.occlusionTexture) {\n      material.occlustionTexture = {...material.occlustionTexture};\n      material.occlusionTexture.texture = this.getTexture(material.occlusionTexture.index);\n    }\n    if (material.emissiveTexture) {\n      material.emmisiveTexture = {...material.emmisiveTexture};\n      material.emissiveTexture.texture = this.getTexture(material.emissiveTexture.index);\n    }\n    if (!material.emissiveFactor) {\n      material.emissiveFactor = material.emmisiveTexture ? [1, 1, 1] : [0, 0, 0];\n    }\n\n    if (material.pbrMetallicRoughness) {\n      material.pbrMetallicRoughness = {...material.pbrMetallicRoughness};\n      const mr = material.pbrMetallicRoughness;\n      if (mr.baseColorTexture) {\n        mr.baseColorTexture = {...mr.baseColorTexture};\n        mr.baseColorTexture.texture = this.getTexture(mr.baseColorTexture.index);\n      }\n      if (mr.metallicRoughnessTexture) {\n        mr.metallicRoughnessTexture = {...mr.metallicRoughnessTexture};\n        mr.metallicRoughnessTexture.texture = this.getTexture(mr.metallicRoughnessTexture.index);\n      }\n    }\n    return material;\n  }\n\n  _resolveAccessor(accessor, index) {\n    // accessor = {...accessor};\n    accessor.id = accessor.id || `accessor-${index}`;\n    if (accessor.bufferView !== undefined) {\n      // Draco encoded meshes don't have bufferView\n      accessor.bufferView = this.getBufferView(accessor.bufferView);\n    }\n\n    // Look up enums\n    accessor.bytesPerComponent = getBytesFromComponentType(accessor.componentType);\n    accessor.components = getSizeFromAccessorType(accessor.type);\n    accessor.bytesPerElement = accessor.bytesPerComponent * accessor.components;\n\n    // Create TypedArray for the accessor\n    // Note: The canonical way to instantiate is to ignore this array and create\n    // WebGLBuffer's using the bufferViews.\n    if (accessor.bufferView) {\n      const buffer = accessor.bufferView.buffer;\n      const {ArrayType, byteLength} = getAccessorArrayTypeAndLength(accessor, accessor.bufferView);\n      const byteOffset =\n        (accessor.bufferView.byteOffset || 0) + (accessor.byteOffset || 0) + buffer.byteOffset;\n      const cutBufffer = buffer.arrayBuffer.slice(byteOffset, byteOffset + byteLength);\n      accessor.value = new ArrayType(cutBufffer);\n    }\n\n    return accessor;\n  }\n\n  _resolveTexture(texture, index) {\n    // texture = {...texture};\n    texture.id = texture.id || `texture-${index}`;\n    texture.sampler = 'sampler' in texture ? this.getSampler(texture.sampler) : DEFAULT_SAMPLER;\n    texture.source = this.getImage(texture.source);\n    return texture;\n  }\n\n  _resolveSampler(sampler, index) {\n    // sampler = {...sampler};\n    sampler.id = sampler.id || `sampler-${index}`;\n    // Map textual parameters to GL parameter values\n    sampler.parameters = {};\n    for (const key in sampler) {\n      const glEnum = this._enumSamplerParameter(key);\n      if (glEnum !== undefined) {\n        sampler.parameters[glEnum] = sampler[key];\n      }\n    }\n    return sampler;\n  }\n\n  _enumSamplerParameter(key) {\n    return SAMPLER_PARAMETER_GLTF_TO_GL[key];\n  }\n\n  _resolveImage(image, index) {\n    // image = {...image};\n    image.id = image.id || `image-${index}`;\n    if (image.bufferView !== undefined) {\n      image.bufferView = this.getBufferView(image.bufferView);\n    }\n\n    // Check if image has been preloaded by the GLTFLoader\n    // If so, link it into the JSON and drop the URI\n    const preloadedImage = this.images[index];\n    if (preloadedImage) {\n      image.image = preloadedImage;\n    }\n\n    return image;\n  }\n\n  _resolveBufferView(bufferView, index) {\n    // bufferView = {...bufferView};\n    bufferView.id = bufferView.id || `bufferView-${index}`;\n    const bufferIndex = bufferView.buffer;\n    bufferView.buffer = this.buffers[bufferIndex];\n\n    const arrayBuffer = this.buffers[bufferIndex].arrayBuffer;\n    let byteOffset = this.buffers[bufferIndex].byteOffset || 0;\n\n    if ('byteOffset' in bufferView) {\n      byteOffset += bufferView.byteOffset;\n    }\n\n    bufferView.data = new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n    return bufferView;\n  }\n\n  _resolveCamera(camera, index) {\n    camera.id = camera.id || `camera-${index}`;\n    // TODO - create 4x4 matrices\n    if (camera.perspective) {\n      // camera.matrix = createPerspectiveMatrix(camera.perspective);\n    }\n    if (camera.orthographic) {\n      // camera.matrix = createOrthographicMatrix(camera.orthographic);\n    }\n    return camera;\n  }\n}\n\nexport function postProcessGLTF(gltf, options) {\n  return new GLTFPostProcessor().postProcess(gltf, options);\n}\n"]},"metadata":{},"sourceType":"module"}