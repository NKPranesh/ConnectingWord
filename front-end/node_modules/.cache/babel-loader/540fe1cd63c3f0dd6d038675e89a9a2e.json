{"ast":null,"code":"import { GL, GLType } from '@loaders.gl/math';\nexport default class Tile3DFeatureTable {\n  constructor(featureTableJson, featureTableBinary) {\n    this.json = featureTableJson;\n    this.buffer = featureTableBinary;\n    this.featuresLength = 0;\n    this._cachedTypedArrays = {};\n  }\n\n  getExtension(extensionName) {\n    return this.json.extensions && this.json.extensions[extensionName];\n  }\n\n  hasProperty(propertyName) {\n    return Boolean(this.json[propertyName]);\n  }\n\n  getGlobalProperty(propertyName) {\n    let componentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : GL.UNSIGNED_INT;\n    let componentLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    const jsonValue = this.json[propertyName];\n\n    if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n      return this._getTypedArrayFromBinary(propertyName, componentType, componentLength, 1, jsonValue.byteOffset);\n    }\n\n    return jsonValue;\n  }\n\n  getPropertyArray(propertyName, componentType, componentLength) {\n    const jsonValue = this.json[propertyName];\n\n    if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n      if ('componentType' in jsonValue) {\n        componentType = GLType.fromName(jsonValue.componentType);\n      }\n\n      return this._getTypedArrayFromBinary(propertyName, componentType, componentLength, this.featuresLength, jsonValue.byteOffset);\n    }\n\n    return this._getTypedArrayFromArray(propertyName, componentType, jsonValue);\n  }\n\n  getProperty(propertyName, componentType, componentLength, featureId, result) {\n    const jsonValue = this.json[propertyName];\n\n    if (!jsonValue) {\n      return jsonValue;\n    }\n\n    const typedArray = this.getPropertyArray(propertyName, componentType, componentLength);\n\n    if (componentLength === 1) {\n      return typedArray[featureId];\n    }\n\n    for (let i = 0; i < componentLength; ++i) {\n      result[i] = typedArray[componentLength * featureId + i];\n    }\n\n    return result;\n  }\n\n  _getTypedArrayFromBinary(propertyName, componentType, componentLength, count, byteOffset) {\n    const cachedTypedArrays = this._cachedTypedArrays;\n    let typedArray = cachedTypedArrays[propertyName];\n\n    if (!typedArray) {\n      typedArray = GLType.createTypedArray(componentType, this.buffer.buffer, this.buffer.byteOffset + byteOffset, count * componentLength);\n      cachedTypedArrays[propertyName] = typedArray;\n    }\n\n    return typedArray;\n  }\n\n  _getTypedArrayFromArray(propertyName, componentType, array) {\n    const cachedTypedArrays = this._cachedTypedArrays;\n    let typedArray = cachedTypedArrays[propertyName];\n\n    if (!typedArray) {\n      typedArray = GLType.createTypedArray(componentType, array);\n      cachedTypedArrays[propertyName] = typedArray;\n    }\n\n    return typedArray;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/lib/classes/tile-3d-feature-table.js"],"names":["constructor","getExtension","hasProperty","Boolean","getGlobalProperty","componentType","GL","componentLength","jsonValue","Number","getPropertyArray","GLType","getProperty","typedArray","i","result","_getTypedArrayFromBinary","cachedTypedArrays","count","_getTypedArrayFromArray"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {GL, GLType} from '@loaders.gl/math';\n\n// Reference:\n// https://github.com/AnalyticalGraphicsInc/cesium/blob/1de96d087f0b17575eb1a3f736407b348c765d59/Source/Scene/Cesium3DTileFeatureTable.js\nexport default class Tile3DFeatureTable {\n  constructor(featureTableJson, featureTableBinary) {\n    this.json = featureTableJson;\n    this.buffer = featureTableBinary;\n    this.featuresLength = 0;\n    this._cachedTypedArrays = {};\n  }\n\n  getExtension(extensionName) {\n    return this.json.extensions && this.json.extensions[extensionName];\n  }\n\n  hasProperty(propertyName) {\n    return Boolean(this.json[propertyName]);\n  }\n\n  getGlobalProperty(propertyName, componentType = GL.UNSIGNED_INT, componentLength = 1) {\n    const jsonValue = this.json[propertyName];\n\n    if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n      return this._getTypedArrayFromBinary(\n        propertyName,\n        componentType,\n        componentLength,\n        1,\n        jsonValue.byteOffset\n      );\n    }\n\n    return jsonValue;\n  }\n\n  getPropertyArray(propertyName, componentType, componentLength) {\n    const jsonValue = this.json[propertyName];\n\n    if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n      if ('componentType' in jsonValue) {\n        componentType = GLType.fromName(jsonValue.componentType);\n      }\n      return this._getTypedArrayFromBinary(\n        propertyName,\n        componentType,\n        componentLength,\n        this.featuresLength,\n        jsonValue.byteOffset\n      );\n    }\n\n    return this._getTypedArrayFromArray(propertyName, componentType, jsonValue);\n  }\n\n  getProperty(propertyName, componentType, componentLength, featureId, result) {\n    const jsonValue = this.json[propertyName];\n    if (!jsonValue) {\n      return jsonValue;\n    }\n\n    const typedArray = this.getPropertyArray(propertyName, componentType, componentLength);\n\n    if (componentLength === 1) {\n      return typedArray[featureId];\n    }\n\n    for (let i = 0; i < componentLength; ++i) {\n      result[i] = typedArray[componentLength * featureId + i];\n    }\n\n    return result;\n  }\n\n  // HELPERS\n\n  _getTypedArrayFromBinary(propertyName, componentType, componentLength, count, byteOffset) {\n    const cachedTypedArrays = this._cachedTypedArrays;\n    let typedArray = cachedTypedArrays[propertyName];\n    if (!typedArray) {\n      typedArray = GLType.createTypedArray(\n        componentType,\n        this.buffer.buffer,\n        this.buffer.byteOffset + byteOffset,\n        count * componentLength\n      );\n      cachedTypedArrays[propertyName] = typedArray;\n    }\n    return typedArray;\n  }\n\n  _getTypedArrayFromArray(propertyName, componentType, array) {\n    const cachedTypedArrays = this._cachedTypedArrays;\n    let typedArray = cachedTypedArrays[propertyName];\n    if (!typedArray) {\n      typedArray = GLType.createTypedArray(componentType, array);\n      cachedTypedArrays[propertyName] = typedArray;\n    }\n    return typedArray;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}