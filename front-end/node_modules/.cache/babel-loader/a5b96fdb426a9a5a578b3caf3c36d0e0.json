{"ast":null,"code":"import { random } from '../utils/random';\nconst fs = `\\\nuniform float blurRadius;\nuniform float gradientRadius;\nuniform vec2 start;\nuniform vec2 end;\nuniform bool invert;\n\nvec2 tiltShift_getDelta(vec2 texSize) {\n  vec2 vector = normalize((end - start) * texSize);\n  return invert ? vec2(-vector.y, vector.x) : vector;\n}\n\nvec4 tiltShift_sampleColor(sampler2D texture, vec2 texSize, vec2 texCoord) {\n  vec4 color = vec4(0.0);\n  float total = 0.0;\n  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\n  vec2 normal = normalize(vec2((start.y - end.y) * texSize.y, (end.x - start.x) * texSize.x));\n  float radius = smoothstep(0.0, 1.0,\n    abs(dot(texCoord * texSize - start * texSize, normal)) / gradientRadius) * blurRadius;\n\n  for (float t = -30.0; t <= 30.0; t++) {\n    float percent = (t + offset - 0.5) / 30.0;\n    float weight = 1.0 - abs(percent);\n    vec4 sample = texture2D(texture, texCoord + tiltShift_getDelta(texSize) / texSize * percent * radius);\n    sample.rgb *= sample.a;\n\n    color += sample * weight;\n    total += weight;\n  }\n\n  color = color / total;\n  color.rgb /= color.a + 0.00001;\n\n  return color;\n}\n`;\nconst uniforms = {\n  blurRadius: {\n    value: 15,\n    min: 0,\n    max: 50\n  },\n  gradientRadius: {\n    value: 200,\n    min: 0,\n    max: 400\n  },\n  start: [0, 0],\n  end: [1, 1],\n  invert: {\n    value: false,\n    private: true\n  }\n};\nexport const tiltShift = {\n  name: 'tiltShift',\n  uniforms,\n  fs,\n  dependencies: [random],\n  passes: [{\n    sampler: true,\n    uniforms: {\n      invert: false\n    }\n  }, {\n    sampler: true,\n    uniforms: {\n      invert: true\n    }\n  }]\n};","map":{"version":3,"sources":["../../../../src/modules/image-blur-filters/tiltshift.js"],"names":["fs","uniforms","blurRadius","value","min","max","gradientRadius","start","end","invert","private","tiltShift","name","dependencies","passes","sampler"],"mappings":"AACA,SAAA,MAAA,QAAA,iBAAA;AAEA,MAAMA,EAAE,GAAI;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnCA,CAAA;AA4CA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,UAAU,EAAE;AAACC,IAAAA,KAAK,EAAN,EAAA;AAAYC,IAAAA,GAAG,EAAf,CAAA;AAAoBC,IAAAA,GAAG,EAAE;AAAzB,GADG;AAEfC,EAAAA,cAAc,EAAE;AAACH,IAAAA,KAAK,EAAN,GAAA;AAAaC,IAAAA,GAAG,EAAhB,CAAA;AAAqBC,IAAAA,GAAG,EAAE;AAA1B,GAFD;AAGfE,EAAAA,KAAK,EAAE,CAAA,CAAA,EAHQ,CAGR,CAHQ;AAIfC,EAAAA,GAAG,EAAE,CAAA,CAAA,EAJU,CAIV,CAJU;AAKfC,EAAAA,MAAM,EAAE;AAACN,IAAAA,KAAK,EAAN,KAAA;AAAeO,IAAAA,OAAO,EAAE;AAAxB;AALO,CAAjB;AASA,OAAO,MAAMC,SAAS,GAAG;AACvBC,EAAAA,IAAI,EADmB,WAAA;AAAA,EAAA,QAAA;AAAA,EAAA,EAAA;AAIvBC,EAAAA,YAAY,EAAE,CAJS,MAIT,CAJS;AAKvBC,EAAAA,MAAM,EAAE,CAAC;AAACC,IAAAA,OAAO,EAAR,IAAA;AAAgBd,IAAAA,QAAQ,EAAE;AAACQ,MAAAA,MAAM,EAAE;AAAT;AAA1B,GAAD,EAA6C;AAACM,IAAAA,OAAO,EAAR,IAAA;AAAgBd,IAAAA,QAAQ,EAAE;AAACQ,MAAAA,MAAM,EAAE;AAAT;AAA1B,GAA7C;AALe,CAAlB","sourcesContent":["/** @typedef {import('../../types').ShaderPass} ShaderPass */\nimport {random} from '../utils/random';\n\nconst fs = `\\\nuniform float blurRadius;\nuniform float gradientRadius;\nuniform vec2 start;\nuniform vec2 end;\nuniform bool invert;\n\nvec2 tiltShift_getDelta(vec2 texSize) {\n  vec2 vector = normalize((end - start) * texSize);\n  return invert ? vec2(-vector.y, vector.x) : vector;\n}\n\nvec4 tiltShift_sampleColor(sampler2D texture, vec2 texSize, vec2 texCoord) {\n  vec4 color = vec4(0.0);\n  float total = 0.0;\n\n  /* randomize the lookup values to hide the fixed number of samples */\n  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\n  vec2 normal = normalize(vec2((start.y - end.y) * texSize.y, (end.x - start.x) * texSize.x));\n  float radius = smoothstep(0.0, 1.0,\n    abs(dot(texCoord * texSize - start * texSize, normal)) / gradientRadius) * blurRadius;\n\n  for (float t = -30.0; t <= 30.0; t++) {\n    float percent = (t + offset - 0.5) / 30.0;\n    float weight = 1.0 - abs(percent);\n    vec4 sample = texture2D(texture, texCoord + tiltShift_getDelta(texSize) / texSize * percent * radius);\n\n    /* switch to pre-multiplied alpha to correctly blur transparent images */\n    sample.rgb *= sample.a;\n\n    color += sample * weight;\n    total += weight;\n  }\n\n  color = color / total;\n\n  /* switch back from pre-multiplied alpha */\n  color.rgb /= color.a + 0.00001;\n\n  return color;\n}\n`;\n\nconst uniforms = {\n  blurRadius: {value: 15, min: 0, max: 50},\n  gradientRadius: {value: 200, min: 0, max: 400},\n  start: [0, 0],\n  end: [1, 1],\n  invert: {value: false, private: true}\n};\n\n/** @type {ShaderPass} */\nexport const tiltShift = {\n  name: 'tiltShift',\n  uniforms,\n  fs,\n  dependencies: [random],\n  passes: [{sampler: true, uniforms: {invert: false}}, {sampler: true, uniforms: {invert: true}}]\n};\n\n/*\nfunction tiltShift(startX, startY, endX, endY, blurRadius, gradientRadius) {\n  var dx = endX - startX;\n  var dy = endY - startY;\n  var d = Math.sqrt(dx * dx + dy * dy);\n  simpleShader.call(this, gl.tiltShift, {\n    blurRadius: blurRadius,\n    gradientRadius: gradientRadius,\n    start: [startX, startY],\n    end: [endX, endY],\n    delta: [dx / d, dy / d],\n    texSize: [this.width, this.height]\n  });\n  simpleShader.call(this, gl.tiltShift, {\n    blurRadius: blurRadius,\n    gradientRadius: gradientRadius,\n    start: [startX, startY],\n    end: [endX, endY],\n    delta: [-dy / d, dx / d],\n    texSize: [this.width, this.height]\n  });\n\n  return this;\n}\n*/\n"]},"metadata":{},"sourceType":"module"}