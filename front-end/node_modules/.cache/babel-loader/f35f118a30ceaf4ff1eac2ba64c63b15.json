{"ast":null,"code":"import { Vector3, Vector4, assert } from '@math.gl/core';\nimport { INTERSECTION } from '../constants';\nimport Plane from './plane';\nconst faces = [new Vector3([1, 0, 0]), new Vector3([0, 1, 0]), new Vector3([0, 0, 1])];\nconst scratchPlaneCenter = new Vector3();\nconst scratchPlaneNormal = new Vector3();\nconst scratchPlane = new Plane(new Vector3(1.0, 0.0, 0.0), 0.0);\nexport default class CullingVolume {\n  static get MASK_OUTSIDE() {\n    return 0xffffffff;\n  }\n\n  static get MASK_INSIDE() {\n    return 0x00000000;\n  }\n\n  static get MASK_INDETERMINATE() {\n    return 0x7fffffff;\n  }\n\n  constructor() {\n    let planes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    this.planes = planes;\n    assert(this.planes.every(plane => plane instanceof Plane));\n  }\n\n  fromBoundingSphere(boundingSphere) {\n    this.planes.length = 2 * faces.length;\n    const center = boundingSphere.center;\n    const radius = boundingSphere.radius;\n    let planeIndex = 0;\n\n    for (const faceNormal of faces) {\n      let plane0 = this.planes[planeIndex];\n      let plane1 = this.planes[planeIndex + 1];\n\n      if (!plane0) {\n        plane0 = this.planes[planeIndex] = new Plane();\n      }\n\n      if (!plane1) {\n        plane1 = this.planes[planeIndex + 1] = new Plane();\n      }\n\n      const plane0Center = scratchPlaneCenter.copy(faceNormal).scale(-radius).add(center);\n      const plane0Distance = -faceNormal.dot(plane0Center);\n      plane0.fromPointNormal(plane0Center, faceNormal);\n      const plane1Center = scratchPlaneCenter.copy(faceNormal).scale(radius).add(center);\n      const negatedFaceNormal = scratchPlaneNormal.copy(faceNormal).negate();\n      const plane1Distance = -negatedFaceNormal.dot(plane1Center);\n      plane1.fromPointNormal(plane1Center, negatedFaceNormal);\n      planeIndex += 2;\n    }\n\n    return this;\n  }\n\n  computeVisibility(boundingVolume) {\n    assert(boundingVolume);\n    let intersect = INTERSECTION.INSIDE;\n\n    for (const plane of this.planes) {\n      const result = boundingVolume.intersectPlane(plane);\n\n      switch (result) {\n        case INTERSECTION.OUTSIDE:\n          return INTERSECTION.OUTSIDE;\n\n        case INTERSECTION.INTERSECTING:\n          intersect = INTERSECTION.INTERSECTING;\n          break;\n\n        default:\n      }\n    }\n\n    return intersect;\n  }\n\n  computeVisibilityWithPlaneMask(boundingVolume, parentPlaneMask) {\n    assert(boundingVolume, 'boundingVolume is required.');\n    assert(Number.isFinite(parentPlaneMask), 'parentPlaneMask is required.');\n\n    if (parentPlaneMask === CullingVolume.MASK_OUTSIDE || parentPlaneMask === CullingVolume.MASK_INSIDE) {\n      return parentPlaneMask;\n    }\n\n    let mask = CullingVolume.MASK_INSIDE;\n    const planes = this.planes;\n\n    for (let k = 0; k < this.planes.length; ++k) {\n      const flag = k < 31 ? 1 << k : 0;\n\n      if (k < 31 && (parentPlaneMask & flag) === 0) {\n        continue;\n      }\n\n      const plane = planes[k];\n      const result = boundingVolume.intersectPlane(plane);\n\n      if (result === INTERSECTION.OUTSIDE) {\n        return CullingVolume.MASK_OUTSIDE;\n      } else if (result === INTERSECTION.INTERSECTING) {\n        mask |= flag;\n      }\n    }\n\n    return mask;\n  }\n\n}","map":{"version":3,"sources":["../../../src/lib/culling-volume.js"],"names":["faces","scratchPlaneCenter","scratchPlaneNormal","scratchPlane","MASK_OUTSIDE","MASK_INSIDE","MASK_INDETERMINATE","constructor","planes","assert","plane","fromBoundingSphere","center","boundingSphere","radius","planeIndex","plane0","plane1","plane0Center","plane0Distance","faceNormal","plane1Center","negatedFaceNormal","plane1Distance","computeVisibility","intersect","INTERSECTION","result","boundingVolume","computeVisibilityWithPlaneMask","Number","parentPlaneMask","CullingVolume","mask","k","flag"],"mappings":"AAIA,SAAA,OAAA,EAAA,OAAA,EAAA,MAAA,QAAA,eAAA;AACA,SAAA,YAAA,QAAA,cAAA;AACA,OAAA,KAAA,MAAA,SAAA;AAGA,MAAMA,KAAK,GAAG,CAAC,IAAA,OAAA,CAAY,CAAA,CAAA,EAAA,CAAA,EAAb,CAAa,CAAZ,CAAD,EAAyB,IAAA,OAAA,CAAY,CAAA,CAAA,EAAA,CAAA,EAArC,CAAqC,CAAZ,CAAzB,EAAiD,IAAA,OAAA,CAAY,CAAA,CAAA,EAAA,CAAA,EAA3E,CAA2E,CAAZ,CAAjD,CAAd;AAEA,MAAMC,kBAAkB,GAAG,IAA3B,OAA2B,EAA3B;AACA,MAAMC,kBAAkB,GAAG,IAA3B,OAA2B,EAA3B;AACA,MAAMC,YAAY,GAAG,IAAA,KAAA,CAAU,IAAA,OAAA,CAAA,GAAA,EAAA,GAAA,EAAV,GAAU,CAAV,EAArB,GAAqB,CAArB;AAGA,eAAe,MAAA,aAAA,CAAoB;AAGV,aAAZC,YAAY,GAAG;AACxB,WAAA,UAAA;AACD;;AAIqB,aAAXC,WAAW,GAAG;AACvB,WAAA,UAAA;AACD;;AAI4B,aAAlBC,kBAAkB,GAAG;AAC9B,WAAA,UAAA;AACD;;AAEDC,EAAAA,WAAW,GAAc;AAAA,QAAbC,MAAa,uEAAd,EAAc;AAEvB,SAAA,MAAA,GAAA,MAAA;AACAC,IAAAA,MAAM,CAAC,KAAA,MAAA,CAAA,KAAA,CAAmBC,KAAD,IAAWA,KAAK,YAAzCD,KAAO,CAAD,CAANA;AACD;;AAIDE,EAAAA,kBAAkB,CAAA,cAAA,EAAiB;AACjC,SAAA,MAAA,CAAA,MAAA,GAAqB,IAAIX,KAAK,CAA9B,MAAA;AAEA,UAAMY,MAAM,GAAGC,cAAc,CAA7B,MAAA;AACA,UAAMC,MAAM,GAAGD,cAAc,CAA7B,MAAA;AAEA,QAAIE,UAAU,GAAd,CAAA;;AAEA,SAAK,MAAL,UAAA,IAAA,KAAA,EAAgC;AAC9B,UAAIC,MAAM,GAAG,KAAA,MAAA,CAAb,UAAa,CAAb;AACA,UAAIC,MAAM,GAAG,KAAA,MAAA,CAAYF,UAAU,GAAnC,CAAa,CAAb;;AAEA,UAAI,CAAJ,MAAA,EAAa;AACXC,QAAAA,MAAM,GAAG,KAAA,MAAA,CAAA,UAAA,IAA0B,IAAnCA,KAAmC,EAAnCA;AACD;;AACD,UAAI,CAAJ,MAAA,EAAa;AACXC,QAAAA,MAAM,GAAG,KAAA,MAAA,CAAYF,UAAU,GAAtB,CAAA,IAA8B,IAAvCE,KAAuC,EAAvCA;AACD;;AAED,YAAMC,YAAY,GAAGjB,kBAAkB,CAAlBA,IAAAA,CAAAA,UAAAA,EAAAA,KAAAA,CAA0C,CAA1CA,MAAAA,EAAAA,GAAAA,CAArB,MAAqBA,CAArB;AACA,YAAMkB,cAAc,GAAG,CAACC,UAAU,CAAVA,GAAAA,CAAxB,YAAwBA,CAAxB;AAEAJ,MAAAA,MAAM,CAANA,eAAAA,CAAAA,YAAAA,EAAAA,UAAAA;AAEA,YAAMK,YAAY,GAAGpB,kBAAkB,CAAlBA,IAAAA,CAAAA,UAAAA,EAAAA,KAAAA,CAAAA,MAAAA,EAAAA,GAAAA,CAArB,MAAqBA,CAArB;AAEA,YAAMqB,iBAAiB,GAAGpB,kBAAkB,CAAlBA,IAAAA,CAAAA,UAAAA,EAA1B,MAA0BA,EAA1B;AAEA,YAAMqB,cAAc,GAAG,CAACD,iBAAiB,CAAjBA,GAAAA,CAAxB,YAAwBA,CAAxB;AAEAL,MAAAA,MAAM,CAANA,eAAAA,CAAAA,YAAAA,EAAAA,iBAAAA;AAEAF,MAAAA,UAAU,IAAVA,CAAAA;AACD;;AAED,WAAA,IAAA;AACD;;AAGDS,EAAAA,iBAAiB,CAAA,cAAA,EAAiB;AAChCf,IAAAA,MAAM,CAANA,cAAM,CAANA;AAEA,QAAIgB,SAAS,GAAGC,YAAY,CAA5B,MAAA;;AACA,SAAK,MAAL,KAAA,IAAoB,KAApB,MAAA,EAAiC;AAC/B,YAAMC,MAAM,GAAGC,cAAc,CAAdA,cAAAA,CAAf,KAAeA,CAAf;;AACA,cAAA,MAAA;AACE,aAAKF,YAAY,CAAjB,OAAA;AAEE,iBAAOA,YAAY,CAAnB,OAAA;;AAEF,aAAKA,YAAY,CAAjB,YAAA;AAEED,UAAAA,SAAS,GAAGC,YAAY,CAAxBD,YAAAA;AACA;;AAEF;AAVF;AAYD;;AAED,WAAA,SAAA;AACD;;AASDI,EAAAA,8BAA8B,CAAA,cAAA,EAAA,eAAA,EAAkC;AAC9DpB,IAAAA,MAAM,CAAA,cAAA,EAANA,6BAAM,CAANA;AACAA,IAAAA,MAAM,CAACqB,MAAM,CAANA,QAAAA,CAAD,eAACA,CAAD,EAANrB,8BAAM,CAANA;;AAEA,QACEsB,eAAe,KAAKC,aAAa,CAAjCD,YAAAA,IACAA,eAAe,KAAKC,aAAa,CAFnC,WAAA,EAGE;AAEA,aAAA,eAAA;AACD;;AAID,QAAIC,IAAI,GAAGD,aAAa,CAAxB,WAAA;AAEA,UAAMxB,MAAM,GAAG,KAAf,MAAA;;AACA,SAAK,IAAI0B,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAG,KAAA,MAAA,CAApB,MAAA,EAAwC,EAAxC,CAAA,EAA6C;AAE3C,YAAMC,IAAI,GAAGD,CAAC,GAADA,EAAAA,GAAS,KAATA,CAAAA,GAAb,CAAA;;AACA,UAAIA,CAAC,GAADA,EAAAA,IAAU,CAACH,eAAe,GAAhB,IAAA,MAAd,CAAA,EAA8C;AAE5C;AACD;;AAED,YAAMrB,KAAK,GAAGF,MAAM,CAApB,CAAoB,CAApB;AACA,YAAMmB,MAAM,GAAGC,cAAc,CAAdA,cAAAA,CAAf,KAAeA,CAAf;;AACA,UAAID,MAAM,KAAKD,YAAY,CAA3B,OAAA,EAAqC;AACnC,eAAOM,aAAa,CAApB,YAAA;AADF,OAAA,MAEO,IAAIL,MAAM,KAAKD,YAAY,CAA3B,YAAA,EAA0C;AAC/CO,QAAAA,IAAI,IAAJA,IAAAA;AACD;AACF;;AAED,WAAA,IAAA;AACD;;AAnIgC","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* eslint-disable */\nimport {Vector3, Vector4, assert} from '@math.gl/core';\nimport {INTERSECTION} from '../constants';\nimport Plane from './plane';\n\n// X, Y, Z Unit vectors\nconst faces = [new Vector3([1, 0, 0]), new Vector3([0, 1, 0]), new Vector3([0, 0, 1])];\n\nconst scratchPlaneCenter = new Vector3();\nconst scratchPlaneNormal = new Vector3();\nconst scratchPlane = new Plane(new Vector3(1.0, 0.0, 0.0), 0.0);\n\n// A culling volume defined by planes.\nexport default class CullingVolume {\n  // For plane masks (as used in {@link CullingVolume#computeVisibilityWithPlaneMask}), this special value\n  // represents the case where the object bounding volume is entirely outside the culling volume.\n  static get MASK_OUTSIDE() {\n    return 0xffffffff;\n  }\n\n  // For plane masks (as used in {@link CullingVolume.prototype.computeVisibilityWithPlaneMask}), this value\n  // represents the case where the object bounding volume is entirely inside the culling volume.\n  static get MASK_INSIDE() {\n    return 0x00000000;\n  }\n\n  // For plane masks (as used in {@link CullingVolume.prototype.computeVisibilityWithPlaneMask}), this value\n  // represents the case where the object bounding volume (may) intersect all planes of the culling volume.\n  static get MASK_INDETERMINATE() {\n    return 0x7fffffff;\n  }\n\n  constructor(planes = []) {\n    // {Cartesian4[]} [planes] An array of clipping planes.\n    this.planes = planes;\n    assert(this.planes.every((plane) => plane instanceof Plane));\n  }\n\n  // Constructs a culling volume from a bounding sphere. Creates six planes that create a box containing the sphere.\n  // The planes are aligned to the x, y, and z axes in world coordinates.\n  fromBoundingSphere(boundingSphere) {\n    this.planes.length = 2 * faces.length;\n\n    const center = boundingSphere.center;\n    const radius = boundingSphere.radius;\n\n    let planeIndex = 0;\n\n    for (const faceNormal of faces) {\n      let plane0 = this.planes[planeIndex];\n      let plane1 = this.planes[planeIndex + 1];\n\n      if (!plane0) {\n        plane0 = this.planes[planeIndex] = new Plane();\n      }\n      if (!plane1) {\n        plane1 = this.planes[planeIndex + 1] = new Plane();\n      }\n\n      const plane0Center = scratchPlaneCenter.copy(faceNormal).scale(-radius).add(center);\n      const plane0Distance = -faceNormal.dot(plane0Center);\n\n      plane0.fromPointNormal(plane0Center, faceNormal);\n\n      const plane1Center = scratchPlaneCenter.copy(faceNormal).scale(radius).add(center);\n\n      const negatedFaceNormal = scratchPlaneNormal.copy(faceNormal).negate();\n\n      const plane1Distance = -negatedFaceNormal.dot(plane1Center);\n\n      plane1.fromPointNormal(plane1Center, negatedFaceNormal);\n\n      planeIndex += 2;\n    }\n\n    return this;\n  }\n\n  // Determines whether a bounding volume intersects the culling volume.\n  computeVisibility(boundingVolume) {\n    assert(boundingVolume);\n    // const planes = this.planes;\n    let intersect = INTERSECTION.INSIDE;\n    for (const plane of this.planes) {\n      const result = boundingVolume.intersectPlane(plane);\n      switch (result) {\n        case INTERSECTION.OUTSIDE:\n          // We are done\n          return INTERSECTION.OUTSIDE;\n\n        case INTERSECTION.INTERSECTING:\n          // If no other intersection is outside, return INTERSECTING\n          intersect = INTERSECTION.INTERSECTING;\n          break;\n\n        default:\n      }\n    }\n\n    return intersect;\n  }\n\n  // Determines whether a bounding volume intersects the culling volume.\n  /*\n   * @param {Number} parentPlaneMask A bit mask from the boundingVolume's parent's check against the same culling\n   *                                 volume, such that if (planeMask & (1 << planeIndex) === 0), for k < 31, then\n   *                                 the parent (and therefore this) volume is completely inside plane[planeIndex]\n   *                                 and that plane check can be skipped.\n   */\n  computeVisibilityWithPlaneMask(boundingVolume, parentPlaneMask) {\n    assert(boundingVolume, 'boundingVolume is required.');\n    assert(Number.isFinite(parentPlaneMask), 'parentPlaneMask is required.');\n\n    if (\n      parentPlaneMask === CullingVolume.MASK_OUTSIDE ||\n      parentPlaneMask === CullingVolume.MASK_INSIDE\n    ) {\n      // parent is completely outside or completely inside, so this child is as well.\n      return parentPlaneMask;\n    }\n\n    // Start with MASK_INSIDE (all zeros) so that after the loop, the return value can be compared with MASK_INSIDE.\n    // (Because if there are fewer than 31 planes, the upper bits wont be changed.)\n    let mask = CullingVolume.MASK_INSIDE;\n\n    const planes = this.planes;\n    for (let k = 0; k < this.planes.length; ++k) {\n      // For k greater than 31 (since 31 is the maximum number of INSIDE/INTERSECTING bits we can store), skip the optimization.\n      const flag = k < 31 ? 1 << k : 0;\n      if (k < 31 && (parentPlaneMask & flag) === 0) {\n        // boundingVolume is known to be INSIDE this plane.\n        continue;\n      }\n\n      const plane = planes[k];\n      const result = boundingVolume.intersectPlane(plane);\n      if (result === INTERSECTION.OUTSIDE) {\n        return CullingVolume.MASK_OUTSIDE;\n      } else if (result === INTERSECTION.INTERSECTING) {\n        mask |= flag;\n      }\n    }\n\n    return mask;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}