{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nconst DEFAULT_ROW_COUNT = 100;\nexport default class ColumnarTableBatchAggregator {\n  constructor(schema, options) {\n    _defineProperty(this, \"schema\", void 0);\n\n    _defineProperty(this, \"length\", 0);\n\n    _defineProperty(this, \"allocated\", 0);\n\n    _defineProperty(this, \"columns\", {});\n\n    this.schema = schema;\n\n    this._reallocateColumns();\n  }\n\n  rowCount() {\n    return this.length;\n  }\n\n  addArrayRow(row) {\n    this._reallocateColumns();\n\n    let i = 0;\n\n    for (const fieldName in this.columns) {\n      this.columns[fieldName][this.length] = row[i++];\n    }\n\n    this.length++;\n  }\n\n  addObjectRow(row) {\n    this._reallocateColumns();\n\n    for (const fieldName in row) {\n      this.columns[fieldName][this.length] = row[fieldName];\n    }\n\n    this.length++;\n  }\n\n  getBatch() {\n    this._pruneColumns();\n\n    const columns = Array.isArray(this.schema) ? this.columns : {};\n\n    if (!Array.isArray(this.schema)) {\n      for (const fieldName in this.schema) {\n        const field = this.schema[fieldName];\n        columns[field.name] = this.columns[field.index];\n      }\n    }\n\n    this.columns = {};\n    const batch = {\n      shape: 'columnar-table',\n      batchType: 'data',\n      data: columns,\n      schema: this.schema,\n      length: this.length\n    };\n    return batch;\n  }\n\n  _reallocateColumns() {\n    if (this.length < this.allocated) {\n      return;\n    }\n\n    this.allocated = this.allocated > 0 ? this.allocated *= 2 : DEFAULT_ROW_COUNT;\n    this.columns = {};\n\n    for (const fieldName in this.schema) {\n      const field = this.schema[fieldName];\n      const ArrayType = field.type || Float32Array;\n      const oldColumn = this.columns[field.index];\n\n      if (oldColumn && ArrayBuffer.isView(oldColumn)) {\n        const typedArray = new ArrayType(this.allocated);\n        typedArray.set(oldColumn);\n        this.columns[field.index] = typedArray;\n      } else if (oldColumn) {\n        oldColumn.length = this.allocated;\n        this.columns[field.index] = oldColumn;\n      } else {\n        this.columns[field.index] = new ArrayType(this.allocated);\n      }\n    }\n  }\n\n  _pruneColumns() {\n    for (const [columnName, column] of Object.entries(this.columns)) {\n      this.columns[columnName] = column.slice(0, this.length);\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../../src/lib/table/columnar-table-batch-aggregator.ts"],"names":["DEFAULT_ROW_COUNT","constructor","rowCount","addArrayRow","i","row","addObjectRow","getBatch","columns","Array","field","batch","shape","batchType","data","schema","length","_reallocateColumns","ArrayType","oldColumn","ArrayBuffer","typedArray","_pruneColumns","Object","column"],"mappings":";AAMA,MAAMA,iBAAiB,GAAvB,GAAA;AAEA,eAAe,MAAA,4BAAA,CAAmE;AAMhFC,EAAAA,WAAW,CAAA,MAAA,EAAA,OAAA,EAAqD;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAJ/C,CAI+C,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EAH5C,CAG4C,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAFvB,EAEuB,CAAA;;AAC9D,SAAA,MAAA,GAAA,MAAA;;AACA,SAAA,kBAAA;AACD;;AAEDC,EAAAA,QAAQ,GAAW;AACjB,WAAO,KAAP,MAAA;AACD;;AAEDC,EAAAA,WAAW,CAAA,GAAA,EAAa;AAEtB,SAAA,kBAAA;;AACA,QAAIC,CAAC,GAAL,CAAA;;AAEA,SAAK,MAAL,SAAA,IAAwB,KAAxB,OAAA,EAAsC;AACpC,WAAA,OAAA,CAAA,SAAA,EAAwB,KAAxB,MAAA,IAAuCC,GAAG,CAACD,CAA3C,EAA0C,CAA1C;AACD;;AACD,SAAA,MAAA;AACD;;AAEDE,EAAAA,YAAY,CAAA,GAAA,EAAyC;AAEnD,SAAA,kBAAA;;AACA,SAAK,MAAL,SAAA,IAAA,GAAA,EAA6B;AAC3B,WAAA,OAAA,CAAA,SAAA,EAAwB,KAAxB,MAAA,IAAuCD,GAAG,CAA1C,SAA0C,CAA1C;AACD;;AACD,SAAA,MAAA;AACD;;AAEDE,EAAAA,QAAQ,GAAgD;AACtD,SAAA,aAAA;;AACA,UAAMC,OAAO,GAAGC,KAAK,CAALA,OAAAA,CAAc,KAAdA,MAAAA,IAA6B,KAA7BA,OAAAA,GAAhB,EAAA;;AAKA,QAAI,CAACA,KAAK,CAALA,OAAAA,CAAc,KAAnB,MAAKA,CAAL,EAAiC;AAC/B,WAAK,MAAL,SAAA,IAAwB,KAAxB,MAAA,EAAqC;AACnC,cAAMC,KAAK,GAAG,KAAA,MAAA,CAAd,SAAc,CAAd;AACAF,QAAAA,OAAO,CAACE,KAAK,CAAbF,IAAO,CAAPA,GAAsB,KAAA,OAAA,CAAaE,KAAK,CAAxCF,KAAsB,CAAtBA;AACD;AACF;;AAED,SAAA,OAAA,GAAA,EAAA;AAEA,UAAMG,KAAyB,GAAG;AAChCC,MAAAA,KAAK,EAD2B,gBAAA;AAEhCC,MAAAA,SAAS,EAFuB,MAAA;AAGhCC,MAAAA,IAAI,EAH4B,OAAA;AAIhCC,MAAAA,MAAM,EAAE,KAJwB,MAAA;AAKhCC,MAAAA,MAAM,EAAE,KAAKA;AALmB,KAAlC;AAQA,WAAA,KAAA;AACD;;AAIDC,EAAAA,kBAAkB,GAAG;AACnB,QAAI,KAAA,MAAA,GAAc,KAAlB,SAAA,EAAkC;AAChC;AACD;;AAGD,SAAA,SAAA,GAAiB,KAAA,SAAA,GAAA,CAAA,GAAsB,KAAA,SAAA,IAAtB,CAAA,GAAjB,iBAAA;AACA,SAAA,OAAA,GAAA,EAAA;;AAEA,SAAK,MAAL,SAAA,IAAwB,KAAxB,MAAA,EAAqC;AACnC,YAAMP,KAAK,GAAG,KAAA,MAAA,CAAd,SAAc,CAAd;AACA,YAAMQ,SAAS,GAAGR,KAAK,CAALA,IAAAA,IAAlB,YAAA;AACA,YAAMS,SAAS,GAAG,KAAA,OAAA,CAAaT,KAAK,CAApC,KAAkB,CAAlB;;AAEA,UAAIS,SAAS,IAAIC,WAAW,CAAXA,MAAAA,CAAjB,SAAiBA,CAAjB,EAAgD;AAE9C,cAAMC,UAAU,GAAG,IAAA,SAAA,CAAc,KAAjC,SAAmB,CAAnB;AACAA,QAAAA,UAAU,CAAVA,GAAAA,CAAAA,SAAAA;AACA,aAAA,OAAA,CAAaX,KAAK,CAAlB,KAAA,IAAA,UAAA;AAJF,OAAA,MAKO,IAAA,SAAA,EAAe;AAEpBS,QAAAA,SAAS,CAATA,MAAAA,GAAmB,KAAnBA,SAAAA;AACA,aAAA,OAAA,CAAaT,KAAK,CAAlB,KAAA,IAAA,SAAA;AAHK,OAAA,MAIA;AAEL,aAAA,OAAA,CAAaA,KAAK,CAAlB,KAAA,IAA4B,IAAA,SAAA,CAAc,KAA1C,SAA4B,CAA5B;AACD;AACF;AACF;;AAEDY,EAAAA,aAAa,GAAG;AACd,SAAK,MAAM,CAAA,UAAA,EAAX,MAAW,CAAX,IAAmCC,MAAM,CAANA,OAAAA,CAAe,KAAlD,OAAmCA,CAAnC,EAAiE;AAC/D,WAAA,OAAA,CAAA,UAAA,IAA2BC,MAAM,CAANA,KAAAA,CAAAA,CAAAA,EAAgB,KAA3C,MAA2BA,CAA3B;AACD;AACF;;AAlG+E","sourcesContent":["import type {Schema} from '../schema';\nimport type {ColumnarTableBatch, ArrowTableBatch} from '../../category/table';\nimport {TableBatchAggregator} from './table-batch-aggregator';\n\ntype ColumnarTableBatchOptions = {};\n\nconst DEFAULT_ROW_COUNT = 100;\n\nexport default class ColumnarTableBatchAggregator implements TableBatchAggregator {\n  schema: Schema;\n  length: number = 0;\n  allocated: number = 0;\n  columns: {[columnName: string]: any[]} = {};\n\n  constructor(schema: Schema, options: ColumnarTableBatchOptions) {\n    this.schema = schema;\n    this._reallocateColumns();\n  }\n\n  rowCount(): number {\n    return this.length;\n  }\n\n  addArrayRow(row: any[]) {\n    // If user keeps pushing rows beyond batch size, reallocate\n    this._reallocateColumns();\n    let i = 0;\n    // TODO what if no csv header, columns not populated?\n    for (const fieldName in this.columns) {\n      this.columns[fieldName][this.length] = row[i++];\n    }\n    this.length++;\n  }\n\n  addObjectRow(row: {[columnName: string]: any}): void {\n    // If user keeps pushing rows beyond batch size, reallocate\n    this._reallocateColumns();\n    for (const fieldName in row) {\n      this.columns[fieldName][this.length] = row[fieldName];\n    }\n    this.length++;\n  }\n\n  getBatch(): ColumnarTableBatch | ArrowTableBatch | null {\n    this._pruneColumns();\n    const columns = Array.isArray(this.schema) ? this.columns : {};\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    // columns should match schema format\n    if (!Array.isArray(this.schema)) {\n      for (const fieldName in this.schema) {\n        const field = this.schema[fieldName];\n        columns[field.name] = this.columns[field.index];\n      }\n    }\n\n    this.columns = {};\n\n    const batch: ColumnarTableBatch = {\n      shape: 'columnar-table',\n      batchType: 'data',\n      data: columns,\n      schema: this.schema,\n      length: this.length\n    };\n\n    return batch;\n  }\n\n  // HELPERS\n\n  _reallocateColumns() {\n    if (this.length < this.allocated) {\n      return;\n    }\n\n    // @ts-ignore TODO\n    this.allocated = this.allocated > 0 ? (this.allocated *= 2) : DEFAULT_ROW_COUNT;\n    this.columns = {};\n\n    for (const fieldName in this.schema) {\n      const field = this.schema[fieldName];\n      const ArrayType = field.type || Float32Array;\n      const oldColumn = this.columns[field.index];\n\n      if (oldColumn && ArrayBuffer.isView(oldColumn)) {\n        // Copy the old data to the new array\n        const typedArray = new ArrayType(this.allocated);\n        typedArray.set(oldColumn);\n        this.columns[field.index] = typedArray;\n      } else if (oldColumn) {\n        // Plain array\n        oldColumn.length = this.allocated;\n        this.columns[field.index] = oldColumn;\n      } else {\n        // Create new\n        this.columns[field.index] = new ArrayType(this.allocated);\n      }\n    }\n  }\n\n  _pruneColumns() {\n    for (const [columnName, column] of Object.entries(this.columns)) {\n      this.columns[columnName] = column.slice(0, this.length);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}