{"ast":null,"code":"import Layer from './layer';\nimport debug from '../debug';\nimport { flatten } from '../utils/flatten';\nconst TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';\nexport default class CompositeLayer extends Layer {\n  get isComposite() {\n    return true;\n  }\n\n  get isLoaded() {\n    return super.isLoaded && this.getSubLayers().every(layer => layer.isLoaded);\n  }\n\n  getSubLayers() {\n    return this.internalState && this.internalState.subLayers || [];\n  }\n\n  initializeState() {}\n\n  setState(updateObject) {\n    super.setState(updateObject);\n    this.setNeedsUpdate();\n  }\n\n  getPickingInfo(_ref) {\n    let {\n      info\n    } = _ref;\n    const {\n      object\n    } = info;\n    const isDataWrapped = object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n\n    if (!isDataWrapped) {\n      return info;\n    }\n\n    info.object = object.__source.object;\n    info.index = object.__source.index;\n    return info;\n  }\n\n  renderLayers() {\n    return null;\n  }\n\n  filterSubLayer(context) {\n    return true;\n  }\n\n  shouldRenderSubLayer(id, data) {\n    return data && data.length;\n  }\n\n  getSubLayerClass(id, DefaultLayerClass) {\n    const {\n      _subLayerProps: overridingProps\n    } = this.props;\n    return overridingProps && overridingProps[id] && overridingProps[id].type || DefaultLayerClass;\n  }\n\n  getSubLayerRow(row, sourceObject, sourceObjectIndex) {\n    row.__source = {\n      parent: this,\n      object: sourceObject,\n      index: sourceObjectIndex\n    };\n    return row;\n  }\n\n  getSubLayerAccessor(accessor) {\n    if (typeof accessor === 'function') {\n      const objectInfo = {\n        data: this.props.data,\n        target: []\n      };\n      return (x, i) => {\n        if (x && x.__source) {\n          objectInfo.index = x.__source.index;\n          return accessor(x.__source.object, objectInfo);\n        }\n\n        return accessor(x, i);\n      };\n    }\n\n    return accessor;\n  }\n\n  getSubLayerProps() {\n    let sublayerProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      _subLayerProps: overridingProps\n    } = this.props;\n    const newProps = {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch\n    };\n    const overridingSublayerProps = overridingProps && overridingProps[sublayerProps.id];\n    const overridingSublayerTriggers = overridingSublayerProps && overridingSublayerProps.updateTriggers;\n    const sublayerId = sublayerProps.id || 'sublayer';\n\n    if (overridingSublayerProps) {\n      const propTypes = this.constructor._propTypes;\n      const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};\n\n      for (const key in overridingSublayerProps) {\n        const propType = subLayerPropTypes[key] || propTypes[key];\n\n        if (propType && propType.type === 'accessor') {\n          overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n        }\n      }\n    }\n\n    Object.assign(newProps, sublayerProps, overridingSublayerProps);\n    newProps.id = \"\".concat(this.props.id, \"-\").concat(sublayerId);\n    newProps.updateTriggers = {\n      all: this.props.updateTriggers.all,\n      ...sublayerProps.updateTriggers,\n      ...overridingSublayerTriggers\n    };\n\n    for (const extension of extensions) {\n      const passThroughProps = extension.getSubLayerProps.call(this, extension);\n\n      if (passThroughProps) {\n        Object.assign(newProps, passThroughProps, {\n          updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n        });\n      }\n    }\n\n    return newProps;\n  }\n\n  _updateAutoHighlight(info) {\n    for (const layer of this.getSubLayers()) {\n      layer.updateAutoHighlight(info);\n    }\n  }\n\n  _getAttributeManager() {\n    return null;\n  }\n\n  _renderLayers() {\n    let {\n      subLayers\n    } = this.internalState;\n    const shouldUpdate = !subLayers || this.needsUpdate();\n\n    if (shouldUpdate) {\n      subLayers = this.renderLayers();\n      subLayers = flatten(subLayers, Boolean);\n      this.internalState.subLayers = subLayers;\n    }\n\n    debug(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n\n    for (const layer of subLayers) {\n      layer.parent = this;\n    }\n  }\n\n}\nCompositeLayer.layerName = 'CompositeLayer';","map":{"version":3,"sources":["../../../src/lib/composite-layer.js"],"names":["TRACE_RENDER_LAYERS","isComposite","isLoaded","layer","getSubLayers","initializeState","setState","getPickingInfo","info","object","isDataWrapped","renderLayers","filterSubLayer","shouldRenderSubLayer","data","getSubLayerClass","_subLayerProps","overridingProps","getSubLayerRow","row","parent","index","sourceObjectIndex","getSubLayerAccessor","objectInfo","target","x","accessor","getSubLayerProps","sublayerProps","newProps","fetch","overridingSublayerProps","overridingSublayerTriggers","sublayerId","propTypes","subLayerPropTypes","propType","Object","all","passThroughProps","extension","updateTriggers","_updateAutoHighlight","_getAttributeManager","_renderLayers","subLayers","shouldUpdate","flatten","debug","CompositeLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Layer from './layer';\nimport debug from '../debug';\nimport {flatten} from '../utils/flatten';\n\nconst TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';\n\nexport default class CompositeLayer extends Layer {\n  get isComposite() {\n    return true;\n  }\n\n  get isLoaded() {\n    return super.isLoaded && this.getSubLayers().every(layer => layer.isLoaded);\n  }\n\n  getSubLayers() {\n    return (this.internalState && this.internalState.subLayers) || [];\n  }\n\n  // initializeState is usually not needed for composite layers\n  // Provide empty definition to disable check for missing definition\n  initializeState() {}\n\n  // Updates selected state members and marks the composite layer to need rerender\n  setState(updateObject) {\n    super.setState(updateObject);\n    // Trigger a layer update\n    // Although conceptually layer.draw and compositeLayer.renderLayers are equivalent,\n    // they are executed during different lifecycles.\n    // draw can be called without calling updateState (e.g. most viewport changes),\n    // while renderLayers can only be called during a recursive layer update.\n    this.setNeedsUpdate();\n  }\n\n  // called to augment the info object that is bubbled up from a sublayer\n  // override Layer.getPickingInfo() because decoding / setting uniform do\n  // not apply to a composite layer.\n  // @return null to cancel event\n  getPickingInfo({info}) {\n    const {object} = info;\n    const isDataWrapped =\n      object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n\n    if (!isDataWrapped) {\n      return info;\n    }\n\n    // override object with picked data\n    info.object = object.__source.object;\n    info.index = object.__source.index;\n\n    return info;\n  }\n\n  // Implement to generate subLayers\n  renderLayers() {\n    return null;\n  }\n\n  /**\n   * Filters sub layers at draw time\n   * @param {Layer} context.layer - sub layer instance\n   * @param {Viewport} context.viewport - the viewport being rendered in\n   * @param {Boolean} context.isPicking - whether it is a picking pass\n   * @param {String} context.pass - the current pass\n   * @return {Boolean} true if the sub layer should be drawn\n   */\n  filterSubLayer(context) {\n    return true;\n  }\n\n  // Returns true if sub layer needs to be rendered\n  shouldRenderSubLayer(id, data) {\n    return data && data.length;\n  }\n\n  // Returns sub layer class for a specific sublayer\n  getSubLayerClass(id, DefaultLayerClass) {\n    const {_subLayerProps: overridingProps} = this.props;\n\n    return (\n      (overridingProps && overridingProps[id] && overridingProps[id].type) || DefaultLayerClass\n    );\n  }\n\n  // When casting user data into another format to pass to sublayers,\n  // add reference to the original object and object index\n  getSubLayerRow(row, sourceObject, sourceObjectIndex) {\n    row.__source = {\n      parent: this,\n      object: sourceObject,\n      index: sourceObjectIndex\n    };\n    return row;\n  }\n\n  // Some composite layers cast user data into another format before passing to sublayers\n  // We need to unwrap them before calling the accessor so that they see the original data\n  // objects\n  getSubLayerAccessor(accessor) {\n    if (typeof accessor === 'function') {\n      const objectInfo = {\n        data: this.props.data,\n        target: []\n      };\n      return (x, i) => {\n        if (x && x.__source) {\n          objectInfo.index = x.__source.index;\n          return accessor(x.__source.object, objectInfo);\n        }\n        return accessor(x, i);\n      };\n    }\n    return accessor;\n  }\n\n  // Returns sub layer props for a specific sublayer\n  // eslint-disable-next-line complexity\n  getSubLayerProps(sublayerProps = {}) {\n    const {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      _subLayerProps: overridingProps\n    } = this.props;\n    const newProps = {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch\n    };\n\n    const overridingSublayerProps = overridingProps && overridingProps[sublayerProps.id];\n    const overridingSublayerTriggers =\n      overridingSublayerProps && overridingSublayerProps.updateTriggers;\n    const sublayerId = sublayerProps.id || 'sublayer';\n\n    if (overridingSublayerProps) {\n      const propTypes = this.constructor._propTypes;\n      const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};\n      for (const key in overridingSublayerProps) {\n        const propType = subLayerPropTypes[key] || propTypes[key];\n        // eslint-disable-next-line\n        if (propType && propType.type === 'accessor') {\n          overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n        }\n      }\n    }\n\n    Object.assign(\n      newProps,\n      sublayerProps,\n      // experimental feature that allows users to override sublayer props via parent layer prop\n      overridingSublayerProps\n    );\n    newProps.id = `${this.props.id}-${sublayerId}`;\n    newProps.updateTriggers = {\n      all: this.props.updateTriggers.all,\n      ...sublayerProps.updateTriggers,\n      ...overridingSublayerTriggers\n    };\n\n    // Pass through extension props\n    for (const extension of extensions) {\n      const passThroughProps = extension.getSubLayerProps.call(this, extension);\n      if (passThroughProps) {\n        Object.assign(newProps, passThroughProps, {\n          updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n        });\n      }\n    }\n\n    return newProps;\n  }\n\n  _updateAutoHighlight(info) {\n    for (const layer of this.getSubLayers()) {\n      layer.updateAutoHighlight(info);\n    }\n  }\n\n  _getAttributeManager() {\n    return null;\n  }\n\n  // Called by layer manager to render subLayers\n  _renderLayers() {\n    let {subLayers} = this.internalState;\n    const shouldUpdate = !subLayers || this.needsUpdate();\n    if (shouldUpdate) {\n      subLayers = this.renderLayers();\n      // Flatten the returned array, removing any null, undefined or false\n      // this allows layers to render sublayers conditionally\n      // (see CompositeLayer.renderLayers docs)\n      subLayers = flatten(subLayers, Boolean);\n      this.internalState.subLayers = subLayers;\n    }\n    debug(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n\n    // populate reference to parent layer (this layer)\n    // NOTE: needs to be done even when reusing layers as the parent may have changed\n    for (const layer of subLayers) {\n      layer.parent = this;\n    }\n  }\n}\n\nCompositeLayer.layerName = 'CompositeLayer';\n"]},"metadata":{},"sourceType":"module"}