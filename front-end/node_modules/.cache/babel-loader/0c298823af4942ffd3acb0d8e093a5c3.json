{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { assert } from '../env-utils/assert';\nimport { getLoadableWorkerURL } from '../worker-utils/get-loadable-worker-url';\nimport { getTransferList } from '../worker-utils/get-transfer-list';\n\nconst NOOP = () => {};\n\nexport default class WorkerThread {\n  static isSupported() {\n    return typeof Worker !== 'undefined';\n  }\n\n  constructor(props) {\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"source\", void 0);\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"terminated\", false);\n\n    _defineProperty(this, \"worker\", void 0);\n\n    _defineProperty(this, \"onMessage\", void 0);\n\n    _defineProperty(this, \"onError\", void 0);\n\n    _defineProperty(this, \"_loadableURL\", '');\n\n    const {\n      name,\n      source,\n      url\n    } = props;\n    assert(source || url);\n    this.name = name;\n    this.source = source;\n    this.url = url;\n    this.onMessage = NOOP;\n\n    this.onError = error => console.log(error);\n\n    this.worker = this._createBrowserWorker();\n  }\n\n  destroy() {\n    this.onMessage = NOOP;\n    this.onError = NOOP;\n    this.worker.terminate();\n    this.terminated = true;\n  }\n\n  get isRunning() {\n    return Boolean(this.onMessage);\n  }\n\n  postMessage(data, transferList) {\n    transferList = transferList || getTransferList(data);\n    this.worker.postMessage(data, transferList);\n  }\n\n  _getErrorFromErrorEvent(event) {\n    let message = 'Failed to load ';\n    message += \"worker \".concat(this.name, \". \");\n\n    if (event.message) {\n      message += \"\".concat(event.message, \" in \");\n    }\n\n    if (event.lineno) {\n      message += \":\".concat(event.lineno, \":\").concat(event.colno);\n    }\n\n    return new Error(message);\n  }\n\n  _createBrowserWorker() {\n    this._loadableURL = getLoadableWorkerURL({\n      source: this.source,\n      url: this.url\n    });\n    const worker = new Worker(this._loadableURL, {\n      name: this.name\n    });\n\n    worker.onmessage = event => {\n      if (!event.data) {\n        this.onError(new Error('No data received'));\n      } else {\n        this.onMessage(event.data);\n      }\n    };\n\n    worker.onerror = error => {\n      this.onError(this._getErrorFromErrorEvent(error));\n      this.terminated = true;\n    };\n\n    worker.onmessageerror = event => console.error(event);\n\n    return worker;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/lib/worker-farm/worker-thread.ts"],"names":["NOOP","isSupported","constructor","url","assert","source","error","console","destroy","isRunning","Boolean","postMessage","transferList","getTransferList","_getErrorFromErrorEvent","message","event","_createBrowserWorker","getLoadableWorkerURL","worker","name"],"mappings":"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","sourcesContent":["import {assert} from '../env-utils/assert';\nimport {getLoadableWorkerURL} from '../worker-utils/get-loadable-worker-url';\nimport {getTransferList} from '../worker-utils/get-transfer-list';\n\nconst NOOP = () => {};\n\nexport type WorkerThreadProps = {\n  name: string;\n  source?: string;\n  url?: string;\n};\n\n/**\n * Represents one worker thread\n */\nexport default class WorkerThread {\n  readonly name: string;\n  readonly source: string | undefined;\n  readonly url: string | undefined;\n  terminated: boolean = false;\n  worker: Worker;\n  onMessage: (message: any) => void;\n  onError: (error: Error) => void;\n\n  private _loadableURL: string = '';\n\n  static isSupported(): boolean {\n    return typeof Worker !== 'undefined';\n  }\n\n  constructor(props: WorkerThreadProps) {\n    const {name, source, url} = props;\n    assert(source || url); // Either source or url must be defined\n    this.name = name;\n    this.source = source;\n    this.url = url;\n    this.onMessage = NOOP;\n    this.onError = (error) => console.log(error); // eslint-disable-line\n\n    this.worker = this._createBrowserWorker();\n  }\n\n  /**\n   * Terminate this worker thread\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    this.onMessage = NOOP;\n    this.onError = NOOP;\n    // @ts-ignore\n    this.worker.terminate();\n    this.terminated = true;\n  }\n\n  get isRunning() {\n    return Boolean(this.onMessage);\n  }\n\n  /**\n   * Send a message to this worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   * @param transferList If not supplied, calculated automatically by traversing data\n   */\n  postMessage(data: any, transferList?: any[]): void {\n    transferList = transferList || getTransferList(data);\n    // @ts-ignore\n    this.worker.postMessage(data, transferList);\n  }\n\n  // PRIVATE\n\n  /**\n   * Generate a standard Error from an ErrorEvent\n   * @param {ErrorEvent} event\n   */\n  _getErrorFromErrorEvent(event) {\n    // Note Error object does not have the expected fields if loading failed completely\n    // https://developer.mozilla.org/en-US/docs/Web/API/Worker#Event_handlers\n    // https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\n    let message = 'Failed to load ';\n    message += `worker ${this.name}. `;\n    if (event.message) {\n      message += `${event.message} in `;\n    }\n    // const hasFilename = event.filename && !event.filename.startsWith('blob:');\n    // message += hasFilename ? event.filename : this.source.slice(0, 100);\n    if (event.lineno) {\n      message += `:${event.lineno}:${event.colno}`;\n    }\n    return new Error(message);\n  }\n\n  /**\n   * Creates a worker thread on the browser\n   */\n  _createBrowserWorker() {\n    this._loadableURL = getLoadableWorkerURL({source: this.source, url: this.url});\n    const worker = new Worker(this._loadableURL, {name: this.name});\n\n    worker.onmessage = (event) => {\n      if (!event.data) {\n        this.onError(new Error('No data received'));\n      } else {\n        this.onMessage(event.data);\n      }\n    };\n    // This callback represents an uncaught exception in the worker thread\n    worker.onerror = (error) => {\n      this.onError(this._getErrorFromErrorEvent(error));\n      this.terminated = true;\n    };\n    // TODO - not clear when this would be called, for now just log in case it happens\n    worker.onmessageerror = (event) => console.error(event); // eslint-disable-line\n\n    return worker;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}