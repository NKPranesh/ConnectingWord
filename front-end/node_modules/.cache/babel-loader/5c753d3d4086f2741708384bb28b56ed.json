{"ast":null,"code":"import getHiResTimestamp from '../utils/hi-res-timestamp';\nexport default class Stat {\n  constructor(name, type) {\n    this.name = name;\n    this.type = type;\n    this.sampleSize = 1;\n    this.reset();\n  }\n\n  setSampleSize(samples) {\n    this.sampleSize = samples;\n    return this;\n  }\n\n  incrementCount() {\n    this.addCount(1);\n    return this;\n  }\n\n  decrementCount() {\n    this.subtractCount(1);\n    return this;\n  }\n\n  addCount(value) {\n    this._count += value;\n    this._samples++;\n\n    this._checkSampling();\n\n    return this;\n  }\n\n  subtractCount(value) {\n    this._count -= value;\n    this._samples++;\n\n    this._checkSampling();\n\n    return this;\n  }\n\n  addTime(time) {\n    this._time += time;\n    this.lastTiming = time;\n    this._samples++;\n\n    this._checkSampling();\n\n    return this;\n  }\n\n  timeStart() {\n    this._startTime = getHiResTimestamp();\n    this._timerPending = true;\n    return this;\n  }\n\n  timeEnd() {\n    if (!this._timerPending) {\n      return this;\n    }\n\n    this.addTime(getHiResTimestamp() - this._startTime);\n    this._timerPending = false;\n\n    this._checkSampling();\n\n    return this;\n  }\n\n  getSampleAverageCount() {\n    return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;\n  }\n\n  getSampleAverageTime() {\n    return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;\n  }\n\n  getSampleHz() {\n    return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;\n  }\n\n  getAverageCount() {\n    return this.samples > 0 ? this.count / this.samples : 0;\n  }\n\n  getAverageTime() {\n    return this.samples > 0 ? this.time / this.samples : 0;\n  }\n\n  getHz() {\n    return this.time > 0 ? this.samples / (this.time / 1000) : 0;\n  }\n\n  reset() {\n    this.time = 0;\n    this.count = 0;\n    this.samples = 0;\n    this.lastTiming = 0;\n    this.lastSampleTime = 0;\n    this.lastSampleCount = 0;\n    this._count = 0;\n    this._time = 0;\n    this._samples = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n    return this;\n  }\n\n  _checkSampling() {\n    if (this._samples === this.sampleSize) {\n      this.lastSampleTime = this._time;\n      this.lastSampleCount = this._count;\n      this.count += this._count;\n      this.time += this._time;\n      this.samples += this._samples;\n      this._time = 0;\n      this._count = 0;\n      this._samples = 0;\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/lib/stat.js"],"names":["constructor","setSampleSize","incrementCount","decrementCount","addCount","subtractCount","addTime","timeStart","getHiResTimestamp","timeEnd","getSampleAverageCount","getSampleAverageTime","getSampleHz","getAverageCount","getAverageTime","getHz","reset","_checkSampling"],"mappings":"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","sourcesContent":["import getHiResTimestamp from '../utils/hi-res-timestamp';\n\nexport default class Stat {\n  constructor(name, type) {\n    this.name = name;\n    this.type = type;\n    this.sampleSize = 1;\n    this.reset();\n  }\n\n  setSampleSize(samples) {\n    this.sampleSize = samples;\n\n    return this;\n  }\n\n  // Call to increment count (+1)\n  incrementCount() {\n    this.addCount(1);\n\n    return this;\n  }\n\n  // Call to decrement count (-1)\n  decrementCount() {\n    this.subtractCount(1);\n\n    return this;\n  }\n\n  // Increase count\n  addCount(value) {\n    this._count += value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  // Decrease count\n  subtractCount(value) {\n    this._count -= value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  // Add an arbitrary timing and bump the count\n  addTime(time) {\n    this._time += time;\n    this.lastTiming = time;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  // Start a timer\n  timeStart() {\n    this._startTime = getHiResTimestamp();\n    this._timerPending = true;\n\n    return this;\n  }\n\n  // End a timer. Adds to time and bumps the timing count.\n  timeEnd() {\n    if (!this._timerPending) {\n      return this;\n    }\n\n    this.addTime(getHiResTimestamp() - this._startTime);\n    this._timerPending = false;\n    this._checkSampling();\n\n    return this;\n  }\n\n  getSampleAverageCount() {\n    return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;\n  }\n\n  // Calculate average time / count for the previous window\n  getSampleAverageTime() {\n    return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;\n  }\n\n  // Calculate counts per second for the previous window\n  getSampleHz() {\n    return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;\n  }\n\n  getAverageCount() {\n    return this.samples > 0 ? this.count / this.samples : 0;\n  }\n\n  // Calculate average time / count\n  getAverageTime() {\n    return this.samples > 0 ? this.time / this.samples : 0;\n  }\n\n  // Calculate counts per second\n  getHz() {\n    return this.time > 0 ? this.samples / (this.time / 1000) : 0;\n  }\n\n  reset() {\n    this.time = 0;\n    this.count = 0;\n    this.samples = 0;\n    this.lastTiming = 0;\n    this.lastSampleTime = 0;\n    this.lastSampleCount = 0;\n    this._count = 0;\n    this._time = 0;\n    this._samples = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n\n    return this;\n  }\n\n  _checkSampling() {\n    if (this._samples === this.sampleSize) {\n      this.lastSampleTime = this._time;\n      this.lastSampleCount = this._count;\n      this.count += this._count;\n      this.time += this._time;\n      this.samples += this._samples;\n      this._time = 0;\n      this._count = 0;\n      this._samples = 0;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}