{"ast":null,"code":"import { getTransferList } from '../worker-utils/get-transfer-list';\nconst onMessageWrapperMap = new Map();\nexport default class WorkerBody {\n  static set onmessage(onMessage) {\n    self.onmessage = message => {\n      if (!isKnownMessage(message)) {\n        return;\n      }\n\n      const {\n        type,\n        payload\n      } = message.data;\n      onMessage(type, payload);\n    };\n  }\n\n  static addEventListener(onMessage) {\n    let onMessageWrapper = onMessageWrapperMap.get(onMessage);\n\n    if (!onMessageWrapper) {\n      onMessageWrapper = message => {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n\n        const {\n          type,\n          payload\n        } = message.data;\n        onMessage(type, payload);\n      };\n    }\n\n    self.addEventListener('message', onMessageWrapper);\n  }\n\n  static removeEventListener(onMessage) {\n    const onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    onMessageWrapperMap.delete(onMessage);\n    self.removeEventListener('message', onMessageWrapper);\n  }\n\n  static postMessage(type, payload) {\n    if (self) {\n      const data = {\n        source: 'loaders.gl',\n        type,\n        payload\n      };\n      const transferList = getTransferList(payload);\n      self.postMessage(data, transferList);\n    }\n  }\n\n}\n\nfunction isKnownMessage(message) {\n  const {\n    type,\n    data\n  } = message;\n  return type === 'message' && data && typeof data.source === 'string' && data.source.startsWith('loaders.gl');\n}","map":{"version":3,"sources":["../../../../src/lib/worker-farm/worker-body.ts"],"names":["onMessageWrapperMap","onmessage","self","message","isKnownMessage","payload","onMessage","addEventListener","onMessageWrapper","removeEventListener","postMessage","data","source","transferList","getTransferList","type"],"mappings":"AACA,SAAA,eAAA,QAAA,mCAAA;AAEA,MAAMA,mBAAmB,GAAG,IAA5B,GAA4B,EAA5B;AAKA,eAAe,MAAA,UAAA,CAAiB;AAIV,aAATC,SAAS,CAAA,SAAA,EAA6E;AAE/FC,IAAAA,IAAI,CAAJA,SAAAA,GAAkBC,OAAD,IAAa;AAC5B,UAAI,CAACC,cAAc,CAAnB,OAAmB,CAAnB,EAA8B;AAC5B;AACD;;AAGD,YAAM;AAAA,QAAA,IAAA;AAAOC,QAAAA;AAAP,UAAkBF,OAAO,CAA/B,IAAA;AACAG,MAAAA,SAAS,CAAA,IAAA,EAATA,OAAS,CAATA;AAPFJ,KAAAA;AASD;;AAEsB,SAAhBK,gBAAgB,CAAA,SAAA,EAErB;AACA,QAAIC,gBAAgB,GAAGR,mBAAmB,CAAnBA,GAAAA,CAAvB,SAAuBA,CAAvB;;AAEA,QAAI,CAAJ,gBAAA,EAAuB;AACrBQ,MAAAA,gBAAgB,GAAIL,OAAD,IAAa;AAC9B,YAAI,CAACC,cAAc,CAAnB,OAAmB,CAAnB,EAA8B;AAC5B;AACD;;AAGD,cAAM;AAAA,UAAA,IAAA;AAAOC,UAAAA;AAAP,YAAkBF,OAAO,CAA/B,IAAA;AACAG,QAAAA,SAAS,CAAA,IAAA,EAATA,OAAS,CAATA;AAPFE,OAAAA;AASD;;AAGDN,IAAAA,IAAI,CAAJA,gBAAAA,CAAAA,SAAAA,EAAAA,gBAAAA;AACD;;AAEyB,SAAnBO,mBAAmB,CAAA,SAAA,EAExB;AACA,UAAMD,gBAAgB,GAAGR,mBAAmB,CAAnBA,GAAAA,CAAzB,SAAyBA,CAAzB;AACAA,IAAAA,mBAAmB,CAAnBA,MAAAA,CAAAA,SAAAA;AAEAE,IAAAA,IAAI,CAAJA,mBAAAA,CAAAA,SAAAA,EAAAA,gBAAAA;AACD;;AAOiB,SAAXQ,WAAW,CAAA,IAAA,EAAA,OAAA,EAA+D;AAC/E,QAAA,IAAA,EAAU;AACR,YAAMC,IAAuB,GAAG;AAACC,QAAAA,MAAM,EAAP,YAAA;AAAA,QAAA,IAAA;AAA6BP,QAAAA;AAA7B,OAAhC;AACA,YAAMQ,YAAY,GAAGC,eAAe,CAApC,OAAoC,CAApC;AAGAZ,MAAAA,IAAI,CAAJA,WAAAA,CAAAA,IAAAA,EAAAA,YAAAA;AACD;AACF;;AA5D6B;;AAgEhC,SAAA,cAAA,CAAA,OAAA,EAAiC;AAC/B,QAAM;AAAA,IAAA,IAAA;AAAOS,IAAAA;AAAP,MAAN,OAAA;AACA,SACEI,IAAI,KAAJA,SAAAA,IAAAA,IAAAA,IAEA,OAAOJ,IAAI,CAAX,MAAA,KAFAI,QAAAA,IAGAJ,IAAI,CAAJA,MAAAA,CAAAA,UAAAA,CAJF,YAIEA,CAJF;AAMD","sourcesContent":["import type {WorkerMessageData, WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport {getTransferList} from '../worker-utils/get-transfer-list';\n\nconst onMessageWrapperMap = new Map();\n\n/**\n * Type safe wrapper for worker code\n */\nexport default class WorkerBody {\n  /*\n   * (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n   */\n  static set onmessage(onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any) {\n    // eslint-disable-next-line no-restricted-globals\n    self.onmessage = (message) => {\n      if (!isKnownMessage(message)) {\n        return;\n      }\n\n      // Confusingly the message itself also has a 'type' field which is always set to 'message'\n      const {type, payload} = message.data;\n      onMessage(type, payload);\n    };\n  }\n\n  static addEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    let onMessageWrapper = onMessageWrapperMap.get(onMessage);\n\n    if (!onMessageWrapper) {\n      onMessageWrapper = (message) => {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n\n        // Confusingly the message itself also has a 'type' field which is always set to 'message'\n        const {type, payload} = message.data;\n        onMessage(type, payload);\n      };\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    self.addEventListener('message', onMessageWrapper);\n  }\n\n  static removeEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    const onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    onMessageWrapperMap.delete(onMessage);\n    // eslint-disable-next-line no-restricted-globals\n    self.removeEventListener('message', onMessageWrapper);\n  }\n\n  /**\n   * Send a message from a worker to creating thread (main thread)\n   * @param type\n   * @param payload\n   */\n  static postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    if (self) {\n      const data: WorkerMessageData = {source: 'loaders.gl', type, payload};\n      const transferList = getTransferList(payload);\n      // eslint-disable-next-line no-restricted-globals\n      // @ts-ignore\n      self.postMessage(data, transferList);\n    }\n  }\n}\n\n// Filter out noise messages sent to workers\nfunction isKnownMessage(message) {\n  const {type, data} = message;\n  return (\n    type === 'message' &&\n    data &&\n    typeof data.source === 'string' &&\n    data.source.startsWith('loaders.gl')\n  );\n}\n"]},"metadata":{},"sourceType":"module"}