{"ast":null,"code":"import { isBlob } from '../../javascript-utils/is-type';\nimport { isLoaderObject } from '../loader-utils/normalize-loader';\nimport { getFetchFunction } from '../loader-utils/option-utils';\nimport { parse } from './parse';\nexport async function load(url, loaders, options, context) {\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined;\n    options = loaders;\n    loaders = undefined;\n  }\n\n  const fetch = getFetchFunction(options);\n  let data = url;\n\n  if (typeof url === 'string') {\n    data = await fetch(url);\n  }\n\n  if (isBlob(url)) {\n    data = await fetch(url);\n  }\n\n  return await parse(data, loaders, options);\n}","map":{"version":3,"sources":["../../../../src/lib/api/load.ts"],"names":["Array","isLoaderObject","context","options","loaders","fetch","getFetchFunction","data","isBlob","parse"],"mappings":"AACA,SAAA,MAAA,QAAA,gCAAA;AACA,SAAA,cAAA,QAAA,kCAAA;AACA,SAAA,gBAAA,QAAA,8BAAA;AAEA,SAAA,KAAA,QAAA,SAAA;AAYA,OAAO,eAAA,IAAA,CAAA,GAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAKS;AAEd,MAAI,CAACA,KAAK,CAALA,OAAAA,CAAD,OAACA,CAAD,IAA2B,CAACC,cAAc,CAA9C,OAA8C,CAA9C,EAAyD;AACvDC,IAAAA,OAAO,GAAPA,SAAAA;AACAC,IAAAA,OAAO,GAAPA,OAAAA;AACAC,IAAAA,OAAO,GAAPA,SAAAA;AACD;;AAGD,QAAMC,KAAK,GAAGC,gBAAgB,CAA9B,OAA8B,CAA9B;AAGA,MAAIC,IAAI,GAAR,GAAA;;AAEA,MAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;AAC3BA,IAAAA,IAAI,GAAG,MAAMF,KAAK,CAAlBE,GAAkB,CAAlBA;AAED;;AAED,MAAIC,MAAM,CAAV,GAAU,CAAV,EAAiB;AAEfD,IAAAA,IAAI,GAAG,MAAMF,KAAK,CAAlBE,GAAkB,CAAlBA;AACD;;AAGD,SAAO,MAAME,KAAK,CAAA,IAAA,EAAA,OAAA,EAAlB,OAAkB,CAAlB;AACD","sourcesContent":["import type {DataType, Loader, LoaderContext, LoaderOptions} from '@loaders.gl/loader-utils';\nimport {isBlob} from '../../javascript-utils/is-type';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {getFetchFunction} from '../loader-utils/option-utils';\n\nimport {parse} from './parse';\n\n/**\n * Parses `data` using a specified loader\n * Note: Load does duplicate a lot of parse.\n * it can also call fetchFile on string urls, which `parse` won't do.\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\n// implementation signature\nexport async function load(\n  url: string | DataType,\n  loaders?: Loader | Loader[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<any> {\n  // Signature: load(url, options)\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined; // context not supported in short signature\n    options = loaders as LoaderOptions;\n    loaders = undefined;\n  }\n\n  // Select fetch function\n  const fetch = getFetchFunction(options);\n\n  // at this point, `url` could be already loaded binary data\n  let data = url;\n  // url is a string, fetch the url\n  if (typeof url === 'string') {\n    data = await fetch(url);\n    // URL is Blob or File, fetchFile handles it (alt: we could generate ObjectURL here)\n  }\n\n  if (isBlob(url)) {\n    // The fetch response object will contain blob.name\n    data = await fetch(url);\n  }\n\n  // Data is loaded (at least we have a `Response` object) so time to hand over to `parse`\n  return await parse(data, loaders, options);\n}\n"]},"metadata":{},"sourceType":"module"}