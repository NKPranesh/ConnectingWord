{"ast":null,"code":"import { assert } from '../utils';\nimport { parsePropTypes } from './filters/prop-types';\nconst VERTEX_SHADER = 'vs';\nconst FRAGMENT_SHADER = 'fs';\nexport default class ShaderModule {\n  constructor(_ref) {\n    let {\n      name,\n      vs,\n      fs,\n      dependencies = [],\n      uniforms,\n      getUniforms,\n      deprecations = [],\n      defines = {},\n      inject = {},\n      vertexShader,\n      fragmentShader\n    } = _ref;\n    assert(typeof name === 'string');\n    this.name = name;\n    this.vs = vs || vertexShader;\n    this.fs = fs || fragmentShader;\n    this.getModuleUniforms = getUniforms;\n    this.dependencies = dependencies;\n    this.deprecations = this._parseDeprecationDefinitions(deprecations);\n    this.defines = defines;\n    this.injections = normalizeInjections(inject);\n\n    if (uniforms) {\n      this.uniforms = parsePropTypes(uniforms);\n    }\n  }\n\n  getModuleSource(type) {\n    let moduleSource;\n\n    switch (type) {\n      case VERTEX_SHADER:\n        moduleSource = this.vs || '';\n        break;\n\n      case FRAGMENT_SHADER:\n        moduleSource = this.fs || '';\n        break;\n\n      default:\n        assert(false);\n    }\n\n    return `\\\n#define MODULE_${this.name.toUpperCase().replace(/[^0-9a-z]/gi, '_')}\n${moduleSource}\\\n// END MODULE_${this.name}\n\n`;\n  }\n\n  getUniforms(opts, uniforms) {\n    if (this.getModuleUniforms) {\n      return this.getModuleUniforms(opts, uniforms);\n    }\n\n    if (this.uniforms) {\n      return this._defaultGetUniforms(opts);\n    }\n\n    return {};\n  }\n\n  getDefines() {\n    return this.defines;\n  }\n\n  checkDeprecations(shaderSource, log) {\n    this.deprecations.forEach(def => {\n      if (def.regex.test(shaderSource)) {\n        if (def.deprecated) {\n          log.deprecated(def.old, def.new)();\n        } else {\n          log.removed(def.old, def.new)();\n        }\n      }\n    });\n  }\n\n  _parseDeprecationDefinitions(deprecations) {\n    deprecations.forEach(def => {\n      switch (def.type) {\n        case 'function':\n          def.regex = new RegExp(`\\\\b${def.old}\\\\(`);\n          break;\n\n        default:\n          def.regex = new RegExp(`${def.type} ${def.old};`);\n      }\n    });\n    return deprecations;\n  }\n\n  _defaultGetUniforms() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const uniforms = {};\n    const propTypes = this.uniforms;\n\n    for (const key in propTypes) {\n      const propDef = propTypes[key];\n\n      if (key in opts && !propDef.private) {\n        if (propDef.validate) {\n          assert(propDef.validate(opts[key], propDef), `${this.name}: invalid ${key}`);\n        }\n\n        uniforms[key] = opts[key];\n      } else {\n        uniforms[key] = propDef.value;\n      }\n    }\n\n    return uniforms;\n  }\n\n}\nexport function normalizeShaderModule(module) {\n  if (!module.normalized) {\n    module.normalized = true;\n\n    if (module.uniforms && !module.getUniforms) {\n      const shaderModule = new ShaderModule(module);\n      module.getUniforms = shaderModule.getUniforms.bind(shaderModule);\n    }\n  }\n\n  return module;\n}\n\nfunction normalizeInjections(injections) {\n  const result = {\n    vs: {},\n    fs: {}\n  };\n\n  for (const hook in injections) {\n    let injection = injections[hook];\n    const stage = hook.slice(0, 2);\n\n    if (typeof injection === 'string') {\n      injection = {\n        order: 0,\n        injection\n      };\n    }\n\n    result[stage][hook] = injection;\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../../src/lib/shader-module.js"],"names":["VERTEX_SHADER","FRAGMENT_SHADER","constructor","dependencies","deprecations","defines","inject","fragmentShader","assert","vs","fs","normalizeInjections","parsePropTypes","getModuleSource","moduleSource","name","getUniforms","getDefines","checkDeprecations","def","log","_parseDeprecationDefinitions","old","type","_defaultGetUniforms","opts","uniforms","propTypes","propDef","key","module","shaderModule","result","injection","injections","stage","hook","order"],"mappings":"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","sourcesContent":["import {assert} from '../utils';\nimport {parsePropTypes} from './filters/prop-types';\n\nconst VERTEX_SHADER = 'vs';\nconst FRAGMENT_SHADER = 'fs';\n\nexport default class ShaderModule {\n  constructor({\n    name,\n    vs,\n    fs,\n    dependencies = [],\n    uniforms,\n    getUniforms,\n    deprecations = [],\n    defines = {},\n    inject = {},\n    // DEPRECATED\n    vertexShader,\n    fragmentShader\n  }) {\n    assert(typeof name === 'string');\n    this.name = name;\n    this.vs = vs || vertexShader;\n    this.fs = fs || fragmentShader;\n    this.getModuleUniforms = getUniforms;\n    this.dependencies = dependencies;\n    this.deprecations = this._parseDeprecationDefinitions(deprecations);\n    this.defines = defines;\n    this.injections = normalizeInjections(inject);\n\n    if (uniforms) {\n      this.uniforms = parsePropTypes(uniforms);\n    }\n  }\n\n  // Extracts the source code chunk for the specified shader type from the named shader module\n  getModuleSource(type) {\n    let moduleSource;\n    switch (type) {\n      case VERTEX_SHADER:\n        moduleSource = this.vs || '';\n        break;\n      case FRAGMENT_SHADER:\n        moduleSource = this.fs || '';\n        break;\n      default:\n        assert(false);\n    }\n\n    return `\\\n#define MODULE_${this.name.toUpperCase().replace(/[^0-9a-z]/gi, '_')}\n${moduleSource}\\\n// END MODULE_${this.name}\n\n`;\n  }\n\n  getUniforms(opts, uniforms) {\n    if (this.getModuleUniforms) {\n      return this.getModuleUniforms(opts, uniforms);\n    }\n    // Build uniforms from the uniforms array\n    if (this.uniforms) {\n      return this._defaultGetUniforms(opts);\n    }\n    return {};\n  }\n\n  getDefines() {\n    return this.defines;\n  }\n\n  // Warn about deprecated uniforms or functions\n  checkDeprecations(shaderSource, log) {\n    this.deprecations.forEach(def => {\n      if (def.regex.test(shaderSource)) {\n        if (def.deprecated) {\n          log.deprecated(def.old, def.new)();\n        } else {\n          log.removed(def.old, def.new)();\n        }\n      }\n    });\n  }\n\n  _parseDeprecationDefinitions(deprecations) {\n    deprecations.forEach(def => {\n      switch (def.type) {\n        case 'function':\n          def.regex = new RegExp(`\\\\b${def.old}\\\\(`);\n          break;\n        default:\n          def.regex = new RegExp(`${def.type} ${def.old};`);\n      }\n    });\n\n    return deprecations;\n  }\n\n  _defaultGetUniforms(opts = {}) {\n    const uniforms = {};\n    const propTypes = this.uniforms;\n\n    for (const key in propTypes) {\n      const propDef = propTypes[key];\n      if (key in opts && !propDef.private) {\n        if (propDef.validate) {\n          assert(propDef.validate(opts[key], propDef), `${this.name}: invalid ${key}`);\n        }\n        uniforms[key] = opts[key];\n      } else {\n        uniforms[key] = propDef.value;\n      }\n    }\n\n    return uniforms;\n  }\n}\n\n// This utility mutates the original module\n// Keeping for backward compatibility\n// TODO - remove in v8\nexport function normalizeShaderModule(module) {\n  if (!module.normalized) {\n    module.normalized = true;\n    if (module.uniforms && !module.getUniforms) {\n      const shaderModule = new ShaderModule(module);\n      module.getUniforms = shaderModule.getUniforms.bind(shaderModule);\n    }\n  }\n  return module;\n}\n\nfunction normalizeInjections(injections) {\n  const result = {\n    vs: {},\n    fs: {}\n  };\n\n  for (const hook in injections) {\n    let injection = injections[hook];\n    const stage = hook.slice(0, 2);\n\n    if (typeof injection === 'string') {\n      injection = {\n        order: 0,\n        injection\n      };\n    }\n\n    result[stage][hook] = injection;\n  }\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}