{"ast":null,"code":"import { getAccessorTypeFromSize, getComponentTypeFromArray } from './gltf-utils';\nexport function getGLTFAccessors(attributes) {\n  const accessors = {};\n\n  for (const name in attributes) {\n    const attribute = attributes[name];\n\n    if (name !== 'indices') {\n      const glTFAccessor = getGLTFAccessor(attribute);\n      accessors[name] = glTFAccessor;\n    }\n  }\n\n  return accessors;\n}\nexport function getGLTFAccessor(attribute) {\n  const {\n    buffer,\n    size,\n    count\n  } = getAccessorData(attribute);\n  const glTFAccessor = {\n    value: buffer,\n    size,\n    byteOffset: 0,\n    count,\n    type: getAccessorTypeFromSize(size),\n    componentType: getComponentTypeFromArray(buffer)\n  };\n  return glTFAccessor;\n}\n\nfunction getAccessorData(attribute) {\n  let buffer = attribute;\n  let size = 1;\n  let count = 0;\n\n  if (attribute && attribute.value) {\n    buffer = attribute.value;\n    size = attribute.size || 1;\n  }\n\n  if (buffer) {\n    if (!ArrayBuffer.isView(buffer)) {\n      buffer = toTypedArray(buffer, Float32Array);\n    }\n\n    count = buffer.length / size;\n  }\n\n  return {\n    buffer,\n    size,\n    count\n  };\n}\n\nfunction toTypedArray(array, ArrayType) {\n  let convertTypedArrays = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (!array) {\n    return null;\n  }\n\n  if (Array.isArray(array)) {\n    return new ArrayType(array);\n  }\n\n  if (convertTypedArrays && !(array instanceof ArrayType)) {\n    return new ArrayType(array);\n  }\n\n  return array;\n}","map":{"version":3,"sources":["../../../../src/lib/gltf-utils/gltf-attribute-utils.ts"],"names":["accessors","attribute","attributes","name","glTFAccessor","getGLTFAccessor","count","getAccessorData","value","byteOffset","type","getAccessorTypeFromSize","componentType","getComponentTypeFromArray","buffer","size","ArrayBuffer","toTypedArray","convertTypedArrays","Array","array"],"mappings":"AAGA,SAAA,uBAAA,EAAA,yBAAA,QAAA,cAAA;AAKA,OAAO,SAAA,gBAAA,CAAA,UAAA,EAAqE;AAC1E,QAAMA,SAAS,GAAf,EAAA;;AACA,OAAK,MAAL,IAAA,IAAA,UAAA,EAA+B;AAC7B,UAAMC,SAAS,GAAGC,UAAU,CAA5B,IAA4B,CAA5B;;AACA,QAAIC,IAAI,KAAR,SAAA,EAAwB;AACtB,YAAMC,YAAY,GAAGC,eAAe,CAApC,SAAoC,CAApC;AACAL,MAAAA,SAAS,CAATA,IAAS,CAATA,GAAAA,YAAAA;AACD;AACF;;AACD,SAAA,SAAA;AACD;AAKD,OAAO,SAAA,eAAA,CAAA,SAAA,EAAoC;AACzC,QAAM;AAAA,IAAA,MAAA;AAAA,IAAA,IAAA;AAAeM,IAAAA;AAAf,MAAwBC,eAAe,CAA7C,SAA6C,CAA7C;AAEA,QAAMH,YAA0B,GAAG;AAMjCI,IAAAA,KAAK,EAN4B,MAAA;AAAA,IAAA,IAAA;AASjCC,IAAAA,UAAU,EATuB,CAAA;AAAA,IAAA,KAAA;AAWjCC,IAAAA,IAAI,EAAEC,uBAAuB,CAXI,IAWJ,CAXI;AAYjCC,IAAAA,aAAa,EAAEC,yBAAyB,CAAA,MAAA;AAZP,GAAnC;AAeA,SAAA,YAAA;AACD;;AAMD,SAAA,eAAA,CAAA,SAAA,EAAoC;AAClC,MAAIC,MAAM,GAAV,SAAA;AACA,MAAIC,IAAI,GAAR,CAAA;AACA,MAAIT,KAAK,GAAT,CAAA;;AAEA,MAAIL,SAAS,IAAIA,SAAS,CAA1B,KAAA,EAAkC;AAChCa,IAAAA,MAAM,GAAGb,SAAS,CAAlBa,KAAAA;AACAC,IAAAA,IAAI,GAAGd,SAAS,CAATA,IAAAA,IAAPc,CAAAA;AACD;;AAED,MAAA,MAAA,EAAY;AACV,QAAI,CAACC,WAAW,CAAXA,MAAAA,CAAL,MAAKA,CAAL,EAAiC;AAC/BF,MAAAA,MAAM,GAAGG,YAAY,CAAA,MAAA,EAArBH,YAAqB,CAArBA;AACD;;AACDR,IAAAA,KAAK,GAAGQ,MAAM,CAANA,MAAAA,GAARR,IAAAA;AACD;;AAED,SAAO;AAAA,IAAA,MAAA;AAAA,IAAA,IAAA;AAAeA,IAAAA;AAAf,GAAP;AACD;;AAGD,SAAA,YAAA,CAAA,KAAA,EAAA,SAAA,EAAoE;AAAA,MAA5BY,kBAA4B,uEAApE,KAAoE;;AAClE,MAAI,CAAJ,KAAA,EAAY;AACV,WAAA,IAAA;AACD;;AACD,MAAIC,KAAK,CAALA,OAAAA,CAAJ,KAAIA,CAAJ,EAA0B;AACxB,WAAO,IAAA,SAAA,CAAP,KAAO,CAAP;AACD;;AACD,MAAID,kBAAkB,IAAI,EAAEE,KAAK,YAAjC,SAA0B,CAA1B,EAAyD;AACvD,WAAO,IAAA,SAAA,CAAP,KAAO,CAAP;AACD;;AACD,SAAA,KAAA;AACD","sourcesContent":["// import type {TypedArray} from '../types/loader-utils';\nimport type {GLTFAccessor} from '../types/gltf-types';\n// TODO - remove\nimport {getAccessorTypeFromSize, getComponentTypeFromArray} from './gltf-utils';\n\n// Returns a fresh attributes object with glTF-standardized attributes names\n// Attributes that cannot be identified will not be included\n// Removes `indices` if present, as it should be stored separately from the attributes\nexport function getGLTFAccessors(attributes): {[key: string]: GLTFAccessor} {\n  const accessors = {};\n  for (const name in attributes) {\n    const attribute = attributes[name];\n    if (name !== 'indices') {\n      const glTFAccessor = getGLTFAccessor(attribute);\n      accessors[name] = glTFAccessor;\n    }\n  }\n  return accessors;\n}\n\n// Fix up a single accessor.\n// Input: typed array or a partial accessor object\n// Return: accessor object\nexport function getGLTFAccessor(attribute) {\n  const {buffer, size, count} = getAccessorData(attribute);\n\n  const glTFAccessor: GLTFAccessor = {\n    // glTF Accessor values\n    // TODO: Instead of a bufferView index we could have an actual buffer (typed array)\n    // bufferView: null,\n    // TODO: Deprecate `value` in favor of bufferView?\n    // @ts-ignore\n    value: buffer,\n    size, // Decoded `type` (e.g. SCALAR)\n\n    byteOffset: 0,\n    count,\n    type: getAccessorTypeFromSize(size),\n    componentType: getComponentTypeFromArray(buffer)\n  };\n\n  return glTFAccessor;\n}\n\n// export function getGLTFAttribute(data, gltfAttributeName): GLTFAccessor {\n//   return data.attributes[data.glTFAttributeMap[gltfAttributeName]];\n// }\n\nfunction getAccessorData(attribute) {\n  let buffer = attribute;\n  let size = 1;\n  let count = 0;\n\n  if (attribute && attribute.value) {\n    buffer = attribute.value;\n    size = attribute.size || 1;\n  }\n\n  if (buffer) {\n    if (!ArrayBuffer.isView(buffer)) {\n      buffer = toTypedArray(buffer, Float32Array);\n    }\n    count = buffer.length / size;\n  }\n\n  return {buffer, size, count};\n}\n\n// Convert non-typed arrays to arrays of specified format\nfunction toTypedArray(array, ArrayType, convertTypedArrays = false) {\n  if (!array) {\n    return null;\n  }\n  if (Array.isArray(array)) {\n    return new ArrayType(array);\n  }\n  if (convertTypedArrays && !(array instanceof ArrayType)) {\n    return new ArrayType(array);\n  }\n  return array;\n}\n"]},"metadata":{},"sourceType":"module"}