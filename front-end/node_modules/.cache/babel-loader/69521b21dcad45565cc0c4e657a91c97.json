{"ast":null,"code":"const isObject = value => value && typeof value === 'object';\n\nexport async function asyncDeepMap(tree, func) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return await mapSubtree(tree, func, options);\n}\nexport async function mapSubtree(object, func, options) {\n  if (Array.isArray(object)) {\n    return await mapArray(object, func, options);\n  }\n\n  if (isObject(object)) {\n    return await mapObject(object, func, options);\n  }\n\n  const url = object;\n  return await func(url, options);\n}\n\nasync function mapObject(object, func, options) {\n  const promises = [];\n  const values = {};\n\n  for (const key in object) {\n    const url = object[key];\n    const promise = mapSubtree(url, func, options).then(value => {\n      values[key] = value;\n    });\n    promises.push(promise);\n  }\n\n  await Promise.all(promises);\n  return values;\n}\n\nasync function mapArray(urlArray, func) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const promises = urlArray.map(url => mapSubtree(url, func, options));\n  return await Promise.all(promises);\n}","map":{"version":3,"sources":["../../../../src/lib/texture-api/async-deep-map.ts"],"names":["isObject","value","options","mapSubtree","Array","mapArray","mapObject","url","func","promises","values","object","promise","Promise","urlArray"],"mappings":"AAgBA,MAAMA,QAAQ,GAAIC,KAAD,IAAWA,KAAK,IAAI,OAAA,KAAA,KAArC,QAAA;;AAKA,OAAO,eAAA,YAAA,CAAA,IAAA,EAAA,IAAA,EAAsD;AAAA,MAAdC,OAAc,uEAAtD,EAAsD;AAC3D,SAAO,MAAMC,UAAU,CAAA,IAAA,EAAA,IAAA,EAAvB,OAAuB,CAAvB;AACD;AAED,OAAO,eAAA,UAAA,CAAA,MAAA,EAAA,IAAA,EAAA,OAAA,EAAiD;AACtD,MAAIC,KAAK,CAALA,OAAAA,CAAJ,MAAIA,CAAJ,EAA2B;AACzB,WAAO,MAAMC,QAAQ,CAAA,MAAA,EAAA,IAAA,EAArB,OAAqB,CAArB;AACD;;AAED,MAAIL,QAAQ,CAAZ,MAAY,CAAZ,EAAsB;AACpB,WAAO,MAAMM,SAAS,CAAA,MAAA,EAAA,IAAA,EAAtB,OAAsB,CAAtB;AACD;;AAGD,QAAMC,GAAG,GAAT,MAAA;AACA,SAAO,MAAMC,IAAI,CAAA,GAAA,EAAjB,OAAiB,CAAjB;AACD;;AAID,eAAA,SAAA,CAAA,MAAA,EAAA,IAAA,EAAA,OAAA,EAAgD;AAC9C,QAAMC,QAAwB,GAA9B,EAAA;AACA,QAAMC,MAAM,GAAZ,EAAA;;AAEA,OAAK,MAAL,GAAA,IAAA,MAAA,EAA0B;AACxB,UAAMH,GAAG,GAAGI,MAAM,CAAlB,GAAkB,CAAlB;AACA,UAAMC,OAAO,GAAG,UAAU,CAAA,GAAA,EAAA,IAAA,EAAV,OAAU,CAAV,CAAA,IAAA,CAAqCX,KAAD,IAAW;AAC7DS,MAAAA,MAAM,CAANA,GAAM,CAANA,GAAAA,KAAAA;AADF,KAAgB,CAAhB;AAGAD,IAAAA,QAAQ,CAARA,IAAAA,CAAAA,OAAAA;AACD;;AAED,QAAMI,OAAO,CAAPA,GAAAA,CAAN,QAAMA,CAAN;AAEA,SAAA,MAAA;AACD;;AAED,eAAA,QAAA,CAAA,QAAA,EAAA,IAAA,EAAsD;AAAA,MAAdX,OAAc,uEAAtD,EAAsD;AACpD,QAAMO,QAAQ,GAAGK,QAAQ,CAARA,GAAAA,CAAcP,GAAD,IAASJ,UAAU,CAAA,GAAA,EAAA,IAAA,EAAjD,OAAiD,CAAhCW,CAAjB;AACA,SAAO,MAAMD,OAAO,CAAPA,GAAAA,CAAb,QAAaA,CAAb;AACD","sourcesContent":["/*\nAsynchronously maps a deep structure of values (e.g. objects and arrays of urls).\n\nE.g. a mipmapped cubemap\n{\n  [CUBE_FACE_FRONT]: [\n    \"image-front-0.jpg\",\n    \"image-front-1.jpg\",\n    \"image-front-2.jpg\",\n  ],\n  [CUBE_MAP_BACK]: [\n    ...\n  ]\n}\n*/\n\nconst isObject = (value) => value && typeof value === 'object';\n\n// Loads a deep structure of urls (objects and arrays of urls)\n// Returns an object with six key-value pairs containing the images (or image mip arrays)\n// for each cube face\nexport async function asyncDeepMap(tree, func, options = {}) {\n  return await mapSubtree(tree, func, options);\n}\n\nexport async function mapSubtree(object, func, options) {\n  if (Array.isArray(object)) {\n    return await mapArray(object, func, options);\n  }\n\n  if (isObject(object)) {\n    return await mapObject(object, func, options);\n  }\n\n  // TODO - ignore non-urls, non-arraybuffers?\n  const url = object;\n  return await func(url, options);\n}\n\n// HELPERS\n\nasync function mapObject(object, func, options) {\n  const promises: Promise<any>[] = [];\n  const values = {};\n\n  for (const key in object) {\n    const url = object[key];\n    const promise = mapSubtree(url, func, options).then((value) => {\n      values[key] = value;\n    });\n    promises.push(promise);\n  }\n\n  await Promise.all(promises);\n\n  return values;\n}\n\nasync function mapArray(urlArray, func, options = {}) {\n  const promises = urlArray.map((url) => mapSubtree(url, func, options));\n  return await Promise.all(promises);\n}\n"]},"metadata":{},"sourceType":"module"}