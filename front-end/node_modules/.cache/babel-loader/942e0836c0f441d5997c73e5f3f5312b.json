{"ast":null,"code":"import { MAGIC_ARRAY } from '../constants';\nimport { encode3DTileHeader, encode3DTileByteLength } from './helpers/encode-3d-tile-header';\nexport function encodeComposite3DTile(tile, dataView, byteOffset, options, encode3DTile) {\n  tile = {\n    magic: MAGIC_ARRAY.COMPOSITE,\n    tiles: [],\n    ...tile\n  };\n  const byteOffsetStart = byteOffset;\n  byteOffset += encode3DTileHeader(tile, dataView, byteOffset);\n\n  if (dataView) {\n    dataView.setUint32(byteOffset, tile.tiles.length, true);\n  }\n\n  byteOffset += 4;\n\n  for (let i = 0; i < tile.tiles.length; ++i) {\n    byteOffset += encode3DTile(tile.tiles[i], dataView, byteOffset, options);\n  }\n\n  encode3DTileByteLength(dataView, byteOffsetStart, byteOffset - byteOffsetStart);\n  return byteOffset;\n}","map":{"version":3,"sources":["../../../../src/lib/encoders/encode-3d-tile-composite.js"],"names":["tile","magic","MAGIC_ARRAY","tiles","byteOffsetStart","byteOffset","encode3DTileHeader","dataView","i","encode3DTile","encode3DTileByteLength"],"mappings":"AAGA,SAAA,WAAA,QAAA,cAAA;AACA,SAAA,kBAAA,EAAA,sBAAA,QAAA,iCAAA;AAEA,OAAO,SAAA,qBAAA,CAAA,IAAA,EAAA,QAAA,EAAA,UAAA,EAAA,OAAA,EAAA,YAAA,EAAkF;AAEvFA,EAAAA,IAAI,GAAG;AAACC,IAAAA,KAAK,EAAEC,WAAW,CAAnB,SAAA;AAA+BC,IAAAA,KAAK,EAApC,EAAA;AAA0C,OAAGH;AAA7C,GAAPA;AAEA,QAAMI,eAAe,GAArB,UAAA;AAEAC,EAAAA,UAAU,IAAIC,kBAAkB,CAAA,IAAA,EAAA,QAAA,EAAhCD,UAAgC,CAAhCA;;AAEA,MAAA,QAAA,EAAc;AACZE,IAAAA,QAAQ,CAARA,SAAAA,CAAAA,UAAAA,EAA+BP,IAAI,CAAJA,KAAAA,CAA/BO,MAAAA,EAAAA,IAAAA;AACD;;AACDF,EAAAA,UAAU,IAAVA,CAAAA;;AAEA,OAAK,IAAIG,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGR,IAAI,CAAJA,KAAAA,CAApB,MAAA,EAAuC,EAAvC,CAAA,EAA4C;AAC1CK,IAAAA,UAAU,IAAII,YAAY,CAACT,IAAI,CAAJA,KAAAA,CAAD,CAACA,CAAD,EAAA,QAAA,EAAA,UAAA,EAA1BK,OAA0B,CAA1BA;AACD;;AAGDK,EAAAA,sBAAsB,CAAA,QAAA,EAAA,eAAA,EAA4BL,UAAU,GAA5DK,eAAsB,CAAtBA;AAEA,SAAA,UAAA;AACD","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {MAGIC_ARRAY} from '../constants';\nimport {encode3DTileHeader, encode3DTileByteLength} from './helpers/encode-3d-tile-header';\n\nexport function encodeComposite3DTile(tile, dataView, byteOffset, options, encode3DTile) {\n  // Add default magic for this tile type\n  tile = {magic: MAGIC_ARRAY.COMPOSITE, tiles: [], ...tile};\n\n  const byteOffsetStart = byteOffset;\n\n  byteOffset += encode3DTileHeader(tile, dataView, byteOffset);\n\n  if (dataView) {\n    dataView.setUint32(byteOffset, tile.tiles.length, true); // tilesLength\n  }\n  byteOffset += 4;\n\n  for (let i = 0; i < tile.tiles.length; ++i) {\n    byteOffset += encode3DTile(tile.tiles[i], dataView, byteOffset, options);\n  }\n\n  // Go \"back\" and rewrite the tile's `byteLength` now that we know the value\n  encode3DTileByteLength(dataView, byteOffsetStart, byteOffset - byteOffsetStart);\n\n  return byteOffset;\n}\n"]},"metadata":{},"sourceType":"module"}