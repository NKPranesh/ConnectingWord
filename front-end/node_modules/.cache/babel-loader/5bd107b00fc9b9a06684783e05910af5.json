{"ast":null,"code":"import { isWebGL2 } from '../utils/webgl-checks';\nexport const GL_PARAMETER_DEFAULTS = {\n  [3042]: false,\n  [32773]: new Float32Array([0, 0, 0, 0]),\n  [32777]: 32774,\n  [34877]: 32774,\n  [32969]: 1,\n  [32968]: 0,\n  [32971]: 1,\n  [32970]: 0,\n  [3106]: new Float32Array([0, 0, 0, 0]),\n  [3107]: [true, true, true, true],\n  [2884]: false,\n  [2885]: 1029,\n  [2929]: false,\n  [2931]: 1,\n  [2932]: 513,\n  [2928]: new Float32Array([0, 1]),\n  [2930]: true,\n  [3024]: true,\n  [36006]: null,\n  [2886]: 2305,\n  [33170]: 4352,\n  [2849]: 1,\n  [32823]: false,\n  [32824]: 0,\n  [10752]: 0,\n  [32938]: 1.0,\n  [32939]: false,\n  [3089]: false,\n  [3088]: new Int32Array([0, 0, 1024, 1024]),\n  [2960]: false,\n  [2961]: 0,\n  [2968]: 0xffffffff,\n  [36005]: 0xffffffff,\n  [2962]: 519,\n  [2967]: 0,\n  [2963]: 0xffffffff,\n  [34816]: 519,\n  [36003]: 0,\n  [36004]: 0xffffffff,\n  [2964]: 7680,\n  [2965]: 7680,\n  [2966]: 7680,\n  [34817]: 7680,\n  [34818]: 7680,\n  [34819]: 7680,\n  [2978]: [0, 0, 1024, 1024],\n  [3333]: 4,\n  [3317]: 4,\n  [37440]: false,\n  [37441]: false,\n  [37443]: 37444,\n  [35723]: 4352,\n  [36010]: null,\n  [35977]: false,\n  [3330]: 0,\n  [3332]: 0,\n  [3331]: 0,\n  [3314]: 0,\n  [32878]: 0,\n  [3316]: 0,\n  [3315]: 0,\n  [32877]: 0\n};\n\nconst enable = (gl, value, key) => value ? gl.enable(key) : gl.disable(key);\n\nconst hint = (gl, value, key) => gl.hint(key, value);\n\nconst pixelStorei = (gl, value, key) => gl.pixelStorei(key, value);\n\nconst drawFramebuffer = (gl, value) => {\n  const target = isWebGL2(gl) ? 36009 : 36160;\n  return gl.bindFramebuffer(target, value);\n};\n\nconst readFramebuffer = (gl, value) => {\n  return gl.bindFramebuffer(36008, value);\n};\n\nfunction isArray(array) {\n  return Array.isArray(array) || ArrayBuffer.isView(array);\n}\n\nexport const GL_PARAMETER_SETTERS = {\n  [3042]: enable,\n  [32773]: (gl, value) => gl.blendColor(...value),\n  [32777]: 'blendEquation',\n  [34877]: 'blendEquation',\n  [32969]: 'blendFunc',\n  [32968]: 'blendFunc',\n  [32971]: 'blendFunc',\n  [32970]: 'blendFunc',\n  [3106]: (gl, value) => gl.clearColor(...value),\n  [3107]: (gl, value) => gl.colorMask(...value),\n  [2884]: enable,\n  [2885]: (gl, value) => gl.cullFace(value),\n  [2929]: enable,\n  [2931]: (gl, value) => gl.clearDepth(value),\n  [2932]: (gl, value) => gl.depthFunc(value),\n  [2928]: (gl, value) => gl.depthRange(...value),\n  [2930]: (gl, value) => gl.depthMask(value),\n  [3024]: enable,\n  [35723]: hint,\n  [36006]: drawFramebuffer,\n  [2886]: (gl, value) => gl.frontFace(value),\n  [33170]: hint,\n  [2849]: (gl, value) => gl.lineWidth(value),\n  [32823]: enable,\n  [32824]: 'polygonOffset',\n  [10752]: 'polygonOffset',\n  [35977]: enable,\n  [32938]: 'sampleCoverage',\n  [32939]: 'sampleCoverage',\n  [3089]: enable,\n  [3088]: (gl, value) => gl.scissor(...value),\n  [2960]: enable,\n  [2961]: (gl, value) => gl.clearStencil(value),\n  [2968]: (gl, value) => gl.stencilMaskSeparate(1028, value),\n  [36005]: (gl, value) => gl.stencilMaskSeparate(1029, value),\n  [2962]: 'stencilFuncFront',\n  [2967]: 'stencilFuncFront',\n  [2963]: 'stencilFuncFront',\n  [34816]: 'stencilFuncBack',\n  [36003]: 'stencilFuncBack',\n  [36004]: 'stencilFuncBack',\n  [2964]: 'stencilOpFront',\n  [2965]: 'stencilOpFront',\n  [2966]: 'stencilOpFront',\n  [34817]: 'stencilOpBack',\n  [34818]: 'stencilOpBack',\n  [34819]: 'stencilOpBack',\n  [2978]: (gl, value) => gl.viewport(...value),\n  [3333]: pixelStorei,\n  [3317]: pixelStorei,\n  [37440]: pixelStorei,\n  [37441]: pixelStorei,\n  [37443]: pixelStorei,\n  [3330]: pixelStorei,\n  [3332]: pixelStorei,\n  [3331]: pixelStorei,\n  [36010]: readFramebuffer,\n  [3314]: pixelStorei,\n  [32878]: pixelStorei,\n  [3316]: pixelStorei,\n  [3315]: pixelStorei,\n  [32877]: pixelStorei,\n  framebuffer: (gl, framebuffer) => {\n    const handle = framebuffer && 'handle' in framebuffer ? framebuffer.handle : framebuffer;\n    return gl.bindFramebuffer(36160, handle);\n  },\n  blend: (gl, value) => value ? gl.enable(3042) : gl.disable(3042),\n  blendColor: (gl, value) => gl.blendColor(...value),\n  blendEquation: (gl, args) => {\n    args = isArray(args) ? args : [args, args];\n    gl.blendEquationSeparate(...args);\n  },\n  blendFunc: (gl, args) => {\n    args = isArray(args) && args.length === 2 ? [...args, ...args] : args;\n    gl.blendFuncSeparate(...args);\n  },\n  clearColor: (gl, value) => gl.clearColor(...value),\n  clearDepth: (gl, value) => gl.clearDepth(value),\n  clearStencil: (gl, value) => gl.clearStencil(value),\n  colorMask: (gl, value) => gl.colorMask(...value),\n  cull: (gl, value) => value ? gl.enable(2884) : gl.disable(2884),\n  cullFace: (gl, value) => gl.cullFace(value),\n  depthTest: (gl, value) => value ? gl.enable(2929) : gl.disable(2929),\n  depthFunc: (gl, value) => gl.depthFunc(value),\n  depthMask: (gl, value) => gl.depthMask(value),\n  depthRange: (gl, value) => gl.depthRange(...value),\n  dither: (gl, value) => value ? gl.enable(3024) : gl.disable(3024),\n  derivativeHint: (gl, value) => {\n    gl.hint(35723, value);\n  },\n  frontFace: (gl, value) => gl.frontFace(value),\n  mipmapHint: (gl, value) => gl.hint(33170, value),\n  lineWidth: (gl, value) => gl.lineWidth(value),\n  polygonOffsetFill: (gl, value) => value ? gl.enable(32823) : gl.disable(32823),\n  polygonOffset: (gl, value) => gl.polygonOffset(...value),\n  sampleCoverage: (gl, value) => gl.sampleCoverage(...value),\n  scissorTest: (gl, value) => value ? gl.enable(3089) : gl.disable(3089),\n  scissor: (gl, value) => gl.scissor(...value),\n  stencilTest: (gl, value) => value ? gl.enable(2960) : gl.disable(2960),\n  stencilMask: (gl, value) => {\n    value = isArray(value) ? value : [value, value];\n    const [mask, backMask] = value;\n    gl.stencilMaskSeparate(1028, mask);\n    gl.stencilMaskSeparate(1029, backMask);\n  },\n  stencilFunc: (gl, args) => {\n    args = isArray(args) && args.length === 3 ? [...args, ...args] : args;\n    const [func, ref, mask, backFunc, backRef, backMask] = args;\n    gl.stencilFuncSeparate(1028, func, ref, mask);\n    gl.stencilFuncSeparate(1029, backFunc, backRef, backMask);\n  },\n  stencilOp: (gl, args) => {\n    args = isArray(args) && args.length === 3 ? [...args, ...args] : args;\n    const [sfail, dpfail, dppass, backSfail, backDpfail, backDppass] = args;\n    gl.stencilOpSeparate(1028, sfail, dpfail, dppass);\n    gl.stencilOpSeparate(1029, backSfail, backDpfail, backDppass);\n  },\n  viewport: (gl, value) => gl.viewport(...value)\n};\n\nfunction getValue(glEnum, values, cache) {\n  return values[glEnum] !== undefined ? values[glEnum] : cache[glEnum];\n}\n\nexport const GL_COMPOSITE_PARAMETER_SETTERS = {\n  blendEquation: (gl, values, cache) => gl.blendEquationSeparate(getValue(32777, values, cache), getValue(34877, values, cache)),\n  blendFunc: (gl, values, cache) => gl.blendFuncSeparate(getValue(32969, values, cache), getValue(32968, values, cache), getValue(32971, values, cache), getValue(32970, values, cache)),\n  polygonOffset: (gl, values, cache) => gl.polygonOffset(getValue(32824, values, cache), getValue(10752, values, cache)),\n  sampleCoverage: (gl, values, cache) => gl.sampleCoverage(getValue(32938, values, cache), getValue(32939, values, cache)),\n  stencilFuncFront: (gl, values, cache) => gl.stencilFuncSeparate(1028, getValue(2962, values, cache), getValue(2967, values, cache), getValue(2963, values, cache)),\n  stencilFuncBack: (gl, values, cache) => gl.stencilFuncSeparate(1029, getValue(34816, values, cache), getValue(36003, values, cache), getValue(36004, values, cache)),\n  stencilOpFront: (gl, values, cache) => gl.stencilOpSeparate(1028, getValue(2964, values, cache), getValue(2965, values, cache), getValue(2966, values, cache)),\n  stencilOpBack: (gl, values, cache) => gl.stencilOpSeparate(1029, getValue(34817, values, cache), getValue(34818, values, cache), getValue(34819, values, cache))\n};\nexport const GL_HOOKED_SETTERS = {\n  enable: (update, capability) => update({\n    [capability]: true\n  }),\n  disable: (update, capability) => update({\n    [capability]: false\n  }),\n  pixelStorei: (update, pname, value) => update({\n    [pname]: value\n  }),\n  hint: (update, pname, hint) => update({\n    [pname]: hint\n  }),\n  bindFramebuffer: (update, target, framebuffer) => {\n    switch (target) {\n      case 36160:\n        return update({\n          [36006]: framebuffer,\n          [36010]: framebuffer\n        });\n\n      case 36009:\n        return update({\n          [36006]: framebuffer\n        });\n\n      case 36008:\n        return update({\n          [36010]: framebuffer\n        });\n\n      default:\n        return null;\n    }\n  },\n  blendColor: (update, r, g, b, a) => update({\n    [32773]: new Float32Array([r, g, b, a])\n  }),\n  blendEquation: (update, mode) => update({\n    [32777]: mode,\n    [34877]: mode\n  }),\n  blendEquationSeparate: (update, modeRGB, modeAlpha) => update({\n    [32777]: modeRGB,\n    [34877]: modeAlpha\n  }),\n  blendFunc: (update, src, dst) => update({\n    [32969]: src,\n    [32968]: dst,\n    [32971]: src,\n    [32970]: dst\n  }),\n  blendFuncSeparate: (update, srcRGB, dstRGB, srcAlpha, dstAlpha) => update({\n    [32969]: srcRGB,\n    [32968]: dstRGB,\n    [32971]: srcAlpha,\n    [32970]: dstAlpha\n  }),\n  clearColor: (update, r, g, b, a) => update({\n    [3106]: new Float32Array([r, g, b, a])\n  }),\n  clearDepth: (update, depth) => update({\n    [2931]: depth\n  }),\n  clearStencil: (update, s) => update({\n    [2961]: s\n  }),\n  colorMask: (update, r, g, b, a) => update({\n    [3107]: [r, g, b, a]\n  }),\n  cullFace: (update, mode) => update({\n    [2885]: mode\n  }),\n  depthFunc: (update, func) => update({\n    [2932]: func\n  }),\n  depthRange: (update, zNear, zFar) => update({\n    [2928]: new Float32Array([zNear, zFar])\n  }),\n  depthMask: (update, mask) => update({\n    [2930]: mask\n  }),\n  frontFace: (update, face) => update({\n    [2886]: face\n  }),\n  lineWidth: (update, width) => update({\n    [2849]: width\n  }),\n  polygonOffset: (update, factor, units) => update({\n    [32824]: factor,\n    [10752]: units\n  }),\n  sampleCoverage: (update, value, invert) => update({\n    [32938]: value,\n    [32939]: invert\n  }),\n  scissor: (update, x, y, width, height) => update({\n    [3088]: new Int32Array([x, y, width, height])\n  }),\n  stencilMask: (update, mask) => update({\n    [2968]: mask,\n    [36005]: mask\n  }),\n  stencilMaskSeparate: (update, face, mask) => update({\n    [face === 1028 ? 2968 : 36005]: mask\n  }),\n  stencilFunc: (update, func, ref, mask) => update({\n    [2962]: func,\n    [2967]: ref,\n    [2963]: mask,\n    [34816]: func,\n    [36003]: ref,\n    [36004]: mask\n  }),\n  stencilFuncSeparate: (update, face, func, ref, mask) => update({\n    [face === 1028 ? 2962 : 34816]: func,\n    [face === 1028 ? 2967 : 36003]: ref,\n    [face === 1028 ? 2963 : 36004]: mask\n  }),\n  stencilOp: (update, fail, zfail, zpass) => update({\n    [2964]: fail,\n    [2965]: zfail,\n    [2966]: zpass,\n    [34817]: fail,\n    [34818]: zfail,\n    [34819]: zpass\n  }),\n  stencilOpSeparate: (update, face, fail, zfail, zpass) => update({\n    [face === 1028 ? 2964 : 34817]: fail,\n    [face === 1028 ? 2965 : 34818]: zfail,\n    [face === 1028 ? 2966 : 34819]: zpass\n  }),\n  viewport: (update, x, y, width, height) => update({\n    [2978]: [x, y, width, height]\n  })\n};\n\nconst isEnabled = (gl, key) => gl.isEnabled(key);\n\nexport const GL_PARAMETER_GETTERS = {\n  [3042]: isEnabled,\n  [2884]: isEnabled,\n  [2929]: isEnabled,\n  [3024]: isEnabled,\n  [32823]: isEnabled,\n  [32926]: isEnabled,\n  [32928]: isEnabled,\n  [3089]: isEnabled,\n  [2960]: isEnabled,\n  [35977]: isEnabled\n};","map":{"version":3,"sources":["../../../src/state-tracker/webgl-parameter-tables.js"],"names":["GL_PARAMETER_DEFAULTS","enable","value","gl","hint","pixelStorei","drawFramebuffer","target","isWebGL2","readFramebuffer","Array","ArrayBuffer","GL_PARAMETER_SETTERS","framebuffer","handle","blend","blendColor","blendEquation","args","isArray","blendFunc","clearColor","clearDepth","clearStencil","colorMask","cull","cullFace","depthTest","depthFunc","depthMask","depthRange","dither","derivativeHint","frontFace","mipmapHint","lineWidth","polygonOffsetFill","polygonOffset","sampleCoverage","scissorTest","scissor","stencilTest","stencilMask","stencilFunc","stencilOp","viewport","values","cache","GL_COMPOSITE_PARAMETER_SETTERS","getValue","stencilFuncFront","stencilFuncBack","stencilOpFront","stencilOpBack","GL_HOOKED_SETTERS","update","disable","bindFramebuffer","mode","blendEquationSeparate","modeAlpha","dst","blendFuncSeparate","dstAlpha","depth","s","func","mask","face","width","units","invert","stencilMaskSeparate","stencilFuncSeparate","zpass","stencilOpSeparate","isEnabled","GL_PARAMETER_GETTERS"],"mappings":"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","sourcesContent":["// Tables describing WebGL parameters\nimport GL from '@luma.gl/constants';\nimport {isWebGL2} from '../utils/webgl-checks';\n\n// DEFAULT SETTINGS - FOR FAST CACHE INITIALIZATION AND CONTEXT RESETS\n\n/* eslint-disable no-shadow */\n\nexport const GL_PARAMETER_DEFAULTS = {\n  [GL.BLEND]: false,\n  [GL.BLEND_COLOR]: new Float32Array([0, 0, 0, 0]),\n  [GL.BLEND_EQUATION_RGB]: GL.FUNC_ADD,\n  [GL.BLEND_EQUATION_ALPHA]: GL.FUNC_ADD,\n  [GL.BLEND_SRC_RGB]: GL.ONE,\n  [GL.BLEND_DST_RGB]: GL.ZERO,\n  [GL.BLEND_SRC_ALPHA]: GL.ONE,\n  [GL.BLEND_DST_ALPHA]: GL.ZERO,\n  [GL.COLOR_CLEAR_VALUE]: new Float32Array([0, 0, 0, 0]), // TBD\n  [GL.COLOR_WRITEMASK]: [true, true, true, true],\n  [GL.CULL_FACE]: false,\n  [GL.CULL_FACE_MODE]: GL.BACK,\n  [GL.DEPTH_TEST]: false,\n  [GL.DEPTH_CLEAR_VALUE]: 1,\n  [GL.DEPTH_FUNC]: GL.LESS,\n  [GL.DEPTH_RANGE]: new Float32Array([0, 1]), // TBD\n  [GL.DEPTH_WRITEMASK]: true,\n  [GL.DITHER]: true,\n  // FRAMEBUFFER_BINDING and DRAW_FRAMEBUFFER_BINDING(WebGL2) refer same state.\n  [GL.FRAMEBUFFER_BINDING]: null,\n  [GL.FRONT_FACE]: GL.CCW,\n  [GL.GENERATE_MIPMAP_HINT]: GL.DONT_CARE,\n  [GL.LINE_WIDTH]: 1,\n  [GL.POLYGON_OFFSET_FILL]: false,\n  [GL.POLYGON_OFFSET_FACTOR]: 0,\n  [GL.POLYGON_OFFSET_UNITS]: 0,\n  [GL.SAMPLE_COVERAGE_VALUE]: 1.0,\n  [GL.SAMPLE_COVERAGE_INVERT]: false,\n  [GL.SCISSOR_TEST]: false,\n  // Note: Dynamic value. If scissor test enabled we expect users to set correct scissor box\n  [GL.SCISSOR_BOX]: new Int32Array([0, 0, 1024, 1024]),\n  [GL.STENCIL_TEST]: false,\n  [GL.STENCIL_CLEAR_VALUE]: 0,\n  [GL.STENCIL_WRITEMASK]: 0xffffffff,\n  [GL.STENCIL_BACK_WRITEMASK]: 0xffffffff,\n  [GL.STENCIL_FUNC]: GL.ALWAYS,\n  [GL.STENCIL_REF]: 0,\n  [GL.STENCIL_VALUE_MASK]: 0xffffffff,\n  [GL.STENCIL_BACK_FUNC]: GL.ALWAYS,\n  [GL.STENCIL_BACK_REF]: 0,\n  [GL.STENCIL_BACK_VALUE_MASK]: 0xffffffff,\n  [GL.STENCIL_FAIL]: GL.KEEP,\n  [GL.STENCIL_PASS_DEPTH_FAIL]: GL.KEEP,\n  [GL.STENCIL_PASS_DEPTH_PASS]: GL.KEEP,\n  [GL.STENCIL_BACK_FAIL]: GL.KEEP,\n  [GL.STENCIL_BACK_PASS_DEPTH_FAIL]: GL.KEEP,\n  [GL.STENCIL_BACK_PASS_DEPTH_PASS]: GL.KEEP,\n  // Dynamic value: We use [0, 0, 1024, 1024] as default, but usually this is updated in each frame.\n  [GL.VIEWPORT]: [0, 0, 1024, 1024],\n  // WEBGL1 PIXEL PACK/UNPACK MODES\n  [GL.PACK_ALIGNMENT]: 4,\n  [GL.UNPACK_ALIGNMENT]: 4,\n  [GL.UNPACK_FLIP_Y_WEBGL]: false,\n  [GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL]: false,\n  [GL.UNPACK_COLORSPACE_CONVERSION_WEBGL]: GL.BROWSER_DEFAULT_WEBGL,\n\n  // WEBGL2 / EXTENSIONS\n  // gl1: 'OES_standard_derivatives'\n  [GL.FRAGMENT_SHADER_DERIVATIVE_HINT]: GL.DONT_CARE,\n  [GL.READ_FRAMEBUFFER_BINDING]: null,\n  [GL.RASTERIZER_DISCARD]: false,\n  [GL.PACK_ROW_LENGTH]: 0,\n  [GL.PACK_SKIP_PIXELS]: 0,\n  [GL.PACK_SKIP_ROWS]: 0,\n  [GL.UNPACK_ROW_LENGTH]: 0,\n  [GL.UNPACK_IMAGE_HEIGHT]: 0,\n  [GL.UNPACK_SKIP_PIXELS]: 0,\n  [GL.UNPACK_SKIP_ROWS]: 0,\n  [GL.UNPACK_SKIP_IMAGES]: 0\n};\n\n// SETTER TABLES - ENABLES SETTING ANY PARAMETER WITH A COMMON API\n\nconst enable = (gl, value, key) => (value ? gl.enable(key) : gl.disable(key));\nconst hint = (gl, value, key) => gl.hint(key, value);\nconst pixelStorei = (gl, value, key) => gl.pixelStorei(key, value);\n\nconst drawFramebuffer = (gl, value) => {\n  const target = isWebGL2(gl) ? GL.DRAW_FRAMEBUFFER : GL.FRAMEBUFFER;\n  return gl.bindFramebuffer(target, value);\n};\nconst readFramebuffer = (gl, value) => {\n  return gl.bindFramebuffer(GL.READ_FRAMEBUFFER, value);\n};\n\n// Utility\nfunction isArray(array) {\n  return Array.isArray(array) || ArrayBuffer.isView(array);\n}\n\n// Map from WebGL parameter names to corresponding WebGL setter functions\n// WegGL constants are read by parameter names, but set by function names\n// NOTE: When value type is a string, it will be handled by 'GL_COMPOSITE_PARAMETER_SETTERS'\nexport const GL_PARAMETER_SETTERS = {\n  [GL.BLEND]: enable,\n  [GL.BLEND_COLOR]: (gl, value) => gl.blendColor(...value),\n  [GL.BLEND_EQUATION_RGB]: 'blendEquation',\n  [GL.BLEND_EQUATION_ALPHA]: 'blendEquation',\n  [GL.BLEND_SRC_RGB]: 'blendFunc',\n  [GL.BLEND_DST_RGB]: 'blendFunc',\n  [GL.BLEND_SRC_ALPHA]: 'blendFunc',\n  [GL.BLEND_DST_ALPHA]: 'blendFunc',\n  [GL.COLOR_CLEAR_VALUE]: (gl, value) => gl.clearColor(...value),\n  [GL.COLOR_WRITEMASK]: (gl, value) => gl.colorMask(...value),\n  [GL.CULL_FACE]: enable,\n  [GL.CULL_FACE_MODE]: (gl, value) => gl.cullFace(value),\n  [GL.DEPTH_TEST]: enable,\n  [GL.DEPTH_CLEAR_VALUE]: (gl, value) => gl.clearDepth(value),\n  [GL.DEPTH_FUNC]: (gl, value) => gl.depthFunc(value),\n  [GL.DEPTH_RANGE]: (gl, value) => gl.depthRange(...value),\n  [GL.DEPTH_WRITEMASK]: (gl, value) => gl.depthMask(value),\n  [GL.DITHER]: enable,\n  [GL.FRAGMENT_SHADER_DERIVATIVE_HINT]: hint,\n  // NOTE: FRAMEBUFFER_BINDING and DRAW_FRAMEBUFFER_BINDING(WebGL2) refer same state.\n  [GL.FRAMEBUFFER_BINDING]: drawFramebuffer,\n  [GL.FRONT_FACE]: (gl, value) => gl.frontFace(value),\n  [GL.GENERATE_MIPMAP_HINT]: hint,\n  [GL.LINE_WIDTH]: (gl, value) => gl.lineWidth(value),\n  [GL.POLYGON_OFFSET_FILL]: enable,\n  [GL.POLYGON_OFFSET_FACTOR]: 'polygonOffset',\n  [GL.POLYGON_OFFSET_UNITS]: 'polygonOffset',\n  [GL.RASTERIZER_DISCARD]: enable,\n  [GL.SAMPLE_COVERAGE_VALUE]: 'sampleCoverage',\n  [GL.SAMPLE_COVERAGE_INVERT]: 'sampleCoverage',\n  [GL.SCISSOR_TEST]: enable,\n  [GL.SCISSOR_BOX]: (gl, value) => gl.scissor(...value),\n  [GL.STENCIL_TEST]: enable,\n  [GL.STENCIL_CLEAR_VALUE]: (gl, value) => gl.clearStencil(value),\n  [GL.STENCIL_WRITEMASK]: (gl, value) => gl.stencilMaskSeparate(GL.FRONT, value),\n  [GL.STENCIL_BACK_WRITEMASK]: (gl, value) => gl.stencilMaskSeparate(GL.BACK, value),\n  [GL.STENCIL_FUNC]: 'stencilFuncFront',\n  [GL.STENCIL_REF]: 'stencilFuncFront',\n  [GL.STENCIL_VALUE_MASK]: 'stencilFuncFront',\n  [GL.STENCIL_BACK_FUNC]: 'stencilFuncBack',\n  [GL.STENCIL_BACK_REF]: 'stencilFuncBack',\n  [GL.STENCIL_BACK_VALUE_MASK]: 'stencilFuncBack',\n  [GL.STENCIL_FAIL]: 'stencilOpFront',\n  [GL.STENCIL_PASS_DEPTH_FAIL]: 'stencilOpFront',\n  [GL.STENCIL_PASS_DEPTH_PASS]: 'stencilOpFront',\n  [GL.STENCIL_BACK_FAIL]: 'stencilOpBack',\n  [GL.STENCIL_BACK_PASS_DEPTH_FAIL]: 'stencilOpBack',\n  [GL.STENCIL_BACK_PASS_DEPTH_PASS]: 'stencilOpBack',\n  [GL.VIEWPORT]: (gl, value) => gl.viewport(...value),\n\n  // WEBGL1 PIXEL PACK/UNPACK MODES\n  [GL.PACK_ALIGNMENT]: pixelStorei,\n  [GL.UNPACK_ALIGNMENT]: pixelStorei,\n  [GL.UNPACK_FLIP_Y_WEBGL]: pixelStorei,\n  [GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL]: pixelStorei,\n  [GL.UNPACK_COLORSPACE_CONVERSION_WEBGL]: pixelStorei,\n\n  // WEBGL2 PIXEL PACK/UNPACK MODES\n  // RASTERIZER_DISCARD ...\n  [GL.PACK_ROW_LENGTH]: pixelStorei,\n  [GL.PACK_SKIP_PIXELS]: pixelStorei,\n  [GL.PACK_SKIP_ROWS]: pixelStorei,\n  [GL.READ_FRAMEBUFFER_BINDING]: readFramebuffer,\n  [GL.UNPACK_ROW_LENGTH]: pixelStorei,\n  [GL.UNPACK_IMAGE_HEIGHT]: pixelStorei,\n  [GL.UNPACK_SKIP_PIXELS]: pixelStorei,\n  [GL.UNPACK_SKIP_ROWS]: pixelStorei,\n  [GL.UNPACK_SKIP_IMAGES]: pixelStorei,\n\n  // Function-style setters\n  framebuffer: (gl, framebuffer) => {\n    // accepts 1) a WebGLFramebuffer 2) null (default framebuffer), or 3) luma.gl Framebuffer class\n    // framebuffer is null when restoring to default framebuffer, otherwise use the WebGL handle.\n    const handle = framebuffer && 'handle' in framebuffer ? framebuffer.handle : framebuffer;\n    return gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  },\n  blend: (gl, value) => (value ? gl.enable(GL.BLEND) : gl.disable(GL.BLEND)),\n  blendColor: (gl, value) => gl.blendColor(...value),\n  blendEquation: (gl, args) => {\n    args = isArray(args) ? args : [args, args];\n    gl.blendEquationSeparate(...args);\n  },\n  blendFunc: (gl, args) => {\n    args = isArray(args) && args.length === 2 ? [...args, ...args] : args;\n    gl.blendFuncSeparate(...args);\n  },\n\n  clearColor: (gl, value) => gl.clearColor(...value),\n  clearDepth: (gl, value) => gl.clearDepth(value),\n  clearStencil: (gl, value) => gl.clearStencil(value),\n\n  colorMask: (gl, value) => gl.colorMask(...value),\n\n  cull: (gl, value) => (value ? gl.enable(GL.CULL_FACE) : gl.disable(GL.CULL_FACE)),\n  cullFace: (gl, value) => gl.cullFace(value),\n\n  depthTest: (gl, value) => (value ? gl.enable(GL.DEPTH_TEST) : gl.disable(GL.DEPTH_TEST)),\n  depthFunc: (gl, value) => gl.depthFunc(value),\n  depthMask: (gl, value) => gl.depthMask(value),\n  depthRange: (gl, value) => gl.depthRange(...value),\n\n  dither: (gl, value) => (value ? gl.enable(GL.DITHER) : gl.disable(GL.DITHER)),\n\n  derivativeHint: (gl, value) => {\n    // gl1: 'OES_standard_derivatives'\n    gl.hint(GL.FRAGMENT_SHADER_DERIVATIVE_HINT, value);\n  },\n\n  frontFace: (gl, value) => gl.frontFace(value),\n\n  mipmapHint: (gl, value) => gl.hint(GL.GENERATE_MIPMAP_HINT, value),\n\n  lineWidth: (gl, value) => gl.lineWidth(value),\n\n  polygonOffsetFill: (gl, value) =>\n    value ? gl.enable(GL.POLYGON_OFFSET_FILL) : gl.disable(GL.POLYGON_OFFSET_FILL),\n  polygonOffset: (gl, value) => gl.polygonOffset(...value),\n\n  sampleCoverage: (gl, value) => gl.sampleCoverage(...value),\n\n  scissorTest: (gl, value) => (value ? gl.enable(GL.SCISSOR_TEST) : gl.disable(GL.SCISSOR_TEST)),\n  scissor: (gl, value) => gl.scissor(...value),\n\n  stencilTest: (gl, value) => (value ? gl.enable(GL.STENCIL_TEST) : gl.disable(GL.STENCIL_TEST)),\n  stencilMask: (gl, value) => {\n    value = isArray(value) ? value : [value, value];\n    const [mask, backMask] = value;\n    gl.stencilMaskSeparate(GL.FRONT, mask);\n    gl.stencilMaskSeparate(GL.BACK, backMask);\n  },\n  stencilFunc: (gl, args) => {\n    args = isArray(args) && args.length === 3 ? [...args, ...args] : args;\n    const [func, ref, mask, backFunc, backRef, backMask] = args;\n    gl.stencilFuncSeparate(GL.FRONT, func, ref, mask);\n    gl.stencilFuncSeparate(GL.BACK, backFunc, backRef, backMask);\n  },\n  stencilOp: (gl, args) => {\n    args = isArray(args) && args.length === 3 ? [...args, ...args] : args;\n    const [sfail, dpfail, dppass, backSfail, backDpfail, backDppass] = args;\n    gl.stencilOpSeparate(GL.FRONT, sfail, dpfail, dppass);\n    gl.stencilOpSeparate(GL.BACK, backSfail, backDpfail, backDppass);\n  },\n\n  viewport: (gl, value) => gl.viewport(...value)\n};\n\nfunction getValue(glEnum, values, cache) {\n  return values[glEnum] !== undefined ? values[glEnum] : cache[glEnum];\n}\n\n// COMPOSITE_WEBGL_PARAMETER_\nexport const GL_COMPOSITE_PARAMETER_SETTERS = {\n  blendEquation: (gl, values, cache) =>\n    gl.blendEquationSeparate(\n      getValue(GL.BLEND_EQUATION_RGB, values, cache),\n      getValue(GL.BLEND_EQUATION_ALPHA, values, cache)\n    ),\n  blendFunc: (gl, values, cache) =>\n    gl.blendFuncSeparate(\n      getValue(GL.BLEND_SRC_RGB, values, cache),\n      getValue(GL.BLEND_DST_RGB, values, cache),\n      getValue(GL.BLEND_SRC_ALPHA, values, cache),\n      getValue(GL.BLEND_DST_ALPHA, values, cache)\n    ),\n  polygonOffset: (gl, values, cache) =>\n    gl.polygonOffset(\n      getValue(GL.POLYGON_OFFSET_FACTOR, values, cache),\n      getValue(GL.POLYGON_OFFSET_UNITS, values, cache)\n    ),\n  sampleCoverage: (gl, values, cache) =>\n    gl.sampleCoverage(\n      getValue(GL.SAMPLE_COVERAGE_VALUE, values, cache),\n      getValue(GL.SAMPLE_COVERAGE_INVERT, values, cache)\n    ),\n  stencilFuncFront: (gl, values, cache) =>\n    gl.stencilFuncSeparate(\n      GL.FRONT,\n      getValue(GL.STENCIL_FUNC, values, cache),\n      getValue(GL.STENCIL_REF, values, cache),\n      getValue(GL.STENCIL_VALUE_MASK, values, cache)\n    ),\n  stencilFuncBack: (gl, values, cache) =>\n    gl.stencilFuncSeparate(\n      GL.BACK,\n      getValue(GL.STENCIL_BACK_FUNC, values, cache),\n      getValue(GL.STENCIL_BACK_REF, values, cache),\n      getValue(GL.STENCIL_BACK_VALUE_MASK, values, cache)\n    ),\n  stencilOpFront: (gl, values, cache) =>\n    gl.stencilOpSeparate(\n      GL.FRONT,\n      getValue(GL.STENCIL_FAIL, values, cache),\n      getValue(GL.STENCIL_PASS_DEPTH_FAIL, values, cache),\n      getValue(GL.STENCIL_PASS_DEPTH_PASS, values, cache)\n    ),\n  stencilOpBack: (gl, values, cache) =>\n    gl.stencilOpSeparate(\n      GL.BACK,\n      getValue(GL.STENCIL_BACK_FAIL, values, cache),\n      getValue(GL.STENCIL_BACK_PASS_DEPTH_FAIL, values, cache),\n      getValue(GL.STENCIL_BACK_PASS_DEPTH_PASS, values, cache)\n    )\n};\n\n// Setter functions intercepted for cache updates\nexport const GL_HOOKED_SETTERS = {\n  // GENERIC SETTERS\n\n  enable: (update, capability) =>\n    update({\n      [capability]: true\n    }),\n  disable: (update, capability) =>\n    update({\n      [capability]: false\n    }),\n  pixelStorei: (update, pname, value) =>\n    update({\n      [pname]: value\n    }),\n  hint: (update, pname, hint) =>\n    update({\n      [pname]: hint\n    }),\n\n  // SPECIFIC SETTERS\n\n  bindFramebuffer: (update, target, framebuffer) => {\n    switch (target) {\n      case GL.FRAMEBUFFER:\n        return update({\n          [GL.DRAW_FRAMEBUFFER_BINDING]: framebuffer,\n          [GL.READ_FRAMEBUFFER_BINDING]: framebuffer\n        });\n      case GL.DRAW_FRAMEBUFFER:\n        return update({[GL.DRAW_FRAMEBUFFER_BINDING]: framebuffer});\n      case GL.READ_FRAMEBUFFER:\n        return update({[GL.READ_FRAMEBUFFER_BINDING]: framebuffer});\n      default:\n        return null;\n    }\n  },\n  blendColor: (update, r, g, b, a) =>\n    update({\n      [GL.BLEND_COLOR]: new Float32Array([r, g, b, a])\n    }),\n\n  blendEquation: (update, mode) =>\n    update({\n      [GL.BLEND_EQUATION_RGB]: mode,\n      [GL.BLEND_EQUATION_ALPHA]: mode\n    }),\n\n  blendEquationSeparate: (update, modeRGB, modeAlpha) =>\n    update({\n      [GL.BLEND_EQUATION_RGB]: modeRGB,\n      [GL.BLEND_EQUATION_ALPHA]: modeAlpha\n    }),\n\n  blendFunc: (update, src, dst) =>\n    update({\n      [GL.BLEND_SRC_RGB]: src,\n      [GL.BLEND_DST_RGB]: dst,\n      [GL.BLEND_SRC_ALPHA]: src,\n      [GL.BLEND_DST_ALPHA]: dst\n    }),\n\n  blendFuncSeparate: (update, srcRGB, dstRGB, srcAlpha, dstAlpha) =>\n    update({\n      [GL.BLEND_SRC_RGB]: srcRGB,\n      [GL.BLEND_DST_RGB]: dstRGB,\n      [GL.BLEND_SRC_ALPHA]: srcAlpha,\n      [GL.BLEND_DST_ALPHA]: dstAlpha\n    }),\n\n  clearColor: (update, r, g, b, a) =>\n    update({\n      [GL.COLOR_CLEAR_VALUE]: new Float32Array([r, g, b, a])\n    }),\n\n  clearDepth: (update, depth) =>\n    update({\n      [GL.DEPTH_CLEAR_VALUE]: depth\n    }),\n\n  clearStencil: (update, s) =>\n    update({\n      [GL.STENCIL_CLEAR_VALUE]: s\n    }),\n\n  colorMask: (update, r, g, b, a) =>\n    update({\n      [GL.COLOR_WRITEMASK]: [r, g, b, a]\n    }),\n\n  cullFace: (update, mode) =>\n    update({\n      [GL.CULL_FACE_MODE]: mode\n    }),\n\n  depthFunc: (update, func) =>\n    update({\n      [GL.DEPTH_FUNC]: func\n    }),\n\n  depthRange: (update, zNear, zFar) =>\n    update({\n      [GL.DEPTH_RANGE]: new Float32Array([zNear, zFar])\n    }),\n\n  depthMask: (update, mask) =>\n    update({\n      [GL.DEPTH_WRITEMASK]: mask\n    }),\n\n  frontFace: (update, face) =>\n    update({\n      [GL.FRONT_FACE]: face\n    }),\n\n  lineWidth: (update, width) =>\n    update({\n      [GL.LINE_WIDTH]: width\n    }),\n\n  polygonOffset: (update, factor, units) =>\n    update({\n      [GL.POLYGON_OFFSET_FACTOR]: factor,\n      [GL.POLYGON_OFFSET_UNITS]: units\n    }),\n\n  sampleCoverage: (update, value, invert) =>\n    update({\n      [GL.SAMPLE_COVERAGE_VALUE]: value,\n      [GL.SAMPLE_COVERAGE_INVERT]: invert\n    }),\n\n  scissor: (update, x, y, width, height) =>\n    update({\n      [GL.SCISSOR_BOX]: new Int32Array([x, y, width, height])\n    }),\n\n  stencilMask: (update, mask) =>\n    update({\n      [GL.STENCIL_WRITEMASK]: mask,\n      [GL.STENCIL_BACK_WRITEMASK]: mask\n    }),\n\n  stencilMaskSeparate: (update, face, mask) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_WRITEMASK : GL.STENCIL_BACK_WRITEMASK]: mask\n    }),\n\n  stencilFunc: (update, func, ref, mask) =>\n    update({\n      [GL.STENCIL_FUNC]: func,\n      [GL.STENCIL_REF]: ref,\n      [GL.STENCIL_VALUE_MASK]: mask,\n      [GL.STENCIL_BACK_FUNC]: func,\n      [GL.STENCIL_BACK_REF]: ref,\n      [GL.STENCIL_BACK_VALUE_MASK]: mask\n    }),\n\n  stencilFuncSeparate: (update, face, func, ref, mask) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_FUNC : GL.STENCIL_BACK_FUNC]: func,\n      [face === GL.FRONT ? GL.STENCIL_REF : GL.STENCIL_BACK_REF]: ref,\n      [face === GL.FRONT ? GL.STENCIL_VALUE_MASK : GL.STENCIL_BACK_VALUE_MASK]: mask\n    }),\n\n  stencilOp: (update, fail, zfail, zpass) =>\n    update({\n      [GL.STENCIL_FAIL]: fail,\n      [GL.STENCIL_PASS_DEPTH_FAIL]: zfail,\n      [GL.STENCIL_PASS_DEPTH_PASS]: zpass,\n      [GL.STENCIL_BACK_FAIL]: fail,\n      [GL.STENCIL_BACK_PASS_DEPTH_FAIL]: zfail,\n      [GL.STENCIL_BACK_PASS_DEPTH_PASS]: zpass\n    }),\n\n  stencilOpSeparate: (update, face, fail, zfail, zpass) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_FAIL : GL.STENCIL_BACK_FAIL]: fail,\n      [face === GL.FRONT ? GL.STENCIL_PASS_DEPTH_FAIL : GL.STENCIL_BACK_PASS_DEPTH_FAIL]: zfail,\n      [face === GL.FRONT ? GL.STENCIL_PASS_DEPTH_PASS : GL.STENCIL_BACK_PASS_DEPTH_PASS]: zpass\n    }),\n\n  viewport: (update, x, y, width, height) =>\n    update({\n      [GL.VIEWPORT]: [x, y, width, height]\n    })\n};\n\n// GETTER TABLE - FOR READING OUT AN ENTIRE CONTEXT\n\nconst isEnabled = (gl, key) => gl.isEnabled(key);\n\n// Exceptions for any keys that cannot be queried by gl.getParameters\nexport const GL_PARAMETER_GETTERS = {\n  [GL.BLEND]: isEnabled,\n  [GL.CULL_FACE]: isEnabled,\n  [GL.DEPTH_TEST]: isEnabled,\n  [GL.DITHER]: isEnabled,\n  [GL.POLYGON_OFFSET_FILL]: isEnabled,\n  [GL.SAMPLE_ALPHA_TO_COVERAGE]: isEnabled,\n  [GL.SAMPLE_COVERAGE]: isEnabled,\n  [GL.SCISSOR_TEST]: isEnabled,\n  [GL.STENCIL_TEST]: isEnabled,\n\n  // WebGL 2\n  [GL.RASTERIZER_DISCARD]: isEnabled\n};\n"]},"metadata":{},"sourceType":"module"}