{"ast":null,"code":"import { assert } from '../utils/assert';\nimport parseImage from '../parsers/parse-image';\nimport { getImageSize } from '../category-api/parsed-image-api';\nimport { generateUrl } from './generate-url';\nimport { deepLoad, shallowLoad } from './deep-load';\nexport async function loadImage(getUrl) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const imageUrls = await getImageUrls(getUrl, options);\n  return await deepLoad(imageUrls, parseImage, options);\n}\nexport async function getImageUrls(getUrl, options) {\n  let urlOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const mipLevels = options && options.image && options.image.mipLevels || 0;\n  return mipLevels !== 0 ? await getMipmappedImageUrls(getUrl, mipLevels, options, urlOptions) : generateUrl(getUrl, options, urlOptions);\n}\n\nasync function getMipmappedImageUrls(getUrl, mipLevels, options, urlOptions) {\n  const urls = [];\n\n  if (mipLevels === 'auto') {\n    const url = generateUrl(getUrl, options, { ...urlOptions,\n      lod: 0\n    });\n    const image = await shallowLoad(url, parseImage, options);\n    const {\n      width,\n      height\n    } = getImageSize(image);\n    mipLevels = getMipLevels({\n      width,\n      height\n    });\n    urls.push(url);\n  }\n\n  assert(mipLevels > 0);\n\n  for (let mipLevel = urls.length; mipLevel < mipLevels; ++mipLevel) {\n    const url = generateUrl(getUrl, options, { ...urlOptions,\n      lod: mipLevel\n    });\n    urls.push(url);\n  }\n\n  return urls;\n}\n\nexport function getMipLevels(_ref) {\n  let {\n    width,\n    height\n  } = _ref;\n  return 1 + Math.floor(Math.log2(Math.max(width, height)));\n}","map":{"version":3,"sources":["../../../../src/lib/texture-api/load-image.ts"],"names":["options","imageUrls","getImageUrls","deepLoad","urlOptions","mipLevels","getMipmappedImageUrls","generateUrl","urls","url","lod","image","shallowLoad","height","getImageSize","getMipLevels","assert","mipLevel","Math"],"mappings":"AAAA,SAAA,MAAA,QAAA,iBAAA;AACA,OAAA,UAAA,MAAA,wBAAA;AACA,SAAA,YAAA,QAAA,kCAAA;AACA,SAAA,WAAA,QAAA,gBAAA;AACA,SAAA,QAAA,EAAA,WAAA,QAAA,aAAA;AAEA,OAAO,eAAA,SAAA,CAAA,MAAA,EAA+C;AAAA,MAAdA,OAAc,uEAA/C,EAA+C;AACpD,QAAMC,SAAS,GAAG,MAAMC,YAAY,CAAA,MAAA,EAApC,OAAoC,CAApC;AACA,SAAO,MAAMC,QAAQ,CAAA,SAAA,EAAA,UAAA,EAArB,OAAqB,CAArB;AACD;AAED,OAAO,eAAA,YAAA,CAAA,MAAA,EAAA,OAAA,EAA8D;AAAA,MAAjBC,UAAiB,uEAA9D,EAA8D;AACnE,QAAMC,SAAS,GAAIL,OAAO,IAAIA,OAAO,CAAlBA,KAAAA,IAA4BA,OAAO,CAAPA,KAAAA,CAA7B,SAACA,IAAnB,CAAA;AACA,SAAOK,SAAS,KAATA,CAAAA,GACH,MAAMC,qBAAqB,CAAA,MAAA,EAAA,SAAA,EAAA,OAAA,EADxBD,UACwB,CADxBA,GAEHE,WAAW,CAAA,MAAA,EAAA,OAAA,EAFf,UAEe,CAFf;AAGD;;AAED,eAAA,qBAAA,CAAA,MAAA,EAAA,SAAA,EAAA,OAAA,EAAA,UAAA,EAA6E;AAC3E,QAAMC,IAAc,GAApB,EAAA;;AAGA,MAAIH,SAAS,KAAb,MAAA,EAA0B;AACxB,UAAMI,GAAG,GAAGF,WAAW,CAAA,MAAA,EAAA,OAAA,EAAkB,EAAC,GAAD,UAAA;AAAgBG,MAAAA,GAAG,EAAE;AAArB,KAAlB,CAAvB;AACA,UAAMC,KAAK,GAAG,MAAMC,WAAW,CAAA,GAAA,EAAA,UAAA,EAA/B,OAA+B,CAA/B;AAEA,UAAM;AAAA,MAAA,KAAA;AAAQC,MAAAA;AAAR,QAAkBC,YAAY,CAApC,KAAoC,CAApC;AACAT,IAAAA,SAAS,GAAGU,YAAY,CAAC;AAAA,MAAA,KAAA;AAAQF,MAAAA;AAAR,KAAD,CAAxBR;AAGAG,IAAAA,IAAI,CAAJA,IAAAA,CAAAA,GAAAA;AACD;;AAGDQ,EAAAA,MAAM,CAACX,SAAS,GAAhBW,CAAM,CAANA;;AAEA,OAAK,IAAIC,QAAQ,GAAGT,IAAI,CAAxB,MAAA,EAAiCS,QAAQ,GAAzC,SAAA,EAAuD,EAAvD,QAAA,EAAmE;AACjE,UAAMR,GAAG,GAAGF,WAAW,CAAA,MAAA,EAAA,OAAA,EAAkB,EAAC,GAAD,UAAA;AAAgBG,MAAAA,GAAG,EAAEO;AAArB,KAAlB,CAAvB;AACAT,IAAAA,IAAI,CAAJA,IAAAA,CAAAA,GAAAA;AACD;;AAED,SAAA,IAAA;AACD;;AAGD,OAAO,SAAA,YAAA,OAAuC;AAAA,MAAjB;AAAA,IAAA,KAAA;AAAQK,IAAAA;AAAR,GAAiB;AAC5C,SAAO,IAAIK,IAAI,CAAJA,KAAAA,CAAWA,IAAI,CAAJA,IAAAA,CAAUA,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,EAAhC,MAAgCA,CAAVA,CAAXA,CAAX;AACD","sourcesContent":["import {assert} from '../utils/assert';\nimport parseImage from '../parsers/parse-image';\nimport {getImageSize} from '../category-api/parsed-image-api';\nimport {generateUrl} from './generate-url';\nimport {deepLoad, shallowLoad} from './deep-load';\n\nexport async function loadImage(getUrl, options = {}) {\n  const imageUrls = await getImageUrls(getUrl, options);\n  return await deepLoad(imageUrls, parseImage, options);\n}\n\nexport async function getImageUrls(getUrl, options, urlOptions = {}) {\n  const mipLevels = (options && options.image && options.image.mipLevels) || 0;\n  return mipLevels !== 0\n    ? await getMipmappedImageUrls(getUrl, mipLevels, options, urlOptions)\n    : generateUrl(getUrl, options, urlOptions);\n}\n\nasync function getMipmappedImageUrls(getUrl, mipLevels, options, urlOptions) {\n  const urls: string[] = [];\n\n  // If no mip levels supplied, we need to load the level 0 image and calculate based on size\n  if (mipLevels === 'auto') {\n    const url = generateUrl(getUrl, options, {...urlOptions, lod: 0});\n    const image = await shallowLoad(url, parseImage, options);\n\n    const {width, height} = getImageSize(image);\n    mipLevels = getMipLevels({width, height});\n\n    // TODO - push image and make `deepLoad` pass through non-url values, avoid loading twice?\n    urls.push(url);\n  }\n\n  // We now know how many mipLevels we need, remaining image urls can now be constructed\n  assert(mipLevels > 0);\n\n  for (let mipLevel = urls.length; mipLevel < mipLevels; ++mipLevel) {\n    const url = generateUrl(getUrl, options, {...urlOptions, lod: mipLevel});\n    urls.push(url);\n  }\n\n  return urls;\n}\n\n// Calculates number of mipmaps based on texture size (log2)\nexport function getMipLevels({width, height}) {\n  return 1 + Math.floor(Math.log2(Math.max(width, height)));\n}\n"]},"metadata":{},"sourceType":"module"}