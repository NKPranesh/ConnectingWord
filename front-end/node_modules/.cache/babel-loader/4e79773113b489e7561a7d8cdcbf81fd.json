{"ast":null,"code":"import { GL } from '../constants';\nexport function getPrimitiveModeType(mode) {\n  switch (mode) {\n    case GL.POINTS:\n      return GL.POINTS;\n\n    case GL.LINES:\n    case GL.LINE_STRIP:\n    case GL.LINE_LOOP:\n      return GL.LINES;\n\n    case GL.TRIANGLES:\n    case GL.TRIANGLE_STRIP:\n    case GL.TRIANGLE_FAN:\n      return GL.TRIANGLES;\n\n    default:\n      throw new Error('Unknown primitive mode');\n  }\n}\nexport function isPrimitiveModeExpandable(mode) {\n  switch (mode) {\n    case GL.LINE_STRIP:\n    case GL.LINE_LOOP:\n    case GL.TRIANGLE_STRIP:\n    case GL.TRIANGLE_FAN:\n      return true;\n\n    default:\n      return false;\n  }\n}\nexport function getPrimitiveModeExpandedLength(mode, length) {\n  switch (mode) {\n    case GL.POINTS:\n      return length;\n\n    case GL.LINES:\n      return length;\n\n    case GL.LINE_STRIP:\n      return length;\n\n    case GL.LINE_LOOP:\n      return length + 1;\n\n    case GL.TRIANGLES:\n      return length;\n\n    case GL.TRIANGLE_STRIP:\n    case GL.TRIANGLE_FAN:\n      return (length - 2) * 3;\n\n    default:\n      throw new Error('Unknown length');\n  }\n}","map":{"version":3,"sources":["../../../../src/geometry/primitives/modes.ts"],"names":["GL","length"],"mappings":"AAAA,SAAA,EAAA,QAAA,cAAA;AAUA,OAAO,SAAA,oBAAA,CAAA,IAAA,EAAqD;AAC1D,UAAA,IAAA;AACE,SAAKA,EAAE,CAAP,MAAA;AACE,aAAOA,EAAE,CAAT,MAAA;;AACF,SAAKA,EAAE,CAAP,KAAA;AACA,SAAKA,EAAE,CAAP,UAAA;AACA,SAAKA,EAAE,CAAP,SAAA;AACE,aAAOA,EAAE,CAAT,KAAA;;AACF,SAAKA,EAAE,CAAP,SAAA;AACA,SAAKA,EAAE,CAAP,cAAA;AACA,SAAKA,EAAE,CAAP,YAAA;AACE,aAAOA,EAAE,CAAT,SAAA;;AACF;AACE,YAAM,IAAA,KAAA,CAAN,wBAAM,CAAN;AAZJ;AAcD;AAKD,OAAO,SAAA,yBAAA,CAAA,IAAA,EAA0D;AAC/D,UAAA,IAAA;AACE,SAAKA,EAAE,CAAP,UAAA;AACA,SAAKA,EAAE,CAAP,SAAA;AACA,SAAKA,EAAE,CAAP,cAAA;AACA,SAAKA,EAAE,CAAP,YAAA;AACE,aAAA,IAAA;;AACF;AACE,aAAA,KAAA;AAPJ;AASD;AAOD,OAAO,SAAA,8BAAA,CAAA,IAAA,EAAA,MAAA,EAA8E;AACnF,UAAA,IAAA;AACE,SAAKA,EAAE,CAAP,MAAA;AACE,aAAA,MAAA;;AACF,SAAKA,EAAE,CAAP,KAAA;AACE,aAAA,MAAA;;AACF,SAAKA,EAAE,CAAP,UAAA;AACE,aAAA,MAAA;;AACF,SAAKA,EAAE,CAAP,SAAA;AACE,aAAOC,MAAM,GAAb,CAAA;;AACF,SAAKD,EAAE,CAAP,SAAA;AACE,aAAA,MAAA;;AACF,SAAKA,EAAE,CAAP,cAAA;AACA,SAAKA,EAAE,CAAP,YAAA;AACE,aAAO,CAACC,MAAM,GAAP,CAAA,IAAP,CAAA;;AACF;AACE,YAAM,IAAA,KAAA,CAAN,gBAAM,CAAN;AAfJ;AAiBD","sourcesContent":["import {GL} from '../constants';\n\n/**\n * Different methods of working with geometries depending on glType\n /**\n\n/**\n * @param mode\n * @returns draw points | lines | triangles\n */\nexport function getPrimitiveModeType(mode?: number): number {\n  switch (mode) {\n    case GL.POINTS: // draw single points.\n      return GL.POINTS;\n    case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n    case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n    case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n      return GL.LINES;\n    case GL.TRIANGLES:\n    case GL.TRIANGLE_STRIP:\n    case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n      return GL.TRIANGLES;\n    default:\n      throw new Error('Unknown primitive mode');\n  }\n}\n/**\n * @param mode\n * @returns true | false\n */\nexport function isPrimitiveModeExpandable(mode: number): boolean {\n  switch (mode) {\n    case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n    case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n    case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n    case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n      return true;\n    default:\n      return false;\n  }\n}\n/**\n * Returns new length depends on glType\n * @param mode\n * @param length\n * @returns new length\n */\nexport function getPrimitiveModeExpandedLength(mode: number, length: number): number {\n  switch (mode) {\n    case GL.POINTS: // draw single points.\n      return length;\n    case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n      return length;\n    case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n      return length;\n    case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n      return length + 1;\n    case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n      return length;\n    case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n    case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n      return (length - 2) * 3;\n    default:\n      throw new Error('Unknown length');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}