{"ast":null,"code":"import { resolvePath } from '@loaders.gl/loader-utils';\nimport { makeResponse } from '../utils/response-utils';\nexport async function fetchFile(url, options) {\n  if (typeof url === 'string') {\n    url = resolvePath(url);\n    let fetchOptions = options;\n\n    if (options !== null && options !== void 0 && options.fetch && typeof (options === null || options === void 0 ? void 0 : options.fetch) !== 'function') {\n      fetchOptions = options.fetch;\n    }\n\n    return await fetch(url, fetchOptions);\n  }\n\n  return await makeResponse(url);\n}","map":{"version":3,"sources":["../../../../src/lib/fetch/fetch-file.ts"],"names":["url","resolvePath","fetchOptions","options","fetch","makeResponse"],"mappings":"AAAA,SAAA,WAAA,QAAA,0BAAA;AACA,SAAA,YAAA,QAAA,yBAAA;AAYA,OAAO,eAAA,SAAA,CAAA,GAAA,EAAA,OAAA,EAGc;AACnB,MAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;AAC3BA,IAAAA,GAAG,GAAGC,WAAW,CAAjBD,GAAiB,CAAjBA;AAEA,QAAIE,YAAyB,GAA7B,OAAA;;AACA,QAAIC,OAAO,KAAPA,IAAAA,IAAAA,OAAO,KAAA,KAAPA,CAAAA,IAAAA,OAAO,CAAPA,KAAAA,IAAkB,QAAOA,OAAP,KAAA,IAAOA,IAAAA,OAAP,KAAA,KAAA,CAAOA,GAAP,KAAA,CAAOA,GAAAA,OAAO,CAAd,KAAA,MAAtB,UAAA,EAA4D;AAC1DD,MAAAA,YAAY,GAAGC,OAAO,CAAtBD,KAAAA;AACD;;AAED,WAAO,MAAME,KAAK,CAAA,GAAA,EAAlB,YAAkB,CAAlB;AACD;;AAED,SAAO,MAAMC,YAAY,CAAzB,GAAyB,CAAzB;AACD","sourcesContent":["import {resolvePath} from '@loaders.gl/loader-utils';\nimport {makeResponse} from '../utils/response-utils';\n// import {getErrorMessageFromResponse} from './fetch-error-message';\n\n/**\n * fetch compatible function\n * Reads file data from:\n * - http/http urls\n * - data urls\n * - File/Blob objects\n * Leverages `@loaders.gl/polyfills` for Node.js support\n * Respects pathPrefix and file aliases\n */\nexport async function fetchFile(\n  url: string | Blob,\n  options?: RequestInit & {fetch?: RequestInit | Function}\n): Promise<Response> {\n  if (typeof url === 'string') {\n    url = resolvePath(url);\n\n    let fetchOptions: RequestInit = options as RequestInit;\n    if (options?.fetch && typeof options?.fetch !== 'function') {\n      fetchOptions = options.fetch;\n    }\n\n    return await fetch(url, fetchOptions);\n  }\n\n  return await makeResponse(url);\n}\n"]},"metadata":{},"sourceType":"module"}