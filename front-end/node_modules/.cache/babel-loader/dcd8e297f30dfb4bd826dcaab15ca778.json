{"ast":null,"code":"export class KeyFrames {\n  constructor(keyFrames) {\n    this._lastTime = -1;\n    this.startIndex = -1;\n    this.endIndex = -1;\n    this.factor = 0;\n    this.times = [];\n    this.values = [];\n    this.setKeyFrames(keyFrames);\n    this.setTime(0);\n  }\n\n  setKeyFrames(keyFrames) {\n    const numKeys = keyFrames.length;\n    this.times.length = numKeys;\n    this.values.length = numKeys;\n\n    for (let i = 0; i < numKeys; ++i) {\n      this.times[i] = keyFrames[i][0];\n      this.values[i] = keyFrames[i][1];\n    }\n\n    this._calculateKeys(this._lastTime);\n  }\n\n  setTime(time) {\n    time = Math.max(0, time);\n\n    if (time !== this._lastTime) {\n      this._calculateKeys(time);\n\n      this._lastTime = time;\n    }\n  }\n\n  getStartTime() {\n    return this.times[this.startIndex];\n  }\n\n  getEndTime() {\n    return this.times[this.endIndex];\n  }\n\n  getStartData() {\n    return this.values[this.startIndex];\n  }\n\n  getEndData() {\n    return this.values[this.endIndex];\n  }\n\n  _calculateKeys(time) {\n    let index = 0;\n    const numKeys = this.times.length;\n\n    for (index = 0; index < numKeys - 2; ++index) {\n      if (this.times[index + 1] > time) {\n        break;\n      }\n    }\n\n    this.startIndex = index;\n    this.endIndex = index + 1;\n    const startTime = this.times[this.startIndex];\n    const endTime = this.times[this.endIndex];\n    this.factor = Math.min(Math.max(0, (time - startTime) / (endTime - startTime)), 1);\n  }\n\n}","map":{"version":3,"sources":["../../../src/animation/key-frames.js"],"names":["constructor","setKeyFrames","numKeys","keyFrames","i","setTime","time","Math","getStartTime","getEndTime","getStartData","getEndData","_calculateKeys","index","startTime","endTime"],"mappings":"AAEA,OAAO,MAAA,SAAA,CAAgB;AACrBA,EAAAA,WAAW,CAAA,SAAA,EAAY;AACrB,SAAA,SAAA,GAAiB,CAAjB,CAAA;AACA,SAAA,UAAA,GAAkB,CAAlB,CAAA;AACA,SAAA,QAAA,GAAgB,CAAhB,CAAA;AACA,SAAA,MAAA,GAAA,CAAA;AACA,SAAA,KAAA,GAAA,EAAA;AACA,SAAA,MAAA,GAAA,EAAA;AACA,SAAA,YAAA,CAAA,SAAA;AACA,SAAA,OAAA,CAAA,CAAA;AACD;;AAEDC,EAAAA,YAAY,CAAA,SAAA,EAAY;AACtB,UAAMC,OAAO,GAAGC,SAAS,CAAzB,MAAA;AACA,SAAA,KAAA,CAAA,MAAA,GAAA,OAAA;AACA,SAAA,MAAA,CAAA,MAAA,GAAA,OAAA;;AAEA,SAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,OAAA,EAA6B,EAA7B,CAAA,EAAkC;AAChC,WAAA,KAAA,CAAA,CAAA,IAAgBD,SAAS,CAATA,CAAS,CAATA,CAAhB,CAAgBA,CAAhB;AACA,WAAA,MAAA,CAAA,CAAA,IAAiBA,SAAS,CAATA,CAAS,CAATA,CAAjB,CAAiBA,CAAjB;AACD;;AAED,SAAA,cAAA,CAAoB,KAApB,SAAA;AACD;;AAEDE,EAAAA,OAAO,CAAA,IAAA,EAAO;AACZC,IAAAA,IAAI,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAPD,IAAOC,CAAPD;;AAEA,QAAIA,IAAI,KAAK,KAAb,SAAA,EAA6B;AAC3B,WAAA,cAAA,CAAA,IAAA;;AACA,WAAA,SAAA,GAAA,IAAA;AACD;AACF;;AAEDE,EAAAA,YAAY,GAAG;AACb,WAAO,KAAA,KAAA,CAAW,KAAlB,UAAO,CAAP;AACD;;AAEDC,EAAAA,UAAU,GAAG;AACX,WAAO,KAAA,KAAA,CAAW,KAAlB,QAAO,CAAP;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,WAAO,KAAA,MAAA,CAAY,KAAnB,UAAO,CAAP;AACD;;AAEDC,EAAAA,UAAU,GAAG;AACX,WAAO,KAAA,MAAA,CAAY,KAAnB,QAAO,CAAP;AACD;;AAEDC,EAAAA,cAAc,CAAA,IAAA,EAAO;AACnB,QAAIC,KAAK,GAAT,CAAA;AACA,UAAMX,OAAO,GAAG,KAAA,KAAA,CAAhB,MAAA;;AAEA,SAAKW,KAAK,GAAV,CAAA,EAAgBA,KAAK,GAAGX,OAAO,GAA/B,CAAA,EAAqC,EAArC,KAAA,EAA8C;AAC5C,UAAI,KAAA,KAAA,CAAWW,KAAK,GAAhB,CAAA,IAAJ,IAAA,EAAkC;AAChC;AACD;AACF;;AAED,SAAA,UAAA,GAAA,KAAA;AACA,SAAA,QAAA,GAAgBA,KAAK,GAArB,CAAA;AAEA,UAAMC,SAAS,GAAG,KAAA,KAAA,CAAW,KAA7B,UAAkB,CAAlB;AACA,UAAMC,OAAO,GAAG,KAAA,KAAA,CAAW,KAA3B,QAAgB,CAAhB;AACA,SAAA,MAAA,GAAcR,IAAI,CAAJA,GAAAA,CAASA,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAY,CAACD,IAAI,GAAL,SAAA,KAAsBS,OAAO,GAAlDR,SAAqB,CAAZA,CAATA,EAAd,CAAcA,CAAd;AACD;;AAlEoB","sourcesContent":["/** @type {import('@luma.gl/engine').KeyFrames} */\n\nexport class KeyFrames {\n  constructor(keyFrames) {\n    this._lastTime = -1;\n    this.startIndex = -1;\n    this.endIndex = -1;\n    this.factor = 0;\n    this.times = [];\n    this.values = [];\n    this.setKeyFrames(keyFrames);\n    this.setTime(0);\n  }\n\n  setKeyFrames(keyFrames) {\n    const numKeys = keyFrames.length;\n    this.times.length = numKeys;\n    this.values.length = numKeys;\n\n    for (let i = 0; i < numKeys; ++i) {\n      this.times[i] = keyFrames[i][0];\n      this.values[i] = keyFrames[i][1];\n    }\n\n    this._calculateKeys(this._lastTime);\n  }\n\n  setTime(time) {\n    time = Math.max(0, time);\n\n    if (time !== this._lastTime) {\n      this._calculateKeys(time);\n      this._lastTime = time;\n    }\n  }\n\n  getStartTime() {\n    return this.times[this.startIndex];\n  }\n\n  getEndTime() {\n    return this.times[this.endIndex];\n  }\n\n  getStartData() {\n    return this.values[this.startIndex];\n  }\n\n  getEndData() {\n    return this.values[this.endIndex];\n  }\n\n  _calculateKeys(time) {\n    let index = 0;\n    const numKeys = this.times.length;\n\n    for (index = 0; index < numKeys - 2; ++index) {\n      if (this.times[index + 1] > time) {\n        break;\n      }\n    }\n\n    this.startIndex = index;\n    this.endIndex = index + 1;\n\n    const startTime = this.times[this.startIndex];\n    const endTime = this.times[this.endIndex];\n    this.factor = Math.min(Math.max(0, (time - startTime) / (endTime - startTime)), 1);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}