{"ast":null,"code":"import { projectPosition } from '../../shaderlib/project/project-functions';\nimport { COORDINATE_SYSTEM } from '../../lib';\nconst DEFAULT_LIGHT_COLOR = [255, 255, 255];\nconst DEFAULT_LIGHT_INTENSITY = 1.0;\nconst DEFAULT_ATTENUATION = [0, 0, 1];\nconst DEFAULT_LIGHT_POSITION = [0.0, 0.0, 1.0];\nlet idCount = 0;\nexport class PointLight {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      color = DEFAULT_LIGHT_COLOR\n    } = props;\n    const {\n      intensity = DEFAULT_LIGHT_INTENSITY\n    } = props;\n    const {\n      position = DEFAULT_LIGHT_POSITION\n    } = props;\n    this.id = props.id || \"point-\".concat(idCount++);\n    this.color = color;\n    this.intensity = intensity;\n    this.type = 'point';\n    this.position = position;\n    this.attenuation = getAttenuation(props);\n    this.projectedLight = { ...this\n    };\n  }\n\n  getProjectedLight(_ref) {\n    let {\n      layer\n    } = _ref;\n    const {\n      projectedLight\n    } = this;\n    const viewport = layer.context.viewport;\n    const {\n      coordinateSystem,\n      coordinateOrigin\n    } = layer.props;\n    const position = projectPosition(this.position, {\n      viewport,\n      coordinateSystem,\n      coordinateOrigin,\n      fromCoordinateSystem: viewport.isGeospatial ? COORDINATE_SYSTEM.LNGLAT : COORDINATE_SYSTEM.CARTESIAN,\n      fromCoordinateOrigin: [0, 0, 0]\n    });\n    projectedLight.color = this.color;\n    projectedLight.intensity = this.intensity;\n    projectedLight.position = position;\n    return projectedLight;\n  }\n\n}\n\nfunction getAttenuation(props) {\n  if ('attenuation' in props) {\n    return props.attenuation;\n  }\n\n  if ('intensity' in props) {\n    return [0, 0, props.intensity];\n  }\n\n  return DEFAULT_ATTENUATION;\n}","map":{"version":3,"sources":["../../../../src/effects/lighting/point-light.js"],"names":["DEFAULT_LIGHT_COLOR","DEFAULT_LIGHT_INTENSITY","DEFAULT_ATTENUATION","DEFAULT_LIGHT_POSITION","idCount","constructor","props","color","intensity","position","getAttenuation","getProjectedLight","layer","projectedLight","viewport","coordinateOrigin","projectPosition","fromCoordinateSystem","COORDINATE_SYSTEM","fromCoordinateOrigin"],"mappings":"AAAA,SAAA,eAAA,QAAA,2CAAA;AACA,SAAA,iBAAA,QAAA,WAAA;AAEA,MAAMA,mBAAmB,GAAG,CAAA,GAAA,EAAA,GAAA,EAA5B,GAA4B,CAA5B;AACA,MAAMC,uBAAuB,GAA7B,GAAA;AACA,MAAMC,mBAAmB,GAAG,CAAA,CAAA,EAAA,CAAA,EAA5B,CAA4B,CAA5B;AACA,MAAMC,sBAAsB,GAAG,CAAA,GAAA,EAAA,GAAA,EAA/B,GAA+B,CAA/B;AAEA,IAAIC,OAAO,GAAX,CAAA;AAEA,OAAO,MAAA,UAAA,CAAiB;AACtBC,EAAAA,WAAW,GAAa;AAAA,QAAZC,KAAY,uEAAb,EAAa;AACtB,UAAM;AAACC,MAAAA,KAAK,GAAGP;AAAT,QAAN,KAAA;AACA,UAAM;AAACQ,MAAAA,SAAS,GAAGP;AAAb,QAAN,KAAA;AACA,UAAM;AAACQ,MAAAA,QAAQ,GAAGN;AAAZ,QAAN,KAAA;AAEA,SAAA,EAAA,GAAUG,KAAK,CAALA,EAAAA,IAAAA,SAAAA,MAAAA,CAAqBF,OAA/B,EAAUE,CAAV;AACA,SAAA,KAAA,GAAA,KAAA;AACA,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,IAAA,GAAA,OAAA;AACA,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,WAAA,GAAmBI,cAAc,CAAjC,KAAiC,CAAjC;AACA,SAAA,cAAA,GAAsB,EAAC,GAAG;AAAJ,KAAtB;AACD;;AAEDC,EAAAA,iBAAiB,OAAU;AAAA,QAAT;AAACC,MAAAA;AAAD,KAAS;AACzB,UAAM;AAACC,MAAAA;AAAD,QAAN,IAAA;AACA,UAAMC,QAAQ,GAAGF,KAAK,CAALA,OAAAA,CAAjB,QAAA;AACA,UAAM;AAAA,MAAA,gBAAA;AAAmBG,MAAAA;AAAnB,QAAuCH,KAAK,CAAlD,KAAA;AACA,UAAMH,QAAQ,GAAGO,eAAe,CAAC,KAAD,QAAA,EAAgB;AAAA,MAAA,QAAA;AAAA,MAAA,gBAAA;AAAA,MAAA,gBAAA;AAI9CC,MAAAA,oBAAoB,EAAEH,QAAQ,CAARA,YAAAA,GAClBI,iBAAiB,CADCJ,MAAAA,GAElBI,iBAAiB,CANyB,SAAA;AAO9CC,MAAAA,oBAAoB,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAPwB,KAAhB,CAAhC;AASAN,IAAAA,cAAc,CAAdA,KAAAA,GAAuB,KAAvBA,KAAAA;AACAA,IAAAA,cAAc,CAAdA,SAAAA,GAA2B,KAA3BA,SAAAA;AACAA,IAAAA,cAAc,CAAdA,QAAAA,GAAAA,QAAAA;AACA,WAAA,cAAA;AACD;;AAhCqB;;AAmCxB,SAAA,cAAA,CAAA,KAAA,EAA+B;AAC7B,MAAI,iBAAJ,KAAA,EAA4B;AAC1B,WAAOP,KAAK,CAAZ,WAAA;AACD;;AACD,MAAI,eAAJ,KAAA,EAA0B;AACxB,WAAO,CAAA,CAAA,EAAA,CAAA,EAAOA,KAAK,CAAnB,SAAO,CAAP;AACD;;AACD,SAAA,mBAAA;AACD","sourcesContent":["import {projectPosition} from '../../shaderlib/project/project-functions';\nimport {COORDINATE_SYSTEM} from '../../lib';\n\nconst DEFAULT_LIGHT_COLOR = [255, 255, 255];\nconst DEFAULT_LIGHT_INTENSITY = 1.0;\nconst DEFAULT_ATTENUATION = [0, 0, 1];\nconst DEFAULT_LIGHT_POSITION = [0.0, 0.0, 1.0];\n\nlet idCount = 0;\n\nexport class PointLight {\n  constructor(props = {}) {\n    const {color = DEFAULT_LIGHT_COLOR} = props;\n    const {intensity = DEFAULT_LIGHT_INTENSITY} = props;\n    const {position = DEFAULT_LIGHT_POSITION} = props;\n\n    this.id = props.id || `point-${idCount++}`;\n    this.color = color;\n    this.intensity = intensity;\n    this.type = 'point';\n    this.position = position;\n    this.attenuation = getAttenuation(props);\n    this.projectedLight = {...this};\n  }\n\n  getProjectedLight({layer}) {\n    const {projectedLight} = this;\n    const viewport = layer.context.viewport;\n    const {coordinateSystem, coordinateOrigin} = layer.props;\n    const position = projectPosition(this.position, {\n      viewport,\n      coordinateSystem,\n      coordinateOrigin,\n      fromCoordinateSystem: viewport.isGeospatial\n        ? COORDINATE_SYSTEM.LNGLAT\n        : COORDINATE_SYSTEM.CARTESIAN,\n      fromCoordinateOrigin: [0, 0, 0]\n    });\n    projectedLight.color = this.color;\n    projectedLight.intensity = this.intensity;\n    projectedLight.position = position;\n    return projectedLight;\n  }\n}\n\nfunction getAttenuation(props) {\n  if ('attenuation' in props) {\n    return props.attenuation;\n  }\n  if ('intensity' in props) {\n    return [0, 0, props.intensity];\n  }\n  return DEFAULT_ATTENUATION;\n}\n"]},"metadata":{},"sourceType":"module"}