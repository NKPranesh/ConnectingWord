{"ast":null,"code":"import AsyncQueue from '../async-queue/async-queue';\nimport WorkerBody from '../worker-farm/worker-body';\nlet requestId = 0;\nlet inputBatches;\nlet options;\nexport function createWorker(process, processInBatches) {\n  if (typeof self === 'undefined') {\n    return;\n  }\n\n  const context = {\n    process: processOnMainThread\n  };\n\n  WorkerBody.onmessage = async (type, payload) => {\n    try {\n      switch (type) {\n        case 'process':\n          if (!process) {\n            throw new Error('Worker does not support atomic processing');\n          }\n\n          const result = await process(payload.input, payload.options || {}, context);\n          WorkerBody.postMessage('done', {\n            result\n          });\n          break;\n\n        case 'process-in-batches':\n          if (!processInBatches) {\n            throw new Error('Worker does not support batched processing');\n          }\n\n          inputBatches = new AsyncQueue();\n          options = payload.options || {};\n          const resultIterator = processInBatches(inputBatches, options, context === null || context === void 0 ? void 0 : context.processInBatches);\n\n          for await (const batch of resultIterator) {\n            WorkerBody.postMessage('output-batch', {\n              result: batch\n            });\n          }\n\n          WorkerBody.postMessage('done', {});\n          break;\n\n        case 'input-batch':\n          inputBatches.push(payload.input);\n          break;\n\n        case 'input-done':\n          inputBatches.close();\n          break;\n\n        default:\n      }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : '';\n      WorkerBody.postMessage('error', {\n        error: message\n      });\n    }\n  };\n}\n\nfunction processOnMainThread(arrayBuffer) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise((resolve, reject) => {\n    const id = requestId++;\n\n    const onMessage = (type, payload) => {\n      if (payload.id !== id) {\n        return;\n      }\n\n      switch (type) {\n        case 'done':\n          WorkerBody.removeEventListener(onMessage);\n          resolve(payload.result);\n          break;\n\n        case 'error':\n          WorkerBody.removeEventListener(onMessage);\n          reject(payload.error);\n          break;\n\n        default:\n      }\n    };\n\n    WorkerBody.addEventListener(onMessage);\n    const payload = {\n      id,\n      input: arrayBuffer,\n      options\n    };\n    WorkerBody.postMessage('process', payload);\n  });\n}","map":{"version":3,"sources":["../../../../src/lib/worker-api/create-worker.ts"],"names":["requestId","context","process","processOnMainThread","WorkerBody","result","payload","inputBatches","options","resultIterator","processInBatches","batch","message","error","id","onMessage","resolve","reject","input"],"mappings":"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","sourcesContent":["import type {\n  WorkerMessageType,\n  WorkerMessagePayload,\n  WorkerContext,\n  Process,\n  ProcessInBatches\n} from '../../types';\nimport AsyncQueue from '../async-queue/async-queue';\nimport WorkerBody from '../worker-farm/worker-body';\n// import {validateWorkerVersion} from './validate-worker-version';\n\n/** Counter for jobs */\nlet requestId = 0;\nlet inputBatches;\nlet options;\n\nexport type ProcessOnMainThread = (data: any, options?: {[key: string]: any}, context?) => any;\n\n/**\n * Set up a WebWorkerGlobalScope to talk with the main thread\n */\nexport function createWorker(process: Process, processInBatches?: ProcessInBatches): void {\n  // Check that we are actually in a worker thread\n  if (typeof self === 'undefined') {\n    return;\n  }\n\n  const context: WorkerContext = {\n    process: processOnMainThread\n  };\n\n  // eslint-disable-next-line complexity\n  WorkerBody.onmessage = async (type: WorkerMessageType, payload: WorkerMessagePayload) => {\n    try {\n      switch (type) {\n        case 'process':\n          if (!process) {\n            throw new Error('Worker does not support atomic processing');\n          }\n          const result = await process(payload.input, payload.options || {}, context);\n          WorkerBody.postMessage('done', {result});\n          break;\n\n        case 'process-in-batches':\n          if (!processInBatches) {\n            throw new Error('Worker does not support batched processing');\n          }\n          inputBatches = new AsyncQueue();\n          options = payload.options || {};\n          const resultIterator = processInBatches(inputBatches, options, context?.processInBatches);\n          for await (const batch of resultIterator) {\n            WorkerBody.postMessage('output-batch', {result: batch});\n          }\n          WorkerBody.postMessage('done', {});\n          break;\n\n        case 'input-batch':\n          inputBatches.push(payload.input);\n          break;\n\n        case 'input-done':\n          inputBatches.close();\n          break;\n\n        default:\n      }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : '';\n      WorkerBody.postMessage('error', {error: message});\n    }\n  };\n}\n\nfunction processOnMainThread(arrayBuffer, options = {}) {\n  return new Promise((resolve, reject) => {\n    const id = requestId++;\n\n    /**\n     */\n    const onMessage = (type, payload) => {\n      if (payload.id !== id) {\n        // not ours\n        return;\n      }\n\n      switch (type) {\n        case 'done':\n          WorkerBody.removeEventListener(onMessage);\n          resolve(payload.result);\n          break;\n\n        case 'error':\n          WorkerBody.removeEventListener(onMessage);\n          reject(payload.error);\n          break;\n\n        default:\n        // ignore\n      }\n    };\n\n    WorkerBody.addEventListener(onMessage);\n\n    // Ask the main thread to decode data\n    const payload = {id, input: arrayBuffer, options};\n    WorkerBody.postMessage('process', payload);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}