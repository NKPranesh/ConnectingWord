{"ast":null,"code":"import Framebuffer from '../classes/framebuffer';\nimport Texture2D from '../classes/texture-2d';\nexport const FEATURES = {\n  WEBGL2: 'WEBGL2',\n  VERTEX_ARRAY_OBJECT: 'VERTEX_ARRAY_OBJECT',\n  TIMER_QUERY: 'TIMER_QUERY',\n  INSTANCED_RENDERING: 'INSTANCED_RENDERING',\n  MULTIPLE_RENDER_TARGETS: 'MULTIPLE_RENDER_TARGETS',\n  ELEMENT_INDEX_UINT32: 'ELEMENT_INDEX_UINT32',\n  BLEND_EQUATION_MINMAX: 'BLEND_EQUATION_MINMAX',\n  FLOAT_BLEND: 'FLOAT_BLEND',\n  COLOR_ENCODING_SRGB: 'COLOR_ENCODING_SRGB',\n  TEXTURE_DEPTH: 'TEXTURE_DEPTH',\n  TEXTURE_FLOAT: 'TEXTURE_FLOAT',\n  TEXTURE_HALF_FLOAT: 'TEXTURE_HALF_FLOAT',\n  TEXTURE_FILTER_LINEAR_FLOAT: 'TEXTURE_FILTER_LINEAR_FLOAT',\n  TEXTURE_FILTER_LINEAR_HALF_FLOAT: 'TEXTURE_FILTER_LINEAR_HALF_FLOAT',\n  TEXTURE_FILTER_ANISOTROPIC: 'TEXTURE_FILTER_ANISOTROPIC',\n  COLOR_ATTACHMENT_RGBA32F: 'COLOR_ATTACHMENT_RGBA32F',\n  COLOR_ATTACHMENT_FLOAT: 'COLOR_ATTACHMENT_FLOAT',\n  COLOR_ATTACHMENT_HALF_FLOAT: 'COLOR_ATTACHMENT_HALF_FLOAT',\n  GLSL_FRAG_DATA: 'GLSL_FRAG_DATA',\n  GLSL_FRAG_DEPTH: 'GLSL_FRAG_DEPTH',\n  GLSL_DERIVATIVES: 'GLSL_DERIVATIVES',\n  GLSL_TEXTURE_LOD: 'GLSL_TEXTURE_LOD'\n};\n\nfunction checkFloat32ColorAttachment(gl) {\n  const testTexture = new Texture2D(gl, {\n    format: 6408,\n    type: 5126,\n    dataFormat: 6408\n  });\n  const testFb = new Framebuffer(gl, {\n    id: `test-framebuffer`,\n    check: false,\n    attachments: {\n      [36064]: testTexture\n    }\n  });\n  const status = testFb.getStatus();\n  testTexture.delete();\n  testFb.delete();\n  return status === 36053;\n}\n\nexport default {\n  [FEATURES.WEBGL2]: [false, true],\n  [FEATURES.VERTEX_ARRAY_OBJECT]: ['OES_vertex_array_object', true],\n  [FEATURES.TIMER_QUERY]: ['EXT_disjoint_timer_query', 'EXT_disjoint_timer_query_webgl2'],\n  [FEATURES.INSTANCED_RENDERING]: ['ANGLE_instanced_arrays', true],\n  [FEATURES.MULTIPLE_RENDER_TARGETS]: ['WEBGL_draw_buffers', true],\n  [FEATURES.ELEMENT_INDEX_UINT32]: ['OES_element_index_uint', true],\n  [FEATURES.BLEND_EQUATION_MINMAX]: ['EXT_blend_minmax', true],\n  [FEATURES.FLOAT_BLEND]: ['EXT_float_blend'],\n  [FEATURES.COLOR_ENCODING_SRGB]: ['EXT_sRGB', true],\n  [FEATURES.TEXTURE_DEPTH]: ['WEBGL_depth_texture', true],\n  [FEATURES.TEXTURE_FLOAT]: ['OES_texture_float', true],\n  [FEATURES.TEXTURE_HALF_FLOAT]: ['OES_texture_half_float', true],\n  [FEATURES.TEXTURE_FILTER_LINEAR_FLOAT]: ['OES_texture_float_linear'],\n  [FEATURES.TEXTURE_FILTER_LINEAR_HALF_FLOAT]: ['OES_texture_half_float_linear'],\n  [FEATURES.TEXTURE_FILTER_ANISOTROPIC]: ['EXT_texture_filter_anisotropic'],\n  [FEATURES.COLOR_ATTACHMENT_RGBA32F]: [checkFloat32ColorAttachment, 'EXT_color_buffer_float'],\n  [FEATURES.COLOR_ATTACHMENT_FLOAT]: [false, 'EXT_color_buffer_float'],\n  [FEATURES.COLOR_ATTACHMENT_HALF_FLOAT]: ['EXT_color_buffer_half_float'],\n  [FEATURES.GLSL_FRAG_DATA]: ['WEBGL_draw_buffers', true],\n  [FEATURES.GLSL_FRAG_DEPTH]: ['EXT_frag_depth', true],\n  [FEATURES.GLSL_DERIVATIVES]: ['OES_standard_derivatives', true],\n  [FEATURES.GLSL_TEXTURE_LOD]: ['EXT_shader_texture_lod', true]\n};","map":{"version":3,"sources":["../../../src/features/webgl-features-table.js"],"names":["FEATURES","WEBGL2","VERTEX_ARRAY_OBJECT","TIMER_QUERY","INSTANCED_RENDERING","MULTIPLE_RENDER_TARGETS","ELEMENT_INDEX_UINT32","BLEND_EQUATION_MINMAX","FLOAT_BLEND","COLOR_ENCODING_SRGB","TEXTURE_DEPTH","TEXTURE_FLOAT","TEXTURE_HALF_FLOAT","TEXTURE_FILTER_LINEAR_FLOAT","TEXTURE_FILTER_LINEAR_HALF_FLOAT","TEXTURE_FILTER_ANISOTROPIC","COLOR_ATTACHMENT_RGBA32F","COLOR_ATTACHMENT_FLOAT","COLOR_ATTACHMENT_HALF_FLOAT","GLSL_FRAG_DATA","GLSL_FRAG_DEPTH","GLSL_DERIVATIVES","GLSL_TEXTURE_LOD","testTexture","format","type","dataFormat","testFb","id","check","attachments","status"],"mappings":"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","sourcesContent":["import Framebuffer from '../classes/framebuffer';\nimport Texture2D from '../classes/texture-2d';\n// TODO - this should be the default export, test cases need updating\nexport const FEATURES = {\n  WEBGL2: 'WEBGL2',\n\n  // API SUPPORT\n  VERTEX_ARRAY_OBJECT: 'VERTEX_ARRAY_OBJECT',\n  TIMER_QUERY: 'TIMER_QUERY',\n  INSTANCED_RENDERING: 'INSTANCED_RENDERING',\n  MULTIPLE_RENDER_TARGETS: 'MULTIPLE_RENDER_TARGETS',\n\n  // FEATURES\n  ELEMENT_INDEX_UINT32: 'ELEMENT_INDEX_UINT32',\n\n  // BLENDING\n  BLEND_EQUATION_MINMAX: 'BLEND_EQUATION_MINMAX',\n  FLOAT_BLEND: 'FLOAT_BLEND',\n\n  // TEXTURES: '// TEXTURES', RENDERBUFFERS\n  COLOR_ENCODING_SRGB: 'COLOR_ENCODING_SRGB',\n\n  // TEXTURES\n  TEXTURE_DEPTH: 'TEXTURE_DEPTH',\n  TEXTURE_FLOAT: 'TEXTURE_FLOAT',\n  TEXTURE_HALF_FLOAT: 'TEXTURE_HALF_FLOAT',\n\n  TEXTURE_FILTER_LINEAR_FLOAT: 'TEXTURE_FILTER_LINEAR_FLOAT',\n  TEXTURE_FILTER_LINEAR_HALF_FLOAT: 'TEXTURE_FILTER_LINEAR_HALF_FLOAT',\n  TEXTURE_FILTER_ANISOTROPIC: 'TEXTURE_FILTER_ANISOTROPIC',\n\n  // FRAMEBUFFERS: '// FRAMEBUFFERS', TEXTURES AND RENDERBUFFERS\n  COLOR_ATTACHMENT_RGBA32F: 'COLOR_ATTACHMENT_RGBA32F',\n  COLOR_ATTACHMENT_FLOAT: 'COLOR_ATTACHMENT_FLOAT',\n  COLOR_ATTACHMENT_HALF_FLOAT: 'COLOR_ATTACHMENT_HALF_FLOAT',\n\n  // GLSL extensions\n  GLSL_FRAG_DATA: 'GLSL_FRAG_DATA',\n  GLSL_FRAG_DEPTH: 'GLSL_FRAG_DEPTH',\n  GLSL_DERIVATIVES: 'GLSL_DERIVATIVES',\n  GLSL_TEXTURE_LOD: 'GLSL_TEXTURE_LOD'\n};\n\n// function to test if Float 32 bit format texture can be bound as color attachment\nfunction checkFloat32ColorAttachment(gl) {\n  const testTexture = new Texture2D(gl, {\n    format: gl.RGBA,\n    type: gl.FLOAT,\n    dataFormat: gl.RGBA\n  });\n  const testFb = new Framebuffer(gl, {\n    id: `test-framebuffer`,\n    check: false,\n    attachments: {\n      [gl.COLOR_ATTACHMENT0]: testTexture\n    }\n  });\n  const status = testFb.getStatus();\n  testTexture.delete();\n  testFb.delete();\n  return status === gl.FRAMEBUFFER_COMPLETE;\n}\n\n// Defines luma.gl \"feature\" names and semantics\n// Format: 'feature-name: [WebGL1 support, WebGL2 support] / [WebGL1 and WebGL2 support]', when support is 'string' it is the name of the extension\nexport default {\n  [FEATURES.WEBGL2]: [false, true],\n\n  // API SUPPORT\n  [FEATURES.VERTEX_ARRAY_OBJECT]: ['OES_vertex_array_object', true],\n  [FEATURES.TIMER_QUERY]: ['EXT_disjoint_timer_query', 'EXT_disjoint_timer_query_webgl2'],\n  [FEATURES.INSTANCED_RENDERING]: ['ANGLE_instanced_arrays', true],\n  [FEATURES.MULTIPLE_RENDER_TARGETS]: ['WEBGL_draw_buffers', true],\n\n  // FEATURES\n  [FEATURES.ELEMENT_INDEX_UINT32]: ['OES_element_index_uint', true],\n\n  // BLENDING\n  [FEATURES.BLEND_EQUATION_MINMAX]: ['EXT_blend_minmax', true],\n  [FEATURES.FLOAT_BLEND]: ['EXT_float_blend'],\n\n  // TEXTURES, RENDERBUFFERS\n  [FEATURES.COLOR_ENCODING_SRGB]: ['EXT_sRGB', true],\n\n  // TEXTURES\n  [FEATURES.TEXTURE_DEPTH]: ['WEBGL_depth_texture', true],\n  [FEATURES.TEXTURE_FLOAT]: ['OES_texture_float', true],\n  [FEATURES.TEXTURE_HALF_FLOAT]: ['OES_texture_half_float', true],\n\n  [FEATURES.TEXTURE_FILTER_LINEAR_FLOAT]: ['OES_texture_float_linear'],\n  [FEATURES.TEXTURE_FILTER_LINEAR_HALF_FLOAT]: ['OES_texture_half_float_linear'],\n  [FEATURES.TEXTURE_FILTER_ANISOTROPIC]: ['EXT_texture_filter_anisotropic'],\n\n  // FRAMEBUFFERS, TEXTURES AND RENDERBUFFERS\n  [FEATURES.COLOR_ATTACHMENT_RGBA32F]: [checkFloat32ColorAttachment, 'EXT_color_buffer_float'],\n  [FEATURES.COLOR_ATTACHMENT_FLOAT]: [false, 'EXT_color_buffer_float'],\n  [FEATURES.COLOR_ATTACHMENT_HALF_FLOAT]: ['EXT_color_buffer_half_float'],\n\n  // GLSL extensions\n  [FEATURES.GLSL_FRAG_DATA]: ['WEBGL_draw_buffers', true],\n  [FEATURES.GLSL_FRAG_DEPTH]: ['EXT_frag_depth', true],\n  [FEATURES.GLSL_DERIVATIVES]: ['OES_standard_derivatives', true],\n  [FEATURES.GLSL_TEXTURE_LOD]: ['EXT_shader_texture_lod', true]\n};\n"]},"metadata":{},"sourceType":"module"}