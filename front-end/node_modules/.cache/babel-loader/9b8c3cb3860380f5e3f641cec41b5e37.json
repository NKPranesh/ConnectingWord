{"ast":null,"code":"import Geometry from '../geometry/geometry';\nimport { unpackIndexedGeometry } from '../geometry/geometry-utils';\nimport { uid } from '@luma.gl/webgl';\nexport default class PlaneGeometry extends Geometry {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      id = uid('plane-geometry')\n    } = props;\n    const {\n      indices,\n      attributes\n    } = tesselatePlane(props);\n    super({ ...props,\n      id,\n      indices,\n      attributes: { ...attributes,\n        ...props.attributes\n      }\n    });\n  }\n\n}\n\nfunction tesselatePlane(props) {\n  const {\n    type = 'x,y',\n    offset = 0,\n    flipCull = false,\n    unpack = false\n  } = props;\n  const coords = type.split(',');\n  let c1len = props[`${coords[0]}len`] || 1;\n  const c2len = props[`${coords[1]}len`] || 1;\n  const subdivisions1 = props[`n${coords[0]}`] || 1;\n  const subdivisions2 = props[`n${coords[1]}`] || 1;\n  const numVertices = (subdivisions1 + 1) * (subdivisions2 + 1);\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n  const texCoords = new Float32Array(numVertices * 2);\n\n  if (flipCull) {\n    c1len = -c1len;\n  }\n\n  let i2 = 0;\n  let i3 = 0;\n\n  for (let z = 0; z <= subdivisions2; z++) {\n    for (let x = 0; x <= subdivisions1; x++) {\n      const u = x / subdivisions1;\n      const v = z / subdivisions2;\n      texCoords[i2 + 0] = flipCull ? 1 - u : u;\n      texCoords[i2 + 1] = v;\n\n      switch (type) {\n        case 'x,y':\n          positions[i3 + 0] = c1len * u - c1len * 0.5;\n          positions[i3 + 1] = c2len * v - c2len * 0.5;\n          positions[i3 + 2] = offset;\n          normals[i3 + 0] = 0;\n          normals[i3 + 1] = 0;\n          normals[i3 + 2] = flipCull ? 1 : -1;\n          break;\n\n        case 'x,z':\n          positions[i3 + 0] = c1len * u - c1len * 0.5;\n          positions[i3 + 1] = offset;\n          positions[i3 + 2] = c2len * v - c2len * 0.5;\n          normals[i3 + 0] = 0;\n          normals[i3 + 1] = flipCull ? 1 : -1;\n          normals[i3 + 2] = 0;\n          break;\n\n        case 'y,z':\n          positions[i3 + 0] = offset;\n          positions[i3 + 1] = c1len * u - c1len * 0.5;\n          positions[i3 + 2] = c2len * v - c2len * 0.5;\n          normals[i3 + 0] = flipCull ? 1 : -1;\n          normals[i3 + 1] = 0;\n          normals[i3 + 2] = 0;\n          break;\n\n        default:\n          throw new Error('PlaneGeometry: unknown type');\n      }\n\n      i2 += 2;\n      i3 += 3;\n    }\n  }\n\n  const numVertsAcross = subdivisions1 + 1;\n  const indices = new Uint16Array(subdivisions1 * subdivisions2 * 6);\n\n  for (let z = 0; z < subdivisions2; z++) {\n    for (let x = 0; x < subdivisions1; x++) {\n      const index = (z * subdivisions1 + x) * 6;\n      indices[index + 0] = (z + 0) * numVertsAcross + x;\n      indices[index + 1] = (z + 1) * numVertsAcross + x;\n      indices[index + 2] = (z + 0) * numVertsAcross + x + 1;\n      indices[index + 3] = (z + 1) * numVertsAcross + x;\n      indices[index + 4] = (z + 1) * numVertsAcross + x + 1;\n      indices[index + 5] = (z + 0) * numVertsAcross + x + 1;\n    }\n  }\n\n  const geometry = {\n    indices: {\n      size: 1,\n      value: indices\n    },\n    attributes: {\n      POSITION: {\n        size: 3,\n        value: positions\n      },\n      NORMAL: {\n        size: 3,\n        value: normals\n      },\n      TEXCOORD_0: {\n        size: 2,\n        value: texCoords\n      }\n    }\n  };\n  return unpack ? unpackIndexedGeometry(geometry) : geometry;\n}","map":{"version":3,"sources":["../../../src/geometries/plane-geometry.js"],"names":["constructor","props","id","uid","attributes","tesselatePlane","type","offset","flipCull","unpack","coords","c1len","c2len","subdivisions1","subdivisions2","numVertices","positions","normals","texCoords","i2","i3","z","x","u","v","numVertsAcross","indices","index","geometry","size","value","POSITION","NORMAL","TEXCOORD_0","unpackIndexedGeometry"],"mappings":"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","sourcesContent":["import Geometry from '../geometry/geometry';\nimport {unpackIndexedGeometry} from '../geometry/geometry-utils';\nimport {uid} from '@luma.gl/webgl';\n\nexport default class PlaneGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('plane-geometry')} = props;\n\n    const {indices, attributes} = tesselatePlane(props);\n    super({\n      ...props,\n      id,\n      indices,\n      attributes: {...attributes, ...props.attributes}\n    });\n  }\n}\n\n// Primitives inspired by TDL http://code.google.com/p/webglsamples/,\n// copyright 2011 Google Inc. new BSD License\n// (http://www.opensource.org/licenses/bsd-license.php).\n/* eslint-disable max-statements, complexity */\n/* eslint-disable complexity, max-statements */\nfunction tesselatePlane(props) {\n  const {type = 'x,y', offset = 0, flipCull = false, unpack = false} = props;\n\n  const coords = type.split(',');\n  // width, height\n  let c1len = props[`${coords[0]}len`] || 1;\n  const c2len = props[`${coords[1]}len`] || 1;\n  // subdivisionsWidth, subdivisionsDepth\n  const subdivisions1 = props[`n${coords[0]}`] || 1;\n  const subdivisions2 = props[`n${coords[1]}`] || 1;\n  const numVertices = (subdivisions1 + 1) * (subdivisions2 + 1);\n\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n  const texCoords = new Float32Array(numVertices * 2);\n\n  if (flipCull) {\n    c1len = -c1len;\n  }\n\n  let i2 = 0;\n  let i3 = 0;\n  for (let z = 0; z <= subdivisions2; z++) {\n    for (let x = 0; x <= subdivisions1; x++) {\n      const u = x / subdivisions1;\n      const v = z / subdivisions2;\n      texCoords[i2 + 0] = flipCull ? 1 - u : u;\n      texCoords[i2 + 1] = v;\n\n      switch (type) {\n        case 'x,y':\n          positions[i3 + 0] = c1len * u - c1len * 0.5;\n          positions[i3 + 1] = c2len * v - c2len * 0.5;\n          positions[i3 + 2] = offset;\n\n          normals[i3 + 0] = 0;\n          normals[i3 + 1] = 0;\n          normals[i3 + 2] = flipCull ? 1 : -1;\n          break;\n\n        case 'x,z':\n          positions[i3 + 0] = c1len * u - c1len * 0.5;\n          positions[i3 + 1] = offset;\n          positions[i3 + 2] = c2len * v - c2len * 0.5;\n\n          normals[i3 + 0] = 0;\n          normals[i3 + 1] = flipCull ? 1 : -1;\n          normals[i3 + 2] = 0;\n          break;\n\n        case 'y,z':\n          positions[i3 + 0] = offset;\n          positions[i3 + 1] = c1len * u - c1len * 0.5;\n          positions[i3 + 2] = c2len * v - c2len * 0.5;\n\n          normals[i3 + 0] = flipCull ? 1 : -1;\n          normals[i3 + 1] = 0;\n          normals[i3 + 2] = 0;\n          break;\n\n        default:\n          throw new Error('PlaneGeometry: unknown type');\n      }\n\n      i2 += 2;\n      i3 += 3;\n    }\n  }\n\n  const numVertsAcross = subdivisions1 + 1;\n  const indices = new Uint16Array(subdivisions1 * subdivisions2 * 6);\n\n  for (let z = 0; z < subdivisions2; z++) {\n    for (let x = 0; x < subdivisions1; x++) {\n      const index = (z * subdivisions1 + x) * 6;\n      // Make triangle 1 of quad.\n      indices[index + 0] = (z + 0) * numVertsAcross + x;\n      indices[index + 1] = (z + 1) * numVertsAcross + x;\n      indices[index + 2] = (z + 0) * numVertsAcross + x + 1;\n\n      // Make triangle 2 of quad.\n      indices[index + 3] = (z + 1) * numVertsAcross + x;\n      indices[index + 4] = (z + 1) * numVertsAcross + x + 1;\n      indices[index + 5] = (z + 0) * numVertsAcross + x + 1;\n    }\n  }\n\n  const geometry = {\n    indices: {size: 1, value: indices},\n    attributes: {\n      POSITION: {size: 3, value: positions},\n      NORMAL: {size: 3, value: normals},\n      TEXCOORD_0: {size: 2, value: texCoords}\n    }\n  };\n\n  // Optionally, unpack indexed geometry\n  return unpack ? unpackIndexedGeometry(geometry) : geometry;\n}\n"]},"metadata":{},"sourceType":"module"}