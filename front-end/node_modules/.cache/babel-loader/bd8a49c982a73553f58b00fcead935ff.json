{"ast":null,"code":"import Texture2D from '../classes/texture-2d';\nimport TextureCube from '../classes/texture-cube';\nimport Texture3D from '../classes/texture-3d';\nimport Framebuffer from '../classes/framebuffer';\nimport { assert } from '../utils/assert';\nexport function cloneTextureFrom(refTexture, overrides) {\n  assert(refTexture instanceof Texture2D || refTexture instanceof TextureCube || refTexture instanceof Texture3D);\n  const TextureType = refTexture.constructor;\n  const {\n    gl,\n    width,\n    height,\n    format,\n    type,\n    dataFormat,\n    border,\n    mipmaps\n  } = refTexture;\n  const textureOptions = Object.assign({\n    width,\n    height,\n    format,\n    type,\n    dataFormat,\n    border,\n    mipmaps\n  }, overrides);\n  return new TextureType(gl, textureOptions);\n}\nexport function toFramebuffer(texture, opts) {\n  const {\n    gl,\n    width,\n    height,\n    id\n  } = texture;\n  const framebuffer = new Framebuffer(gl, Object.assign({}, opts, {\n    id: `framebuffer-for-${id}`,\n    width,\n    height,\n    attachments: {\n      [36064]: texture\n    }\n  }));\n  return framebuffer;\n}","map":{"version":3,"sources":["../../../src/webgl-utils/texture-utils.js"],"names":["assert","refTexture","TextureType","mipmaps","textureOptions","id","framebuffer","attachments","texture"],"mappings":"AACA,OAAA,SAAA,MAAA,uBAAA;AACA,OAAA,WAAA,MAAA,yBAAA;AACA,OAAA,SAAA,MAAA,uBAAA;AACA,OAAA,WAAA,MAAA,wBAAA;AAEA,SAAA,MAAA,QAAA,iBAAA;AAIA,OAAO,SAAA,gBAAA,CAAA,UAAA,EAAA,SAAA,EAAiD;AACtDA,EAAAA,MAAM,CACJC,UAAU,YAAVA,SAAAA,IACEA,UAAU,YADZA,WAAAA,IAEEA,UAAU,YAHdD,SAAM,CAANA;AAMA,QAAME,WAAW,GAAGD,UAAU,CAA9B,WAAA;AAEA,QAAM;AAAA,IAAA,EAAA;AAAA,IAAA,KAAA;AAAA,IAAA,MAAA;AAAA,IAAA,MAAA;AAAA,IAAA,IAAA;AAAA,IAAA,UAAA;AAAA,IAAA,MAAA;AAAsDE,IAAAA;AAAtD,MAAN,UAAA;AAEA,QAAMC,cAAc,GAAG,MAAM,CAAN,MAAA,CACrB;AAAA,IAAA,KAAA;AAAA,IAAA,MAAA;AAAA,IAAA,MAAA;AAAA,IAAA,IAAA;AAAA,IAAA,UAAA;AAAA,IAAA,MAAA;AAOED,IAAAA;AAPF,GADqB,EAAvB,SAAuB,CAAvB;AAcA,SAAO,IAAA,WAAA,CAAA,EAAA,EAAP,cAAO,CAAP;AACD;AAKD,OAAO,SAAA,aAAA,CAAA,OAAA,EAAA,IAAA,EAAsC;AAC3C,QAAM;AAAA,IAAA,EAAA;AAAA,IAAA,KAAA;AAAA,IAAA,MAAA;AAAoBE,IAAAA;AAApB,MAAN,OAAA;AACA,QAAMC,WAAW,GAAG,IAAA,WAAA,CAAA,EAAA,EAElB,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,IAAA,EAAwB;AACtBD,IAAAA,EAAE,EAAG,mBAAkBA,EADD,EAAA;AAAA,IAAA,KAAA;AAAA,IAAA,MAAA;AAItBE,IAAAA,WAAW,EAAE;AACX,OAAA,KAAA,GAAwBC;AADb;AAJS,GAAxB,CAFkB,CAApB;AAWA,SAAA,WAAA;AACD","sourcesContent":["// TODO: Two subdirectories must not depend on each other (classes vs utils)!\nimport Texture2D from '../classes/texture-2d';\nimport TextureCube from '../classes/texture-cube';\nimport Texture3D from '../classes/texture-3d';\nimport Framebuffer from '../classes/framebuffer';\nimport GL from '@luma.gl/constants';\nimport {assert} from '../utils/assert';\n\n// Clone a new texture object from a reference texture object.\n/** @type {import('./texture-utils').cloneTextureFrom} */\nexport function cloneTextureFrom(refTexture, overrides) {\n  assert(\n    refTexture instanceof Texture2D ||\n      refTexture instanceof TextureCube ||\n      refTexture instanceof Texture3D\n  );\n\n  const TextureType = refTexture.constructor;\n\n  const {gl, width, height, format, type, dataFormat, border, mipmaps} = refTexture;\n\n  const textureOptions = Object.assign(\n    {\n      width,\n      height,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps\n    },\n    overrides\n  );\n\n  // TODO: move this to `Texture` class as instance method and use this.constructor\n  return new TextureType(gl, textureOptions);\n}\n\n// Wraps a given texture into a framebuffer object, that can be further used\n// to read data from the texture object.\n/** @type {import('./texture-utils').toFramebuffer} */\nexport function toFramebuffer(texture, opts) {\n  const {gl, width, height, id} = texture;\n  const framebuffer = new Framebuffer(\n    gl,\n    Object.assign({}, opts, {\n      id: `framebuffer-for-${id}`,\n      width,\n      height,\n      attachments: {\n        [GL.COLOR_ATTACHMENT0]: texture\n      }\n    })\n  );\n  return framebuffer;\n}\n"]},"metadata":{},"sourceType":"module"}