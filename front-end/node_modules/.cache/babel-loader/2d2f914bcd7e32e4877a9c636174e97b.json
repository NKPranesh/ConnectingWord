{"ast":null,"code":"import { Vector3 } from '@math.gl/core';\nimport { INTERSECTION } from '../../constants';\nconst scratchVector = new Vector3();\nconst scratchNormal = new Vector3();\nexport default class AxisAlignedBoundingBox {\n  constructor() {\n    let minimum = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0, 0];\n    let maximum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    let center = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    center = center || scratchVector.copy(minimum).add(maximum).scale(0.5);\n    this.center = new Vector3(center);\n    this.halfDiagonal = new Vector3(maximum).subtract(this.center);\n    this.minimum = new Vector3(minimum);\n    this.maximum = new Vector3(maximum);\n  }\n\n  clone() {\n    return new AxisAlignedBoundingBox(this.minimum, this.maximum, this.center);\n  }\n\n  equals(right) {\n    return this === right || Boolean(right) && this.minimum.equals(right.minimum) && this.maximum.equals(right.maximum);\n  }\n\n  transform(transformation) {\n    this.center.transformAsPoint(transformation);\n    this.halfDiagonal.transform(transformation);\n    this.minimum.transform(transformation);\n    this.maximum.transform(transformation);\n    return this;\n  }\n\n  intersectPlane(plane) {\n    const {\n      halfDiagonal\n    } = this;\n    const normal = scratchNormal.from(plane.normal);\n    const e = halfDiagonal.x * Math.abs(normal.x) + halfDiagonal.y * Math.abs(normal.y) + halfDiagonal.z * Math.abs(normal.z);\n    const s = this.center.dot(normal) + plane.distance;\n\n    if (s - e > 0) {\n      return INTERSECTION.INSIDE;\n    }\n\n    if (s + e < 0) {\n      return INTERSECTION.OUTSIDE;\n    }\n\n    return INTERSECTION.INTERSECTING;\n  }\n\n  distanceTo(point) {\n    return Math.sqrt(this.distanceSquaredTo(point));\n  }\n\n  distanceSquaredTo(point) {\n    const offset = scratchVector.from(point).subtract(this.center);\n    const {\n      halfDiagonal\n    } = this;\n    let distanceSquared = 0.0;\n    let d;\n    d = Math.abs(offset.x) - halfDiagonal.x;\n\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.y) - halfDiagonal.y;\n\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.z) - halfDiagonal.z;\n\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    return distanceSquared;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/lib/bounding-volumes/axis-aligned-bounding-box.js"],"names":["scratchVector","scratchNormal","constructor","minimum","maximum","center","clone","equals","Boolean","right","transform","intersectPlane","halfDiagonal","normal","plane","e","Math","s","INTERSECTION","distanceTo","distanceSquaredTo","offset","distanceSquared","d"],"mappings":"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","sourcesContent":["import {Vector3} from '@math.gl/core';\nimport {INTERSECTION} from '../../constants';\n\nconst scratchVector = new Vector3();\nconst scratchNormal = new Vector3();\n\nexport default class AxisAlignedBoundingBox {\n  constructor(minimum = [0, 0, 0], maximum = [0, 0, 0], center = null) {\n    // If center was not defined, compute it.\n    center = center || scratchVector.copy(minimum).add(maximum).scale(0.5);\n    this.center = new Vector3(center);\n    this.halfDiagonal = new Vector3(maximum).subtract(this.center);\n\n    /**\n     * The minimum point defining the bounding box.\n     * @type {Vector3}\n     * @default {@link 0, 0, 0}\n     */\n    this.minimum = new Vector3(minimum);\n\n    /**\n     * The maximum point defining the bounding box.\n     * @type {Vector3}\n     * @default {@link 0, 0, 0}\n     */\n    this.maximum = new Vector3(maximum);\n  }\n\n  /**\n   * Duplicates a AxisAlignedBoundingBox instance.\n   *\n   * @returns {AxisAlignedBoundingBox} A new AxisAlignedBoundingBox instance.\n   */\n  clone() {\n    return new AxisAlignedBoundingBox(this.minimum, this.maximum, this.center);\n  }\n\n  /**\n   * Compares the provided AxisAlignedBoundingBox componentwise and returns\n   * <code>true</code> if they are equal, <code>false</code> otherwise.\n   *\n   * @param {AxisAlignedBoundingBox} [right] The second AxisAlignedBoundingBox to compare with.\n   * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n   */\n  equals(right) {\n    return (\n      this === right ||\n      (Boolean(right) && this.minimum.equals(right.minimum) && this.maximum.equals(right.maximum))\n    );\n  }\n\n  transform(transformation) {\n    this.center.transformAsPoint(transformation);\n    // TODO - this.halfDiagonal.transformAsVector(transformation);\n    this.halfDiagonal.transform(transformation);\n    this.minimum.transform(transformation);\n    this.maximum.transform(transformation);\n    return this;\n  }\n\n  /**\n   * Determines which side of a plane a box is located.\n   */\n  intersectPlane(plane) {\n    const {halfDiagonal} = this;\n    const normal = scratchNormal.from(plane.normal);\n    const e =\n      halfDiagonal.x * Math.abs(normal.x) +\n      halfDiagonal.y * Math.abs(normal.y) +\n      halfDiagonal.z * Math.abs(normal.z);\n    const s = this.center.dot(normal) + plane.distance; // signed distance from center\n\n    if (s - e > 0) {\n      return INTERSECTION.INSIDE;\n    }\n\n    if (s + e < 0) {\n      // Not in front because normals point inward\n      return INTERSECTION.OUTSIDE;\n    }\n\n    return INTERSECTION.INTERSECTING;\n  }\n\n  // Computes the estimated distance from the closest point on a bounding box to a point.\n  distanceTo(point) {\n    return Math.sqrt(this.distanceSquaredTo(point));\n  }\n\n  // Computes the estimated distance squared from the closest point on a bounding box to a point.\n  // A simplified version of OrientedBoundingBox.distanceSquaredTo\n  distanceSquaredTo(point) {\n    const offset = scratchVector.from(point).subtract(this.center);\n    const {halfDiagonal} = this;\n\n    let distanceSquared = 0.0;\n    let d;\n\n    d = Math.abs(offset.x) - halfDiagonal.x;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.y) - halfDiagonal.y;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.z) - halfDiagonal.z;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    return distanceSquared;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}