{"ast":null,"code":"export function unpackIndexedGeometry(geometry) {\n  const {\n    indices,\n    attributes\n  } = geometry;\n\n  if (!indices) {\n    return geometry;\n  }\n\n  const vertexCount = indices.value.length;\n  const unpackedAttributes = {};\n\n  for (const attributeName in attributes) {\n    const attribute = attributes[attributeName];\n    const {\n      constant,\n      value,\n      size\n    } = attribute;\n\n    if (constant || !size) {\n      continue;\n    }\n\n    const unpackedValue = new value.constructor(vertexCount * size);\n\n    for (let x = 0; x < vertexCount; ++x) {\n      const index = indices.value[x];\n\n      for (let i = 0; i < size; i++) {\n        unpackedValue[x * size + i] = value[index * size + i];\n      }\n    }\n\n    unpackedAttributes[attributeName] = {\n      size,\n      value: unpackedValue\n    };\n  }\n\n  return {\n    attributes: Object.assign({}, attributes, unpackedAttributes)\n  };\n}","map":{"version":3,"sources":["../../../src/geometry/geometry-utils.js"],"names":["attributes","vertexCount","indices","unpackedAttributes","attribute","size","constant","unpackedValue","value","x","index","i","Object"],"mappings":"AAAA,OAAO,SAAA,qBAAA,CAAA,QAAA,EAAyC;AAC9C,QAAM;AAAA,IAAA,OAAA;AAAUA,IAAAA;AAAV,MAAN,QAAA;;AACA,MAAI,CAAJ,OAAA,EAAc;AACZ,WAAA,QAAA;AACD;;AAED,QAAMC,WAAW,GAAGC,OAAO,CAAPA,KAAAA,CAApB,MAAA;AACA,QAAMC,kBAAkB,GAAxB,EAAA;;AAEA,OAAK,MAAL,aAAA,IAAA,UAAA,EAAwC;AACtC,UAAMC,SAAS,GAAGJ,UAAU,CAA5B,aAA4B,CAA5B;AACA,UAAM;AAAA,MAAA,QAAA;AAAA,MAAA,KAAA;AAAkBK,MAAAA;AAAlB,QAAN,SAAA;;AACA,QAAIC,QAAQ,IAAI,CAAhB,IAAA,EAAuB;AACrB;AACD;;AACD,UAAMC,aAAa,GAAG,IAAIC,KAAK,CAAT,WAAA,CAAsBP,WAAW,GAAvD,IAAsB,CAAtB;;AACA,SAAK,IAAIQ,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,WAAA,EAAiC,EAAjC,CAAA,EAAsC;AACpC,YAAMC,KAAK,GAAGR,OAAO,CAAPA,KAAAA,CAAd,CAAcA,CAAd;;AACA,WAAK,IAAIS,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,IAAA,EAA0BA,CAA1B,EAAA,EAA+B;AAC7BJ,QAAAA,aAAa,CAACE,CAAC,GAADA,IAAAA,GAAdF,CAAa,CAAbA,GAA8BC,KAAK,CAACE,KAAK,GAALA,IAAAA,GAApCH,CAAmC,CAAnCA;AACD;AACF;;AACDJ,IAAAA,kBAAkB,CAAlBA,aAAkB,CAAlBA,GAAoC;AAAA,MAAA,IAAA;AAAOK,MAAAA,KAAK,EAAED;AAAd,KAApCJ;AACD;;AAED,SAAO;AACLH,IAAAA,UAAU,EAAEY,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAAA,UAAAA,EAAAA,kBAAAA;AADP,GAAP;AAGD","sourcesContent":["export function unpackIndexedGeometry(geometry) {\n  const {indices, attributes} = geometry;\n  if (!indices) {\n    return geometry;\n  }\n\n  const vertexCount = indices.value.length;\n  const unpackedAttributes = {};\n\n  for (const attributeName in attributes) {\n    const attribute = attributes[attributeName];\n    const {constant, value, size} = attribute;\n    if (constant || !size) {\n      continue; // eslint-disable-line\n    }\n    const unpackedValue = new value.constructor(vertexCount * size);\n    for (let x = 0; x < vertexCount; ++x) {\n      const index = indices.value[x];\n      for (let i = 0; i < size; i++) {\n        unpackedValue[x * size + i] = value[index * size + i];\n      }\n    }\n    unpackedAttributes[attributeName] = {size, value: unpackedValue};\n  }\n\n  return {\n    attributes: Object.assign({}, attributes, unpackedAttributes)\n  };\n}\n"]},"metadata":{},"sourceType":"module"}