{"ast":null,"code":"import { lerp } from 'math.gl';\nconst availableTransformations = {\n  Point,\n  MultiPoint,\n  LineString,\n  MultiLineString,\n  Polygon,\n  MultiPolygon\n};\n\nfunction Point(_ref, _ref2, viewport) {\n  let [pointX, pointY] = _ref;\n  let [nw, se] = _ref2;\n  const x = lerp(nw[0], se[0], pointX);\n  const y = lerp(nw[1], se[1], pointY);\n  return viewport.unprojectFlat([x, y]);\n}\n\nfunction getPoints(geometry, bbox, viewport) {\n  return geometry.map(g => Point(g, bbox, viewport));\n}\n\nfunction MultiPoint(multiPoint, bbox, viewport) {\n  return getPoints(multiPoint, bbox, viewport);\n}\n\nfunction LineString(line, bbox, viewport) {\n  return getPoints(line, bbox, viewport);\n}\n\nfunction MultiLineString(multiLineString, bbox, viewport) {\n  return multiLineString.map(lineString => LineString(lineString, bbox, viewport));\n}\n\nfunction Polygon(polygon, bbox, viewport) {\n  return polygon.map(polygonRing => getPoints(polygonRing, bbox, viewport));\n}\n\nfunction MultiPolygon(multiPolygon, bbox, viewport) {\n  return multiPolygon.map(polygon => Polygon(polygon, bbox, viewport));\n}\n\nexport function transform(geometry, bbox, viewport) {\n  const nw = viewport.projectFlat([bbox.west, bbox.north]);\n  const se = viewport.projectFlat([bbox.east, bbox.south]);\n  const projectedBbox = [nw, se];\n  return { ...geometry,\n    coordinates: availableTransformations[geometry.type](geometry.coordinates, projectedBbox, viewport)\n  };\n}","map":{"version":3,"sources":["../../../src/mvt-layer/coordinate-transform.js"],"names":["availableTransformations","MultiPolygon","x","lerp","nw","se","y","viewport","geometry","g","Point","getPoints","multiLineString","lineString","LineString","polygon","polygonRing","multiPolygon","Polygon","bbox","projectedBbox","coordinates"],"mappings":"AAAA,SAAA,IAAA,QAAA,SAAA;AAEA,MAAMA,wBAAwB,GAAG;AAAA,EAAA,KAAA;AAAA,EAAA,UAAA;AAAA,EAAA,UAAA;AAAA,EAAA,eAAA;AAAA,EAAA,OAAA;AAM/BC,EAAAA;AAN+B,CAAjC;;AASA,SAAA,KAAA,cAAA,QAAA,EAAqD;AAAA,MAAtC,CAAA,MAAA,EAAf,MAAe,CAAsC;AAAA,MAApB,CAAA,EAAA,EAAjC,EAAiC,CAAoB;AACnD,QAAMC,CAAC,GAAGC,IAAI,CAACC,EAAE,CAAH,CAAG,CAAH,EAAQC,EAAE,CAAV,CAAU,CAAV,EAAd,MAAc,CAAd;AACA,QAAMC,CAAC,GAAGH,IAAI,CAACC,EAAE,CAAH,CAAG,CAAH,EAAQC,EAAE,CAAV,CAAU,CAAV,EAAd,MAAc,CAAd;AAEA,SAAOE,QAAQ,CAARA,aAAAA,CAAuB,CAAA,CAAA,EAA9B,CAA8B,CAAvBA,CAAP;AACD;;AAED,SAAA,SAAA,CAAA,QAAA,EAAA,IAAA,EAAA,QAAA,EAA6C;AAC3C,SAAOC,QAAQ,CAARA,GAAAA,CAAaC,CAAC,IAAIC,KAAK,CAAA,CAAA,EAAA,IAAA,EAA9B,QAA8B,CAAvBF,CAAP;AACD;;AAED,SAAA,UAAA,CAAA,UAAA,EAAA,IAAA,EAAA,QAAA,EAAgD;AAC9C,SAAOG,SAAS,CAAA,UAAA,EAAA,IAAA,EAAhB,QAAgB,CAAhB;AACD;;AAED,SAAA,UAAA,CAAA,IAAA,EAAA,IAAA,EAAA,QAAA,EAA0C;AACxC,SAAOA,SAAS,CAAA,IAAA,EAAA,IAAA,EAAhB,QAAgB,CAAhB;AACD;;AAED,SAAA,eAAA,CAAA,eAAA,EAAA,IAAA,EAAA,QAAA,EAA0D;AACxD,SAAOC,eAAe,CAAfA,GAAAA,CAAoBC,UAAU,IAAIC,UAAU,CAAA,UAAA,EAAA,IAAA,EAAnD,QAAmD,CAA5CF,CAAP;AACD;;AAED,SAAA,OAAA,CAAA,OAAA,EAAA,IAAA,EAAA,QAAA,EAA0C;AACxC,SAAOG,OAAO,CAAPA,GAAAA,CAAYC,WAAW,IAAIL,SAAS,CAAA,WAAA,EAAA,IAAA,EAA3C,QAA2C,CAApCI,CAAP;AACD;;AAED,SAAA,YAAA,CAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAoD;AAClD,SAAOE,YAAY,CAAZA,GAAAA,CAAiBF,OAAO,IAAIG,OAAO,CAAA,OAAA,EAAA,IAAA,EAA1C,QAA0C,CAAnCD,CAAP;AACD;;AAED,OAAO,SAAA,SAAA,CAAA,QAAA,EAAA,IAAA,EAAA,QAAA,EAA6C;AAClD,QAAMb,EAAE,GAAGG,QAAQ,CAARA,WAAAA,CAAqB,CAACY,IAAI,CAAL,IAAA,EAAYA,IAAI,CAAhD,KAAgC,CAArBZ,CAAX;AACA,QAAMF,EAAE,GAAGE,QAAQ,CAARA,WAAAA,CAAqB,CAACY,IAAI,CAAL,IAAA,EAAYA,IAAI,CAAhD,KAAgC,CAArBZ,CAAX;AACA,QAAMa,aAAa,GAAG,CAAA,EAAA,EAAtB,EAAsB,CAAtB;AAEA,SAAO,EACL,GADK,QAAA;AAELC,IAAAA,WAAW,EAAErB,wBAAwB,CAACQ,QAAQ,CAAjCR,IAAwB,CAAxBA,CACXQ,QAAQ,CADGR,WAAAA,EAAAA,aAAAA,EAAAA,QAAAA;AAFR,GAAP;AAQD","sourcesContent":["import {lerp} from 'math.gl';\n\nconst availableTransformations = {\n  Point,\n  MultiPoint,\n  LineString,\n  MultiLineString,\n  Polygon,\n  MultiPolygon\n};\n\nfunction Point([pointX, pointY], [nw, se], viewport) {\n  const x = lerp(nw[0], se[0], pointX);\n  const y = lerp(nw[1], se[1], pointY);\n\n  return viewport.unprojectFlat([x, y]);\n}\n\nfunction getPoints(geometry, bbox, viewport) {\n  return geometry.map(g => Point(g, bbox, viewport));\n}\n\nfunction MultiPoint(multiPoint, bbox, viewport) {\n  return getPoints(multiPoint, bbox, viewport);\n}\n\nfunction LineString(line, bbox, viewport) {\n  return getPoints(line, bbox, viewport);\n}\n\nfunction MultiLineString(multiLineString, bbox, viewport) {\n  return multiLineString.map(lineString => LineString(lineString, bbox, viewport));\n}\n\nfunction Polygon(polygon, bbox, viewport) {\n  return polygon.map(polygonRing => getPoints(polygonRing, bbox, viewport));\n}\n\nfunction MultiPolygon(multiPolygon, bbox, viewport) {\n  return multiPolygon.map(polygon => Polygon(polygon, bbox, viewport));\n}\n\nexport function transform(geometry, bbox, viewport) {\n  const nw = viewport.projectFlat([bbox.west, bbox.north]);\n  const se = viewport.projectFlat([bbox.east, bbox.south]);\n  const projectedBbox = [nw, se];\n\n  return {\n    ...geometry,\n    coordinates: availableTransformations[geometry.type](\n      geometry.coordinates,\n      projectedBbox,\n      viewport\n    )\n  };\n}\n"]},"metadata":{},"sourceType":"module"}