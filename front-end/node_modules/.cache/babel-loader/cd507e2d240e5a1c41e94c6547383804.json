{"ast":null,"code":"import { Texture2D, hasFeature, FEATURES, log } from '@luma.gl/webgl';\nexport default class GLTFMaterialParser {\n  constructor(gl, _ref) {\n    let {\n      attributes,\n      material,\n      pbrDebug,\n      imageBasedLightingEnvironment,\n      lights,\n      useTangents\n    } = _ref;\n    this.gl = gl;\n    this.defines = {\n      MANUAL_SRGB: 1,\n      SRGB_FAST_APPROXIMATION: 1\n    };\n\n    if (hasFeature(gl, FEATURES.GLSL_TEXTURE_LOD)) {\n      this.defines.USE_TEX_LOD = 1;\n    }\n\n    this.uniforms = {\n      u_Camera: [0, 0, 0],\n      u_MetallicRoughnessValues: [1, 1]\n    };\n    this.parameters = {};\n    this.generatedTextures = [];\n\n    if (imageBasedLightingEnvironment) {\n      this.uniforms.u_DiffuseEnvSampler = imageBasedLightingEnvironment.getDiffuseEnvSampler();\n      this.uniforms.u_SpecularEnvSampler = imageBasedLightingEnvironment.getSpecularEnvSampler();\n      this.uniforms.u_brdfLUT = imageBasedLightingEnvironment.getBrdfTexture();\n      this.uniforms.u_ScaleIBLAmbient = [1, 1];\n    }\n\n    if (pbrDebug) {\n      this.uniforms.u_ScaleDiffBaseMR = [0, 0, 0, 0];\n      this.uniforms.u_ScaleFGDSpec = [0, 0, 0, 0];\n    }\n\n    this.defineIfPresent(attributes.NORMAL, 'HAS_NORMALS');\n    this.defineIfPresent(attributes.TANGENT && useTangents, 'HAS_TANGENTS');\n    this.defineIfPresent(attributes.TEXCOORD_0, 'HAS_UV');\n    this.defineIfPresent(imageBasedLightingEnvironment, 'USE_IBL');\n    this.defineIfPresent(lights, 'USE_LIGHTS');\n    this.defineIfPresent(pbrDebug, 'PBR_DEBUG');\n\n    if (material) {\n      this.parseMaterial(material);\n    }\n  }\n\n  defineIfPresent(value, name) {\n    if (value) {\n      this.defines[name] = 1;\n    }\n  }\n\n  parseTexture(gltfTexture, name) {\n    let define = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    const parameters = gltfTexture.texture && gltfTexture.texture.sampler && gltfTexture.texture.sampler.parameters || {};\n    const image = gltfTexture.texture.source.image;\n    let textureOptions;\n    let specialTextureParameters = {};\n\n    if (image.compressed) {\n      textureOptions = image;\n      specialTextureParameters = {\n        [this.gl.TEXTURE_MIN_FILTER]: image.data.length > 1 ? this.gl.LINEAR_MIPMAP_NEAREST : this.gl.LINEAR\n      };\n    } else {\n      textureOptions = {\n        data: image\n      };\n    }\n\n    const texture = new Texture2D(this.gl, {\n      id: gltfTexture.name || gltfTexture.id,\n      parameters: { ...parameters,\n        ...specialTextureParameters\n      },\n      pixelStore: {\n        [this.gl.UNPACK_FLIP_Y_WEBGL]: false\n      },\n      ...textureOptions\n    });\n    this.uniforms[name] = texture;\n    this.defineIfPresent(define, define);\n    this.generatedTextures.push(texture);\n  }\n\n  parsePbrMetallicRoughness(pbrMetallicRoughness) {\n    if (pbrMetallicRoughness.baseColorTexture) {\n      this.parseTexture(pbrMetallicRoughness.baseColorTexture, 'u_BaseColorSampler', 'HAS_BASECOLORMAP');\n    }\n\n    this.uniforms.u_BaseColorFactor = pbrMetallicRoughness.baseColorFactor || [1, 1, 1, 1];\n\n    if (pbrMetallicRoughness.metallicRoughnessTexture) {\n      this.parseTexture(pbrMetallicRoughness.metallicRoughnessTexture, 'u_MetallicRoughnessSampler', 'HAS_METALROUGHNESSMAP');\n    }\n\n    const {\n      metallicFactor = 1,\n      roughnessFactor = 1\n    } = pbrMetallicRoughness;\n    this.uniforms.u_MetallicRoughnessValues = [metallicFactor, roughnessFactor];\n  }\n\n  parseMaterial(material) {\n    this.uniforms.pbr_uUnlit = Boolean(material.unlit);\n\n    if (material.pbrMetallicRoughness) {\n      this.parsePbrMetallicRoughness(material.pbrMetallicRoughness);\n    }\n\n    if (material.normalTexture) {\n      this.parseTexture(material.normalTexture, 'u_NormalSampler', 'HAS_NORMALMAP');\n      const {\n        scale = 1\n      } = material.normalTexture;\n      this.uniforms.u_NormalScale = scale;\n    }\n\n    if (material.occlusionTexture) {\n      this.parseTexture(material.occlusionTexture, 'u_OcclusionSampler', 'HAS_OCCLUSIONMAP');\n      const {\n        strength = 1\n      } = material.occlusionTexture;\n      this.uniforms.u_OcclusionStrength = strength;\n    }\n\n    if (material.emissiveTexture) {\n      this.parseTexture(material.emissiveTexture, 'u_EmissiveSampler', 'HAS_EMISSIVEMAP');\n      this.uniforms.u_EmissiveFactor = material.emissiveFactor || [0, 0, 0];\n    }\n\n    if (material.alphaMode === 'MASK') {\n      const {\n        alphaCutoff = 0.5\n      } = material;\n      this.defines.ALPHA_CUTOFF = 1;\n      this.uniforms.u_AlphaCutoff = alphaCutoff;\n    } else if (material.alphaMode === 'BLEND') {\n      log.warn('BLEND alphaMode might not work well because it requires mesh sorting')();\n      Object.assign(this.parameters, {\n        blend: true,\n        blendEquation: this.gl.FUNC_ADD,\n        blendFunc: [this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA]\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/gltf/gltf-material-parser.js"],"names":["constructor","useTangents","MANUAL_SRGB","SRGB_FAST_APPROXIMATION","hasFeature","FEATURES","u_Camera","u_MetallicRoughnessValues","imageBasedLightingEnvironment","attributes","defineIfPresent","parseTexture","define","parameters","gltfTexture","image","specialTextureParameters","textureOptions","LINEAR","data","texture","id","pixelStore","parsePbrMetallicRoughness","pbrMetallicRoughness","metallicFactor","roughnessFactor","parseMaterial","Boolean","material","scale","strength","alphaCutoff","log","Object","blend","blendEquation","blendFunc"],"mappings":"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","sourcesContent":["import {Texture2D, hasFeature, FEATURES, log} from '@luma.gl/webgl';\n\nexport default class GLTFMaterialParser {\n  constructor(\n    gl,\n    {attributes, material, pbrDebug, imageBasedLightingEnvironment, lights, useTangents}\n  ) {\n    this.gl = gl;\n\n    this.defines = {\n      // TODO: Use EXT_sRGB if available (Standard in WebGL 2.0)\n      MANUAL_SRGB: 1,\n      SRGB_FAST_APPROXIMATION: 1\n    };\n\n    if (hasFeature(gl, FEATURES.GLSL_TEXTURE_LOD)) {\n      this.defines.USE_TEX_LOD = 1;\n    }\n\n    this.uniforms = {\n      // TODO: find better values?\n      u_Camera: [0, 0, 0], // Model should override\n\n      u_MetallicRoughnessValues: [1, 1] // Default is 1 and 1\n    };\n\n    this.parameters = {};\n    this.generatedTextures = [];\n\n    if (imageBasedLightingEnvironment) {\n      this.uniforms.u_DiffuseEnvSampler = imageBasedLightingEnvironment.getDiffuseEnvSampler();\n      this.uniforms.u_SpecularEnvSampler = imageBasedLightingEnvironment.getSpecularEnvSampler();\n      this.uniforms.u_brdfLUT = imageBasedLightingEnvironment.getBrdfTexture();\n      this.uniforms.u_ScaleIBLAmbient = [1, 1];\n    }\n\n    if (pbrDebug) {\n      // Override final color for reference app visualization\n      // of various parameters in the lighting equation.\n      this.uniforms.u_ScaleDiffBaseMR = [0, 0, 0, 0];\n      this.uniforms.u_ScaleFGDSpec = [0, 0, 0, 0];\n    }\n\n    this.defineIfPresent(attributes.NORMAL, 'HAS_NORMALS');\n    this.defineIfPresent(attributes.TANGENT && useTangents, 'HAS_TANGENTS');\n    this.defineIfPresent(attributes.TEXCOORD_0, 'HAS_UV');\n\n    this.defineIfPresent(imageBasedLightingEnvironment, 'USE_IBL');\n    this.defineIfPresent(lights, 'USE_LIGHTS');\n    this.defineIfPresent(pbrDebug, 'PBR_DEBUG');\n\n    if (material) {\n      this.parseMaterial(material);\n    }\n  }\n\n  defineIfPresent(value, name) {\n    if (value) {\n      this.defines[name] = 1;\n    }\n  }\n\n  parseTexture(gltfTexture, name, define = null) {\n    const parameters =\n      (gltfTexture.texture &&\n        gltfTexture.texture.sampler &&\n        gltfTexture.texture.sampler.parameters) ||\n      {};\n\n    const image = gltfTexture.texture.source.image;\n    let textureOptions;\n    let specialTextureParameters = {};\n    if (image.compressed) {\n      textureOptions = image;\n      specialTextureParameters = {\n        [this.gl.TEXTURE_MIN_FILTER]:\n          image.data.length > 1 ? this.gl.LINEAR_MIPMAP_NEAREST : this.gl.LINEAR\n      };\n    } else {\n      // Texture2D accepts a promise that returns an image as data (Async Textures)\n      textureOptions = {data: image};\n    }\n\n    const texture = new Texture2D(this.gl, {\n      id: gltfTexture.name || gltfTexture.id,\n      parameters: {\n        ...parameters,\n        ...specialTextureParameters\n      },\n      pixelStore: {\n        [this.gl.UNPACK_FLIP_Y_WEBGL]: false\n      },\n      ...textureOptions\n    });\n    this.uniforms[name] = texture;\n    this.defineIfPresent(define, define);\n    this.generatedTextures.push(texture);\n  }\n\n  parsePbrMetallicRoughness(pbrMetallicRoughness) {\n    if (pbrMetallicRoughness.baseColorTexture) {\n      this.parseTexture(\n        pbrMetallicRoughness.baseColorTexture,\n        'u_BaseColorSampler',\n        'HAS_BASECOLORMAP'\n      );\n    }\n    this.uniforms.u_BaseColorFactor = pbrMetallicRoughness.baseColorFactor || [1, 1, 1, 1];\n\n    if (pbrMetallicRoughness.metallicRoughnessTexture) {\n      this.parseTexture(\n        pbrMetallicRoughness.metallicRoughnessTexture,\n        'u_MetallicRoughnessSampler',\n        'HAS_METALROUGHNESSMAP'\n      );\n    }\n    const {metallicFactor = 1, roughnessFactor = 1} = pbrMetallicRoughness;\n    this.uniforms.u_MetallicRoughnessValues = [metallicFactor, roughnessFactor];\n  }\n\n  parseMaterial(material) {\n    this.uniforms.pbr_uUnlit = Boolean(material.unlit);\n\n    if (material.pbrMetallicRoughness) {\n      this.parsePbrMetallicRoughness(material.pbrMetallicRoughness);\n    }\n    if (material.normalTexture) {\n      this.parseTexture(material.normalTexture, 'u_NormalSampler', 'HAS_NORMALMAP');\n\n      const {scale = 1} = material.normalTexture;\n      this.uniforms.u_NormalScale = scale;\n    }\n    if (material.occlusionTexture) {\n      this.parseTexture(material.occlusionTexture, 'u_OcclusionSampler', 'HAS_OCCLUSIONMAP');\n\n      const {strength = 1} = material.occlusionTexture;\n      this.uniforms.u_OcclusionStrength = strength;\n    }\n    if (material.emissiveTexture) {\n      this.parseTexture(material.emissiveTexture, 'u_EmissiveSampler', 'HAS_EMISSIVEMAP');\n      this.uniforms.u_EmissiveFactor = material.emissiveFactor || [0, 0, 0];\n    }\n    if (material.alphaMode === 'MASK') {\n      const {alphaCutoff = 0.5} = material;\n      this.defines.ALPHA_CUTOFF = 1;\n      this.uniforms.u_AlphaCutoff = alphaCutoff;\n    } else if (material.alphaMode === 'BLEND') {\n      log.warn('BLEND alphaMode might not work well because it requires mesh sorting')();\n      Object.assign(this.parameters, {\n        blend: true,\n        blendEquation: this.gl.FUNC_ADD,\n        blendFunc: [\n          this.gl.SRC_ALPHA,\n          this.gl.ONE_MINUS_SRC_ALPHA,\n          this.gl.ONE,\n          this.gl.ONE_MINUS_SRC_ALPHA\n        ]\n      });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}