{"ast":null,"code":"import { assert } from '../env-utils/assert';\nimport { VERSION as __VERSION__ } from '../env-utils/version';\nconst NPM_TAG = 'latest';\nconst VERSION = typeof \"3.0.13\" !== 'undefined' ? \"3.0.13\" : NPM_TAG;\nexport function getWorkerName(worker) {\n  const warning = worker.version !== VERSION ? \" (worker-utils@\".concat(VERSION, \")\") : '';\n  return \"\".concat(worker.name, \"@\").concat(worker.version).concat(warning);\n}\nexport function getWorkerURL(worker) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const workerOptions = options[worker.id] || {};\n  const workerFile = \"\".concat(worker.id, \"-worker.js\");\n  let url = workerOptions.workerUrl;\n\n  if (!url && worker.id === 'compression') {\n    url = options.workerUrl;\n  }\n\n  if (options._workerType === 'test') {\n    url = \"modules/\".concat(worker.module, \"/dist/\").concat(workerFile);\n  }\n\n  if (!url) {\n    let version = worker.version;\n\n    if (version === 'latest') {\n      version = NPM_TAG;\n    }\n\n    const versionTag = version ? \"@\".concat(version) : '';\n    url = \"https://unpkg.com/@loaders.gl/\".concat(worker.module).concat(versionTag, \"/dist/\").concat(workerFile);\n  }\n\n  assert(url);\n  return url;\n}","map":{"version":3,"sources":["../../../../src/lib/worker-api/get-worker-url.ts"],"names":["VERSION","NPM_TAG","warning","worker","options","workerOptions","workerFile","url","version","versionTag","assert"],"mappings":"AACA,SAAA,MAAA,QAAA,qBAAA;AACA,SAAQA,OAAO,IAAf,WAAA,QAAA,sBAAA;AAEA,MAAMC,OAAO,GAAb,QAAA;AACA,MAAMD,OAAO,GAAG,OAAA,QAAA,KAAA,WAAA,GAAA,QAAA,GAAhB,OAAA;AAKA,OAAO,SAAA,aAAA,CAAA,MAAA,EAAqD;AAC1D,QAAME,OAAO,GAAGC,MAAM,CAANA,OAAAA,KAAAA,OAAAA,GAAAA,kBAAAA,MAAAA,CAAAA,OAAAA,EAAAA,GAAAA,CAAAA,GAAhB,EAAA;AACA,SAAA,GAAA,MAAA,CAAUA,MAAM,CAAhB,IAAA,EAAA,GAAA,EAAA,MAAA,CAAyBA,MAAM,CAA/B,OAAA,EAAA,MAAA,CAAA,OAAA,CAAA;AACD;AASD,OAAO,SAAA,YAAA,CAAA,MAAA,EAAiF;AAAA,MAArCC,OAAqC,uEAAjF,EAAiF;AACtF,QAAMC,aAAa,GAAGD,OAAO,CAACD,MAAM,CAAdC,EAAO,CAAPA,IAAtB,EAAA;AAEA,QAAME,UAAU,GAAA,GAAA,MAAA,CAAMH,MAAM,CAAZ,EAAA,EAAhB,YAAgB,CAAhB;AAEA,MAAII,GAAG,GAAGF,aAAa,CAAvB,SAAA;;AAQA,MAAI,CAAA,GAAA,IAAQF,MAAM,CAANA,EAAAA,KAAZ,aAAA,EAAyC;AACvCI,IAAAA,GAAG,GAAGH,OAAO,CAAbG,SAAAA;AACD;;AAID,MAAIH,OAAO,CAAPA,WAAAA,KAAJ,MAAA,EAAoC;AAClCG,IAAAA,GAAG,GAAA,WAAA,MAAA,CAAcJ,MAAM,CAApB,MAAA,EAAA,QAAA,EAAA,MAAA,CAAHI,UAAG,CAAHA;AACD;;AAGD,MAAI,CAAJ,GAAA,EAAU;AAER,QAAIC,OAAO,GAAGL,MAAM,CAApB,OAAA;;AAEA,QAAIK,OAAO,KAAX,QAAA,EAA0B;AAExBA,MAAAA,OAAO,GAAPA,OAAAA;AACD;;AACD,UAAMC,UAAU,GAAGD,OAAO,GAAA,IAAA,MAAA,CAAA,OAAA,CAAA,GAA1B,EAAA;AACAD,IAAAA,GAAG,GAAA,iCAAA,MAAA,CAAoCJ,MAAM,CAA1C,MAAA,EAAA,MAAA,CAAA,UAAA,EAAA,QAAA,EAAA,MAAA,CAAHI,UAAG,CAAHA;AACD;;AAEDG,EAAAA,MAAM,CAANA,GAAM,CAANA;AAGA,SAAA,GAAA;AACD","sourcesContent":["import type {WorkerObject, WorkerOptions} from '../../types';\nimport {assert} from '../env-utils/assert';\nimport {VERSION as __VERSION__} from '../env-utils/version';\n\nconst NPM_TAG = 'latest';\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : NPM_TAG;\n\n/**\n * Gets worker object's name (for debugging in Chrome thread inspector window)\n */\nexport function getWorkerName(worker: WorkerObject): string {\n  const warning = worker.version !== VERSION ? ` (worker-utils@${VERSION})` : '';\n  return `${worker.name}@${worker.version}${warning}`;\n}\n\n/**\n * Generate a worker URL based on worker object and options\n * @returns A URL to one of the following:\n * - a published worker on unpkg CDN\n * - a local test worker\n * - a URL provided by the user in options\n */\nexport function getWorkerURL(worker: WorkerObject, options: WorkerOptions = {}): string {\n  const workerOptions = options[worker.id] || {};\n\n  const workerFile = `${worker.id}-worker.js`;\n\n  let url = workerOptions.workerUrl;\n\n  // HACK: Allow for non-nested workerUrl for the CompressionWorker.\n  // For the compression worker, workerOptions is currently not nested correctly. For most loaders,\n  // you'd have options within an object, i.e. `{mvt: {coordinates: ...}}` but the CompressionWorker\n  // puts options at the top level, not within a `compression` key (its `id`). For this reason, the\n  // above `workerOptions` will always be a string (i.e. `'gzip'`) for the CompressionWorker. To not\n  // break backwards compatibility, we allow the CompressionWorker to have options at the top level.\n  if (!url && worker.id === 'compression') {\n    url = options.workerUrl;\n  }\n\n  // If URL is test, generate local loaders.gl url\n  // @ts-ignore _workerType\n  if (options._workerType === 'test') {\n    url = `modules/${worker.module}/dist/${workerFile}`;\n  }\n\n  // If url override is not provided, generate a URL to published version on npm CDN unpkg.com\n  if (!url) {\n    // GENERATE\n    let version = worker.version;\n    // On master we need to load npm alpha releases published with the `beta` tag\n    if (version === 'latest') {\n      // throw new Error('latest worker version specified');\n      version = NPM_TAG;\n    }\n    const versionTag = version ? `@${version}` : '';\n    url = `https://unpkg.com/@loaders.gl/${worker.module}${versionTag}/dist/${workerFile}`;\n  }\n\n  assert(url);\n\n  // Allow user to override location\n  return url;\n}\n"]},"metadata":{},"sourceType":"module"}