{"ast":null,"code":"import { withParameters } from '@luma.gl/gltools';\nexport default class Display {\n  constructor() {\n    this.animationLoop = null;\n  }\n\n  getViews(options) {\n    const {\n      width,\n      height\n    } = options;\n    return [{\n      params: {\n        viewport: [0, 0, width, height],\n        scissor: [0, 0, width, height],\n        scissorTest: true\n      }\n    }];\n  }\n\n  submitFrame() {\n    return true;\n  }\n\n  requestAnimationFrame(renderFrame) {\n    return false;\n  }\n\n  delete() {}\n\n  _renderFrame(options) {\n    const views = this.getViews(options);\n\n    if (!views) {\n      return false;\n    }\n\n    const {\n      gl\n    } = this.animationLoop;\n\n    for (const view of views) {\n      withParameters(gl, view.params, () => this.animationLoop.onRender({ ...options,\n        ...view\n      }));\n    }\n\n    this.submitFrame();\n    return true;\n  }\n\n}","map":{"version":3,"sources":["../../../src/webvr/display.js"],"names":["constructor","getViews","height","params","viewport","scissor","scissorTest","submitFrame","requestAnimationFrame","delete","_renderFrame","views","gl","withParameters","view"],"mappings":"AAAA,SAAA,cAAA,QAAA,kBAAA;AAEA,eAAe,MAAA,OAAA,CAAc;AAC3BA,EAAAA,WAAW,GAAG;AAEZ,SAAA,aAAA,GAAA,IAAA;AACD;;AAEDC,EAAAA,QAAQ,CAAA,OAAA,EAAU;AAChB,UAAM;AAAA,MAAA,KAAA;AAAQC,MAAAA;AAAR,QAAN,OAAA;AACA,WAAO,CACL;AACEC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EADJ,MACI,CADJ;AAENC,QAAAA,OAAO,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAFH,MAEG,CAFH;AAGNC,QAAAA,WAAW,EAAE;AAHP;AADV,KADK,CAAP;AASD;;AAEDC,EAAAA,WAAW,GAAG;AACZ,WAAA,IAAA;AACD;;AAGDC,EAAAA,qBAAqB,CAAA,WAAA,EAAc;AACjC,WAAA,KAAA;AACD;;AAEDC,EAAAA,MAAM,GAAG,CAAE;;AAGXC,EAAAA,YAAY,CAAA,OAAA,EAAU;AACpB,UAAMC,KAAK,GAAG,KAAA,QAAA,CAAd,OAAc,CAAd;;AACA,QAAI,CAAJ,KAAA,EAAY;AACV,aAAA,KAAA;AACD;;AAED,UAAM;AAACC,MAAAA;AAAD,QAAO,KAAb,aAAA;;AACA,SAAK,MAAL,IAAA,IAAA,KAAA,EAA0B;AACxBC,MAAAA,cAAc,CAAA,EAAA,EAAKC,IAAI,CAAT,MAAA,EAAkB,MAAM,KAAA,aAAA,CAAA,QAAA,CAA4B,EAAC,GAAD,OAAA;AAAa,WAAGA;AAAhB,OAA5B,CAAxB,CAAdD;AACD;;AAED,SAAA,WAAA;AACA,WAAA,IAAA;AACD;;AA5C0B","sourcesContent":["import {withParameters} from '@luma.gl/gltools';\n\nexport default class Display {\n  constructor() {\n    // TODO\n    this.animationLoop = null;\n  }\n\n  getViews(options) {\n    const {width, height} = options;\n    return [\n      {\n        params: {\n          viewport: [0, 0, width, height],\n          scissor: [0, 0, width, height],\n          scissorTest: true\n        }\n      }\n    ];\n  }\n\n  submitFrame() {\n    return true;\n  }\n\n  // return true if animation frame has been requested\n  requestAnimationFrame(renderFrame) {\n    return false;\n  }\n\n  delete() {}\n\n  // AnimationLoop calls this API\n  _renderFrame(options) {\n    const views = this.getViews(options);\n    if (!views) {\n      return false;\n    }\n\n    const {gl} = this.animationLoop;\n    for (const view of views) {\n      withParameters(gl, view.params, () => this.animationLoop.onRender({...options, ...view}));\n    }\n\n    this.submitFrame();\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}