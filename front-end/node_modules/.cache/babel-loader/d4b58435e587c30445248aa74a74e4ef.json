{"ast":null,"code":"export function removeNontransferableOptions(object) {\n  return JSON.parse(stringifyJSON(object));\n}\n\nfunction stringifyJSON(v) {\n  const cache = new Set();\n  return JSON.stringify(v, (key, value) => {\n    if (typeof value === 'object' && value !== null) {\n      if (cache.has(value)) {\n        try {\n          return JSON.parse(JSON.stringify(value));\n        } catch (err) {\n          return undefined;\n        }\n      }\n\n      cache.add(value);\n    }\n\n    return value;\n  });\n}","map":{"version":3,"sources":["../../../../src/lib/worker-utils/remove-nontransferable-options.ts"],"names":["JSON","stringifyJSON","cache","value"],"mappings":"AAIA,OAAO,SAAA,4BAAA,CAAA,MAAA,EAA8D;AAInE,SAAOA,IAAI,CAAJA,KAAAA,CAAWC,aAAa,CAA/B,MAA+B,CAAxBD,CAAP;AACD;;AAED,SAAA,aAAA,CAAA,CAAA,EAA0B;AACxB,QAAME,KAAK,GAAG,IAAd,GAAc,EAAd;AACA,SAAO,IAAI,CAAJ,SAAA,CAAA,CAAA,EAAkB,CAAA,GAAA,EAAA,KAAA,KAAgB;AACvC,QAAI,OAAA,KAAA,KAAA,QAAA,IAA6BC,KAAK,KAAtC,IAAA,EAAiD;AAC/C,UAAID,KAAK,CAALA,GAAAA,CAAJ,KAAIA,CAAJ,EAAsB;AAEpB,YAAI;AAEF,iBAAOF,IAAI,CAAJA,KAAAA,CAAWA,IAAI,CAAJA,SAAAA,CAAlB,KAAkBA,CAAXA,CAAP;AAFF,SAAA,CAGE,OAAA,GAAA,EAAY;AAEZ,iBAAA,SAAA;AACD;AACF;;AAEDE,MAAAA,KAAK,CAALA,GAAAA,CAAAA,KAAAA;AACD;;AACD,WAAA,KAAA;AAfF,GAAO,CAAP;AAiBD","sourcesContent":["/**\n * Safely stringify JSON (drop non serializable values like functions and regexps)\n * @param value\n */\nexport function removeNontransferableOptions(object: object): object {\n  // options.log object contains functions which cannot be transferred\n  // TODO - decide how to handle logging on workers\n  // TODO - warn if options stringification is long\n  return JSON.parse(stringifyJSON(object));\n}\n\nfunction stringifyJSON(v) {\n  const cache = new Set();\n  return JSON.stringify(v, (key, value) => {\n    if (typeof value === 'object' && value !== null) {\n      if (cache.has(value)) {\n        // Circular reference found\n        try {\n          // If this value does not reference a parent it can be deduped\n          return JSON.parse(JSON.stringify(value));\n        } catch (err) {\n          // discard key if value cannot be deduped\n          return undefined;\n        }\n      }\n      // Store value in our set\n      cache.add(value);\n    }\n    return value;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}