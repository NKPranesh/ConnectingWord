{"ast":null,"code":"import { CompositeLayer, createIterable } from '@deck.gl/core';\nimport MultiIconLayer from './multi-icon-layer/multi-icon-layer';\nimport FontAtlasManager, { DEFAULT_CHAR_SET, DEFAULT_FONT_FAMILY, DEFAULT_FONT_WEIGHT, DEFAULT_FONT_SIZE, DEFAULT_BUFFER, DEFAULT_RADIUS, DEFAULT_CUTOFF } from './font-atlas-manager';\nimport { transformParagraph, getTextFromBuffer } from './utils';\nimport TextBackgroundLayer from './text-background-layer/text-background-layer';\nconst DEFAULT_FONT_SETTINGS = {\n  fontSize: DEFAULT_FONT_SIZE,\n  buffer: DEFAULT_BUFFER,\n  sdf: false,\n  radius: DEFAULT_RADIUS,\n  cutoff: DEFAULT_CUTOFF,\n  smoothing: 0.1\n};\nconst TEXT_ANCHOR = {\n  start: 1,\n  middle: 0,\n  end: -1\n};\nconst ALIGNMENT_BASELINE = {\n  top: 1,\n  center: 0,\n  bottom: -1\n};\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_LINE_HEIGHT = 1.0;\nconst FONT_SETTINGS_PROPS = ['fontSize', 'buffer', 'sdf', 'radius', 'cutoff'];\nconst defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n  background: false,\n  getBackgroundColor: {\n    type: 'accessor',\n    value: [255, 255, 255, 255]\n  },\n  getBorderColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getBorderWidth: {\n    type: 'accessor',\n    value: 0\n  },\n  backgroundPadding: {\n    type: 'array',\n    value: [0, 0, 0, 0]\n  },\n  characterSet: {\n    type: 'object',\n    value: DEFAULT_CHAR_SET\n  },\n  fontFamily: DEFAULT_FONT_FAMILY,\n  fontWeight: DEFAULT_FONT_WEIGHT,\n  lineHeight: DEFAULT_LINE_HEIGHT,\n  outlineWidth: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  outlineColor: {\n    type: 'color',\n    value: DEFAULT_COLOR\n  },\n  fontSettings: {},\n  wordBreak: 'break-word',\n  maxWidth: {\n    type: 'number',\n    value: -1\n  },\n  getText: {\n    type: 'accessor',\n    value: x => x.text\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getSize: {\n    type: 'accessor',\n    value: 32\n  },\n  getAngle: {\n    type: 'accessor',\n    value: 0\n  },\n  getTextAnchor: {\n    type: 'accessor',\n    value: 'middle'\n  },\n  getAlignmentBaseline: {\n    type: 'accessor',\n    value: 'center'\n  },\n  getPixelOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  backgroundColor: {\n    deprecatedFor: ['background', 'getBackgroundColor']\n  }\n};\nexport default class TextLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      styleVersion: 0,\n      fontAtlasManager: new FontAtlasManager()\n    };\n  }\n\n  updateState(_ref) {\n    let {\n      props,\n      oldProps,\n      changeFlags\n    } = _ref;\n    const textChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText);\n    const oldCharacterSet = this.state.characterSet;\n\n    if (textChanged) {\n      this._updateText();\n    }\n\n    const fontChanged = oldCharacterSet !== this.state.characterSet || this._fontChanged(oldProps, props);\n\n    if (fontChanged) {\n      this._updateFontAtlas(oldProps, props);\n    }\n\n    const styleChanged = fontChanged || props.lineHeight !== oldProps.lineHeight || props.wordBreak !== oldProps.wordBreak || props.maxWidth !== oldProps.maxWidth;\n\n    if (styleChanged) {\n      this.setState({\n        styleVersion: this.state.styleVersion + 1\n      });\n    }\n  }\n\n  getPickingInfo(_ref2) {\n    let {\n      info\n    } = _ref2;\n    info.object = info.index >= 0 ? this.props.data[info.index] : null;\n    return info;\n  }\n\n  _updateFontAtlas(oldProps, props) {\n    const {\n      fontSettings,\n      fontFamily,\n      fontWeight\n    } = props;\n    const {\n      fontAtlasManager,\n      characterSet\n    } = this.state;\n    fontAtlasManager.setProps({ ...DEFAULT_FONT_SETTINGS,\n      ...fontSettings,\n      characterSet,\n      fontFamily,\n      fontWeight\n    });\n  }\n\n  _fontChanged(oldProps, props) {\n    if (oldProps.fontFamily !== props.fontFamily || oldProps.fontWeight !== props.fontWeight) {\n      return true;\n    }\n\n    if (oldProps.fontSettings === props.fontSettings) {\n      return false;\n    }\n\n    const oldFontSettings = oldProps.fontSettings || {};\n    const fontSettings = props.fontSettings || {};\n    return FONT_SETTINGS_PROPS.some(prop => oldFontSettings[prop] !== fontSettings[prop]);\n  }\n\n  _updateText() {\n    const {\n      data,\n      characterSet\n    } = this.props;\n    const textBuffer = data.attributes && data.attributes.getText;\n    let {\n      getText\n    } = this.props;\n    let {\n      startIndices\n    } = data;\n    let numInstances;\n    const autoCharacterSet = characterSet === 'auto' && new Set();\n\n    if (textBuffer && startIndices) {\n      const {\n        texts,\n        characterCount\n      } = getTextFromBuffer({ ...(ArrayBuffer.isView(textBuffer) ? {\n          value: textBuffer\n        } : textBuffer),\n        length: data.length,\n        startIndices,\n        characterSet: autoCharacterSet\n      });\n      numInstances = characterCount;\n\n      getText = (_, _ref3) => {\n        let {\n          index\n        } = _ref3;\n        return texts[index];\n      };\n    } else {\n      const {\n        iterable,\n        objectInfo\n      } = createIterable(data);\n      startIndices = [0];\n      numInstances = 0;\n\n      for (const object of iterable) {\n        objectInfo.index++;\n        const text = Array.from(getText(object, objectInfo) || '');\n\n        if (autoCharacterSet) {\n          text.forEach(autoCharacterSet.add, autoCharacterSet);\n        }\n\n        numInstances += text.length;\n        startIndices.push(numInstances);\n      }\n    }\n\n    this.setState({\n      getText,\n      startIndices,\n      numInstances,\n      characterSet: autoCharacterSet || characterSet\n    });\n  }\n\n  getBoundingRect(object, objectInfo) {\n    const iconMapping = this.state.fontAtlasManager.mapping;\n    const {\n      getText\n    } = this.state;\n    const {\n      wordBreak,\n      maxWidth,\n      lineHeight,\n      getTextAnchor,\n      getAlignmentBaseline\n    } = this.props;\n    const paragraph = getText(object, objectInfo) || '';\n    const {\n      size: [width, height]\n    } = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping);\n    const anchorX = TEXT_ANCHOR[typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor];\n    const anchorY = ALIGNMENT_BASELINE[typeof getAlignmentBaseline === 'function' ? getAlignmentBaseline(object, objectInfo) : getAlignmentBaseline];\n    return [(anchorX - 1) * width / 2, (anchorY - 1) * height / 2, width, height];\n  }\n\n  getIconOffsets(object, objectInfo) {\n    const iconMapping = this.state.fontAtlasManager.mapping;\n    const {\n      getText\n    } = this.state;\n    const {\n      wordBreak,\n      maxWidth,\n      lineHeight,\n      getTextAnchor,\n      getAlignmentBaseline\n    } = this.props;\n    const paragraph = getText(object, objectInfo) || '';\n    const {\n      x,\n      y,\n      rowWidth,\n      size: [width, height]\n    } = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping);\n    const anchorX = TEXT_ANCHOR[typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor];\n    const anchorY = ALIGNMENT_BASELINE[typeof getAlignmentBaseline === 'function' ? getAlignmentBaseline(object, objectInfo) : getAlignmentBaseline];\n    const numCharacters = x.length;\n    const offsets = new Array(numCharacters * 2);\n    let index = 0;\n\n    for (let i = 0; i < numCharacters; i++) {\n      const rowOffset = (1 - anchorX) * (width - rowWidth[i]) / 2;\n      offsets[index++] = (anchorX - 1) * width / 2 + rowOffset + x[i];\n      offsets[index++] = (anchorY - 1) * height / 2 + y[i];\n    }\n\n    return offsets;\n  }\n\n  renderLayers() {\n    const {\n      startIndices,\n      numInstances,\n      getText,\n      fontAtlasManager: {\n        scale,\n        texture,\n        mapping\n      },\n      styleVersion\n    } = this.state;\n    const {\n      data,\n      _dataDiff,\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      getBackgroundColor,\n      getBorderColor,\n      getBorderWidth,\n      backgroundPadding,\n      background,\n      billboard,\n      fontSettings,\n      outlineWidth,\n      outlineColor,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      transitions,\n      updateTriggers\n    } = this.props;\n    const CharactersLayerClass = this.getSubLayerClass('characters', MultiIconLayer);\n    const BackgroundLayerClass = this.getSubLayerClass('background', TextBackgroundLayer);\n    return [background && new BackgroundLayerClass({\n      getFillColor: getBackgroundColor,\n      getLineColor: getBorderColor,\n      getLineWidth: getBorderWidth,\n      padding: backgroundPadding,\n      getPosition,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      billboard,\n      sizeScale: sizeScale / this.state.fontAtlasManager.props.fontSize,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      transitions: transitions && {\n        getPosition: transitions.getPosition,\n        getAngle: transitions.getAngle,\n        getSize: transitions.getSize,\n        getFillColor: transitions.getBackgroundColor,\n        getLineColor: transitions.getBorderColor,\n        getLineWidth: transitions.getBorderWidth,\n        getPixelOffset: transitions.getPixelOffset\n      }\n    }, this.getSubLayerProps({\n      id: 'background',\n      updateTriggers: {\n        getPosition: updateTriggers.getPosition,\n        getAngle: updateTriggers.getAngle,\n        getSize: updateTriggers.getSize,\n        getFillColor: updateTriggers.getBackgroundColor,\n        getLineColor: updateTriggers.getBorderColor,\n        getLineWidth: updateTriggers.getBorderWidth,\n        getPixelOffset: updateTriggers.getPixelOffset,\n        getBoundingRect: {\n          getText: updateTriggers.getText,\n          getTextAnchor: updateTriggers.getTextAnchor,\n          getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n          styleVersion\n        }\n      }\n    }), {\n      data: data.attributes ? {\n        length: data.length,\n        attributes: data.attributes.background || {}\n      } : data,\n      _dataDiff,\n      autoHighlight: false,\n      getBoundingRect: this.getBoundingRect.bind(this)\n    }), new CharactersLayerClass({\n      sdf: fontSettings.sdf,\n      smoothing: Number.isFinite(fontSettings.smoothing) ? fontSettings.smoothing : DEFAULT_FONT_SETTINGS.smoothing,\n      outlineWidth,\n      outlineColor,\n      iconAtlas: texture,\n      iconMapping: mapping,\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      billboard,\n      sizeScale: sizeScale * scale,\n      sizeUnits,\n      sizeMinPixels: sizeMinPixels * scale,\n      sizeMaxPixels: sizeMaxPixels * scale,\n      transitions: transitions && {\n        getPosition: transitions.getPosition,\n        getAngle: transitions.getAngle,\n        getColor: transitions.getColor,\n        getSize: transitions.getSize,\n        getPixelOffset: transitions.getPixelOffset\n      }\n    }, this.getSubLayerProps({\n      id: 'characters',\n      updateTriggers: {\n        getIcon: updateTriggers.getText,\n        getPosition: updateTriggers.getPosition,\n        getAngle: updateTriggers.getAngle,\n        getColor: updateTriggers.getColor,\n        getSize: updateTriggers.getSize,\n        getPixelOffset: updateTriggers.getPixelOffset,\n        getIconOffsets: {\n          getText: updateTriggers.getText,\n          getTextAnchor: updateTriggers.getTextAnchor,\n          getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n          styleVersion\n        }\n      }\n    }), {\n      data,\n      _dataDiff,\n      startIndices,\n      numInstances,\n      getIconOffsets: this.getIconOffsets.bind(this),\n      getIcon: getText\n    })];\n  }\n\n}\nTextLayer.layerName = 'TextLayer';\nTextLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/text-layer/text-layer.js"],"names":["DEFAULT_FONT_SETTINGS","fontSize","buffer","sdf","radius","cutoff","smoothing","TEXT_ANCHOR","start","middle","end","ALIGNMENT_BASELINE","top","center","bottom","DEFAULT_COLOR","DEFAULT_LINE_HEIGHT","FONT_SETTINGS_PROPS","defaultProps","billboard","sizeScale","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","background","getBackgroundColor","type","value","getBorderColor","getBorderWidth","backgroundPadding","characterSet","DEFAULT_CHAR_SET","fontFamily","fontWeight","lineHeight","outlineWidth","min","outlineColor","fontSettings","wordBreak","maxWidth","getText","x","text","getPosition","position","getColor","getSize","getAngle","getTextAnchor","getAlignmentBaseline","getPixelOffset","backgroundColor","deprecatedFor","initializeState","styleVersion","fontAtlasManager","updateState","changeFlags","textChanged","oldCharacterSet","fontChanged","styleChanged","props","oldProps","getPickingInfo","info","_updateFontAtlas","_fontChanged","oldFontSettings","prop","_updateText","textBuffer","data","startIndices","autoCharacterSet","characterCount","getTextFromBuffer","length","numInstances","index","texts","objectInfo","createIterable","Array","getBoundingRect","iconMapping","paragraph","size","transformParagraph","anchorX","anchorY","getIconOffsets","numCharacters","offsets","i","rowOffset","width","rowWidth","y","renderLayers","mapping","updateTriggers","CharactersLayerClass","BackgroundLayerClass","getFillColor","getLineColor","getLineWidth","padding","transitions","id","attributes","autoHighlight","iconAtlas","getIcon","TextLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport MultiIconLayer from './multi-icon-layer/multi-icon-layer';\nimport FontAtlasManager, {\n  DEFAULT_CHAR_SET,\n  DEFAULT_FONT_FAMILY,\n  DEFAULT_FONT_WEIGHT,\n  DEFAULT_FONT_SIZE,\n  DEFAULT_BUFFER,\n  DEFAULT_RADIUS,\n  DEFAULT_CUTOFF\n} from './font-atlas-manager';\nimport {transformParagraph, getTextFromBuffer} from './utils';\n\nimport TextBackgroundLayer from './text-background-layer/text-background-layer';\n\nconst DEFAULT_FONT_SETTINGS = {\n  fontSize: DEFAULT_FONT_SIZE,\n  buffer: DEFAULT_BUFFER,\n  sdf: false,\n  radius: DEFAULT_RADIUS,\n  cutoff: DEFAULT_CUTOFF,\n  smoothing: 0.1\n};\n\nconst TEXT_ANCHOR = {\n  start: 1,\n  middle: 0,\n  end: -1\n};\n\nconst ALIGNMENT_BASELINE = {\n  top: 1,\n  center: 0,\n  bottom: -1\n};\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst DEFAULT_LINE_HEIGHT = 1.0;\n\nconst FONT_SETTINGS_PROPS = ['fontSize', 'buffer', 'sdf', 'radius', 'cutoff'];\n\nconst defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  background: false,\n  getBackgroundColor: {type: 'accessor', value: [255, 255, 255, 255]},\n  getBorderColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getBorderWidth: {type: 'accessor', value: 0},\n  backgroundPadding: {type: 'array', value: [0, 0, 0, 0]},\n\n  characterSet: {type: 'object', value: DEFAULT_CHAR_SET},\n  fontFamily: DEFAULT_FONT_FAMILY,\n  fontWeight: DEFAULT_FONT_WEIGHT,\n  lineHeight: DEFAULT_LINE_HEIGHT,\n  outlineWidth: {type: 'number', value: 0, min: 0},\n  outlineColor: {type: 'color', value: DEFAULT_COLOR},\n  fontSettings: {},\n\n  // auto wrapping options\n  wordBreak: 'break-word',\n  maxWidth: {type: 'number', value: -1},\n\n  getText: {type: 'accessor', value: x => x.text},\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 32},\n  getAngle: {type: 'accessor', value: 0},\n  getTextAnchor: {type: 'accessor', value: 'middle'},\n  getAlignmentBaseline: {type: 'accessor', value: 'center'},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n\n  // deprecated\n  backgroundColor: {deprecatedFor: ['background', 'getBackgroundColor']}\n};\n\nexport default class TextLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      styleVersion: 0,\n      fontAtlasManager: new FontAtlasManager()\n    };\n  }\n\n  // eslint-disable-next-line complexity\n  updateState({props, oldProps, changeFlags}) {\n    const textChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText));\n    const oldCharacterSet = this.state.characterSet;\n\n    if (textChanged) {\n      this._updateText();\n    }\n\n    const fontChanged =\n      oldCharacterSet !== this.state.characterSet || this._fontChanged(oldProps, props);\n\n    if (fontChanged) {\n      this._updateFontAtlas(oldProps, props);\n    }\n\n    const styleChanged =\n      fontChanged ||\n      props.lineHeight !== oldProps.lineHeight ||\n      props.wordBreak !== oldProps.wordBreak ||\n      props.maxWidth !== oldProps.maxWidth;\n\n    if (styleChanged) {\n      this.setState({\n        styleVersion: this.state.styleVersion + 1\n      });\n    }\n  }\n\n  getPickingInfo({info}) {\n    // because `TextLayer` assign the same pickingInfoIndex for one text label,\n    // here info.index refers the index of text label in props.data\n    info.object = info.index >= 0 ? this.props.data[info.index] : null;\n    return info;\n  }\n\n  _updateFontAtlas(oldProps, props) {\n    const {fontSettings, fontFamily, fontWeight} = props;\n\n    // generate test characterSet\n    const {fontAtlasManager, characterSet} = this.state;\n    fontAtlasManager.setProps({\n      ...DEFAULT_FONT_SETTINGS,\n      ...fontSettings,\n      characterSet,\n      fontFamily,\n      fontWeight\n    });\n  }\n\n  _fontChanged(oldProps, props) {\n    if (oldProps.fontFamily !== props.fontFamily || oldProps.fontWeight !== props.fontWeight) {\n      return true;\n    }\n\n    if (oldProps.fontSettings === props.fontSettings) {\n      return false;\n    }\n\n    const oldFontSettings = oldProps.fontSettings || {};\n    const fontSettings = props.fontSettings || {};\n\n    return FONT_SETTINGS_PROPS.some(prop => oldFontSettings[prop] !== fontSettings[prop]);\n  }\n\n  // Text strings are variable width objects\n  // Count characters and start offsets\n  _updateText() {\n    const {data, characterSet} = this.props;\n    const textBuffer = data.attributes && data.attributes.getText;\n    let {getText} = this.props;\n    let {startIndices} = data;\n    let numInstances;\n\n    const autoCharacterSet = characterSet === 'auto' && new Set();\n\n    if (textBuffer && startIndices) {\n      const {texts, characterCount} = getTextFromBuffer({\n        ...(ArrayBuffer.isView(textBuffer) ? {value: textBuffer} : textBuffer),\n        length: data.length,\n        startIndices,\n        characterSet: autoCharacterSet\n      });\n      numInstances = characterCount;\n      getText = (_, {index}) => texts[index];\n    } else {\n      const {iterable, objectInfo} = createIterable(data);\n      startIndices = [0];\n      numInstances = 0;\n\n      for (const object of iterable) {\n        objectInfo.index++;\n        // Break into an array of characters\n        // When dealing with double-length unicode characters, `str.length` or `str[i]` do not work\n        const text = Array.from(getText(object, objectInfo) || '');\n        if (autoCharacterSet) {\n          text.forEach(autoCharacterSet.add, autoCharacterSet);\n        }\n        numInstances += text.length;\n        startIndices.push(numInstances);\n      }\n    }\n\n    this.setState({\n      getText,\n      startIndices,\n      numInstances,\n      characterSet: autoCharacterSet || characterSet\n    });\n  }\n\n  // Returns the x, y offsets of each character in a text string\n  getBoundingRect(object, objectInfo) {\n    const iconMapping = this.state.fontAtlasManager.mapping;\n    const {getText} = this.state;\n    const {wordBreak, maxWidth, lineHeight, getTextAnchor, getAlignmentBaseline} = this.props;\n\n    const paragraph = getText(object, objectInfo) || '';\n    const {\n      size: [width, height]\n    } = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping);\n    const anchorX =\n      TEXT_ANCHOR[\n        typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor\n      ];\n    const anchorY =\n      ALIGNMENT_BASELINE[\n        typeof getAlignmentBaseline === 'function'\n          ? getAlignmentBaseline(object, objectInfo)\n          : getAlignmentBaseline\n      ];\n\n    return [((anchorX - 1) * width) / 2, ((anchorY - 1) * height) / 2, width, height];\n  }\n\n  // Returns the x, y, w, h of each text object\n  getIconOffsets(object, objectInfo) {\n    const iconMapping = this.state.fontAtlasManager.mapping;\n    const {getText} = this.state;\n    const {wordBreak, maxWidth, lineHeight, getTextAnchor, getAlignmentBaseline} = this.props;\n\n    const paragraph = getText(object, objectInfo) || '';\n    const {\n      x,\n      y,\n      rowWidth,\n      size: [width, height]\n    } = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping);\n    const anchorX =\n      TEXT_ANCHOR[\n        typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor\n      ];\n    const anchorY =\n      ALIGNMENT_BASELINE[\n        typeof getAlignmentBaseline === 'function'\n          ? getAlignmentBaseline(object, objectInfo)\n          : getAlignmentBaseline\n      ];\n\n    const numCharacters = x.length;\n    const offsets = new Array(numCharacters * 2);\n    let index = 0;\n\n    for (let i = 0; i < numCharacters; i++) {\n      // For a multi-line object, offset in x-direction needs consider\n      // the row offset in the paragraph and the object offset in the row\n      const rowOffset = ((1 - anchorX) * (width - rowWidth[i])) / 2;\n      offsets[index++] = ((anchorX - 1) * width) / 2 + rowOffset + x[i];\n      offsets[index++] = ((anchorY - 1) * height) / 2 + y[i];\n    }\n    return offsets;\n  }\n\n  renderLayers() {\n    const {\n      startIndices,\n      numInstances,\n      getText,\n      fontAtlasManager: {scale, texture, mapping},\n      styleVersion\n    } = this.state;\n\n    const {\n      data,\n      _dataDiff,\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      getBackgroundColor,\n      getBorderColor,\n      getBorderWidth,\n      backgroundPadding,\n      background,\n      billboard,\n      fontSettings,\n      outlineWidth,\n      outlineColor,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      transitions,\n      updateTriggers\n    } = this.props;\n\n    const CharactersLayerClass = this.getSubLayerClass('characters', MultiIconLayer);\n    const BackgroundLayerClass = this.getSubLayerClass('background', TextBackgroundLayer);\n\n    return [\n      background &&\n        new BackgroundLayerClass(\n          {\n            // background props\n            getFillColor: getBackgroundColor,\n            getLineColor: getBorderColor,\n            getLineWidth: getBorderWidth,\n            padding: backgroundPadding,\n\n            // props shared with characters layer\n            getPosition,\n            getSize,\n            getAngle,\n            getPixelOffset,\n            billboard,\n            sizeScale: sizeScale / this.state.fontAtlasManager.props.fontSize,\n            sizeUnits,\n            sizeMinPixels,\n            sizeMaxPixels,\n\n            transitions: transitions && {\n              getPosition: transitions.getPosition,\n              getAngle: transitions.getAngle,\n              getSize: transitions.getSize,\n              getFillColor: transitions.getBackgroundColor,\n              getLineColor: transitions.getBorderColor,\n              getLineWidth: transitions.getBorderWidth,\n              getPixelOffset: transitions.getPixelOffset\n            }\n          },\n          this.getSubLayerProps({\n            id: 'background',\n            updateTriggers: {\n              getPosition: updateTriggers.getPosition,\n              getAngle: updateTriggers.getAngle,\n              getSize: updateTriggers.getSize,\n              getFillColor: updateTriggers.getBackgroundColor,\n              getLineColor: updateTriggers.getBorderColor,\n              getLineWidth: updateTriggers.getBorderWidth,\n              getPixelOffset: updateTriggers.getPixelOffset,\n              getBoundingRect: {\n                getText: updateTriggers.getText,\n                getTextAnchor: updateTriggers.getTextAnchor,\n                getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n                styleVersion\n              }\n            }\n          }),\n          {\n            data: data.attributes\n              ? {length: data.length, attributes: data.attributes.background || {}}\n              : data,\n            _dataDiff,\n            // Maintain the same background behavior as <=8.3. Remove in v9?\n            autoHighlight: false,\n            getBoundingRect: this.getBoundingRect.bind(this)\n          }\n        ),\n      new CharactersLayerClass(\n        {\n          sdf: fontSettings.sdf,\n          smoothing: Number.isFinite(fontSettings.smoothing)\n            ? fontSettings.smoothing\n            : DEFAULT_FONT_SETTINGS.smoothing,\n          outlineWidth,\n          outlineColor,\n          iconAtlas: texture,\n          iconMapping: mapping,\n\n          getPosition,\n          getColor,\n          getSize,\n          getAngle,\n          getPixelOffset,\n\n          billboard,\n          sizeScale: sizeScale * scale,\n          sizeUnits,\n          sizeMinPixels: sizeMinPixels * scale,\n          sizeMaxPixels: sizeMaxPixels * scale,\n\n          transitions: transitions && {\n            getPosition: transitions.getPosition,\n            getAngle: transitions.getAngle,\n            getColor: transitions.getColor,\n            getSize: transitions.getSize,\n            getPixelOffset: transitions.getPixelOffset\n          }\n        },\n        this.getSubLayerProps({\n          id: 'characters',\n          updateTriggers: {\n            getIcon: updateTriggers.getText,\n            getPosition: updateTriggers.getPosition,\n            getAngle: updateTriggers.getAngle,\n            getColor: updateTriggers.getColor,\n            getSize: updateTriggers.getSize,\n            getPixelOffset: updateTriggers.getPixelOffset,\n            getIconOffsets: {\n              getText: updateTriggers.getText,\n              getTextAnchor: updateTriggers.getTextAnchor,\n              getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n              styleVersion\n            }\n          }\n        }),\n        {\n          data,\n          _dataDiff,\n          startIndices,\n          numInstances,\n          getIconOffsets: this.getIconOffsets.bind(this),\n          getIcon: getText\n        }\n      )\n    ];\n  }\n}\n\nTextLayer.layerName = 'TextLayer';\nTextLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}