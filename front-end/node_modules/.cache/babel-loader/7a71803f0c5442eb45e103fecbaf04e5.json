{"ast":null,"code":"import { API_VERSIONS, DEFAULT_MAPS_URL_FORMAT } from './api/maps-api-common';\nexport const defaultClassicCredentials = {\n  username: 'public',\n  apiKey: 'default_public',\n  region: 'us',\n  mapsUrl: null\n};\nconst defaultCloudNativeCredentials = {\n  accessToken: null,\n  apiBaseUrl: null,\n  mapsUrl: null\n};\nlet credentials = {};\nsetDefaultCredentials({});\nexport function setDefaultCredentials(opts) {\n  const apiVersion = opts.apiVersion || API_VERSIONS.V2;\n\n  switch (apiVersion) {\n    case API_VERSIONS.V1:\n      opts.mapsUrl = opts.mapsUrl || DEFAULT_MAPS_URL_FORMAT[apiVersion];\n      credentials = {\n        apiVersion,\n        ...defaultClassicCredentials,\n        ...opts\n      };\n      break;\n\n    case API_VERSIONS.V2:\n      opts.mapsUrl = opts.mapsUrl || DEFAULT_MAPS_URL_FORMAT[apiVersion];\n      credentials = {\n        apiVersion,\n        ...defaultClassicCredentials,\n        ...opts\n      };\n      break;\n\n    case API_VERSIONS.V3:\n      if (!opts.apiBaseUrl) {\n        throw new Error(\"API version \".concat(API_VERSIONS.V3, \" requires to define apiBaseUrl at credentials. Go to https://app.carto.com to get your apiBaseUrl.\"));\n      }\n\n      const apiBaseUrl = opts.apiBaseUrl || defaultCloudNativeCredentials.apiBaseUrl;\n      opts.mapsUrl = opts.mapsUrl || buildMapsUrlFromBase(apiBaseUrl);\n      credentials = {\n        apiVersion,\n        ...defaultCloudNativeCredentials,\n        ...opts\n      };\n      break;\n\n    default:\n      throw new Error(\"Invalid API version \".concat(apiVersion, \". Use API_VERSIONS enum.\"));\n  }\n}\nexport function getDefaultCredentials() {\n  return credentials;\n}\nexport function buildMapsUrlFromBase(apiBaseUrl) {\n  let suffix = '/v3/maps';\n\n  if (apiBaseUrl.endsWith('/')) {\n    suffix = suffix.substring(1);\n  }\n\n  return \"\".concat(apiBaseUrl).concat(suffix);\n}","map":{"version":3,"sources":["../../src/config.js"],"names":["defaultClassicCredentials","username","apiKey","region","mapsUrl","defaultCloudNativeCredentials","accessToken","apiBaseUrl","credentials","setDefaultCredentials","apiVersion","opts","API_VERSIONS","DEFAULT_MAPS_URL_FORMAT","buildMapsUrlFromBase","suffix"],"mappings":"AAAA,SAAA,YAAA,EAAA,uBAAA,QAAA,uBAAA;AAEA,OAAO,MAAMA,yBAAyB,GAAG;AACvCC,EAAAA,QAAQ,EAD+B,QAAA;AAEvCC,EAAAA,MAAM,EAFiC,gBAAA;AAGvCC,EAAAA,MAAM,EAHiC,IAAA;AAIvCC,EAAAA,OAAO,EAAE;AAJ8B,CAAlC;AAOP,MAAMC,6BAA6B,GAAG;AACpCC,EAAAA,WAAW,EADyB,IAAA;AAEpCC,EAAAA,UAAU,EAF0B,IAAA;AAGpCH,EAAAA,OAAO,EAAE;AAH2B,CAAtC;AAMA,IAAII,WAAW,GAAf,EAAA;AAEAC,qBAAqB,CAArBA,EAAqB,CAArBA;AAEA,OAAO,SAAA,qBAAA,CAAA,IAAA,EAAqC;AAC1C,QAAMC,UAAU,GAAGC,IAAI,CAAJA,UAAAA,IAAmBC,YAAY,CAAlD,EAAA;;AAEA,UAAA,UAAA;AACE,SAAKA,YAAY,CAAjB,EAAA;AACED,MAAAA,IAAI,CAAJA,OAAAA,GAAeA,IAAI,CAAJA,OAAAA,IAAgBE,uBAAuB,CAAtDF,UAAsD,CAAtDA;AACAH,MAAAA,WAAW,GAAG;AAAA,QAAA,UAAA;AAEZ,WAFY,yBAAA;AAGZ,WAAGG;AAHS,OAAdH;AAKA;;AAEF,SAAKI,YAAY,CAAjB,EAAA;AACED,MAAAA,IAAI,CAAJA,OAAAA,GAAeA,IAAI,CAAJA,OAAAA,IAAgBE,uBAAuB,CAAtDF,UAAsD,CAAtDA;AACAH,MAAAA,WAAW,GAAG;AAAA,QAAA,UAAA;AAEZ,WAFY,yBAAA;AAGZ,WAAGG;AAHS,OAAdH;AAMA;;AACF,SAAKI,YAAY,CAAjB,EAAA;AACE,UAAI,CAACD,IAAI,CAAT,UAAA,EAAsB;AACpB,cAAM,IAAA,KAAA,CAAA,eAAA,MAAA,CAEFC,YAAY,CAFV,EAAA,EAAN,oGAAM,CAAA,CAAN;AAKD;;AAED,YAAML,UAAU,GAAGI,IAAI,CAAJA,UAAAA,IAAmBN,6BAA6B,CAAnE,UAAA;AACAM,MAAAA,IAAI,CAAJA,OAAAA,GAAeA,IAAI,CAAJA,OAAAA,IAAgBG,oBAAoB,CAAnDH,UAAmD,CAAnDA;AACAH,MAAAA,WAAW,GAAG;AAAA,QAAA,UAAA;AAEZ,WAFY,6BAAA;AAGZ,WAAGG;AAHS,OAAdH;AAKA;;AACF;AACE,YAAM,IAAA,KAAA,CAAA,uBAAA,MAAA,CAAA,UAAA,EAAN,0BAAM,CAAA,CAAN;AArCJ;AAuCD;AAED,OAAO,SAAA,qBAAA,GAAiC;AACtC,SAAA,WAAA;AACD;AAED,OAAO,SAAA,oBAAA,CAAA,UAAA,EAA0C;AAC/C,MAAIO,MAAM,GAAV,UAAA;;AACA,MAAIR,UAAU,CAAVA,QAAAA,CAAJ,GAAIA,CAAJ,EAA8B;AAC5BQ,IAAAA,MAAM,GAAGA,MAAM,CAANA,SAAAA,CAATA,CAASA,CAATA;AACD;;AAED,SAAA,GAAA,MAAA,CAAA,UAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACD","sourcesContent":["import {API_VERSIONS, DEFAULT_MAPS_URL_FORMAT} from './api/maps-api-common';\n\nexport const defaultClassicCredentials = {\n  username: 'public',\n  apiKey: 'default_public',\n  region: 'us',\n  mapsUrl: null\n};\n\nconst defaultCloudNativeCredentials = {\n  accessToken: null,\n  apiBaseUrl: null,\n  mapsUrl: null\n};\n\nlet credentials = {};\n\nsetDefaultCredentials({});\n\nexport function setDefaultCredentials(opts) {\n  const apiVersion = opts.apiVersion || API_VERSIONS.V2;\n\n  switch (apiVersion) {\n    case API_VERSIONS.V1:\n      opts.mapsUrl = opts.mapsUrl || DEFAULT_MAPS_URL_FORMAT[apiVersion];\n      credentials = {\n        apiVersion,\n        ...defaultClassicCredentials,\n        ...opts\n      };\n      break;\n\n    case API_VERSIONS.V2:\n      opts.mapsUrl = opts.mapsUrl || DEFAULT_MAPS_URL_FORMAT[apiVersion];\n      credentials = {\n        apiVersion,\n        ...defaultClassicCredentials,\n        ...opts\n      };\n\n      break;\n    case API_VERSIONS.V3:\n      if (!opts.apiBaseUrl) {\n        throw new Error(\n          `API version ${\n            API_VERSIONS.V3\n          } requires to define apiBaseUrl at credentials. Go to https://app.carto.com to get your apiBaseUrl.`\n        );\n      }\n\n      const apiBaseUrl = opts.apiBaseUrl || defaultCloudNativeCredentials.apiBaseUrl;\n      opts.mapsUrl = opts.mapsUrl || buildMapsUrlFromBase(apiBaseUrl);\n      credentials = {\n        apiVersion,\n        ...defaultCloudNativeCredentials,\n        ...opts\n      };\n      break;\n    default:\n      throw new Error(`Invalid API version ${apiVersion}. Use API_VERSIONS enum.`);\n  }\n}\n\nexport function getDefaultCredentials() {\n  return credentials;\n}\n\nexport function buildMapsUrlFromBase(apiBaseUrl) {\n  let suffix = '/v3/maps';\n  if (apiBaseUrl.endsWith('/')) {\n    suffix = suffix.substring(1);\n  }\n\n  return `${apiBaseUrl}${suffix}`;\n}\n"]},"metadata":{},"sourceType":"module"}