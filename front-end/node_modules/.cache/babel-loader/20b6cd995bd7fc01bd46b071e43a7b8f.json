{"ast":null,"code":"export default class LRUCache {\n  constructor() {\n    let limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n    this.limit = limit;\n    this.clear();\n  }\n\n  clear() {\n    this._cache = {};\n    this._order = [];\n  }\n\n  get(key) {\n    const value = this._cache[key];\n\n    if (value) {\n      this._deleteOrder(key);\n\n      this._appendOrder(key);\n    }\n\n    return value;\n  }\n\n  set(key, value) {\n    if (!this._cache[key]) {\n      if (Object.keys(this._cache).length === this.limit) {\n        this.delete(this._order[0]);\n      }\n\n      this._cache[key] = value;\n\n      this._appendOrder(key);\n    } else {\n      this.delete(key);\n      this._cache[key] = value;\n\n      this._appendOrder(key);\n    }\n  }\n\n  delete(key) {\n    const value = this._cache[key];\n\n    if (value) {\n      this._deleteCache(key);\n\n      this._deleteOrder(key);\n    }\n  }\n\n  _deleteCache(key) {\n    delete this._cache[key];\n  }\n\n  _deleteOrder(key) {\n    const index = this._order.findIndex(o => o === key);\n\n    if (index >= 0) {\n      this._order.splice(index, 1);\n    }\n  }\n\n  _appendOrder(key) {\n    this._order.push(key);\n  }\n\n}","map":{"version":3,"sources":["../../../src/text-layer/lru-cache.js"],"names":["constructor","limit","clear","get","value","set","Object","delete","_deleteCache","_deleteOrder","index","o","_appendOrder"],"mappings":"AAOA,eAAe,MAAA,QAAA,CAAe;AAC5BA,EAAAA,WAAW,GAAY;AAAA,QAAXC,KAAW,uEAAZ,CAAY;AACrB,SAAA,KAAA,GAAA,KAAA;AAEA,SAAA,KAAA;AACD;;AAEDC,EAAAA,KAAK,GAAG;AACN,SAAA,MAAA,GAAA,EAAA;AAEA,SAAA,MAAA,GAAA,EAAA;AACD;;AAEDC,EAAAA,GAAG,CAAA,GAAA,EAAM;AACP,UAAMC,KAAK,GAAG,KAAA,MAAA,CAAd,GAAc,CAAd;;AACA,QAAA,KAAA,EAAW;AAET,WAAA,YAAA,CAAA,GAAA;;AACA,WAAA,YAAA,CAAA,GAAA;AACD;;AACD,WAAA,KAAA;AACD;;AAEDC,EAAAA,GAAG,CAAA,GAAA,EAAA,KAAA,EAAa;AACd,QAAI,CAAC,KAAA,MAAA,CAAL,GAAK,CAAL,EAAuB;AAErB,UAAIC,MAAM,CAANA,IAAAA,CAAY,KAAZA,MAAAA,EAAAA,MAAAA,KAAoC,KAAxC,KAAA,EAAoD;AAClD,aAAA,MAAA,CAAY,KAAA,MAAA,CAAZ,CAAY,CAAZ;AACD;;AAED,WAAA,MAAA,CAAA,GAAA,IAAA,KAAA;;AACA,WAAA,YAAA,CAAA,GAAA;AAPF,KAAA,MAQO;AAEL,WAAA,MAAA,CAAA,GAAA;AAEA,WAAA,MAAA,CAAA,GAAA,IAAA,KAAA;;AACA,WAAA,YAAA,CAAA,GAAA;AACD;AACF;;AAEDC,EAAAA,MAAM,CAAA,GAAA,EAAM;AACV,UAAMH,KAAK,GAAG,KAAA,MAAA,CAAd,GAAc,CAAd;;AACA,QAAA,KAAA,EAAW;AACT,WAAA,YAAA,CAAA,GAAA;;AACA,WAAA,YAAA,CAAA,GAAA;AACD;AACF;;AAEDI,EAAAA,YAAY,CAAA,GAAA,EAAM;AAChB,WAAO,KAAA,MAAA,CAAP,GAAO,CAAP;AACD;;AAEDC,EAAAA,YAAY,CAAA,GAAA,EAAM;AAChB,UAAMC,KAAK,GAAG,KAAA,MAAA,CAAA,SAAA,CAAsBC,CAAC,IAAIA,CAAC,KAA1C,GAAc,CAAd;;AACA,QAAID,KAAK,IAAT,CAAA,EAAgB;AACd,WAAA,MAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA;AACD;AACF;;AAEDE,EAAAA,YAAY,CAAA,GAAA,EAAM;AAChB,SAAA,MAAA,CAAA,IAAA,CAAA,GAAA;AACD;;AA9D2B","sourcesContent":["/**\n * LRU Cache class with limit\n *\n * Update order for each get/set operation\n * Delete oldest when reach given limit\n */\n\nexport default class LRUCache {\n  constructor(limit = 5) {\n    this.limit = limit;\n\n    this.clear();\n  }\n\n  clear() {\n    this._cache = {};\n    // access/update order, first item is oldest, last item is newest\n    this._order = [];\n  }\n\n  get(key) {\n    const value = this._cache[key];\n    if (value) {\n      // update order\n      this._deleteOrder(key);\n      this._appendOrder(key);\n    }\n    return value;\n  }\n\n  set(key, value) {\n    if (!this._cache[key]) {\n      // if reach limit, delete the oldest\n      if (Object.keys(this._cache).length === this.limit) {\n        this.delete(this._order[0]);\n      }\n\n      this._cache[key] = value;\n      this._appendOrder(key);\n    } else {\n      // if found in cache, delete the old one, insert new one to the first of list\n      this.delete(key);\n\n      this._cache[key] = value;\n      this._appendOrder(key);\n    }\n  }\n\n  delete(key) {\n    const value = this._cache[key];\n    if (value) {\n      this._deleteCache(key);\n      this._deleteOrder(key);\n    }\n  }\n\n  _deleteCache(key) {\n    delete this._cache[key];\n  }\n\n  _deleteOrder(key) {\n    const index = this._order.findIndex(o => o === key);\n    if (index >= 0) {\n      this._order.splice(index, 1);\n    }\n  }\n\n  _appendOrder(key) {\n    this._order.push(key);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}