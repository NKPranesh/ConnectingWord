{"ast":null,"code":"import Model from '../lib/model';\nimport Geometry from '../geometry/geometry';\nconst CLIPSPACE_VERTEX_SHADER = `\\\nattribute vec2 aClipSpacePosition;\nattribute vec2 aTexCoord;\nattribute vec2 aCoordinate;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main(void) {\n  gl_Position = vec4(aClipSpacePosition, 0., 1.);\n  position = aClipSpacePosition;\n  coordinate = aCoordinate;\n  uv = aTexCoord;\n}\n`;\nconst POSITIONS = [-1, -1, 1, -1, -1, 1, 1, 1];\nexport default class ClipSpace extends Model {\n  constructor(gl, opts) {\n    const TEX_COORDS = POSITIONS.map(coord => coord === -1 ? 0 : coord);\n    super(gl, Object.assign({}, opts, {\n      vs: CLIPSPACE_VERTEX_SHADER,\n      geometry: new Geometry({\n        drawMode: 5,\n        vertexCount: 4,\n        attributes: {\n          aClipSpacePosition: {\n            size: 2,\n            value: new Float32Array(POSITIONS)\n          },\n          aTexCoord: {\n            size: 2,\n            value: new Float32Array(TEX_COORDS)\n          },\n          aCoordinate: {\n            size: 2,\n            value: new Float32Array(TEX_COORDS)\n          }\n        }\n      })\n    }));\n    this.setVertexCount(4);\n  }\n\n}","map":{"version":3,"sources":["../../../src/utils/clip-space.js"],"names":["CLIPSPACE_VERTEX_SHADER","POSITIONS","constructor","TEX_COORDS","coord","vs","geometry","drawMode","vertexCount","attributes","aClipSpacePosition","size","value","aTexCoord","aCoordinate"],"mappings":"AAEA,OAAA,KAAA,MAAA,cAAA;AACA,OAAA,QAAA,MAAA,sBAAA;AAEA,MAAMA,uBAAuB,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA,CAAA;AAkBA,MAAMC,SAAS,GAAG,CAAC,CAAD,CAAA,EAAK,CAAL,CAAA,EAAA,CAAA,EAAY,CAAZ,CAAA,EAAgB,CAAhB,CAAA,EAAA,CAAA,EAAA,CAAA,EAAlB,CAAkB,CAAlB;AAEA,eAAe,MAAA,SAAA,SAAA,KAAA,CAA8B;AAC3CC,EAAAA,WAAW,CAAA,EAAA,EAAA,IAAA,EAAW;AACpB,UAAMC,UAAU,GAAGF,SAAS,CAATA,GAAAA,CAAcG,KAAK,IAAKA,KAAK,KAAK,CAAVA,CAAAA,GAAAA,CAAAA,GAA3C,KAAmBH,CAAnB;AAEA,UAAA,EAAA,EAEE,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,IAAA,EAAwB;AACtBI,MAAAA,EAAE,EADoB,uBAAA;AAEtBC,MAAAA,QAAQ,EAAE,IAAA,QAAA,CAAa;AACrBC,QAAAA,QAAQ,EADa,CAAA;AAErBC,QAAAA,WAAW,EAFU,CAAA;AAGrBC,QAAAA,UAAU,EAAE;AACVC,UAAAA,kBAAkB,EAAE;AAACC,YAAAA,IAAI,EAAL,CAAA;AAAUC,YAAAA,KAAK,EAAE,IAAA,YAAA,CAAA,SAAA;AAAjB,WADV;AAEVC,UAAAA,SAAS,EAAE;AAACF,YAAAA,IAAI,EAAL,CAAA;AAAUC,YAAAA,KAAK,EAAE,IAAA,YAAA,CAAA,UAAA;AAAjB,WAFD;AAGVE,UAAAA,WAAW,EAAE;AAACH,YAAAA,IAAI,EAAL,CAAA;AAAUC,YAAAA,KAAK,EAAE,IAAA,YAAA,CAAA,UAAA;AAAjB;AAHH;AAHS,OAAb;AAFY,KAAxB,CAFF;AAeA,SAAA,cAAA,CAAA,CAAA;AACD;;AApB0C","sourcesContent":["// ClipSpace\nimport GL from '@luma.gl/constants';\nimport Model from '../lib/model';\nimport Geometry from '../geometry/geometry';\n\nconst CLIPSPACE_VERTEX_SHADER = `\\\nattribute vec2 aClipSpacePosition;\nattribute vec2 aTexCoord;\nattribute vec2 aCoordinate;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main(void) {\n  gl_Position = vec4(aClipSpacePosition, 0., 1.);\n  position = aClipSpacePosition;\n  coordinate = aCoordinate;\n  uv = aTexCoord;\n}\n`;\n\n/* eslint-disable indent, no-multi-spaces */\nconst POSITIONS = [-1, -1, 1, -1, -1, 1, 1, 1];\n\nexport default class ClipSpace extends Model {\n  constructor(gl, opts) {\n    const TEX_COORDS = POSITIONS.map(coord => (coord === -1 ? 0 : coord));\n\n    super(\n      gl,\n      Object.assign({}, opts, {\n        vs: CLIPSPACE_VERTEX_SHADER,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_STRIP,\n          vertexCount: 4,\n          attributes: {\n            aClipSpacePosition: {size: 2, value: new Float32Array(POSITIONS)},\n            aTexCoord: {size: 2, value: new Float32Array(TEX_COORDS)},\n            aCoordinate: {size: 2, value: new Float32Array(TEX_COORDS)}\n          }\n        })\n      })\n    );\n    this.setVertexCount(4);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}