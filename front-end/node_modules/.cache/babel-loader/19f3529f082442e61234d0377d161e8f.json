{"ast":null,"code":"import { deepEqual } from '../utils/deep-equal';\nexport default class LayerExtension {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.opts = opts;\n  }\n\n  equals(extension) {\n    if (this === extension) {\n      return true;\n    }\n\n    return this.constructor === extension.constructor && deepEqual(this.opts, extension.opts);\n  }\n\n  getShaders(extension) {\n    return null;\n  }\n\n  getSubLayerProps(extension) {\n    const {\n      defaultProps = {}\n    } = extension.constructor;\n    const newProps = {\n      updateTriggers: {}\n    };\n\n    for (const key in defaultProps) {\n      if (key in this.props) {\n        const propDef = defaultProps[key];\n        const propValue = this.props[key];\n        newProps[key] = propValue;\n\n        if (propDef && propDef.type === 'accessor') {\n          newProps.updateTriggers[key] = this.props.updateTriggers[key];\n\n          if (typeof propValue === 'function') {\n            newProps[key] = this.getSubLayerAccessor(propValue, true);\n          }\n        }\n      }\n    }\n\n    return newProps;\n  }\n\n  initializeState(context, extension) {}\n\n  updateState(params, extension) {}\n\n  draw(params, extension) {}\n\n  finalizeState(extension) {}\n\n}","map":{"version":3,"sources":["../../../src/lib/layer-extension.js"],"names":["constructor","opts","equals","extension","deepEqual","getShaders","getSubLayerProps","defaultProps","newProps","updateTriggers","key","propDef","propValue","initializeState","updateState","draw","finalizeState"],"mappings":"AAmBA,SAAA,SAAA,QAAA,qBAAA;AAEA,eAAe,MAAA,cAAA,CAAqB;AAClCA,EAAAA,WAAW,GAAY;AAAA,QAAXC,IAAW,uEAAZ,EAAY;AACrB,SAAA,IAAA,GAAA,IAAA;AACD;;AAEDC,EAAAA,MAAM,CAAA,SAAA,EAAY;AAChB,QAAI,SAAJ,SAAA,EAAwB;AACtB,aAAA,IAAA;AACD;;AAED,WAAO,KAAA,WAAA,KAAqBC,SAAS,CAA9B,WAAA,IAA8CC,SAAS,CAAC,KAAD,IAAA,EAAYD,SAAS,CAAnF,IAA8D,CAA9D;AACD;;AAEDE,EAAAA,UAAU,CAAA,SAAA,EAAY;AACpB,WAAA,IAAA;AACD;;AAEDC,EAAAA,gBAAgB,CAAA,SAAA,EAAY;AAC1B,UAAM;AAACC,MAAAA,YAAY,GAAG;AAAhB,QAAsBJ,SAAS,CAArC,WAAA;AACA,UAAMK,QAAQ,GAAG;AACfC,MAAAA,cAAc,EAAE;AADD,KAAjB;;AAKA,SAAK,MAAL,GAAA,IAAA,YAAA,EAAgC;AAC9B,UAAIC,GAAG,IAAI,KAAX,KAAA,EAAuB;AACrB,cAAMC,OAAO,GAAGJ,YAAY,CAA5B,GAA4B,CAA5B;AACA,cAAMK,SAAS,GAAG,KAAA,KAAA,CAAlB,GAAkB,CAAlB;AACAJ,QAAAA,QAAQ,CAARA,GAAQ,CAARA,GAAAA,SAAAA;;AACA,YAAIG,OAAO,IAAIA,OAAO,CAAPA,IAAAA,KAAf,UAAA,EAA4C;AAC1CH,UAAAA,QAAQ,CAARA,cAAAA,CAAAA,GAAAA,IAA+B,KAAA,KAAA,CAAA,cAAA,CAA/BA,GAA+B,CAA/BA;;AACA,cAAI,OAAA,SAAA,KAAJ,UAAA,EAAqC;AACnCA,YAAAA,QAAQ,CAARA,GAAQ,CAARA,GAAgB,KAAA,mBAAA,CAAA,SAAA,EAAhBA,IAAgB,CAAhBA;AACD;AACF;AACF;AACF;;AAED,WAAA,QAAA;AACD;;AAEDK,EAAAA,eAAe,CAAA,OAAA,EAAA,SAAA,EAAqB,CAAE;;AAEtCC,EAAAA,WAAW,CAAA,MAAA,EAAA,SAAA,EAAoB,CAAE;;AAEjCC,EAAAA,IAAI,CAAA,MAAA,EAAA,SAAA,EAAoB,CAAE;;AAE1BC,EAAAA,aAAa,CAAA,SAAA,EAAY,CAAE;;AA/CO","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {deepEqual} from '../utils/deep-equal';\n\nexport default class LayerExtension {\n  constructor(opts = {}) {\n    this.opts = opts;\n  }\n\n  equals(extension) {\n    if (this === extension) {\n      return true;\n    }\n\n    return this.constructor === extension.constructor && deepEqual(this.opts, extension.opts);\n  }\n\n  getShaders(extension) {\n    return null;\n  }\n\n  getSubLayerProps(extension) {\n    const {defaultProps = {}} = extension.constructor;\n    const newProps = {\n      updateTriggers: {}\n    };\n\n    /* eslint-disable max-depth */\n    for (const key in defaultProps) {\n      if (key in this.props) {\n        const propDef = defaultProps[key];\n        const propValue = this.props[key];\n        newProps[key] = propValue;\n        if (propDef && propDef.type === 'accessor') {\n          newProps.updateTriggers[key] = this.props.updateTriggers[key];\n          if (typeof propValue === 'function') {\n            newProps[key] = this.getSubLayerAccessor(propValue, true);\n          }\n        }\n      }\n    }\n    /* eslint-enable max-depth */\n    return newProps;\n  }\n\n  initializeState(context, extension) {}\n\n  updateState(params, extension) {}\n\n  draw(params, extension) {}\n\n  finalizeState(extension) {}\n}\n"]},"metadata":{},"sourceType":"module"}