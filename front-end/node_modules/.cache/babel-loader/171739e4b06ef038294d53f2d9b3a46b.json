{"ast":null,"code":"import { VERTEX_SHADER, FRAGMENT_SHADER } from './constants';\nimport { resolveModules } from './resolve-modules';\nimport { getPlatformShaderDefines, getVersionDefines } from './platform-defines';\nimport injectShader, { DECLARATION_INJECT_MARKER } from './inject-shader';\nimport transpileShader from './transpile-shader';\nimport { assert } from '../utils';\nconst INJECT_SHADER_DECLARATIONS = `\\n\\n${DECLARATION_INJECT_MARKER}\\n\\n`;\nconst SHADER_TYPE = {\n  [VERTEX_SHADER]: 'vertex',\n  [FRAGMENT_SHADER]: 'fragment'\n};\nconst FRAGMENT_SHADER_PROLOGUE = `\\\nprecision highp float;\n\n`;\nexport function assembleShaders(gl, opts) {\n  const {\n    vs,\n    fs\n  } = opts;\n  const modules = resolveModules(opts.modules || []);\n  return {\n    gl,\n    vs: assembleShader(gl, Object.assign({}, opts, {\n      source: vs,\n      type: VERTEX_SHADER,\n      modules\n    })),\n    fs: assembleShader(gl, Object.assign({}, opts, {\n      source: fs,\n      type: FRAGMENT_SHADER,\n      modules\n    })),\n    getUniforms: assembleGetUniforms(modules)\n  };\n}\n\nfunction assembleShader(gl, _ref) {\n  let {\n    id,\n    source,\n    type,\n    modules,\n    defines = {},\n    hookFunctions = [],\n    inject = {},\n    transpileToGLSL100 = false,\n    prologue = true,\n    log\n  } = _ref;\n  assert(typeof source === 'string', 'shader source must be a string');\n  const isVertex = type === VERTEX_SHADER;\n  const sourceLines = source.split('\\n');\n  let glslVersion = 100;\n  let versionLine = '';\n  let coreSource = source;\n\n  if (sourceLines[0].indexOf('#version ') === 0) {\n    glslVersion = 300;\n    versionLine = sourceLines[0];\n    coreSource = sourceLines.slice(1).join('\\n');\n  } else {\n    versionLine = `#version ${glslVersion}`;\n  }\n\n  const allDefines = {};\n  modules.forEach(module => {\n    Object.assign(allDefines, module.getDefines());\n  });\n  Object.assign(allDefines, defines);\n  let assembledSource = prologue ? `\\\n${versionLine}\n${getShaderName({\n    id,\n    source,\n    type\n  })}\n${getShaderType({\n    type\n  })}\n${getPlatformShaderDefines(gl)}\n${getVersionDefines(gl, glslVersion, !isVertex)}\n${getApplicationDefines(allDefines)}\n${isVertex ? '' : FRAGMENT_SHADER_PROLOGUE}\n` : `${versionLine}\n`;\n  const hookFunctionMap = normalizeHookFunctions(hookFunctions);\n  const hookInjections = {};\n  const declInjections = {};\n  const mainInjections = {};\n\n  for (const key in inject) {\n    const injection = typeof inject[key] === 'string' ? {\n      injection: inject[key],\n      order: 0\n    } : inject[key];\n    const match = key.match(/^(v|f)s:(#)?([\\w-]+)$/);\n\n    if (match) {\n      const hash = match[2];\n      const name = match[3];\n\n      if (hash) {\n        if (name === 'decl') {\n          declInjections[key] = [injection];\n        } else {\n          mainInjections[key] = [injection];\n        }\n      } else {\n        hookInjections[key] = [injection];\n      }\n    } else {\n      mainInjections[key] = [injection];\n    }\n  }\n\n  for (const module of modules) {\n    if (log) {\n      module.checkDeprecations(coreSource, log);\n    }\n\n    const moduleSource = module.getModuleSource(type, glslVersion);\n    assembledSource += moduleSource;\n    const injections = module.injections[type];\n\n    for (const key in injections) {\n      const match = key.match(/^(v|f)s:#([\\w-]+)$/);\n\n      if (match) {\n        const name = match[2];\n        const injectionType = name === 'decl' ? declInjections : mainInjections;\n        injectionType[key] = injectionType[key] || [];\n        injectionType[key].push(injections[key]);\n      } else {\n        hookInjections[key] = hookInjections[key] || [];\n        hookInjections[key].push(injections[key]);\n      }\n    }\n  }\n\n  assembledSource += INJECT_SHADER_DECLARATIONS;\n  assembledSource = injectShader(assembledSource, type, declInjections);\n  assembledSource += getHookFunctions(hookFunctionMap[type], hookInjections);\n  assembledSource += coreSource;\n  assembledSource = injectShader(assembledSource, type, mainInjections);\n  assembledSource = transpileShader(assembledSource, transpileToGLSL100 ? 100 : glslVersion, isVertex);\n  return assembledSource;\n}\n\nfunction assembleGetUniforms(modules) {\n  return function getUniforms(opts) {\n    const uniforms = {};\n\n    for (const module of modules) {\n      const moduleUniforms = module.getUniforms(opts, uniforms);\n      Object.assign(uniforms, moduleUniforms);\n    }\n\n    return uniforms;\n  };\n}\n\nfunction getShaderType(_ref2) {\n  let {\n    type\n  } = _ref2;\n  return `\n#define SHADER_TYPE_${SHADER_TYPE[type].toUpperCase()}\n`;\n}\n\nfunction getShaderName(_ref3) {\n  let {\n    id,\n    source,\n    type\n  } = _ref3;\n  const injectShaderName = id && typeof id === 'string' && source.indexOf('SHADER_NAME') === -1;\n  return injectShaderName ? `\n#define SHADER_NAME ${id}_${SHADER_TYPE[type]}\n\n` : '';\n}\n\nfunction getApplicationDefines() {\n  let defines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let count = 0;\n  let sourceText = '';\n\n  for (const define in defines) {\n    if (count === 0) {\n      sourceText += '\\n// APPLICATION DEFINES\\n';\n    }\n\n    count++;\n    const value = defines[define];\n\n    if (value || Number.isFinite(value)) {\n      sourceText += `#define ${define.toUpperCase()} ${defines[define]}\\n`;\n    }\n  }\n\n  if (count === 0) {\n    sourceText += '\\n';\n  }\n\n  return sourceText;\n}\n\nfunction getHookFunctions(hookFunctions, hookInjections) {\n  let result = '';\n\n  for (const hookName in hookFunctions) {\n    const hookFunction = hookFunctions[hookName];\n    result += `void ${hookFunction.signature} {\\n`;\n\n    if (hookFunction.header) {\n      result += `  ${hookFunction.header}`;\n    }\n\n    if (hookInjections[hookName]) {\n      const injections = hookInjections[hookName];\n      injections.sort((a, b) => a.order - b.order);\n\n      for (const injection of injections) {\n        result += `  ${injection.injection}\\n`;\n      }\n    }\n\n    if (hookFunction.footer) {\n      result += `  ${hookFunction.footer}`;\n    }\n\n    result += '}\\n';\n  }\n\n  return result;\n}\n\nfunction normalizeHookFunctions(hookFunctions) {\n  const result = {\n    vs: {},\n    fs: {}\n  };\n  hookFunctions.forEach(hook => {\n    let opts;\n\n    if (typeof hook !== 'string') {\n      opts = hook;\n      hook = opts.hook;\n    } else {\n      opts = {};\n    }\n\n    hook = hook.trim();\n    const [stage, signature] = hook.split(':');\n    const name = hook.replace(/\\(.+/, '');\n    result[stage][name] = Object.assign(opts, {\n      signature\n    });\n  });\n  return result;\n}","map":{"version":3,"sources":["../../../src/lib/assemble-shaders.js"],"names":["INJECT_SHADER_DECLARATIONS","DECLARATION_INJECT_MARKER","SHADER_TYPE","FRAGMENT_SHADER_PROLOGUE","fs","modules","resolveModules","opts","vs","assembleShader","source","type","getUniforms","assembleGetUniforms","defines","hookFunctions","inject","transpileToGLSL100","prologue","log","assert","isVertex","sourceLines","glslVersion","versionLine","coreSource","allDefines","module","Object","assembledSource","getShaderName","getShaderType","getPlatformShaderDefines","getVersionDefines","getApplicationDefines","hookFunctionMap","normalizeHookFunctions","hookInjections","declInjections","mainInjections","injection","order","match","key","hash","name","moduleSource","injections","injectionType","injectShader","getHookFunctions","transpileShader","uniforms","moduleUniforms","injectShaderName","id","count","sourceText","value","Number","define","result","hookFunction","signature","header","a","b","footer","hook"],"mappings":"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","sourcesContent":["import {VERTEX_SHADER, FRAGMENT_SHADER} from './constants';\nimport {resolveModules} from './resolve-modules';\nimport {getPlatformShaderDefines, getVersionDefines} from './platform-defines';\nimport injectShader, {DECLARATION_INJECT_MARKER} from './inject-shader';\nimport transpileShader from './transpile-shader';\nimport {assert} from '../utils';\n\nconst INJECT_SHADER_DECLARATIONS = `\\n\\n${DECLARATION_INJECT_MARKER}\\n\\n`;\n\nconst SHADER_TYPE = {\n  [VERTEX_SHADER]: 'vertex',\n  [FRAGMENT_SHADER]: 'fragment'\n};\n\n// Precision prologue to inject before functions are injected in shader\n// TODO - extract any existing prologue in the fragment source and move it up...\nconst FRAGMENT_SHADER_PROLOGUE = `\\\nprecision highp float;\n\n`;\n\n// Inject a list of modules\nexport function assembleShaders(gl, opts) {\n  const {vs, fs} = opts;\n  const modules = resolveModules(opts.modules || []);\n  return {\n    gl,\n    vs: assembleShader(gl, Object.assign({}, opts, {source: vs, type: VERTEX_SHADER, modules})),\n    fs: assembleShader(gl, Object.assign({}, opts, {source: fs, type: FRAGMENT_SHADER, modules})),\n    getUniforms: assembleGetUniforms(modules)\n  };\n}\n\n// Pulls together complete source code for either a vertex or a fragment shader\n// adding prologues, requested module chunks, and any final injections.\nfunction assembleShader(\n  gl,\n  {\n    id,\n    source,\n    type,\n    modules,\n    defines = {},\n    hookFunctions = [],\n    inject = {},\n    transpileToGLSL100 = false,\n    prologue = true,\n    log\n  }\n) {\n  assert(typeof source === 'string', 'shader source must be a string');\n\n  const isVertex = type === VERTEX_SHADER;\n\n  const sourceLines = source.split('\\n');\n  let glslVersion = 100;\n  let versionLine = '';\n  let coreSource = source;\n  // Extract any version directive string from source.\n  // TODO : keep all pre-processor statements at the begining of the shader.\n  if (sourceLines[0].indexOf('#version ') === 0) {\n    glslVersion = 300; // TODO - regexp that matches actual version number\n    versionLine = sourceLines[0];\n    coreSource = sourceLines.slice(1).join('\\n');\n  } else {\n    versionLine = `#version ${glslVersion}`;\n  }\n\n  // Combine Module and Application Defines\n  const allDefines = {};\n  modules.forEach(module => {\n    Object.assign(allDefines, module.getDefines());\n  });\n  Object.assign(allDefines, defines);\n\n  // Add platform defines (use these to work around platform-specific bugs and limitations)\n  // Add common defines (GLSL version compatibility, feature detection)\n  // Add precision declaration for fragment shaders\n  let assembledSource = prologue\n    ? `\\\n${versionLine}\n${getShaderName({id, source, type})}\n${getShaderType({type})}\n${getPlatformShaderDefines(gl)}\n${getVersionDefines(gl, glslVersion, !isVertex)}\n${getApplicationDefines(allDefines)}\n${isVertex ? '' : FRAGMENT_SHADER_PROLOGUE}\n`\n    : `${versionLine}\n`;\n\n  const hookFunctionMap = normalizeHookFunctions(hookFunctions);\n\n  // Add source of dependent modules in resolved order\n  const hookInjections = {};\n  const declInjections = {};\n  const mainInjections = {};\n\n  for (const key in inject) {\n    const injection =\n      typeof inject[key] === 'string' ? {injection: inject[key], order: 0} : inject[key];\n    const match = key.match(/^(v|f)s:(#)?([\\w-]+)$/);\n    if (match) {\n      const hash = match[2];\n      const name = match[3];\n      if (hash) {\n        if (name === 'decl') {\n          declInjections[key] = [injection];\n        } else {\n          mainInjections[key] = [injection];\n        }\n      } else {\n        hookInjections[key] = [injection];\n      }\n    } else {\n      // Regex injection\n      mainInjections[key] = [injection];\n    }\n  }\n\n  for (const module of modules) {\n    if (log) {\n      module.checkDeprecations(coreSource, log);\n    }\n    const moduleSource = module.getModuleSource(type, glslVersion);\n    // Add the module source, and a #define that declares it presence\n    assembledSource += moduleSource;\n\n    const injections = module.injections[type];\n    for (const key in injections) {\n      const match = key.match(/^(v|f)s:#([\\w-]+)$/);\n      if (match) {\n        const name = match[2];\n        const injectionType = name === 'decl' ? declInjections : mainInjections;\n        injectionType[key] = injectionType[key] || [];\n        injectionType[key].push(injections[key]);\n      } else {\n        hookInjections[key] = hookInjections[key] || [];\n        hookInjections[key].push(injections[key]);\n      }\n    }\n  }\n\n  // For injectShader\n  assembledSource += INJECT_SHADER_DECLARATIONS;\n\n  assembledSource = injectShader(assembledSource, type, declInjections);\n\n  assembledSource += getHookFunctions(hookFunctionMap[type], hookInjections);\n\n  // Add the version directive and actual source of this shader\n  assembledSource += coreSource;\n\n  // Apply any requested shader injections\n  assembledSource = injectShader(assembledSource, type, mainInjections);\n\n  assembledSource = transpileShader(\n    assembledSource,\n    transpileToGLSL100 ? 100 : glslVersion,\n    isVertex\n  );\n\n  return assembledSource;\n}\n\n// Returns a combined `getUniforms` covering the options for all the modules,\n// the created function will pass on options to the inidividual `getUniforms`\n// function of each shader module and combine the results into one object that\n// can be passed to setUniforms.\nfunction assembleGetUniforms(modules) {\n  return function getUniforms(opts) {\n    const uniforms = {};\n    for (const module of modules) {\n      // `modules` is already sorted by dependency level. This guarantees that\n      // modules have access to the uniforms that are generated by their dependencies.\n      const moduleUniforms = module.getUniforms(opts, uniforms);\n      Object.assign(uniforms, moduleUniforms);\n    }\n    return uniforms;\n  };\n}\n\nfunction getShaderType({type}) {\n  return `\n#define SHADER_TYPE_${SHADER_TYPE[type].toUpperCase()}\n`;\n}\n\n// Generate \"glslify-compatible\" SHADER_NAME defines\n// These are understood by the GLSL error parsing function\n// If id is provided and no SHADER_NAME constant is present in source, create one\nfunction getShaderName({id, source, type}) {\n  const injectShaderName = id && typeof id === 'string' && source.indexOf('SHADER_NAME') === -1;\n  return injectShaderName\n    ? `\n#define SHADER_NAME ${id}_${SHADER_TYPE[type]}\n\n`\n    : '';\n}\n\n// Generates application defines from an object\nfunction getApplicationDefines(defines = {}) {\n  let count = 0;\n  let sourceText = '';\n  for (const define in defines) {\n    if (count === 0) {\n      sourceText += '\\n// APPLICATION DEFINES\\n';\n    }\n    count++;\n\n    const value = defines[define];\n    if (value || Number.isFinite(value)) {\n      sourceText += `#define ${define.toUpperCase()} ${defines[define]}\\n`;\n    }\n  }\n  if (count === 0) {\n    sourceText += '\\n';\n  }\n  return sourceText;\n}\n\nfunction getHookFunctions(hookFunctions, hookInjections) {\n  let result = '';\n  for (const hookName in hookFunctions) {\n    const hookFunction = hookFunctions[hookName];\n    result += `void ${hookFunction.signature} {\\n`;\n    if (hookFunction.header) {\n      result += `  ${hookFunction.header}`;\n    }\n    if (hookInjections[hookName]) {\n      const injections = hookInjections[hookName];\n      injections.sort((a, b) => a.order - b.order);\n      for (const injection of injections) {\n        result += `  ${injection.injection}\\n`;\n      }\n    }\n    if (hookFunction.footer) {\n      result += `  ${hookFunction.footer}`;\n    }\n    result += '}\\n';\n  }\n\n  return result;\n}\n\nfunction normalizeHookFunctions(hookFunctions) {\n  const result = {\n    vs: {},\n    fs: {}\n  };\n\n  hookFunctions.forEach(hook => {\n    let opts;\n    if (typeof hook !== 'string') {\n      opts = hook;\n      hook = opts.hook;\n    } else {\n      opts = {};\n    }\n    hook = hook.trim();\n    const [stage, signature] = hook.split(':');\n    const name = hook.replace(/\\(.+/, '');\n    result[stage][name] = Object.assign(opts, {signature});\n  });\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}