{"ast":null,"code":"import { h3ToGeoBoundary, h3GetResolution, h3ToGeo, geoToH3, h3IsPentagon, h3Distance, edgeLength, UNITS } from 'h3-js';\nimport { lerp } from 'math.gl';\nimport { CompositeLayer, createIterable } from '@deck.gl/core';\nimport { ColumnLayer, PolygonLayer } from '@deck.gl/layers';\nconst UPDATE_THRESHOLD_KM = 10;\nexport function normalizeLongitudes(vertices, refLng) {\n  refLng = refLng === undefined ? vertices[0][0] : refLng;\n\n  for (const pt of vertices) {\n    const deltaLng = pt[0] - refLng;\n\n    if (deltaLng > 180) {\n      pt[0] -= 360;\n    } else if (deltaLng < -180) {\n      pt[0] += 360;\n    }\n  }\n}\nexport function scalePolygon(hexId, vertices, factor) {\n  const [lat, lng] = h3ToGeo(hexId);\n  const actualCount = vertices.length;\n  normalizeLongitudes(vertices, lng);\n  const vertexCount = vertices[0] === vertices[actualCount - 1] ? actualCount - 1 : actualCount;\n\n  for (let i = 0; i < vertexCount; i++) {\n    vertices[i][0] = lerp(lng, vertices[i][0], factor);\n    vertices[i][1] = lerp(lat, vertices[i][1], factor);\n  }\n}\n\nfunction getHexagonCentroid(getHexagon, object, objectInfo) {\n  const hexagonId = getHexagon(object, objectInfo);\n  const [lat, lng] = h3ToGeo(hexagonId);\n  return [lng, lat];\n}\n\nfunction h3ToPolygon(hexId) {\n  let coverage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let flatten = arguments.length > 2 ? arguments[2] : undefined;\n  const vertices = h3ToGeoBoundary(hexId, true);\n\n  if (coverage !== 1) {\n    scalePolygon(hexId, vertices, coverage);\n  } else {\n    normalizeLongitudes(vertices);\n  }\n\n  if (flatten) {\n    const positions = new Float64Array(vertices.length * 2);\n    let i = 0;\n\n    for (const pt of vertices) {\n      positions[i++] = pt[0];\n      positions[i++] = pt[1];\n    }\n\n    return positions;\n  }\n\n  return vertices;\n}\n\nfunction mergeTriggers(getHexagon, coverage) {\n  let trigger;\n\n  if (getHexagon === undefined || getHexagon === null) {\n    trigger = coverage;\n  } else if (typeof getHexagon === 'object') {\n    trigger = { ...getHexagon,\n      coverage\n    };\n  } else {\n    trigger = {\n      getHexagon,\n      coverage\n    };\n  }\n\n  return trigger;\n}\n\nconst defaultProps = { ...PolygonLayer.defaultProps,\n  highPrecision: 'auto',\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  centerHexagon: null,\n  getHexagon: {\n    type: 'accessor',\n    value: x => x.hexagon\n  },\n  extruded: true\n};\ndelete defaultProps.getLineDashArray;\nexport default class H3HexagonLayer extends CompositeLayer {\n  shouldUpdateState(_ref) {\n    let {\n      changeFlags\n    } = _ref;\n    return this._shouldUseHighPrecision() ? changeFlags.propsOrDataChanged : changeFlags.somethingChanged;\n  }\n\n  updateState(_ref2) {\n    let {\n      props,\n      oldProps,\n      changeFlags\n    } = _ref2;\n\n    if (props.highPrecision !== true && (changeFlags.dataChanged || changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagon)) {\n      const dataProps = this._calculateH3DataProps(props);\n\n      this.setState(dataProps);\n    }\n\n    this._updateVertices(this.context.viewport);\n  }\n\n  _calculateH3DataProps(props) {\n    let resolution = -1;\n    let hasPentagon = false;\n    let hasMultipleRes = false;\n    const {\n      iterable,\n      objectInfo\n    } = createIterable(props.data);\n\n    for (const object of iterable) {\n      objectInfo.index++;\n      const hexId = props.getHexagon(object, objectInfo);\n      const hexResolution = h3GetResolution(hexId);\n\n      if (resolution < 0) {\n        resolution = hexResolution;\n        if (!props.highPrecision) break;\n      } else if (resolution !== hexResolution) {\n        hasMultipleRes = true;\n        break;\n      }\n\n      if (h3IsPentagon(hexId)) {\n        hasPentagon = true;\n        break;\n      }\n    }\n\n    return {\n      resolution,\n      edgeLengthKM: resolution >= 0 ? edgeLength(resolution, UNITS.km) : 0,\n      hasMultipleRes,\n      hasPentagon\n    };\n  }\n\n  _shouldUseHighPrecision() {\n    if (this.props.highPrecision === 'auto') {\n      const {\n        resolution,\n        hasPentagon,\n        hasMultipleRes\n      } = this.state;\n      const {\n        viewport\n      } = this.context;\n      return viewport.resolution || hasMultipleRes || hasPentagon || resolution >= 0 && resolution <= 5;\n    }\n\n    return this.props.highPrecision;\n  }\n\n  _updateVertices(viewport) {\n    if (this._shouldUseHighPrecision()) {\n      return;\n    }\n\n    const {\n      resolution,\n      edgeLengthKM,\n      centerHex\n    } = this.state;\n\n    if (resolution < 0) {\n      return;\n    }\n\n    const hex = this.props.centerHexagon || geoToH3(viewport.latitude, viewport.longitude, resolution);\n\n    if (centerHex === hex) {\n      return;\n    }\n\n    if (centerHex) {\n      const distance = h3Distance(centerHex, hex);\n\n      if (distance >= 0 && distance * edgeLengthKM < UPDATE_THRESHOLD_KM) {\n        return;\n      }\n    }\n\n    const {\n      unitsPerMeter\n    } = viewport.distanceScales;\n    let vertices = h3ToPolygon(hex);\n    const [centerLat, centerLng] = h3ToGeo(hex);\n    const [centerX, centerY] = viewport.projectFlat([centerLng, centerLat]);\n    vertices = vertices.map(p => {\n      const worldPosition = viewport.projectFlat(p);\n      return [(worldPosition[0] - centerX) / unitsPerMeter[0], (worldPosition[1] - centerY) / unitsPerMeter[1]];\n    });\n    this.setState({\n      centerHex: hex,\n      vertices\n    });\n  }\n\n  renderLayers() {\n    return this._shouldUseHighPrecision() ? this._renderPolygonLayer() : this._renderColumnLayer();\n  }\n\n  _getForwardProps() {\n    const {\n      elevationScale,\n      material,\n      coverage,\n      extruded,\n      wireframe,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      getFillColor,\n      getElevation,\n      getLineColor,\n      getLineWidth,\n      transitions,\n      updateTriggers\n    } = this.props;\n    return {\n      elevationScale,\n      extruded,\n      coverage,\n      wireframe,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      material,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      transitions,\n      updateTriggers: {\n        getFillColor: updateTriggers.getFillColor,\n        getElevation: updateTriggers.getElevation,\n        getLineColor: updateTriggers.getLineColor,\n        getLineWidth: updateTriggers.getLineWidth\n      }\n    };\n  }\n\n  _renderPolygonLayer() {\n    const {\n      data,\n      getHexagon,\n      updateTriggers,\n      coverage\n    } = this.props;\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell-hifi', PolygonLayer);\n\n    const forwardProps = this._getForwardProps();\n\n    forwardProps.updateTriggers.getPolygon = mergeTriggers(updateTriggers.getHexagon, coverage);\n    return new SubLayerClass(forwardProps, this.getSubLayerProps({\n      id: 'hexagon-cell-hifi',\n      updateTriggers: forwardProps.updateTriggers\n    }), {\n      data,\n      _normalize: false,\n      _windingOrder: 'CCW',\n      positionFormat: 'XY',\n      getPolygon: (object, objectInfo) => {\n        const hexagonId = getHexagon(object, objectInfo);\n        return h3ToPolygon(hexagonId, coverage, true);\n      }\n    });\n  }\n\n  _renderColumnLayer() {\n    const {\n      data,\n      getHexagon,\n      updateTriggers\n    } = this.props;\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n\n    const forwardProps = this._getForwardProps();\n\n    forwardProps.updateTriggers.getPosition = updateTriggers.getHexagon;\n    return new SubLayerClass(forwardProps, this.getSubLayerProps({\n      id: 'hexagon-cell',\n      updateTriggers: forwardProps.updateTriggers\n    }), {\n      data,\n      diskResolution: 6,\n      radius: 1,\n      vertices: this.state.vertices,\n      getPosition: getHexagonCentroid.bind(null, getHexagon)\n    });\n  }\n\n}\nH3HexagonLayer.defaultProps = defaultProps;\nH3HexagonLayer.layerName = 'H3HexagonLayer';","map":{"version":3,"sources":["../../../src/h3-layers/h3-hexagon-layer.js"],"names":["UPDATE_THRESHOLD_KM","refLng","vertices","deltaLng","pt","h3ToGeo","actualCount","normalizeLongitudes","vertexCount","i","lerp","hexagonId","getHexagon","coverage","h3ToGeoBoundary","scalePolygon","positions","trigger","defaultProps","PolygonLayer","highPrecision","type","min","max","value","centerHexagon","x","hexagon","extruded","shouldUpdateState","changeFlags","updateState","props","dataProps","_calculateH3DataProps","resolution","hasPentagon","hasMultipleRes","objectInfo","createIterable","hexId","hexResolution","h3GetResolution","h3IsPentagon","edgeLengthKM","edgeLength","UNITS","_shouldUseHighPrecision","viewport","_updateVertices","centerHex","hex","geoToH3","distance","h3Distance","unitsPerMeter","h3ToPolygon","p","worldPosition","renderLayers","_getForwardProps","updateTriggers","getFillColor","getElevation","getLineColor","getLineWidth","_renderPolygonLayer","SubLayerClass","forwardProps","mergeTriggers","id","_normalize","_windingOrder","positionFormat","getPolygon","_renderColumnLayer","diskResolution","radius","getPosition","getHexagonCentroid","H3HexagonLayer"],"mappings":"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","sourcesContent":["import {\n  h3ToGeoBoundary,\n  h3GetResolution,\n  h3ToGeo,\n  geoToH3,\n  h3IsPentagon,\n  h3Distance,\n  edgeLength,\n  UNITS\n} from 'h3-js';\nimport {lerp} from 'math.gl';\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport {ColumnLayer, PolygonLayer} from '@deck.gl/layers';\n\n// There is a cost to updating the instanced geometries when using highPrecision: false\n// This constant defines the distance between two hexagons that leads to \"significant\n// distortion.\" Smaller value makes the column layer more sensitive to viewport change.\nconst UPDATE_THRESHOLD_KM = 10;\n\n// normalize longitudes w.r.t center (refLng), when not provided first vertex\nexport function normalizeLongitudes(vertices, refLng) {\n  refLng = refLng === undefined ? vertices[0][0] : refLng;\n  for (const pt of vertices) {\n    const deltaLng = pt[0] - refLng;\n    if (deltaLng > 180) {\n      pt[0] -= 360;\n    } else if (deltaLng < -180) {\n      pt[0] += 360;\n    }\n  }\n}\n\n// scale polygon vertices w.r.t center (hexId)\nexport function scalePolygon(hexId, vertices, factor) {\n  const [lat, lng] = h3ToGeo(hexId);\n  const actualCount = vertices.length;\n\n  // normalize with respect to center\n  normalizeLongitudes(vertices, lng);\n\n  // `h3ToGeoBoundary` returns same array object for first and last vertex (closed polygon),\n  // if so skip scaling the last vertex\n  const vertexCount = vertices[0] === vertices[actualCount - 1] ? actualCount - 1 : actualCount;\n  for (let i = 0; i < vertexCount; i++) {\n    vertices[i][0] = lerp(lng, vertices[i][0], factor);\n    vertices[i][1] = lerp(lat, vertices[i][1], factor);\n  }\n}\n\nfunction getHexagonCentroid(getHexagon, object, objectInfo) {\n  const hexagonId = getHexagon(object, objectInfo);\n  const [lat, lng] = h3ToGeo(hexagonId);\n  return [lng, lat];\n}\n\nfunction h3ToPolygon(hexId, coverage = 1, flatten) {\n  const vertices = h3ToGeoBoundary(hexId, true);\n\n  if (coverage !== 1) {\n    // scale and normalize vertices w.r.t to center\n    scalePolygon(hexId, vertices, coverage);\n  } else {\n    // normalize w.r.t to start vertex\n    normalizeLongitudes(vertices);\n  }\n\n  if (flatten) {\n    const positions = new Float64Array(vertices.length * 2);\n    let i = 0;\n    for (const pt of vertices) {\n      positions[i++] = pt[0];\n      positions[i++] = pt[1];\n    }\n    return positions;\n  }\n\n  return vertices;\n}\n\nfunction mergeTriggers(getHexagon, coverage) {\n  let trigger;\n  if (getHexagon === undefined || getHexagon === null) {\n    trigger = coverage;\n  } else if (typeof getHexagon === 'object') {\n    trigger = {...getHexagon, coverage};\n  } else {\n    trigger = {getHexagon, coverage};\n  }\n  return trigger;\n}\n\nconst defaultProps = {\n  ...PolygonLayer.defaultProps,\n  highPrecision: 'auto',\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  centerHexagon: null,\n  getHexagon: {type: 'accessor', value: x => x.hexagon},\n  extruded: true\n};\n\n// not supported\ndelete defaultProps.getLineDashArray;\n\n/**\n * A subclass of HexagonLayer that uses H3 hexagonIds in data objects\n * rather than centroid lat/longs. The shape of each hexagon is determined\n * based on a single \"center\" hexagon, which can be selected by passing in\n * a center lat/lon pair. If not provided, the map center will be used.\n *\n * Also sets the `hexagonId` field in the onHover/onClick callback's info\n * objects. Since this is calculated using math, hexagonId will be present\n * even when no corresponding hexagon is in the data set. You can check\n * index !== -1 to see if picking matches an actual object.\n */\nexport default class H3HexagonLayer extends CompositeLayer {\n  shouldUpdateState({changeFlags}) {\n    return this._shouldUseHighPrecision()\n      ? changeFlags.propsOrDataChanged\n      : changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    if (\n      props.highPrecision !== true &&\n      (changeFlags.dataChanged ||\n        (changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagon))\n    ) {\n      const dataProps = this._calculateH3DataProps(props);\n      this.setState(dataProps);\n    }\n\n    this._updateVertices(this.context.viewport);\n  }\n\n  _calculateH3DataProps(props) {\n    let resolution = -1;\n    let hasPentagon = false;\n    let hasMultipleRes = false;\n\n    const {iterable, objectInfo} = createIterable(props.data);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const hexId = props.getHexagon(object, objectInfo);\n      // Take the resolution of the first hex\n      const hexResolution = h3GetResolution(hexId);\n      if (resolution < 0) {\n        resolution = hexResolution;\n        if (!props.highPrecision) break;\n      } else if (resolution !== hexResolution) {\n        hasMultipleRes = true;\n        break;\n      }\n      if (h3IsPentagon(hexId)) {\n        hasPentagon = true;\n        break;\n      }\n    }\n\n    return {\n      resolution,\n      edgeLengthKM: resolution >= 0 ? edgeLength(resolution, UNITS.km) : 0,\n      hasMultipleRes,\n      hasPentagon\n    };\n  }\n\n  _shouldUseHighPrecision() {\n    if (this.props.highPrecision === 'auto') {\n      const {resolution, hasPentagon, hasMultipleRes} = this.state;\n      const {viewport} = this.context;\n      return (\n        viewport.resolution || hasMultipleRes || hasPentagon || (resolution >= 0 && resolution <= 5)\n      );\n    }\n\n    return this.props.highPrecision;\n  }\n\n  _updateVertices(viewport) {\n    if (this._shouldUseHighPrecision()) {\n      return;\n    }\n    const {resolution, edgeLengthKM, centerHex} = this.state;\n    if (resolution < 0) {\n      return;\n    }\n    const hex =\n      this.props.centerHexagon || geoToH3(viewport.latitude, viewport.longitude, resolution);\n    if (centerHex === hex) {\n      return;\n    }\n    if (centerHex) {\n      const distance = h3Distance(centerHex, hex);\n      // h3Distance returns a negative number if the distance could not be computed\n      // due to the two indexes very far apart or on opposite sides of a pentagon.\n      if (distance >= 0 && distance * edgeLengthKM < UPDATE_THRESHOLD_KM) {\n        return;\n      }\n    }\n\n    const {unitsPerMeter} = viewport.distanceScales;\n\n    let vertices = h3ToPolygon(hex);\n    const [centerLat, centerLng] = h3ToGeo(hex);\n\n    const [centerX, centerY] = viewport.projectFlat([centerLng, centerLat]);\n    vertices = vertices.map(p => {\n      const worldPosition = viewport.projectFlat(p);\n      return [\n        (worldPosition[0] - centerX) / unitsPerMeter[0],\n        (worldPosition[1] - centerY) / unitsPerMeter[1]\n      ];\n    });\n\n    this.setState({centerHex: hex, vertices});\n  }\n\n  renderLayers() {\n    return this._shouldUseHighPrecision() ? this._renderPolygonLayer() : this._renderColumnLayer();\n  }\n\n  _getForwardProps() {\n    const {\n      elevationScale,\n      material,\n      coverage,\n      extruded,\n      wireframe,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      getFillColor,\n      getElevation,\n      getLineColor,\n      getLineWidth,\n      transitions,\n      updateTriggers\n    } = this.props;\n\n    return {\n      elevationScale,\n      extruded,\n      coverage,\n      wireframe,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      material,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      transitions,\n      updateTriggers: {\n        getFillColor: updateTriggers.getFillColor,\n        getElevation: updateTriggers.getElevation,\n        getLineColor: updateTriggers.getLineColor,\n        getLineWidth: updateTriggers.getLineWidth\n      }\n    };\n  }\n\n  _renderPolygonLayer() {\n    const {data, getHexagon, updateTriggers, coverage} = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell-hifi', PolygonLayer);\n    const forwardProps = this._getForwardProps();\n\n    forwardProps.updateTriggers.getPolygon = mergeTriggers(updateTriggers.getHexagon, coverage);\n\n    return new SubLayerClass(\n      forwardProps,\n      this.getSubLayerProps({\n        id: 'hexagon-cell-hifi',\n        updateTriggers: forwardProps.updateTriggers\n      }),\n      {\n        data,\n        _normalize: false,\n        _windingOrder: 'CCW',\n        positionFormat: 'XY',\n        getPolygon: (object, objectInfo) => {\n          const hexagonId = getHexagon(object, objectInfo);\n          return h3ToPolygon(hexagonId, coverage, true);\n        }\n      }\n    );\n  }\n\n  _renderColumnLayer() {\n    const {data, getHexagon, updateTriggers} = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n    const forwardProps = this._getForwardProps();\n    forwardProps.updateTriggers.getPosition = updateTriggers.getHexagon;\n\n    return new SubLayerClass(\n      forwardProps,\n      this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers: forwardProps.updateTriggers\n      }),\n      {\n        data,\n        diskResolution: 6, // generate an extruded hexagon as the base geometry\n        radius: 1,\n        vertices: this.state.vertices,\n        getPosition: getHexagonCentroid.bind(null, getHexagon)\n      }\n    );\n  }\n}\n\nH3HexagonLayer.defaultProps = defaultProps;\nH3HexagonLayer.layerName = 'H3HexagonLayer';\n"]},"metadata":{},"sourceType":"module"}