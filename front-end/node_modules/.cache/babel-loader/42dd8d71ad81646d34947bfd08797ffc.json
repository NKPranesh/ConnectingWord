{"ast":null,"code":"import { log } from '@deck.gl/core';\nconst MISSING_CHAR_WIDTH = 32;\nconst SINGLE_LINE = [];\nexport function nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\nexport function buildMapping(_ref) {\n  let {\n    characterSet,\n    getFontWidth,\n    fontHeight,\n    buffer,\n    maxCanvasWidth,\n    mapping = {},\n    xOffset = 0,\n    yOffset = 0\n  } = _ref;\n  let row = 0;\n  let x = xOffset;\n  let i = 0;\n\n  for (const char of characterSet) {\n    if (!mapping[char]) {\n      const width = getFontWidth(char, i++);\n\n      if (x + width + buffer * 2 > maxCanvasWidth) {\n        x = 0;\n        row++;\n      }\n\n      mapping[char] = {\n        x: x + buffer,\n        y: yOffset + row * (fontHeight + buffer * 2) + buffer,\n        width,\n        height: fontHeight\n      };\n      x += width + buffer * 2;\n    }\n  }\n\n  const rowHeight = fontHeight + buffer * 2;\n  return {\n    mapping,\n    xOffset: x,\n    yOffset: yOffset + row * rowHeight,\n    canvasHeight: nextPowOfTwo(yOffset + (row + 1) * rowHeight)\n  };\n}\n\nfunction getTextWidth(text, startIndex, endIndex, mapping) {\n  let width = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    const character = text[i];\n    let frameWidth = null;\n    const frame = mapping && mapping[character];\n\n    if (frame) {\n      frameWidth = frame.width;\n    }\n\n    width += frameWidth;\n  }\n\n  return width;\n}\n\nfunction breakAll(text, startIndex, endIndex, maxWidth, iconMapping, target) {\n  let rowStartCharIndex = startIndex;\n  let rowOffsetLeft = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    const textWidth = getTextWidth(text, i, i + 1, iconMapping);\n\n    if (rowOffsetLeft + textWidth > maxWidth) {\n      if (rowStartCharIndex < i) {\n        target.push(i);\n      }\n\n      rowStartCharIndex = i;\n      rowOffsetLeft = 0;\n    }\n\n    rowOffsetLeft += textWidth;\n  }\n\n  return rowOffsetLeft;\n}\n\nfunction breakWord(text, startIndex, endIndex, maxWidth, iconMapping, target) {\n  let rowStartCharIndex = startIndex;\n  let groupStartCharIndex = startIndex;\n  let groupEndCharIndex = startIndex;\n  let rowOffsetLeft = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    if (text[i] === ' ') {\n      groupEndCharIndex = i + 1;\n    } else if (text[i + 1] === ' ' || i + 1 === endIndex) {\n      groupEndCharIndex = i + 1;\n    }\n\n    if (groupEndCharIndex > groupStartCharIndex) {\n      let groupWidth = getTextWidth(text, groupStartCharIndex, groupEndCharIndex, iconMapping);\n\n      if (rowOffsetLeft + groupWidth > maxWidth) {\n        if (rowStartCharIndex < groupStartCharIndex) {\n          target.push(groupStartCharIndex);\n          rowStartCharIndex = groupStartCharIndex;\n          rowOffsetLeft = 0;\n        }\n\n        if (groupWidth > maxWidth) {\n          groupWidth = breakAll(text, groupStartCharIndex, groupEndCharIndex, maxWidth, iconMapping, target);\n          rowStartCharIndex = target[target.length - 1];\n        }\n      }\n\n      groupStartCharIndex = groupEndCharIndex;\n      rowOffsetLeft += groupWidth;\n    }\n  }\n\n  return rowOffsetLeft;\n}\n\nexport function autoWrapping(text, wordBreak, maxWidth, iconMapping) {\n  let startIndex = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  let endIndex = arguments.length > 5 ? arguments[5] : undefined;\n\n  if (endIndex === undefined) {\n    endIndex = text.length;\n  }\n\n  const result = [];\n\n  if (wordBreak === 'break-all') {\n    breakAll(text, startIndex, endIndex, maxWidth, iconMapping, result);\n  } else {\n    breakWord(text, startIndex, endIndex, maxWidth, iconMapping, result);\n  }\n\n  return result;\n}\n\nfunction transformRow(line, startIndex, endIndex, iconMapping, leftOffsets, rowSize) {\n  let x = 0;\n  let rowHeight = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    const character = line[i];\n    const frame = iconMapping[character];\n\n    if (frame) {\n      if (!rowHeight) {\n        rowHeight = frame.height;\n      }\n\n      leftOffsets[i] = x + frame.width / 2;\n      x += frame.width;\n    } else {\n      log.warn(\"Missing character: \".concat(character, \" (\").concat(character.codePointAt(0), \")\"))();\n      leftOffsets[i] = x;\n      x += MISSING_CHAR_WIDTH;\n    }\n  }\n\n  rowSize[0] = x;\n  rowSize[1] = rowHeight;\n}\n\nexport function transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping) {\n  paragraph = Array.from(paragraph);\n  const numCharacters = paragraph.length;\n  const x = new Array(numCharacters);\n  const y = new Array(numCharacters);\n  const rowWidth = new Array(numCharacters);\n  const autoWrappingEnabled = (wordBreak === 'break-word' || wordBreak === 'break-all') && isFinite(maxWidth) && maxWidth > 0;\n  const size = [0, 0];\n  const rowSize = [];\n  let rowOffsetTop = 0;\n  let lineStartIndex = 0;\n  let lineEndIndex = 0;\n\n  for (let i = 0; i <= numCharacters; i++) {\n    const char = paragraph[i];\n\n    if (char === '\\n' || i === numCharacters) {\n      lineEndIndex = i;\n    }\n\n    if (lineEndIndex > lineStartIndex) {\n      const rows = autoWrappingEnabled ? autoWrapping(paragraph, wordBreak, maxWidth, iconMapping, lineStartIndex, lineEndIndex) : SINGLE_LINE;\n\n      for (let rowIndex = 0; rowIndex <= rows.length; rowIndex++) {\n        const rowStart = rowIndex === 0 ? lineStartIndex : rows[rowIndex - 1];\n        const rowEnd = rowIndex < rows.length ? rows[rowIndex] : lineEndIndex;\n        transformRow(paragraph, rowStart, rowEnd, iconMapping, x, rowSize);\n\n        for (let j = rowStart; j < rowEnd; j++) {\n          y[j] = rowOffsetTop + rowSize[1] / 2;\n          rowWidth[j] = rowSize[0];\n        }\n\n        rowOffsetTop = rowOffsetTop + rowSize[1] * lineHeight;\n        size[0] = Math.max(size[0], rowSize[0]);\n      }\n\n      lineStartIndex = lineEndIndex;\n    }\n\n    if (char === '\\n') {\n      x[lineStartIndex] = 0;\n      y[lineStartIndex] = 0;\n      rowWidth[lineStartIndex] = 0;\n      lineStartIndex++;\n    }\n  }\n\n  size[1] = rowOffsetTop;\n  return {\n    x,\n    y,\n    rowWidth,\n    size\n  };\n}\nexport function getTextFromBuffer(_ref2) {\n  let {\n    value,\n    length,\n    stride,\n    offset,\n    startIndices,\n    characterSet\n  } = _ref2;\n  const bytesPerElement = value.BYTES_PER_ELEMENT;\n  const elementStride = stride ? stride / bytesPerElement : 1;\n  const elementOffset = offset ? offset / bytesPerElement : 0;\n  const characterCount = startIndices[length] || Math.ceil((value.length - elementOffset) / elementStride);\n  const autoCharacterSet = characterSet && new Set();\n  const texts = new Array(length);\n  let codes = value;\n\n  if (elementStride > 1 || elementOffset > 0) {\n    codes = new value.constructor(characterCount);\n\n    for (let i = 0; i < characterCount; i++) {\n      codes[i] = value[i * elementStride + elementOffset];\n    }\n  }\n\n  for (let index = 0; index < length; index++) {\n    const startIndex = startIndices[index];\n    const endIndex = startIndices[index + 1] || characterCount;\n    const codesAtIndex = codes.subarray(startIndex, endIndex);\n    texts[index] = String.fromCodePoint.apply(null, codesAtIndex);\n\n    if (autoCharacterSet) {\n      codesAtIndex.forEach(autoCharacterSet.add, autoCharacterSet);\n    }\n  }\n\n  if (autoCharacterSet) {\n    for (const charCode of autoCharacterSet) {\n      characterSet.add(String.fromCodePoint(charCode));\n    }\n  }\n\n  return {\n    texts,\n    characterCount\n  };\n}","map":{"version":3,"sources":["../../../src/text-layer/utils.js"],"names":["MISSING_CHAR_WIDTH","SINGLE_LINE","Math","mapping","xOffset","yOffset","row","x","i","width","getFontWidth","buffer","y","fontHeight","height","rowHeight","canvasHeight","nextPowOfTwo","character","text","frameWidth","frame","rowStartCharIndex","rowOffsetLeft","textWidth","getTextWidth","target","groupStartCharIndex","groupEndCharIndex","groupWidth","breakAll","startIndex","endIndex","result","wordBreak","breakWord","line","iconMapping","leftOffsets","log","rowSize","paragraph","Array","numCharacters","rowWidth","autoWrappingEnabled","isFinite","maxWidth","size","rowOffsetTop","lineStartIndex","lineEndIndex","char","rows","autoWrapping","rowIndex","rowStart","rowEnd","transformRow","j","characterSet","bytesPerElement","value","elementStride","stride","elementOffset","offset","characterCount","startIndices","autoCharacterSet","texts","codes","index","codesAtIndex","String"],"mappings":"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","sourcesContent":["/* eslint-disable max-statements, max-params, complexity, max-depth */\n// TODO merge with icon-layer/icon-manager\nimport {log} from '@deck.gl/core';\n\nconst MISSING_CHAR_WIDTH = 32;\nconst SINGLE_LINE = [];\n\nexport function nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n/**\n * Generate character mapping table or update from an existing mapping table\n * @param characterSet {Array|Set} new characters\n * @param getFontWidth {Function} function to get width of each character\n * @param fontHeight {Number} height of font\n * @param buffer {Number} buffer surround each character\n * @param maxCanvasWidth {Number} max width of font atlas\n * @param mapping {Object} old mapping table\n * @param xOffset {Number} x position of last character in old mapping table\n * @param yOffset {Number} y position of last character in old mapping table\n * @returns {{\n *   mapping: Object,\n *   xOffset: Number, x position of last character\n *   yOffset: Number, y position of last character in old mapping table\n *   canvasHeight: Number, height of the font atlas canvas, power of 2\n *  }}\n */\nexport function buildMapping({\n  characterSet,\n  getFontWidth,\n  fontHeight,\n  buffer,\n  maxCanvasWidth,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0\n}) {\n  let row = 0;\n  // continue from x position of last character in the old mapping\n  let x = xOffset;\n\n  let i = 0;\n  for (const char of characterSet) {\n    if (!mapping[char]) {\n      // measure texts\n      // TODO - use Advanced text metrics when they are adopted:\n      // https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics\n      const width = getFontWidth(char, i++);\n\n      if (x + width + buffer * 2 > maxCanvasWidth) {\n        x = 0;\n        row++;\n      }\n      mapping[char] = {\n        x: x + buffer,\n        y: yOffset + row * (fontHeight + buffer * 2) + buffer,\n        width,\n        height: fontHeight\n      };\n      x += width + buffer * 2;\n    }\n  }\n\n  const rowHeight = fontHeight + buffer * 2;\n\n  return {\n    mapping,\n    xOffset: x,\n    yOffset: yOffset + row * rowHeight,\n    canvasHeight: nextPowOfTwo(yOffset + (row + 1) * rowHeight)\n  };\n}\n\nfunction getTextWidth(text, startIndex, endIndex, mapping) {\n  let width = 0;\n  for (let i = startIndex; i < endIndex; i++) {\n    const character = text[i];\n    let frameWidth = null;\n    const frame = mapping && mapping[character];\n    if (frame) {\n      frameWidth = frame.width;\n    }\n\n    width += frameWidth;\n  }\n\n  return width;\n}\n\nfunction breakAll(text, startIndex, endIndex, maxWidth, iconMapping, target) {\n  let rowStartCharIndex = startIndex;\n  let rowOffsetLeft = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    // 2. figure out where to break lines\n    const textWidth = getTextWidth(text, i, i + 1, iconMapping);\n    if (rowOffsetLeft + textWidth > maxWidth) {\n      if (rowStartCharIndex < i) {\n        target.push(i);\n      }\n      rowStartCharIndex = i;\n      rowOffsetLeft = 0;\n    }\n    rowOffsetLeft += textWidth;\n  }\n\n  return rowOffsetLeft;\n}\n\nfunction breakWord(text, startIndex, endIndex, maxWidth, iconMapping, target) {\n  let rowStartCharIndex = startIndex;\n  let groupStartCharIndex = startIndex;\n  let groupEndCharIndex = startIndex;\n  let rowOffsetLeft = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    // 1. break text into word groups\n    //  - if current char is white space\n    //  - else if next char is white space\n    //  - else if reach last char\n    if (text[i] === ' ') {\n      groupEndCharIndex = i + 1;\n    } else if (text[i + 1] === ' ' || i + 1 === endIndex) {\n      groupEndCharIndex = i + 1;\n    }\n\n    if (groupEndCharIndex > groupStartCharIndex) {\n      // 2. break text into next row at maxWidth\n      let groupWidth = getTextWidth(text, groupStartCharIndex, groupEndCharIndex, iconMapping);\n      if (rowOffsetLeft + groupWidth > maxWidth) {\n        if (rowStartCharIndex < groupStartCharIndex) {\n          target.push(groupStartCharIndex);\n          rowStartCharIndex = groupStartCharIndex;\n          rowOffsetLeft = 0;\n        }\n\n        // if a single text group is bigger than maxWidth, then `break-all`\n        if (groupWidth > maxWidth) {\n          groupWidth = breakAll(\n            text,\n            groupStartCharIndex,\n            groupEndCharIndex,\n            maxWidth,\n            iconMapping,\n            target\n          );\n          // move reference to last row\n          rowStartCharIndex = target[target.length - 1];\n        }\n      }\n      groupStartCharIndex = groupEndCharIndex;\n      rowOffsetLeft += groupWidth;\n    }\n  }\n\n  return rowOffsetLeft;\n}\n\n// Returns a list of indices where line breaks should be inserted\nexport function autoWrapping(text, wordBreak, maxWidth, iconMapping, startIndex = 0, endIndex) {\n  if (endIndex === undefined) {\n    endIndex = text.length;\n  }\n  const result = [];\n  if (wordBreak === 'break-all') {\n    breakAll(text, startIndex, endIndex, maxWidth, iconMapping, result);\n  } else {\n    breakWord(text, startIndex, endIndex, maxWidth, iconMapping, result);\n  }\n  return result;\n}\n\nfunction transformRow(line, startIndex, endIndex, iconMapping, leftOffsets, rowSize) {\n  let x = 0;\n  let rowHeight = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    const character = line[i];\n    const frame = iconMapping[character];\n    if (frame) {\n      if (!rowHeight) {\n        // frame.height should be a constant\n        rowHeight = frame.height;\n      }\n      leftOffsets[i] = x + frame.width / 2;\n      x += frame.width;\n    } else {\n      log.warn(`Missing character: ${character} (${character.codePointAt(0)})`)();\n      leftOffsets[i] = x;\n      x += MISSING_CHAR_WIDTH;\n    }\n  }\n\n  rowSize[0] = x;\n  rowSize[1] = rowHeight;\n}\n\n/**\n * Transform a text paragraph to an array of characters, each character contains\n * @param paragraph: {String}\n * @param iconMapping {Object} character mapping table for retrieving a character from font atlas\n * @param lineHeight {Number} css line-height\n * @param wordBreak {String} css word-break option\n * @param maxWidth {number} css max-width\n * @param transformedData {Array} output transformed data array, each datum contains\n *   - text: character\n *   - index: character index in the paragraph\n *   - x: x offset in the row,\n *   - y: y offset in the paragraph\n *   - size: [width, height] size of the paragraph\n *   - rowSize: [rowWidth, rowHeight] size of the row\n *   - len: length of the paragraph\n */\nexport function transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping) {\n  // Break into an array of characters\n  // When dealing with double-length unicode characters, `str.length` or `str[i]` do not work\n  paragraph = Array.from(paragraph);\n  const numCharacters = paragraph.length;\n  const x = new Array(numCharacters);\n  const y = new Array(numCharacters);\n  const rowWidth = new Array(numCharacters);\n  const autoWrappingEnabled =\n    (wordBreak === 'break-word' || wordBreak === 'break-all') && isFinite(maxWidth) && maxWidth > 0;\n\n  // maxWidth and height of the paragraph\n  const size = [0, 0];\n  const rowSize = [];\n  let rowOffsetTop = 0;\n  let lineStartIndex = 0;\n  let lineEndIndex = 0;\n\n  for (let i = 0; i <= numCharacters; i++) {\n    const char = paragraph[i];\n    if (char === '\\n' || i === numCharacters) {\n      lineEndIndex = i;\n    }\n\n    if (lineEndIndex > lineStartIndex) {\n      const rows = autoWrappingEnabled\n        ? autoWrapping(paragraph, wordBreak, maxWidth, iconMapping, lineStartIndex, lineEndIndex)\n        : SINGLE_LINE;\n\n      for (let rowIndex = 0; rowIndex <= rows.length; rowIndex++) {\n        const rowStart = rowIndex === 0 ? lineStartIndex : rows[rowIndex - 1];\n        const rowEnd = rowIndex < rows.length ? rows[rowIndex] : lineEndIndex;\n        transformRow(paragraph, rowStart, rowEnd, iconMapping, x, rowSize);\n        for (let j = rowStart; j < rowEnd; j++) {\n          y[j] = rowOffsetTop + rowSize[1] / 2;\n          rowWidth[j] = rowSize[0];\n        }\n\n        rowOffsetTop = rowOffsetTop + rowSize[1] * lineHeight;\n        size[0] = Math.max(size[0], rowSize[0]);\n      }\n      lineStartIndex = lineEndIndex;\n    }\n\n    if (char === '\\n') {\n      // Make sure result.length matches paragraph.length\n      x[lineStartIndex] = 0;\n      y[lineStartIndex] = 0;\n      rowWidth[lineStartIndex] = 0;\n      lineStartIndex++;\n    }\n  }\n\n  // last row\n  size[1] = rowOffsetTop;\n  return {x, y, rowWidth, size};\n}\n\nexport function getTextFromBuffer({value, length, stride, offset, startIndices, characterSet}) {\n  const bytesPerElement = value.BYTES_PER_ELEMENT;\n  const elementStride = stride ? stride / bytesPerElement : 1;\n  const elementOffset = offset ? offset / bytesPerElement : 0;\n  const characterCount =\n    startIndices[length] || Math.ceil((value.length - elementOffset) / elementStride);\n  const autoCharacterSet = characterSet && new Set();\n\n  const texts = new Array(length);\n\n  let codes = value;\n  if (elementStride > 1 || elementOffset > 0) {\n    codes = new value.constructor(characterCount);\n    for (let i = 0; i < characterCount; i++) {\n      codes[i] = value[i * elementStride + elementOffset];\n    }\n  }\n\n  for (let index = 0; index < length; index++) {\n    const startIndex = startIndices[index];\n    const endIndex = startIndices[index + 1] || characterCount;\n    const codesAtIndex = codes.subarray(startIndex, endIndex);\n    texts[index] = String.fromCodePoint.apply(null, codesAtIndex);\n    if (autoCharacterSet) {\n      codesAtIndex.forEach(autoCharacterSet.add, autoCharacterSet);\n    }\n  }\n\n  if (autoCharacterSet) {\n    for (const charCode of autoCharacterSet) {\n      characterSet.add(String.fromCodePoint(charCode));\n    }\n  }\n\n  return {texts, characterCount};\n}\n"]},"metadata":{},"sourceType":"module"}