{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nlet _Symbol$asyncIterator;\n\nclass ArrayQueue extends Array {\n  enqueue(value) {\n    return this.push(value);\n  }\n\n  dequeue() {\n    return this.shift();\n  }\n\n}\n\n_Symbol$asyncIterator = Symbol.asyncIterator;\nexport default class AsyncQueue {\n  constructor() {\n    _defineProperty(this, \"_values\", void 0);\n\n    _defineProperty(this, \"_settlers\", void 0);\n\n    _defineProperty(this, \"_closed\", void 0);\n\n    this._values = new ArrayQueue();\n    this._settlers = new ArrayQueue();\n    this._closed = false;\n  }\n\n  close() {\n    while (this._settlers.length > 0) {\n      this._settlers.dequeue().resolve({\n        done: true\n      });\n    }\n\n    this._closed = true;\n  }\n\n  [_Symbol$asyncIterator]() {\n    return this;\n  }\n\n  enqueue(value) {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n\n      const settler = this._settlers.dequeue();\n\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({\n          value\n        });\n      }\n    } else {\n      this._values.enqueue(value);\n    }\n  }\n\n  next() {\n    if (this._values.length > 0) {\n      const value = this._values.dequeue();\n\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n\n      return Promise.resolve({\n        value\n      });\n    }\n\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n\n      return Promise.resolve({\n        done: true\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._settlers.enqueue({\n        resolve,\n        reject\n      });\n    });\n  }\n\n}\nexport async function takeAsync(asyncIterable) {\n  let count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  const result = [];\n  const iterator = asyncIterable[Symbol.asyncIterator]();\n\n  while (result.length < count) {\n    const {\n      value,\n      done\n    } = await iterator.next();\n\n    if (done) {\n      break;\n    }\n\n    result.push(value);\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../../../src/lib/utils/async-queue.ts"],"names":["enqueue","dequeue","constructor","close","done","Symbol","asyncIterator","settler","value","next","Promise","reject","count","result","iterator","asyncIterable"],"mappings":"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","sourcesContent":["// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license\n// http://2ality.com/2016/10/asynchronous-iteration.html\n\nclass ArrayQueue<T> extends Array<T> {\n  enqueue(value) {\n    // Add at the end\n    return this.push(value);\n  }\n  dequeue(): T {\n    // Remove first element\n    return this.shift() as T;\n  }\n}\n\nexport default class AsyncQueue<T> {\n  private _values: ArrayQueue<T>;\n  private _settlers: ArrayQueue<{resolve; reject}>;\n  private _closed: boolean;\n\n  constructor() {\n    // enqueues > dequeues\n    this._values = new ArrayQueue<T>();\n    // dequeues > enqueues\n    this._settlers = new ArrayQueue<{resolve; reject}>();\n    this._closed = false;\n  }\n\n  close(): void {\n    while (this._settlers.length > 0) {\n      this._settlers.dequeue().resolve({done: true});\n    }\n    this._closed = true;\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<T> {\n    return this;\n  }\n\n  enqueue(value: T | Error): void {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      const settler = this._settlers.dequeue();\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({value});\n      }\n    } else {\n      this._values.enqueue(value);\n    }\n  }\n\n  /**\n   * @returns a Promise for an IteratorResult\n   */\n  next(): Promise<any> {\n    if (this._values.length > 0) {\n      const value = this._values.dequeue();\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n      return Promise.resolve({value});\n    }\n\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      return Promise.resolve({done: true});\n    }\n    // Wait for new values to be enqueued\n    return new Promise((resolve, reject) => {\n      this._settlers.enqueue({resolve, reject});\n    });\n  }\n}\n\n/**\n * @returns a Promise for an Array with the elements in `asyncIterable`\n */\nexport async function takeAsync(\n  asyncIterable: AsyncIterable<any>,\n  count = Infinity\n): Promise<any[]> {\n  const result: Array<any> = [];\n  const iterator = asyncIterable[Symbol.asyncIterator]();\n  while (result.length < count) {\n    const {value, done} = await iterator.next();\n    if (done) {\n      break;\n    }\n    result.push(value);\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}