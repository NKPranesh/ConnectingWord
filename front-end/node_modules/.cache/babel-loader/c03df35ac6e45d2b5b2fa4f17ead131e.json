{"ast":null,"code":"import { global, isBrowser } from '../utils/globals';\nconst {\n  _parseImageNode\n} = global;\nconst IMAGE_SUPPORTED = typeof Image !== 'undefined';\nconst IMAGE_BITMAP_SUPPORTED = typeof ImageBitmap !== 'undefined';\nconst NODE_IMAGE_SUPPORTED = Boolean(_parseImageNode);\nconst DATA_SUPPORTED = isBrowser ? true : NODE_IMAGE_SUPPORTED;\nexport function isImageTypeSupported(type) {\n  switch (type) {\n    case 'auto':\n      return IMAGE_BITMAP_SUPPORTED || IMAGE_SUPPORTED || DATA_SUPPORTED;\n\n    case 'imagebitmap':\n      return IMAGE_BITMAP_SUPPORTED;\n\n    case 'image':\n      return IMAGE_SUPPORTED;\n\n    case 'data':\n      return DATA_SUPPORTED;\n\n    default:\n      throw new Error(\"@loaders.gl/images: image \".concat(type, \" not supported in this environment\"));\n  }\n}\nexport function getDefaultImageType() {\n  if (IMAGE_BITMAP_SUPPORTED) {\n    return 'imagebitmap';\n  }\n\n  if (IMAGE_SUPPORTED) {\n    return 'image';\n  }\n\n  if (DATA_SUPPORTED) {\n    return 'data';\n  }\n\n  throw new Error('Install \\'@loaders.gl/polyfills\\' to parse images under Node.js');\n}","map":{"version":3,"sources":["../../../../src/lib/category-api/image-type.ts"],"names":["_parseImageNode","IMAGE_SUPPORTED","IMAGE_BITMAP_SUPPORTED","NODE_IMAGE_SUPPORTED","Boolean","DATA_SUPPORTED","isBrowser"],"mappings":"AACA,SAAA,MAAA,EAAA,SAAA,QAAA,kBAAA;AAGA,MAAM;AAACA,EAAAA;AAAD,IAAN,MAAA;AAEA,MAAMC,eAAe,GAAG,OAAA,KAAA,KAAxB,WAAA;AACA,MAAMC,sBAAsB,GAAG,OAAA,WAAA,KAA/B,WAAA;AACA,MAAMC,oBAAoB,GAAGC,OAAO,CAApC,eAAoC,CAApC;AACA,MAAMC,cAAc,GAAGC,SAAS,GAAA,IAAA,GAAhC,oBAAA;AAMA,OAAO,SAAA,oBAAA,CAAA,IAAA,EAAqD;AAC1D,UAAA,IAAA;AACE,SAAA,MAAA;AAEE,aAAOJ,sBAAsB,IAAtBA,eAAAA,IAAP,cAAA;;AAEF,SAAA,aAAA;AACE,aAAA,sBAAA;;AACF,SAAA,OAAA;AACE,aAAA,eAAA;;AACF,SAAA,MAAA;AACE,aAAA,cAAA;;AAEF;AACE,YAAM,IAAA,KAAA,CAAA,6BAAA,MAAA,CAAA,IAAA,EAAN,oCAAM,CAAA,CAAN;AAbJ;AAeD;AAMD,OAAO,SAAA,mBAAA,GAA8C;AACnD,MAAA,sBAAA,EAA4B;AAC1B,WAAA,aAAA;AACD;;AACD,MAAA,eAAA,EAAqB;AACnB,WAAA,OAAA;AACD;;AACD,MAAA,cAAA,EAAoB;AAClB,WAAA,MAAA;AACD;;AAGD,QAAM,IAAA,KAAA,CAAN,iEAAM,CAAN;AACD","sourcesContent":["import type {ImageTypeEnum} from '../../types';\nimport {global, isBrowser} from '../utils/globals';\n\n// @ts-ignore TS2339: Property does not exist on type\nconst {_parseImageNode} = global;\n\nconst IMAGE_SUPPORTED = typeof Image !== 'undefined'; // NOTE: \"false\" positives if jsdom is installed\nconst IMAGE_BITMAP_SUPPORTED = typeof ImageBitmap !== 'undefined';\nconst NODE_IMAGE_SUPPORTED = Boolean(_parseImageNode);\nconst DATA_SUPPORTED = isBrowser ? true : NODE_IMAGE_SUPPORTED;\n\n/**\n * Checks if a loaders.gl image type is supported\n * @param type image type string\n */\nexport function isImageTypeSupported(type: string): boolean {\n  switch (type) {\n    case 'auto':\n      // Should only ever be false in Node.js, if polyfills have not been installed...\n      return IMAGE_BITMAP_SUPPORTED || IMAGE_SUPPORTED || DATA_SUPPORTED;\n\n    case 'imagebitmap':\n      return IMAGE_BITMAP_SUPPORTED;\n    case 'image':\n      return IMAGE_SUPPORTED;\n    case 'data':\n      return DATA_SUPPORTED;\n\n    default:\n      throw new Error(`@loaders.gl/images: image ${type} not supported in this environment`);\n  }\n}\n\n/**\n * Returns the \"most performant\" supported image type on this platform\n * @returns image type string\n */\nexport function getDefaultImageType(): ImageTypeEnum {\n  if (IMAGE_BITMAP_SUPPORTED) {\n    return 'imagebitmap';\n  }\n  if (IMAGE_SUPPORTED) {\n    return 'image';\n  }\n  if (DATA_SUPPORTED) {\n    return 'data';\n  }\n\n  // This should only happen in Node.js\n  throw new Error('Install \\'@loaders.gl/polyfills\\' to parse images under Node.js');\n}\n"]},"metadata":{},"sourceType":"module"}