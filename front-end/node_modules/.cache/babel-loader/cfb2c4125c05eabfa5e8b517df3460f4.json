{"ast":null,"code":"import View from './view';\nimport Viewport from '../viewports/viewport';\nimport { Matrix4 } from 'math.gl';\nimport { pixelsToWorld, fovyToAltitude } from '@math.gl/web-mercator';\nimport OrbitController from '../controllers/orbit-controller';\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction getViewMatrix(_ref) {\n  let {\n    height,\n    focalDistance,\n    orbitAxis,\n    rotationX,\n    rotationOrbit,\n    zoom\n  } = _ref;\n  const up = orbitAxis === 'Z' ? [0, 0, 1] : [0, 1, 0];\n  const eye = orbitAxis === 'Z' ? [0, -focalDistance, 0] : [0, 0, focalDistance];\n  const viewMatrix = new Matrix4().lookAt({\n    eye,\n    up\n  });\n  viewMatrix.rotateX(rotationX * DEGREES_TO_RADIANS);\n\n  if (orbitAxis === 'Z') {\n    viewMatrix.rotateZ(rotationOrbit * DEGREES_TO_RADIANS);\n  } else {\n    viewMatrix.rotateY(rotationOrbit * DEGREES_TO_RADIANS);\n  }\n\n  const projectionScale = Math.pow(2, zoom) / (height || 1);\n  viewMatrix.scale(projectionScale);\n  return viewMatrix;\n}\n\nclass OrbitViewport extends Viewport {\n  constructor(props) {\n    const {\n      height,\n      projectionMatrix,\n      fovy = 50,\n      orbitAxis,\n      target = [0, 0, 0],\n      rotationX = 0,\n      rotationOrbit = 0,\n      zoom = 0\n    } = props;\n    const focalDistance = projectionMatrix ? projectionMatrix[5] / 2 : fovyToAltitude(fovy);\n    super({ ...props,\n      longitude: null,\n      viewMatrix: getViewMatrix({\n        height,\n        focalDistance,\n        orbitAxis,\n        rotationX,\n        rotationOrbit,\n        zoom\n      }),\n      fovy,\n      focalDistance,\n      position: target,\n      zoom\n    });\n    this.projectedCenter = this.project(this.center);\n  }\n\n  unproject(xyz) {\n    let {\n      topLeft = true\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const [x, y, z = this.projectedCenter[2]] = xyz;\n    const y2 = topLeft ? y : this.height - y;\n    const [X, Y, Z] = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix);\n    return [X, Y, Z];\n  }\n\n  panByPosition(coords, pixel) {\n    const p0 = this.project(coords);\n    const nextCenter = [this.width / 2 + p0[0] - pixel[0], this.height / 2 + p0[1] - pixel[1], this.projectedCenter[2]];\n    return {\n      target: this.unproject(nextCenter)\n    };\n  }\n\n}\n\nexport default class OrbitView extends View {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      orbitAxis = 'Z'\n    } = props;\n    super({ ...props,\n      orbitAxis,\n      type: OrbitViewport\n    });\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: OrbitController\n    });\n  }\n\n}\nOrbitView.displayName = 'OrbitView';","map":{"version":3,"sources":["../../../src/views/orbit-view.js"],"names":["DEGREES_TO_RADIANS","Math","zoom","up","orbitAxis","eye","viewMatrix","rotationX","rotationOrbit","projectionScale","height","constructor","fovy","target","focalDistance","projectionMatrix","fovyToAltitude","longitude","getViewMatrix","position","unproject","topLeft","z","y2","pixelsToWorld","panByPosition","p0","nextCenter","pixel","props","type","OrbitViewport","controller","OrbitController","OrbitView"],"mappings":"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","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\n\nimport {Matrix4} from 'math.gl';\nimport {pixelsToWorld, fovyToAltitude} from '@math.gl/web-mercator';\nimport OrbitController from '../controllers/orbit-controller';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction getViewMatrix({height, focalDistance, orbitAxis, rotationX, rotationOrbit, zoom}) {\n  // We position the camera so that one common space unit (world space unit scaled by zoom)\n  // at the target maps to one screen pixel.\n  // This is a similar technique to that used in web mercator projection\n  // By doing so we are able to convert between common space and screen space sizes efficiently\n  // in the vertex shader.\n  const up = orbitAxis === 'Z' ? [0, 0, 1] : [0, 1, 0];\n  const eye = orbitAxis === 'Z' ? [0, -focalDistance, 0] : [0, 0, focalDistance];\n\n  const viewMatrix = new Matrix4().lookAt({eye, up});\n\n  viewMatrix.rotateX(rotationX * DEGREES_TO_RADIANS);\n  if (orbitAxis === 'Z') {\n    viewMatrix.rotateZ(rotationOrbit * DEGREES_TO_RADIANS);\n  } else {\n    viewMatrix.rotateY(rotationOrbit * DEGREES_TO_RADIANS);\n  }\n\n  // When height increases, we need to increase the distance from the camera to the target to\n  // keep the 1:1 mapping. However, this also changes the projected depth of each position by\n  // moving them further away between the near/far plane.\n  // Without modifying the default near/far planes, we instead scale down the common space to\n  // remove the distortion to the depth field.\n  const projectionScale = Math.pow(2, zoom) / (height || 1);\n  viewMatrix.scale(projectionScale);\n\n  return viewMatrix;\n}\n\nclass OrbitViewport extends Viewport {\n  constructor(props) {\n    const {\n      height,\n\n      projectionMatrix,\n\n      fovy = 50, // For setting camera position\n      orbitAxis, // Orbit axis with 360 degrees rotating freedom, can only be 'Y' or 'Z'\n      target = [0, 0, 0], // Which point is camera looking at, default origin\n\n      rotationX = 0, // Rotating angle around X axis\n      rotationOrbit = 0, // Rotating angle around orbit axis\n\n      zoom = 0\n    } = props;\n\n    const focalDistance = projectionMatrix ? projectionMatrix[5] / 2 : fovyToAltitude(fovy);\n\n    super({\n      ...props,\n      // in case viewState contains longitude/latitude values,\n      // make sure that the base Viewport class does not treat this as a geospatial viewport\n      longitude: null,\n      viewMatrix: getViewMatrix({\n        height,\n        focalDistance,\n        orbitAxis,\n        rotationX,\n        rotationOrbit,\n        zoom\n      }),\n      fovy,\n      focalDistance,\n      position: target,\n      zoom\n    });\n\n    this.projectedCenter = this.project(this.center);\n  }\n\n  unproject(xyz, {topLeft = true} = {}) {\n    const [x, y, z = this.projectedCenter[2]] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const [X, Y, Z] = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix);\n    return [X, Y, Z];\n  }\n\n  panByPosition(coords, pixel) {\n    const p0 = this.project(coords);\n    const nextCenter = [\n      this.width / 2 + p0[0] - pixel[0],\n      this.height / 2 + p0[1] - pixel[1],\n      this.projectedCenter[2]\n    ];\n    return {\n      target: this.unproject(nextCenter)\n    };\n  }\n}\n\nexport default class OrbitView extends View {\n  constructor(props = {}) {\n    const {orbitAxis = 'Z'} = props;\n\n    super({\n      ...props,\n      orbitAxis,\n      type: OrbitViewport\n    });\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: OrbitController\n    });\n  }\n}\n\nOrbitView.displayName = 'OrbitView';\n"]},"metadata":{},"sourceType":"module"}