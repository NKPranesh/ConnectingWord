{"ast":null,"code":"import { assert } from '../utils';\nconst FS100 = `void main() {gl_FragColor = vec4(0);}`;\nconst FS_GLES = `\\\nout vec4 transform_output;\nvoid main() {\n  transform_output = vec4(0);\n}`;\nconst FS300 = `#version 300 es\\n${FS_GLES}`;\nexport function getQualifierDetails(line, qualifiers) {\n  qualifiers = Array.isArray(qualifiers) ? qualifiers : [qualifiers];\n  const words = line.replace(/^\\s+/, '').split(/\\s+/);\n  const [qualifier, type, definition] = words;\n\n  if (!qualifiers.includes(qualifier) || !type || !definition) {\n    return null;\n  }\n\n  const name = definition.split(';')[0];\n  return {\n    qualifier,\n    type,\n    name\n  };\n}\nexport function getPassthroughFS() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    version = 100,\n    input,\n    inputType,\n    output\n  } = options;\n\n  if (!input) {\n    if (version === 300) {\n      return FS300;\n    } else if (version > 300) {\n      return `#version ${version}\\n${FS_GLES}`;\n    }\n\n    return FS100;\n  }\n\n  const outputValue = convertToVec4(input, inputType);\n\n  if (version >= 300) {\n    return `\\\n#version ${version} ${version === 300 ? 'es' : ''}\nin ${inputType} ${input};\nout vec4 ${output};\nvoid main() {\n  ${output} = ${outputValue};\n}`;\n  }\n\n  return `\\\nvarying ${inputType} ${input};\nvoid main() {\n  gl_FragColor = ${outputValue};\n}`;\n}\nexport function typeToChannelSuffix(type) {\n  switch (type) {\n    case 'float':\n      return 'x';\n\n    case 'vec2':\n      return 'xy';\n\n    case 'vec3':\n      return 'xyz';\n\n    case 'vec4':\n      return 'xyzw';\n\n    default:\n      assert(false);\n      return null;\n  }\n}\nexport function typeToChannelCount(type) {\n  switch (type) {\n    case 'float':\n      return 1;\n\n    case 'vec2':\n      return 2;\n\n    case 'vec3':\n      return 3;\n\n    case 'vec4':\n      return 4;\n\n    default:\n      assert(false);\n      return null;\n  }\n}\nexport function convertToVec4(variable, type) {\n  switch (type) {\n    case 'float':\n      return `vec4(${variable}, 0.0, 0.0, 1.0)`;\n\n    case 'vec2':\n      return `vec4(${variable}, 0.0, 1.0)`;\n\n    case 'vec3':\n      return `vec4(${variable}, 1.0)`;\n\n    case 'vec4':\n      return variable;\n\n    default:\n      assert(false);\n      return null;\n  }\n}","map":{"version":3,"sources":["../../../src/utils/shader-utils.js"],"names":["FS100","FS_GLES","FS300","qualifiers","Array","words","line","name","definition","options","version","output","outputValue","convertToVec4","inputType","input","assert","variable"],"mappings":"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","sourcesContent":["import {assert} from '../utils';\nconst FS100 = `void main() {gl_FragColor = vec4(0);}`;\nconst FS_GLES = `\\\nout vec4 transform_output;\nvoid main() {\n  transform_output = vec4(0);\n}`;\nconst FS300 = `#version 300 es\\n${FS_GLES}`;\n\n// Prase given glsl line and return qualifier details or null\nexport function getQualifierDetails(line, qualifiers) {\n  qualifiers = Array.isArray(qualifiers) ? qualifiers : [qualifiers];\n  const words = line.replace(/^\\s+/, '').split(/\\s+/);\n  // TODO add support for precession qualifiers (highp, mediump and lowp)\n  const [qualifier, type, definition] = words;\n  if (!qualifiers.includes(qualifier) || !type || !definition) {\n    return null;\n  }\n  const name = definition.split(';')[0];\n  return {qualifier, type, name};\n}\n\n// Given the shader version, input and output variable names,\n// builds and return a pass through fragment shader.\nexport function getPassthroughFS(options = {}) {\n  const {version = 100, input, inputType, output} = options;\n  if (!input) {\n    if (version === 300) {\n      // Fast-path for WebGL 2.0\n      return FS300;\n    } else if (version > 300) {\n      // Use the supplied version for OpenGL/ES 3.2+\n      return `#version ${version}\\n${FS_GLES}`;\n    }\n    // Fast-path for WebGL 1.0\n    return FS100;\n  }\n  const outputValue = convertToVec4(input, inputType);\n  if (version >= 300) {\n    // If version is 300, assume WebGL 2.0\n    return `\\\n#version ${version} ${version === 300 ? 'es' : ''}\nin ${inputType} ${input};\nout vec4 ${output};\nvoid main() {\n  ${output} = ${outputValue};\n}`;\n  }\n  // WebGL 1.0\n  return `\\\nvarying ${inputType} ${input};\nvoid main() {\n  gl_FragColor = ${outputValue};\n}`;\n}\n\n// convert glsl type to suffix\nexport function typeToChannelSuffix(type) {\n  switch (type) {\n    case 'float':\n      return 'x';\n    case 'vec2':\n      return 'xy';\n    case 'vec3':\n      return 'xyz';\n    case 'vec4':\n      return 'xyzw';\n    default:\n      assert(false);\n      return null;\n  }\n}\n\n// convert glsl type to channel count\nexport function typeToChannelCount(type) {\n  switch (type) {\n    case 'float':\n      return 1;\n    case 'vec2':\n      return 2;\n    case 'vec3':\n      return 3;\n    case 'vec4':\n      return 4;\n    default:\n      assert(false);\n      return null;\n  }\n}\n\n// Returns glsl instruction for converting to vec4\nexport function convertToVec4(variable, type) {\n  switch (type) {\n    case 'float':\n      return `vec4(${variable}, 0.0, 0.0, 1.0)`;\n    case 'vec2':\n      return `vec4(${variable}, 0.0, 1.0)`;\n    case 'vec3':\n      return `vec4(${variable}, 1.0)`;\n    case 'vec4':\n      return variable;\n    default:\n      assert(false);\n      return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}