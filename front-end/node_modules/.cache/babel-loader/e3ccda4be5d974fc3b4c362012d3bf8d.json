{"ast":null,"code":"import { parse3DTileHeaderSync } from './helpers/parse-3d-tile-header';\nexport async function parseComposite3DTile(tile, arrayBuffer, byteOffset, options, context, parse3DTile) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n  const view = new DataView(arrayBuffer);\n  tile.tilesLength = view.getUint32(byteOffset, true);\n  byteOffset += 4;\n  tile.tiles = [];\n\n  while (tile.tiles.length < tile.tilesLength && tile.byteLength - byteOffset > 12) {\n    const subtile = {};\n    tile.tiles.push(subtile);\n    byteOffset = await parse3DTile(arrayBuffer, byteOffset, options, context, subtile);\n  }\n\n  return byteOffset;\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-3d-tile-composite.js"],"names":["byteOffset","parse3DTileHeaderSync","view","tile","subtile","parse3DTile"],"mappings":"AAMA,SAAA,qBAAA,QAAA,gCAAA;AAGA,OAAO,eAAA,oBAAA,CAAA,IAAA,EAAA,WAAA,EAAA,UAAA,EAAA,OAAA,EAAA,OAAA,EAAA,WAAA,EAOL;AACAA,EAAAA,UAAU,GAAGC,qBAAqB,CAAA,IAAA,EAAA,WAAA,EAAlCD,UAAkC,CAAlCA;AAEA,QAAME,IAAI,GAAG,IAAA,QAAA,CAAb,WAAa,CAAb;AAGAC,EAAAA,IAAI,CAAJA,WAAAA,GAAmBD,IAAI,CAAJA,SAAAA,CAAAA,UAAAA,EAAnBC,IAAmBD,CAAnBC;AACAH,EAAAA,UAAU,IAAVA,CAAAA;AAGAG,EAAAA,IAAI,CAAJA,KAAAA,GAAAA,EAAAA;;AACA,SAAOA,IAAI,CAAJA,KAAAA,CAAAA,MAAAA,GAAoBA,IAAI,CAAxBA,WAAAA,IAAwCA,IAAI,CAAJA,UAAAA,GAAAA,UAAAA,GAA/C,EAAA,EAAkF;AAChF,UAAMC,OAAO,GAAb,EAAA;AACAD,IAAAA,IAAI,CAAJA,KAAAA,CAAAA,IAAAA,CAAAA,OAAAA;AACAH,IAAAA,UAAU,GAAG,MAAMK,WAAW,CAAA,WAAA,EAAA,UAAA,EAAA,OAAA,EAAA,OAAA,EAA9BL,OAA8B,CAA9BA;AAED;;AAED,SAAA,UAAA;AACD","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n// Reference code:\n// https://github.com/AnalyticalGraphicsInc/cesium/blob/master/Source/Scene/Composite3DTileContent.js#L182\n\nimport {parse3DTileHeaderSync} from './helpers/parse-3d-tile-header';\n\n// eslint-disable-next-line max-params\nexport async function parseComposite3DTile(\n  tile,\n  arrayBuffer,\n  byteOffset,\n  options,\n  context,\n  parse3DTile\n) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n\n  const view = new DataView(arrayBuffer);\n\n  // Extract number of tiles\n  tile.tilesLength = view.getUint32(byteOffset, true);\n  byteOffset += 4;\n\n  // extract each tile from the byte stream\n  tile.tiles = [];\n  while (tile.tiles.length < tile.tilesLength && tile.byteLength - byteOffset > 12) {\n    const subtile = {};\n    tile.tiles.push(subtile);\n    byteOffset = await parse3DTile(arrayBuffer, byteOffset, options, context, subtile);\n    // TODO - do we need to add any padding in between tiles?\n  }\n\n  return byteOffset;\n}\n"]},"metadata":{},"sourceType":"module"}