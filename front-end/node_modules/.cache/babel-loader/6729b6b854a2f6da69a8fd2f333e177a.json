{"ast":null,"code":"import { getFetchFunction } from './option-utils';\nexport function getLoaderContext(context, options) {\n  let previousContext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  if (previousContext) {\n    return previousContext;\n  }\n\n  const resolvedContext = {\n    fetch: getFetchFunction(options, context),\n    ...context\n  };\n\n  if (!Array.isArray(resolvedContext.loaders)) {\n    resolvedContext.loaders = null;\n  }\n\n  return resolvedContext;\n}\nexport function getLoadersFromContext(loaders, context) {\n  if (!context && loaders && !Array.isArray(loaders)) {\n    return loaders;\n  }\n\n  let candidateLoaders;\n\n  if (loaders) {\n    candidateLoaders = Array.isArray(loaders) ? loaders : [loaders];\n  }\n\n  if (context && context.loaders) {\n    const contextLoaders = Array.isArray(context.loaders) ? context.loaders : [context.loaders];\n    candidateLoaders = candidateLoaders ? [...candidateLoaders, ...contextLoaders] : contextLoaders;\n  }\n\n  return candidateLoaders && candidateLoaders.length ? candidateLoaders : null;\n}","map":{"version":3,"sources":["../../../../src/lib/loader-utils/loader-context.ts"],"names":["previousContext","resolvedContext","fetch","getFetchFunction","context","Array","candidateLoaders","contextLoaders"],"mappings":"AACA,SAAA,gBAAA,QAAA,gBAAA;AAWA,OAAO,SAAA,gBAAA,CAAA,OAAA,EAAA,OAAA,EAIU;AAAA,MADfA,eACe,uEAJV,IAIU;;AAGf,MAAA,eAAA,EAAqB;AACnB,WAAA,eAAA;AACD;;AAED,QAAMC,eAA8B,GAAG;AACrCC,IAAAA,KAAK,EAAEC,gBAAgB,CAAA,OAAA,EADc,OACd,CADc;AAErC,OAAGC;AAFkC,GAAvC;;AAMA,MAAI,CAACC,KAAK,CAALA,OAAAA,CAAcJ,eAAe,CAAlC,OAAKI,CAAL,EAA6C;AAC3CJ,IAAAA,eAAe,CAAfA,OAAAA,GAAAA,IAAAA;AACD;;AAED,SAAA,eAAA;AACD;AAGD,OAAO,SAAA,qBAAA,CAAA,OAAA,EAAA,OAAA,EAGL;AAEA,MAAI,CAAA,OAAA,IAAA,OAAA,IAAuB,CAACI,KAAK,CAALA,OAAAA,CAA5B,OAA4BA,CAA5B,EAAoD;AAClD,WAAA,OAAA;AACD;;AAGD,MAAA,gBAAA;;AACA,MAAA,OAAA,EAAa;AACXC,IAAAA,gBAAgB,GAAGD,KAAK,CAALA,OAAAA,CAAAA,OAAAA,IAAAA,OAAAA,GAAmC,CAAtDC,OAAsD,CAAtDA;AACD;;AACD,MAAIF,OAAO,IAAIA,OAAO,CAAtB,OAAA,EAAgC;AAC9B,UAAMG,cAAc,GAAGF,KAAK,CAALA,OAAAA,CAAcD,OAAO,CAArBC,OAAAA,IAAiCD,OAAO,CAAxCC,OAAAA,GAAmD,CAACD,OAAO,CAAlF,OAA0E,CAA1E;AACAE,IAAAA,gBAAgB,GAAGA,gBAAgB,GAAG,CAAC,GAAD,gBAAA,EAAsB,GAAzB,cAAG,CAAH,GAAnCA,cAAAA;AACD;;AAED,SAAOA,gBAAgB,IAAIA,gBAAgB,CAApCA,MAAAA,GAAAA,gBAAAA,GAAP,IAAA;AACD","sourcesContent":["import type {Loader, LoaderOptions, LoaderContext} from '@loaders.gl/loader-utils';\nimport {getFetchFunction} from './option-utils';\n\n/**\n * \"sub\" loaders invoked by other loaders get a \"context\" injected on `this`\n * The context will inject core methods like `parse` and contain information\n * about loaders and options passed in to the top-level `parse` call.\n *\n * @param context\n * @param options\n * @param previousContext\n */\nexport function getLoaderContext(\n  context: Omit<LoaderContext, 'fetch'> & Partial<Pick<LoaderContext, 'fetch'>>,\n  options?: LoaderOptions,\n  previousContext: LoaderContext | null = null\n): LoaderContext {\n  // For recursive calls, we already have a context\n  // TODO - add any additional loaders to context?\n  if (previousContext) {\n    return previousContext;\n  }\n\n  const resolvedContext: LoaderContext = {\n    fetch: getFetchFunction(options, context),\n    ...context\n  };\n\n  // Recursive loading does not use single loader\n  if (!Array.isArray(resolvedContext.loaders)) {\n    resolvedContext.loaders = null;\n  }\n\n  return resolvedContext;\n}\n\n// eslint-disable-next-line complexity\nexport function getLoadersFromContext(\n  loaders: Loader[] | Loader | undefined,\n  context?: LoaderContext\n) {\n  // A single non-array loader is force selected, but only on top-level (context === null)\n  if (!context && loaders && !Array.isArray(loaders)) {\n    return loaders;\n  }\n\n  // Create a merged list\n  let candidateLoaders;\n  if (loaders) {\n    candidateLoaders = Array.isArray(loaders) ? loaders : [loaders];\n  }\n  if (context && context.loaders) {\n    const contextLoaders = Array.isArray(context.loaders) ? context.loaders : [context.loaders];\n    candidateLoaders = candidateLoaders ? [...candidateLoaders, ...contextLoaders] : contextLoaders;\n  }\n  // If no loaders, return null to look in globally registered loaders\n  return candidateLoaders && candidateLoaders.length ? candidateLoaders : null;\n}\n"]},"metadata":{},"sourceType":"module"}