{"ast":null,"code":"import Resource from './resource';\nimport Buffer from './buffer';\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { getScratchArray, fillArray } from '../utils/array-utils-flat';\nimport { assert } from '../utils/assert';\nimport { getBrowser } from 'probe.gl';\nconst ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';\nexport default class VertexArrayObject extends Resource {\n  static isSupported(gl) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (options.constantAttributeZero) {\n      return isWebGL2(gl) || getBrowser() === 'Chrome';\n    }\n\n    return true;\n  }\n\n  static getDefaultArray(gl) {\n    gl.luma = gl.luma || {};\n\n    if (!gl.luma.defaultVertexArray) {\n      gl.luma.defaultVertexArray = new VertexArrayObject(gl, {\n        handle: null,\n        isDefaultArray: true\n      });\n    }\n\n    return gl.luma.defaultVertexArray;\n  }\n\n  static getMaxAttributes(gl) {\n    VertexArrayObject.MAX_ATTRIBUTES = VertexArrayObject.MAX_ATTRIBUTES || gl.getParameter(34921);\n    return VertexArrayObject.MAX_ATTRIBUTES;\n  }\n\n  static setConstant(gl, location, array) {\n    switch (array.constructor) {\n      case Float32Array:\n        VertexArrayObject._setConstantFloatArray(gl, location, array);\n\n        break;\n\n      case Int32Array:\n        VertexArrayObject._setConstantIntArray(gl, location, array);\n\n        break;\n\n      case Uint32Array:\n        VertexArrayObject._setConstantUintArray(gl, location, array);\n\n        break;\n\n      default:\n        assert(false);\n    }\n  }\n\n  constructor(gl) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const id = opts.id || opts.program && opts.program.id;\n    super(gl, Object.assign({}, opts, {\n      id\n    }));\n    this.buffer = null;\n    this.bufferValue = null;\n    this.isDefaultArray = opts.isDefaultArray || false;\n    this.gl2 = gl;\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  delete() {\n    super.delete();\n\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n\n    return this;\n  }\n\n  get MAX_ATTRIBUTES() {\n    return VertexArrayObject.getMaxAttributes(this.gl);\n  }\n\n  initialize() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.setProps(props);\n  }\n\n  setProps(props) {\n    return this;\n  }\n\n  setElementBuffer() {\n    let elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(!elementBuffer || elementBuffer.target === 34963, ERR_ELEMENTS);\n    this.bind(() => {\n      this.gl.bindBuffer(34963, elementBuffer ? elementBuffer.handle : null);\n    });\n    return this;\n  }\n\n  setBuffer(location, buffer, accessor) {\n    if (buffer.target === 34963) {\n      return this.setElementBuffer(buffer, accessor);\n    }\n\n    const {\n      size,\n      type,\n      stride,\n      offset,\n      normalized,\n      integer,\n      divisor\n    } = accessor;\n    const {\n      gl,\n      gl2\n    } = this;\n    location = Number(location);\n    this.bind(() => {\n      gl.bindBuffer(34962, buffer.handle);\n\n      if (integer) {\n        assert(isWebGL2(gl));\n        gl2.vertexAttribIPointer(location, size, type, stride, offset);\n      } else {\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n      }\n\n      gl.enableVertexAttribArray(location);\n      gl2.vertexAttribDivisor(location, divisor || 0);\n    });\n    return this;\n  }\n\n  enable(location) {\n    let enable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const disablingAttributeZero = !enable && location === 0 && !VertexArrayObject.isSupported(this.gl, {\n      constantAttributeZero: true\n    });\n\n    if (!disablingAttributeZero) {\n      location = Number(location);\n      this.bind(() => enable ? this.gl.enableVertexAttribArray(location) : this.gl.disableVertexAttribArray(location));\n    }\n\n    return this;\n  }\n\n  getConstantBuffer(elementCount, value) {\n    const constantValue = this._normalizeConstantArrayValue(value);\n\n    const byteLength = constantValue.byteLength * elementCount;\n    const length = constantValue.length * elementCount;\n    let updateNeeded = !this.buffer;\n    this.buffer = this.buffer || new Buffer(this.gl, byteLength);\n    updateNeeded = updateNeeded || this.buffer.reallocate(byteLength);\n    updateNeeded = updateNeeded || !this._compareConstantArrayValues(constantValue, this.bufferValue);\n\n    if (updateNeeded) {\n      const typedArray = getScratchArray(value.constructor, length);\n      fillArray({\n        target: typedArray,\n        source: constantValue,\n        start: 0,\n        count: length\n      });\n      this.buffer.subData(typedArray);\n      this.bufferValue = value;\n    }\n\n    return this.buffer;\n  }\n\n  _normalizeConstantArrayValue(arrayValue) {\n    if (Array.isArray(arrayValue)) {\n      return new Float32Array(arrayValue);\n    }\n\n    return arrayValue;\n  }\n\n  _compareConstantArrayValues(v1, v2) {\n    if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n      return false;\n    }\n\n    for (let i = 0; i < v1.length; ++i) {\n      if (v1[i] !== v2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  static _setConstantFloatArray(gl, location, array) {\n    switch (array.length) {\n      case 1:\n        gl.vertexAttrib1fv(location, array);\n        break;\n\n      case 2:\n        gl.vertexAttrib2fv(location, array);\n        break;\n\n      case 3:\n        gl.vertexAttrib3fv(location, array);\n        break;\n\n      case 4:\n        gl.vertexAttrib4fv(location, array);\n        break;\n\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantIntArray(gl, location, array) {\n    assert(isWebGL2(gl));\n\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1iv(location, array);\n        break;\n\n      case 2:\n        gl.vertexAttribI2iv(location, array);\n        break;\n\n      case 3:\n        gl.vertexAttribI3iv(location, array);\n        break;\n\n      case 4:\n        gl.vertexAttribI4iv(location, array);\n        break;\n\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantUintArray(gl, location, array) {\n    assert(isWebGL2(gl));\n\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1uiv(location, array);\n        break;\n\n      case 2:\n        gl.vertexAttribI2uiv(location, array);\n        break;\n\n      case 3:\n        gl.vertexAttribI3uiv(location, array);\n        break;\n\n      case 4:\n        gl.vertexAttribI4uiv(location, array);\n        break;\n\n      default:\n        assert(false);\n    }\n  }\n\n  _createHandle() {\n    const gl2 = this.gl;\n    return gl2.createVertexArray();\n  }\n\n  _deleteHandle(handle) {\n    this.gl2.deleteVertexArray(handle);\n    return [this.elements];\n  }\n\n  _bindHandle(handle) {\n    this.gl2.bindVertexArray(handle);\n  }\n\n  _getParameter(pname, _ref) {\n    let {\n      location\n    } = _ref;\n    assert(Number.isFinite(location));\n    return this.bind(() => {\n      switch (pname) {\n        case 34373:\n          return this.gl.getVertexAttribOffset(location, pname);\n\n        default:\n          return this.gl.getVertexAttrib(location, pname);\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/classes/vertex-array-object.js"],"names":["ERR_ELEMENTS","isSupported","options","isWebGL2","getBrowser","getDefaultArray","gl","handle","isDefaultArray","getMaxAttributes","VertexArrayObject","setConstant","array","assert","constructor","opts","id","Object","delete","MAX_ATTRIBUTES","initialize","props","setProps","setElementBuffer","elementBuffer","setBuffer","buffer","divisor","gl2","location","Number","enable","disablingAttributeZero","constantAttributeZero","getConstantBuffer","constantValue","byteLength","length","updateNeeded","typedArray","getScratchArray","value","fillArray","target","source","start","count","_normalizeConstantArrayValue","Array","_compareConstantArrayValues","v1","v2","i","_setConstantFloatArray","_setConstantIntArray","_setConstantUintArray","_createHandle","_deleteHandle","_bindHandle","_getParameter"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {getScratchArray, fillArray} from '../utils/array-utils-flat';\nimport {assert} from '../utils/assert';\nimport {getBrowser} from 'probe.gl';\n\nconst ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';\n\nexport default class VertexArrayObject extends Resource {\n  static isSupported(gl, options = {}) {\n    // Attribute 0 can not be disable on most desktop OpenGL based browsers\n    // and on iOS Safari browser.\n    if (options.constantAttributeZero) {\n      return isWebGL2(gl) || getBrowser() === 'Chrome';\n    }\n\n    // Whether additional objects can be created\n    return true;\n  }\n\n  // Returns the global (null) vertex array object. Exists even when no extension available\n  // TODO(Tarek): VAOs are now polyfilled. Deprecate this in 9.0\n  static getDefaultArray(gl) {\n    gl.luma = gl.luma || {};\n    if (!gl.luma.defaultVertexArray) {\n      gl.luma.defaultVertexArray = new VertexArrayObject(gl, {handle: null, isDefaultArray: true});\n    }\n    return gl.luma.defaultVertexArray;\n  }\n\n  static getMaxAttributes(gl) {\n    // TODO - should be cached per context\n    // @ts-ignore\n    VertexArrayObject.MAX_ATTRIBUTES =\n      // @ts-ignore\n      VertexArrayObject.MAX_ATTRIBUTES || gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    // @ts-ignore\n    return VertexArrayObject.MAX_ATTRIBUTES;\n  }\n\n  // Note: Constants are stored globally on the WebGL context, not the VAO\n  // So they need to be updated before every render\n  // TODO - use known type (in configuration or passed in) to allow non-typed arrays?\n  // TODO - remember/cache values to avoid setting them unnecessarily?\n  static setConstant(gl, location, array) {\n    switch (array.constructor) {\n      case Float32Array:\n        VertexArrayObject._setConstantFloatArray(gl, location, array);\n        break;\n      case Int32Array:\n        VertexArrayObject._setConstantIntArray(gl, location, array);\n        break;\n      case Uint32Array:\n        VertexArrayObject._setConstantUintArray(gl, location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  // Create a VertexArray\n  constructor(gl, opts = {}) {\n    // Use program's id if program but no id is supplied\n    const id = opts.id || (opts.program && opts.program.id);\n    super(gl, Object.assign({}, opts, {id}));\n\n    this.buffer = null;\n    this.bufferValue = null;\n    this.isDefaultArray = opts.isDefaultArray || false;\n\n    /** @type {WebGL2RenderingContext} */\n    this.gl2 = gl;\n\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  delete() {\n    super.delete();\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n    return this;\n  }\n\n  get MAX_ATTRIBUTES() {\n    return VertexArrayObject.getMaxAttributes(this.gl);\n  }\n\n  initialize(props = {}) {\n    return this.setProps(props);\n  }\n\n  setProps(props) {\n    // TODO: decide which props should be supported\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, opts = {}) {\n    assert(!elementBuffer || elementBuffer.target === GL.ELEMENT_ARRAY_BUFFER, ERR_ELEMENTS);\n\n    // The GL.ELEMENT_ARRAY_BUFFER_BINDING is stored on the VertexArrayObject...\n    this.bind(() => {\n      this.gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, elementBuffer ? elementBuffer.handle : null);\n    });\n\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a bufferk, enables the location, sets divisor\n  setBuffer(location, buffer, accessor) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer, accessor);\n    }\n\n    const {size, type, stride, offset, normalized, integer, divisor} = accessor;\n\n    const {gl, gl2} = this;\n    location = Number(location);\n\n    this.bind(() => {\n      // A non-zero buffer object must be bound to the GL_ARRAY_BUFFER target\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer.handle);\n\n      // WebGL2 supports *integer* data formats, i.e. GPU will see integer values\n      if (integer) {\n        assert(isWebGL2(gl));\n        gl2.vertexAttribIPointer(location, size, type, stride, offset);\n      } else {\n        // Attaches ARRAY_BUFFER with specified buffer format to location\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n      }\n      gl.enableVertexAttribArray(location);\n      gl2.vertexAttribDivisor(location, divisor || 0);\n\n      // NOTE We don't unbind buffer here, typically another buffer will be bound just after\n    });\n\n    return this;\n  }\n\n  // Enabling an attribute location makes it reference the currently bound buffer\n  // Disabling an attribute location makes it reference the global constant value\n  // TODO - handle single values for size 1 attributes?\n  // TODO - convert classic arrays based on known type?\n  enable(location, enable = true) {\n    // Attribute 0 cannot be disabled in most desktop OpenGL based browsers\n    const disablingAttributeZero =\n      !enable &&\n      location === 0 &&\n      !VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true});\n\n    if (!disablingAttributeZero) {\n      location = Number(location);\n      this.bind(\n        () =>\n          enable\n            ? this.gl.enableVertexAttribArray(location)\n            : this.gl.disableVertexAttribArray(location)\n      );\n    }\n    return this;\n  }\n\n  // Provide a means to create a buffer that is equivalent to a constant.\n  // NOTE: Desktop OpenGL cannot disable attribute 0.\n  // https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-\n  // this-has-significant-performance-penalt\n  getConstantBuffer(elementCount, value) {\n    // Create buffer only when needed, and reuse it (avoids inflating buffer creation statistics)\n\n    const constantValue = this._normalizeConstantArrayValue(value);\n\n    const byteLength = constantValue.byteLength * elementCount;\n    const length = constantValue.length * elementCount;\n\n    let updateNeeded = !this.buffer;\n\n    this.buffer = this.buffer || new Buffer(this.gl, byteLength);\n    updateNeeded = updateNeeded || this.buffer.reallocate(byteLength);\n\n    // Reallocate and update contents if needed\n    updateNeeded =\n      updateNeeded || !this._compareConstantArrayValues(constantValue, this.bufferValue);\n\n    if (updateNeeded) {\n      // Create a typed array that is big enough, and fill it with the required data\n      const typedArray = getScratchArray(value.constructor, length);\n      fillArray({target: typedArray, source: constantValue, start: 0, count: length});\n      this.buffer.subData(typedArray);\n      this.bufferValue = value;\n    }\n\n    return this.buffer;\n  }\n\n  // PRIVATE\n\n  // TODO - convert Arrays based on known type? (read type from accessor, don't assume Float32Array)\n  // TODO - handle single values for size 1 attributes?\n  _normalizeConstantArrayValue(arrayValue) {\n    if (Array.isArray(arrayValue)) {\n      return new Float32Array(arrayValue);\n    }\n    return arrayValue;\n  }\n\n  _compareConstantArrayValues(v1, v2) {\n    if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n      return false;\n    }\n    for (let i = 0; i < v1.length; ++i) {\n      if (v1[i] !== v2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  static _setConstantFloatArray(gl, location, array) {\n    switch (array.length) {\n      case 1:\n        gl.vertexAttrib1fv(location, array);\n        break;\n      case 2:\n        gl.vertexAttrib2fv(location, array);\n        break;\n      case 3:\n        gl.vertexAttrib3fv(location, array);\n        break;\n      case 4:\n        gl.vertexAttrib4fv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantIntArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1iv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2iv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3iv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4iv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantUintArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1uiv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2uiv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3uiv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4uiv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  // RESOURCE IMPLEMENTATION\n\n  _createHandle() {\n    /** @type {WebGL2RenderingContext} */\n    // @ts-ignore\n    const gl2 = this.gl;\n    return gl2.createVertexArray();\n  }\n\n  _deleteHandle(handle) {\n    this.gl2.deleteVertexArray(handle);\n    // @ts-ignore\n    return [this.elements];\n    // return [this.elements, ...this.buffers];\n  }\n\n  _bindHandle(handle) {\n    this.gl2.bindVertexArray(handle);\n  }\n\n  // Generic getter for information about a vertex attribute at a given position\n  _getParameter(pname, {location}) {\n    assert(Number.isFinite(location));\n    return this.bind(() => {\n      switch (pname) {\n        case GL.VERTEX_ATTRIB_ARRAY_POINTER:\n          return this.gl.getVertexAttribOffset(location, pname);\n        default:\n          return this.gl.getVertexAttrib(location, pname);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}