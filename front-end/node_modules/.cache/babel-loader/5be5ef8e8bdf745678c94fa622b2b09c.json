{"ast":null,"code":"import { isBrowser, toArrayBuffer } from '@loaders.gl/loader-utils';\nexport function makeStreamIterator(stream, options) {\n  return isBrowser ? makeBrowserStreamIterator(stream, options) : makeNodeStreamIterator(stream, options);\n}\n\nasync function* makeBrowserStreamIterator(stream, options) {\n  const reader = stream.getReader();\n  let nextBatchPromise;\n\n  try {\n    while (true) {\n      const currentBatchPromise = nextBatchPromise || reader.read();\n\n      if (options !== null && options !== void 0 && options._streamReadAhead) {\n        nextBatchPromise = reader.read();\n      }\n\n      const {\n        done,\n        value\n      } = await currentBatchPromise;\n\n      if (done) {\n        return;\n      }\n\n      yield toArrayBuffer(value);\n    }\n  } catch (error) {\n    reader.releaseLock();\n  }\n}\n\nasync function* makeNodeStreamIterator(stream, options) {\n  for await (const chunk of stream) {\n    yield toArrayBuffer(chunk);\n  }\n}","map":{"version":3,"sources":["../../../../src/iterators/make-iterator/make-stream-iterator.ts"],"names":["isBrowser","makeBrowserStreamIterator","makeNodeStreamIterator","reader","stream","currentBatchPromise","nextBatchPromise","options","value","toArrayBuffer"],"mappings":"AACA,SAAA,SAAA,EAAA,aAAA,QAAA,0BAAA;AAUA,OAAO,SAAA,kBAAA,CAAA,MAAA,EAAA,OAAA,EAGuB;AAC5B,SAAOA,SAAS,GACZC,yBAAyB,CAAA,MAAA,EADb,OACa,CADb,GAEZC,sBAAsB,CAAA,MAAA,EAF1B,OAE0B,CAF1B;AAGD;;AAOD,gBAAA,yBAAA,CAAA,MAAA,EAAA,OAAA,EAG8B;AAU5B,QAAMC,MAAM,GAAGC,MAAM,CAArB,SAAeA,EAAf;AAEA,MAAA,gBAAA;;AAEA,MAAI;AAEF,WAAA,IAAA,EAAa;AACX,YAAMC,mBAAmB,GAAGC,gBAAgB,IAAIH,MAAM,CAAtD,IAAgDA,EAAhD;;AAGA,UAAII,OAAJ,KAAA,IAAIA,IAAAA,OAAJ,KAAA,KAAA,CAAIA,IAAAA,OAAO,CAAX,gBAAA,EAA+B;AAC7BD,QAAAA,gBAAgB,GAAGH,MAAM,CAAzBG,IAAmBH,EAAnBG;AACD;;AAGD,YAAM;AAAA,QAAA,IAAA;AAAOE,QAAAA;AAAP,UAAgB,MAAtB,mBAAA;;AAEA,UAAA,IAAA,EAAU;AACR;AACD;;AAED,YAAMC,aAAa,CAAnB,KAAmB,CAAnB;AACD;AAlBH,GAAA,CAmBE,OAAA,KAAA,EAAc;AAGdN,IAAAA,MAAM,CAANA,WAAAA;AACD;AACF;;AAOD,gBAAA,sBAAA,CAAA,MAAA,EAAA,OAAA,EAG8B;AAG5B,aAAW,MAAX,KAAA,IAAA,MAAA,EAAkC;AAChC,UAAMM,aAAa,CAAnB,KAAmB,CAAnB;AACD;AACF","sourcesContent":["import type {Readable} from 'stream';\nimport {isBrowser, toArrayBuffer} from '@loaders.gl/loader-utils';\n\nexport type StreamIteratorOptions = {\n  _streamReadAhead?: boolean;\n};\n\n/**\n * Returns an async iterable that reads from a stream (works in both Node.js and browsers)\n * @param stream stream to iterator over\n */\nexport function makeStreamIterator(\n  stream: ReadableStream | Readable,\n  options?: StreamIteratorOptions\n): AsyncIterable<ArrayBuffer> {\n  return isBrowser\n    ? makeBrowserStreamIterator(stream as ReadableStream, options)\n    : makeNodeStreamIterator(stream as Readable, options);\n}\n\n/**\n * Returns an async iterable that reads from a DOM (browser) stream\n * @param stream stream to iterate from\n * @see https://jakearchibald.com/2017/async-iterators-and-generators/#making-streams-iterate\n */\nasync function* makeBrowserStreamIterator(\n  stream: ReadableStream,\n  options?: StreamIteratorOptions\n): AsyncIterable<ArrayBuffer> {\n  // WhatWG: stream is supposed to have a `getIterator` method\n  // if (typeof stream.getIterator === 'function') {\n  //   return stream.getIterator();\n  // }\n  // if (typeof stream[Symbol.asyncIterator] === 'function') {\n  //   return makeToArrayBufferIterator(stream);\n  // }\n\n  // In the browser, we first need to get a lock on the stream\n  const reader = stream.getReader();\n\n  let nextBatchPromise: Promise<{done?: boolean; value?: Uint8Array}> | undefined;\n\n  try {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const currentBatchPromise = nextBatchPromise || reader.read();\n      // Issue a read for an additional batch, while we await the next batch\n      // Idea is to make fetching happen in parallel with processing / parsing\n      if (options?._streamReadAhead) {\n        nextBatchPromise = reader.read();\n      }\n      // Read from the stream\n      // value is a Uint8Array\n      const {done, value} = await currentBatchPromise;\n      // Exit if we're done\n      if (done) {\n        return;\n      }\n      // Else yield the chunk\n      yield toArrayBuffer(value);\n    }\n  } catch (error) {\n    // TODO - examples makes it look like this should always be called,\n    // but that generates exceptions so only call it if we do not reach the end\n    reader.releaseLock();\n  }\n}\n\n/**\n * Returns an async iterable that reads from a DOM (browser) stream\n * @param stream stream to iterate from\n * @note Requires Node.js >= 10\n */\nasync function* makeNodeStreamIterator(\n  stream: Readable,\n  options?: StreamIteratorOptions\n): AsyncIterable<ArrayBuffer> {\n  // Hacky test for node version to ensure we don't call bad polyfills\n  // NODE 10+: stream is an asyncIterator\n  for await (const chunk of stream) {\n    yield toArrayBuffer(chunk); // Coerce each chunk to ArrayBuffer\n  }\n}\n/* TODO - remove NODE < 10\n * @see https://github.com/bustle/streaming-iterables, MIT license\n *\n  if (typeof stream[Symbol.asyncIterator] === 'function') {\n    return;\n  }\n\n  // TODO - check if is this ever used in Node 10+?\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const data = stream.read();\n    if (data !== null) {\n      yield toArrayBuffer(data);\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (stream._readableState?.ended) {\n      return;\n    }\n    await onceReadable(stream);\n  }\n\nasync function onceReadable(stream: Readable): Promise<any> {\n  return new Promise((resolve) => {\n    stream.once('readable', resolve);\n  });\n}\n  */\n"]},"metadata":{},"sourceType":"module"}