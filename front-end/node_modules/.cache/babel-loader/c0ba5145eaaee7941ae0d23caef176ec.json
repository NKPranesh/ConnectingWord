{"ast":null,"code":"import { global, isBrowser, isWorker } from '../env-utils/globals';\nimport * as node from '../node/require-utils.node';\nimport { assert } from '../env-utils/assert';\nimport { VERSION as __VERSION__ } from '../env-utils/version';\nconst LATEST = 'beta';\nconst VERSION = typeof \"3.0.13\" !== 'undefined' ? \"3.0.13\" : LATEST;\nconst loadLibraryPromises = {};\nexport async function loadLibrary(libraryUrl) {\n  let moduleName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (moduleName) {\n    libraryUrl = getLibraryUrl(libraryUrl, moduleName, options);\n  }\n\n  loadLibraryPromises[libraryUrl] = loadLibraryPromises[libraryUrl] || loadLibraryFromFile(libraryUrl);\n  return await loadLibraryPromises[libraryUrl];\n}\nexport function getLibraryUrl(library, moduleName, options) {\n  if (library.startsWith('http')) {\n    return library;\n  }\n\n  const modules = options.modules || {};\n\n  if (modules[library]) {\n    return modules[library];\n  }\n\n  if (!isBrowser) {\n    return \"modules/\".concat(moduleName, \"/dist/libs/\").concat(library);\n  }\n\n  if (options.CDN) {\n    assert(options.CDN.startsWith('http'));\n    return \"\".concat(options.CDN, \"/\").concat(moduleName, \"@\").concat(VERSION, \"/dist/libs/\").concat(library);\n  }\n\n  if (isWorker) {\n    return \"../src/libs/\".concat(library);\n  }\n\n  return \"modules/\".concat(moduleName, \"/src/libs/\").concat(library);\n}\n\nasync function loadLibraryFromFile(libraryUrl) {\n  if (libraryUrl.endsWith('wasm')) {\n    const response = await fetch(libraryUrl);\n    return await response.arrayBuffer();\n  }\n\n  if (!isBrowser) {\n    return node.requireFromFile && (await node.requireFromFile(libraryUrl));\n  }\n\n  if (isWorker) {\n    return importScripts(libraryUrl);\n  }\n\n  const response = await fetch(libraryUrl);\n  const scriptSource = await response.text();\n  return loadLibraryFromString(scriptSource, libraryUrl);\n}\n\nfunction loadLibraryFromString(scriptSource, id) {\n  if (!isBrowser) {\n    return node.requireFromString && node.requireFromString(scriptSource, id);\n  }\n\n  if (isWorker) {\n    eval.call(global, scriptSource);\n    return null;\n  }\n\n  const script = document.createElement('script');\n  script.id = id;\n\n  try {\n    script.appendChild(document.createTextNode(scriptSource));\n  } catch (e) {\n    script.text = scriptSource;\n  }\n\n  document.body.appendChild(script);\n  return null;\n}","map":{"version":3,"sources":["../../../../src/lib/library-utils/library-utils.ts"],"names":["VERSION","LATEST","loadLibraryPromises","moduleName","options","libraryUrl","getLibraryUrl","loadLibraryFromFile","library","modules","assert","response","fetch","node","importScripts","scriptSource","loadLibraryFromString","eval","script","document"],"mappings":"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","sourcesContent":["/* global importScripts */\nimport {global, isBrowser, isWorker} from '../env-utils/globals';\nimport * as node from '../node/require-utils.node';\nimport {assert} from '../env-utils/assert';\nimport {VERSION as __VERSION__} from '../env-utils/version';\n\n// TODO - unpkg.com doesn't seem to have a `latest` specifier for alpha releases...\nconst LATEST = 'beta';\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : LATEST;\n\nconst loadLibraryPromises = {}; // promises\n\n/**\n * Dynamically loads a library (\"module\")\n *\n * - wasm library: Array buffer is returned\n * - js library: Parse JS is returned\n *\n * Method depends on environment\n * - browser - script element is created and installed on document\n * - worker - eval is called on global context\n * - node - file is required\n *\n * @param libraryUrl\n * @param moduleName\n * @param options\n */\nexport async function loadLibrary(\n  libraryUrl: string,\n  moduleName: string | null = null,\n  options: object = {}\n): Promise<any> {\n  if (moduleName) {\n    libraryUrl = getLibraryUrl(libraryUrl, moduleName, options);\n  }\n\n  // Ensure libraries are only loaded once\n  loadLibraryPromises[libraryUrl] =\n    loadLibraryPromises[libraryUrl] || loadLibraryFromFile(libraryUrl);\n  return await loadLibraryPromises[libraryUrl];\n}\n\n// TODO - sort out how to resolve paths for main/worker and dev/prod\nexport function getLibraryUrl(library, moduleName?: string, options?): string {\n  // Check if already a URL\n  if (library.startsWith('http')) {\n    return library;\n  }\n\n  // Allow application to import and supply libraries through `options.modules`\n  const modules = options.modules || {};\n  if (modules[library]) {\n    return modules[library];\n  }\n\n  // Load from local files, not from CDN scripts in Node.js\n  // TODO - needs to locate the modules directory when installed!\n  if (!isBrowser) {\n    return `modules/${moduleName}/dist/libs/${library}`;\n  }\n\n  // In browser, load from external scripts\n  if (options.CDN) {\n    assert(options.CDN.startsWith('http'));\n    return `${options.CDN}/${moduleName}@${VERSION}/dist/libs/${library}`;\n  }\n\n  // TODO - loading inside workers requires paths relative to worker script location...\n  if (isWorker) {\n    return `../src/libs/${library}`;\n  }\n\n  return `modules/${moduleName}/src/libs/${library}`;\n}\n\nasync function loadLibraryFromFile(libraryUrl) {\n  if (libraryUrl.endsWith('wasm')) {\n    const response = await fetch(libraryUrl);\n    return await response.arrayBuffer();\n  }\n\n  if (!isBrowser) {\n    return node.requireFromFile && (await node.requireFromFile(libraryUrl));\n  }\n  if (isWorker) {\n    return importScripts(libraryUrl);\n  }\n  // TODO - fix - should be more secure than string parsing since observes CORS\n  // if (isBrowser) {\n  //   return await loadScriptFromFile(libraryUrl);\n  // }\n\n  const response = await fetch(libraryUrl);\n  const scriptSource = await response.text();\n  return loadLibraryFromString(scriptSource, libraryUrl);\n}\n\n/*\nasync function loadScriptFromFile(libraryUrl) {\n  const script = document.createElement('script');\n  script.src = libraryUrl;\n  return await new Promise((resolve, reject) => {\n    script.onload = data => {\n      resolve(data);\n    };\n    script.onerror = reject;\n  });\n}\n*/\n\n// TODO - Needs security audit...\n//  - Raw eval call\n//  - Potentially bypasses CORS\n// Upside is that this separates fetching and parsing\n// we could create a`LibraryLoader` or`ModuleLoader`\nfunction loadLibraryFromString(scriptSource, id) {\n  if (!isBrowser) {\n    return node.requireFromString && node.requireFromString(scriptSource, id);\n  }\n\n  if (isWorker) {\n    // Use lvalue trick to make eval run in global scope\n    eval.call(global, scriptSource); // eslint-disable-line no-eval\n    // https://stackoverflow.com/questions/9107240/1-evalthis-vs-evalthis-in-javascript\n    // http://perfectionkills.com/global-eval-what-are-the-options/\n    return null;\n  }\n\n  const script = document.createElement('script');\n  script.id = id;\n  // most browsers like a separate text node but some throw an error. The second method covers those.\n  try {\n    script.appendChild(document.createTextNode(scriptSource));\n  } catch (e) {\n    script.text = scriptSource;\n  }\n  document.body.appendChild(script);\n  return null;\n}\n\n// TODO - technique for module injection into worker, from THREE.DracoLoader...\n/*\nfunction combineWorkerWithLibrary(worker, jsContent) {\n  var fn = wWorker.toString();\n  var body = [\n    '// injected',\n    jsContent,\n    '',\n    '// worker',\n    fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))\n  ].join('\\n');\n  this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n}\n*/\n"]},"metadata":{},"sourceType":"module"}