{"ast":null,"code":"import { Layer, project32, picking, log, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\nimport IconManager from './icon-manager';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  iconAtlas: {\n    type: 'image',\n    value: null,\n    async: true\n  },\n  iconMapping: {\n    type: 'object',\n    value: {},\n    async: true\n  },\n  sizeScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  billboard: true,\n  sizeUnits: 'pixels',\n  sizeMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  sizeMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  alphaCutoff: {\n    type: 'number',\n    value: 0.05,\n    min: 0,\n    max: 1\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getIcon: {\n    type: 'accessor',\n    value: x => x.icon\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getSize: {\n    type: 'accessor',\n    value: 1\n  },\n  getAngle: {\n    type: 'accessor',\n    value: 0\n  },\n  getPixelOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  onIconError: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  }\n};\nexport default class IconLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, picking]\n    });\n  }\n\n  initializeState() {\n    this.state = {\n      iconManager: new IconManager(this.context.gl, {\n        onUpdate: this._onUpdate.bind(this),\n        onError: this._onError.bind(this)\n      })\n    };\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIcon',\n        transform: this.getInstanceOffset\n      },\n      instanceIconFrames: {\n        size: 4,\n        accessor: 'getIcon',\n        transform: this.getInstanceIconFrame\n      },\n      instanceColorModes: {\n        size: 1,\n        type: 5121,\n        accessor: 'getIcon',\n        transform: this.getInstanceColorMode\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instancePixelOffset: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      }\n    });\n  }\n\n  updateState(_ref) {\n    let {\n      oldProps,\n      props,\n      changeFlags\n    } = _ref;\n    super.updateState({\n      props,\n      oldProps,\n      changeFlags\n    });\n    const attributeManager = this.getAttributeManager();\n    const {\n      iconAtlas,\n      iconMapping,\n      data,\n      getIcon\n    } = props;\n    const {\n      iconManager\n    } = this.state;\n    iconManager.setProps({\n      loadOptions: props.loadOptions\n    });\n    let iconMappingChanged = false;\n    const prePacked = iconAtlas || this.internalState.isAsyncPropLoading('iconAtlas');\n\n    if (prePacked) {\n      if (oldProps.iconAtlas !== props.iconAtlas) {\n        iconManager.setProps({\n          iconAtlas,\n          autoPacking: false\n        });\n      }\n\n      if (oldProps.iconMapping !== props.iconMapping) {\n        iconManager.setProps({\n          iconMapping\n        });\n        iconMappingChanged = true;\n      }\n    } else {\n      iconManager.setProps({\n        autoPacking: true\n      });\n    }\n\n    if (changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon)) {\n      iconManager.setProps({\n        data,\n        getIcon\n      });\n    }\n\n    if (iconMappingChanged) {\n      attributeManager.invalidate('instanceOffsets');\n      attributeManager.invalidate('instanceIconFrames');\n      attributeManager.invalidate('instanceColorModes');\n    }\n\n    if (changeFlags.extensionsChanged) {\n      var _this$state$model;\n\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager.invalidateAll();\n    }\n  }\n\n  get isLoaded() {\n    return super.isLoaded && this.state.iconManager.isLoaded;\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    this.state.iconManager.finalize();\n  }\n\n  draw(_ref2) {\n    let {\n      uniforms\n    } = _ref2;\n    const {\n      sizeScale,\n      sizeMinPixels,\n      sizeMaxPixels,\n      sizeUnits,\n      billboard,\n      alphaCutoff\n    } = this.props;\n    const {\n      iconManager\n    } = this.state;\n    const iconsTexture = iconManager.getTexture();\n\n    if (iconsTexture) {\n      this.state.model.setUniforms(uniforms).setUniforms({\n        iconsTexture,\n        iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n        sizeUnits: UNIT[sizeUnits],\n        sizeScale,\n        sizeMinPixels,\n        sizeMaxPixels,\n        billboard,\n        alphaCutoff\n      }).draw();\n    }\n  }\n\n  _getModel(gl) {\n    const positions = [-1, -1, -1, 1, 1, 1, 1, -1];\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 6,\n        attributes: {\n          positions: {\n            size: 2,\n            value: new Float32Array(positions)\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  _onUpdate() {\n    this.setNeedsRedraw();\n  }\n\n  _onError(evt) {\n    const {\n      onIconError\n    } = this.getCurrentLayer().props;\n\n    if (onIconError) {\n      onIconError(evt);\n    } else {\n      log.error(evt.error)();\n    }\n  }\n\n  getInstanceOffset(icon) {\n    const rect = this.state.iconManager.getIconMapping(icon);\n    return [rect.width / 2 - rect.anchorX || 0, rect.height / 2 - rect.anchorY || 0];\n  }\n\n  getInstanceColorMode(icon) {\n    const mapping = this.state.iconManager.getIconMapping(icon);\n    return mapping.mask ? 1 : 0;\n  }\n\n  getInstanceIconFrame(icon) {\n    const rect = this.state.iconManager.getIconMapping(icon);\n    return [rect.x || 0, rect.y || 0, rect.width || 0, rect.height || 0];\n  }\n\n}\nIconLayer.layerName = 'IconLayer';\nIconLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/icon-layer/icon-layer.js"],"names":["DEFAULT_COLOR","defaultProps","iconAtlas","type","value","async","iconMapping","sizeScale","min","billboard","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","alphaCutoff","max","getPosition","x","position","getIcon","icon","getColor","getSize","getAngle","getPixelOffset","onIconError","compare","optional","getShaders","modules","initializeState","iconManager","onUpdate","onError","attributeManager","instancePositions","size","fp64","transition","accessor","instanceSizes","defaultValue","instanceOffsets","transform","getInstanceOffset","instanceIconFrames","getInstanceIconFrame","instanceColorModes","getInstanceColorMode","instanceColors","normalized","instanceAngles","instancePixelOffset","updateState","changeFlags","loadOptions","props","iconMappingChanged","prePacked","oldProps","autoPacking","gl","isLoaded","finalizeState","draw","uniforms","iconsTexture","iconsTextureDim","UNIT","_getModel","positions","id","geometry","drawMode","attributes","isInstanced","_onUpdate","_onError","log","evt","rect","mapping","IconLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Layer, project32, picking, log, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\nimport IconManager from './icon-manager';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n/*\n * @param {object} props\n * @param {Texture2D | string} props.iconAtlas - atlas image url or texture\n * @param {object} props.iconMapping - icon names mapped to icon definitions\n * @param {object} props.iconMapping[icon_name].x - x position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].y - y position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].width - width of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].height - height of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].anchorX - x anchor of icon on the atlas image,\n *   default to width / 2\n * @param {object} props.iconMapping[icon_name].anchorY - y anchor of icon on the atlas image,\n *   default to height / 2\n * @param {object} props.iconMapping[icon_name].mask - whether icon is treated as a transparency\n *   mask. If true, user defined color is applied. If false, original color from the image is\n *   applied. Default to false.\n * @param {number} props.size - icon size in pixels\n * @param {func} props.getPosition - returns anchor position of the icon, in [lng, lat, z]\n * @param {func} props.getIcon - returns icon name as a string\n * @param {func} props.getSize - returns icon size multiplier as a number\n * @param {func} props.getColor - returns color of the icon in [r, g, b, a]. Only works on icons\n *   with mask: true.\n * @param {func} props.getAngle - returns rotating angle (in degree) of the icon.\n */\nconst defaultProps = {\n  iconAtlas: {type: 'image', value: null, async: true},\n  iconMapping: {type: 'object', value: {}, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  billboard: true,\n  sizeUnits: 'pixels',\n  sizeMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  sizeMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n  alphaCutoff: {type: 'number', value: 0.05, min: 0, max: 1},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getIcon: {type: 'accessor', value: x => x.icon},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n\n  onIconError: {type: 'function', value: null, compare: false, optional: true}\n};\n\nexport default class IconLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.state = {\n      iconManager: new IconManager(this.context.gl, {\n        onUpdate: this._onUpdate.bind(this),\n        onError: this._onError.bind(this)\n      })\n    };\n\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {size: 2, accessor: 'getIcon', transform: this.getInstanceOffset},\n      instanceIconFrames: {size: 4, accessor: 'getIcon', transform: this.getInstanceIconFrame},\n      instanceColorModes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getIcon',\n        transform: this.getInstanceColorMode\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instancePixelOffset: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  /* eslint-disable max-statements, complexity */\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const attributeManager = this.getAttributeManager();\n    const {iconAtlas, iconMapping, data, getIcon} = props;\n    const {iconManager} = this.state;\n\n    iconManager.setProps({loadOptions: props.loadOptions});\n\n    let iconMappingChanged = false;\n    const prePacked = iconAtlas || this.internalState.isAsyncPropLoading('iconAtlas');\n\n    // prepacked iconAtlas from user\n    if (prePacked) {\n      if (oldProps.iconAtlas !== props.iconAtlas) {\n        iconManager.setProps({iconAtlas, autoPacking: false});\n      }\n\n      if (oldProps.iconMapping !== props.iconMapping) {\n        iconManager.setProps({iconMapping});\n        iconMappingChanged = true;\n      }\n    } else {\n      // otherwise, use autoPacking\n      iconManager.setProps({autoPacking: true});\n    }\n\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon))\n    ) {\n      iconManager.setProps({data, getIcon});\n    }\n\n    if (iconMappingChanged) {\n      attributeManager.invalidate('instanceOffsets');\n      attributeManager.invalidate('instanceIconFrames');\n      attributeManager.invalidate('instanceColorModes');\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager.invalidateAll();\n    }\n  }\n  /* eslint-enable max-statements, complexity */\n\n  get isLoaded() {\n    return super.isLoaded && this.state.iconManager.isLoaded;\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    // Release resources held by the icon manager\n    this.state.iconManager.finalize();\n  }\n\n  draw({uniforms}) {\n    const {sizeScale, sizeMinPixels, sizeMaxPixels, sizeUnits, billboard, alphaCutoff} = this.props;\n    const {iconManager} = this.state;\n\n    const iconsTexture = iconManager.getTexture();\n    if (iconsTexture) {\n      this.state.model\n        .setUniforms(uniforms)\n        .setUniforms({\n          iconsTexture,\n          iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n          sizeUnits: UNIT[sizeUnits],\n          sizeScale,\n          sizeMinPixels,\n          sizeMaxPixels,\n          billboard,\n          alphaCutoff\n        })\n        .draw();\n    }\n  }\n\n  _getModel(gl) {\n    // The icon-layer vertex shader uses 2d positions\n    // specifed via: attribute vec2 positions;\n    const positions = [-1, -1, -1, 1, 1, 1, 1, -1];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        attributes: {\n          // The size must be explicitly passed here otherwise luma.gl\n          // will default to assuming that positions are 3D (x,y,z)\n          positions: {\n            size: 2,\n            value: new Float32Array(positions)\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  _onUpdate() {\n    this.setNeedsRedraw();\n  }\n\n  _onError(evt) {\n    const {onIconError} = this.getCurrentLayer().props;\n    if (onIconError) {\n      onIconError(evt);\n    } else {\n      log.error(evt.error)();\n    }\n  }\n\n  getInstanceOffset(icon) {\n    const rect = this.state.iconManager.getIconMapping(icon);\n    return [rect.width / 2 - rect.anchorX || 0, rect.height / 2 - rect.anchorY || 0];\n  }\n\n  getInstanceColorMode(icon) {\n    const mapping = this.state.iconManager.getIconMapping(icon);\n    return mapping.mask ? 1 : 0;\n  }\n\n  getInstanceIconFrame(icon) {\n    const rect = this.state.iconManager.getIconMapping(icon);\n    return [rect.x || 0, rect.y || 0, rect.width || 0, rect.height || 0];\n  }\n}\n\nIconLayer.layerName = 'IconLayer';\nIconLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}