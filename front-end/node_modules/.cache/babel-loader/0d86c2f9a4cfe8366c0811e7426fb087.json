{"ast":null,"code":"import { assert } from '../utils/assert';\nconst TYPES = ['SCALAR', 'VEC2', 'VEC3', 'VEC4'];\nconst ARRAY_CONSTRUCTOR_TO_WEBGL_CONSTANT = [[Int8Array, 5120], [Uint8Array, 5121], [Int16Array, 5122], [Uint16Array, 5123], [Uint32Array, 5125], [Float32Array, 5126], [Float64Array, 5130]];\nconst ARRAY_TO_COMPONENT_TYPE = new Map(ARRAY_CONSTRUCTOR_TO_WEBGL_CONSTANT);\nconst ATTRIBUTE_TYPE_TO_COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\nconst ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE = {\n  5120: 1,\n  5121: 1,\n  5122: 2,\n  5123: 2,\n  5125: 4,\n  5126: 4\n};\nconst ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY = {\n  5120: Int8Array,\n  5121: Uint8Array,\n  5122: Int16Array,\n  5123: Uint16Array,\n  5125: Uint32Array,\n  5126: Float32Array\n};\nexport function getAccessorTypeFromSize(size) {\n  const type = TYPES[size - 1];\n  return type || TYPES[0];\n}\nexport function getComponentTypeFromArray(typedArray) {\n  const componentType = ARRAY_TO_COMPONENT_TYPE.get(typedArray.constructor);\n\n  if (!componentType) {\n    throw new Error('Illegal typed array');\n  }\n\n  return componentType;\n}\nexport function getAccessorArrayTypeAndLength(accessor, bufferView) {\n  const ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[accessor.componentType];\n  const components = ATTRIBUTE_TYPE_TO_COMPONENTS[accessor.type];\n  const bytesPerComponent = ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE[accessor.componentType];\n  const length = accessor.count * components;\n  const byteLength = accessor.count * components * bytesPerComponent;\n  assert(byteLength >= 0 && byteLength <= bufferView.byteLength);\n  return {\n    ArrayType,\n    length,\n    byteLength\n  };\n}","map":{"version":3,"sources":["../../../../src/lib/gltf-utils/gltf-utils.ts"],"names":["TYPES","ARRAY_CONSTRUCTOR_TO_WEBGL_CONSTANT","ARRAY_TO_COMPONENT_TYPE","ATTRIBUTE_TYPE_TO_COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE","ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY","Float32Array","type","size","componentType","typedArray","ArrayType","accessor","components","bytesPerComponent","length","byteLength","assert","bufferView"],"mappings":"AAAA,SAAA,MAAA,QAAA,iBAAA;AAEA,MAAMA,KAAK,GAAG,CAAA,QAAA,EAAA,MAAA,EAAA,MAAA,EAAd,MAAc,CAAd;AAcA,MAAMC,mCAAsE,GAAG,CAC7E,CAAA,SAAA,EAD6E,IAC7E,CAD6E,EAE7E,CAAA,UAAA,EAF6E,IAE7E,CAF6E,EAG7E,CAAA,UAAA,EAH6E,IAG7E,CAH6E,EAI7E,CAAA,WAAA,EAJ6E,IAI7E,CAJ6E,EAK7E,CAAA,WAAA,EAL6E,IAK7E,CAL6E,EAM7E,CAAA,YAAA,EAN6E,IAM7E,CAN6E,EAO7E,CAAA,YAAA,EAPF,IAOE,CAP6E,CAA/E;AASA,MAAMC,uBAAuB,GAAG,IAAA,GAAA,CAAhC,mCAAgC,CAAhC;AAIA,MAAMC,4BAA4B,GAAG;AACnCC,EAAAA,MAAM,EAD6B,CAAA;AAEnCC,EAAAA,IAAI,EAF+B,CAAA;AAGnCC,EAAAA,IAAI,EAH+B,CAAA;AAInCC,EAAAA,IAAI,EAJ+B,CAAA;AAKnCC,EAAAA,IAAI,EAL+B,CAAA;AAMnCC,EAAAA,IAAI,EAN+B,CAAA;AAOnCC,EAAAA,IAAI,EAAE;AAP6B,CAArC;AAUA,MAAMC,qCAAqC,GAAG;AAC5C,QAD4C,CAAA;AAE5C,QAF4C,CAAA;AAG5C,QAH4C,CAAA;AAI5C,QAJ4C,CAAA;AAK5C,QAL4C,CAAA;AAM5C,QAAM;AANsC,CAA9C;AASA,MAAMC,iCAAiC,GAAG;AACxC,QADwC,SAAA;AAExC,QAFwC,UAAA;AAGxC,QAHwC,UAAA;AAIxC,QAJwC,WAAA;AAKxC,QALwC,WAAA;AAMxC,QAAMC;AANkC,CAA1C;AASA,OAAO,SAAA,uBAAA,CAAA,IAAA,EAAuC;AAC5C,QAAMC,IAAI,GAAGd,KAAK,CAACe,IAAI,GAAvB,CAAkB,CAAlB;AACA,SAAOD,IAAI,IAAId,KAAK,CAApB,CAAoB,CAApB;AACD;AAED,OAAO,SAAA,yBAAA,CAAA,UAAA,EAA+C;AACpD,QAAMgB,aAAa,GAAGd,uBAAuB,CAAvBA,GAAAA,CAA4Be,UAAU,CAA5D,WAAsBf,CAAtB;;AACA,MAAI,CAAJ,aAAA,EAAoB;AAClB,UAAM,IAAA,KAAA,CAAN,qBAAM,CAAN;AACD;;AACD,SAAA,aAAA;AACD;AAED,OAAO,SAAA,6BAAA,CAAA,QAAA,EAAA,UAAA,EAA6D;AAClE,QAAMgB,SAAS,GAAGN,iCAAiC,CAACO,QAAQ,CAA5D,aAAmD,CAAnD;AACA,QAAMC,UAAU,GAAGjB,4BAA4B,CAACgB,QAAQ,CAAxD,IAA+C,CAA/C;AACA,QAAME,iBAAiB,GAAGV,qCAAqC,CAACQ,QAAQ,CAAxE,aAA+D,CAA/D;AACA,QAAMG,MAAM,GAAGH,QAAQ,CAARA,KAAAA,GAAf,UAAA;AACA,QAAMI,UAAU,GAAGJ,QAAQ,CAARA,KAAAA,GAAAA,UAAAA,GAAnB,iBAAA;AACAK,EAAAA,MAAM,CAACD,UAAU,IAAVA,CAAAA,IAAmBA,UAAU,IAAIE,UAAU,CAAlDD,UAAM,CAANA;AACA,SAAO;AAAA,IAAA,SAAA;AAAA,IAAA,MAAA;AAAoBD,IAAAA;AAApB,GAAP;AACD","sourcesContent":["import {assert} from '../utils/assert';\n\nconst TYPES = ['SCALAR', 'VEC2', 'VEC3', 'VEC4'];\n\ntype TypedArrayConstructor =\n  | Int8ArrayConstructor\n  | Uint8ArrayConstructor\n  | Int16ArrayConstructor\n  | Uint16ArrayConstructor\n  | Int32ArrayConstructor\n  | Uint32ArrayConstructor\n  | Int32ArrayConstructor\n  | Uint32ArrayConstructor\n  | Float32ArrayConstructor\n  | Float64ArrayConstructor;\n\nconst ARRAY_CONSTRUCTOR_TO_WEBGL_CONSTANT: [TypedArrayConstructor, number][] = [\n  [Int8Array, 5120],\n  [Uint8Array, 5121],\n  [Int16Array, 5122],\n  [Uint16Array, 5123],\n  [Uint32Array, 5125],\n  [Float32Array, 5126],\n  [Float64Array, 5130]\n];\nconst ARRAY_TO_COMPONENT_TYPE = new Map<TypedArrayConstructor, number>(\n  ARRAY_CONSTRUCTOR_TO_WEBGL_CONSTANT\n);\n\nconst ATTRIBUTE_TYPE_TO_COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\nconst ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE = {\n  5120: 1,\n  5121: 1,\n  5122: 2,\n  5123: 2,\n  5125: 4,\n  5126: 4\n};\n\nconst ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY = {\n  5120: Int8Array,\n  5121: Uint8Array,\n  5122: Int16Array,\n  5123: Uint16Array,\n  5125: Uint32Array,\n  5126: Float32Array\n};\n\nexport function getAccessorTypeFromSize(size) {\n  const type = TYPES[size - 1];\n  return type || TYPES[0];\n}\n\nexport function getComponentTypeFromArray(typedArray) {\n  const componentType = ARRAY_TO_COMPONENT_TYPE.get(typedArray.constructor);\n  if (!componentType) {\n    throw new Error('Illegal typed array');\n  }\n  return componentType;\n}\n\nexport function getAccessorArrayTypeAndLength(accessor, bufferView) {\n  const ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[accessor.componentType];\n  const components = ATTRIBUTE_TYPE_TO_COMPONENTS[accessor.type];\n  const bytesPerComponent = ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE[accessor.componentType];\n  const length = accessor.count * components;\n  const byteLength = accessor.count * components * bytesPerComponent;\n  assert(byteLength >= 0 && byteLength <= bufferView.byteLength);\n  return {ArrayType, length, byteLength};\n}\n"]},"metadata":{},"sourceType":"module"}