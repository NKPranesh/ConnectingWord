{"ast":null,"code":"import { defaultClassicCredentials, getDefaultCredentials } from '../config';\nimport { API_VERSIONS, DEFAULT_MAPS_URL_FORMAT, DEFAULT_REGION_COMPONENT_IN_URL, DEFAULT_USER_COMPONENT_IN_URL, encodeParameter, MAP_TYPES } from './maps-api-common';\nexport const CONNECTIONS = {\n  BIGQUERY: 'bigquery',\n  CARTO: 'carto'\n};\nconst BUFFER_SIZE = 16;\nconst TILE_EXTENT = 4096;\nexport async function getDataV2(_ref) {\n  let {\n    type,\n    source,\n    credentials\n  } = _ref;\n  const defaultCredentials = getDefaultCredentials();\n  const apiVersion = credentials && credentials.apiVersion || defaultCredentials.apiVersion;\n  const localCreds = { ...defaultClassicCredentials,\n    ...(defaultCredentials.apiVersion === apiVersion && defaultCredentials),\n    ...credentials\n  };\n\n  if (!localCreds.mapsUrl) {\n    localCreds.mapsUrl = DEFAULT_MAPS_URL_FORMAT[apiVersion];\n  }\n\n  let url;\n  const connection = type === 'tileset' ? CONNECTIONS.BIGQUERY : CONNECTIONS.CARTO;\n\n  switch (apiVersion) {\n    case API_VERSIONS.V1:\n      const mapConfig = createMapConfig(source);\n      url = buildURLMapsAPIv1({\n        mapConfig,\n        credentials: localCreds\n      });\n      const layergroup = await request({\n        url,\n        credentials: localCreds\n      });\n      return layergroup.metadata.tilejson.vector;\n\n    case API_VERSIONS.V2:\n      url = buildURLMapsAPIv2({\n        connection,\n        type,\n        source,\n        credentials: localCreds\n      });\n      return await request({\n        url,\n        credentials: localCreds\n      });\n\n    default:\n      throw new Error(\"Invalid maps API version. It shoud be \".concat(API_VERSIONS.V1, \" or \").concat(API_VERSIONS.V2));\n  }\n}\n\nasync function request(_ref2) {\n  let {\n    url,\n    credentials\n  } = _ref2;\n  let response;\n\n  try {\n    response = await fetch(url, {\n      headers: {\n        Accept: 'application/json'\n      }\n    });\n  } catch (error) {\n    throw new Error(\"Failed to connect to Maps API: \".concat(error));\n  }\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    dealWithError({\n      response,\n      json,\n      credentials\n    });\n  }\n\n  return json;\n}\n\nfunction dealWithError(_ref3) {\n  let {\n    response,\n    json,\n    credentials\n  } = _ref3;\n\n  switch (response.status) {\n    case 401:\n      throw new Error(\"Unauthorized access to Maps API: invalid combination of user ('\".concat(credentials.username, \"') and apiKey ('\").concat(credentials.apiKey, \"')\"));\n\n    case 403:\n      throw new Error(\"Unauthorized access to dataset: the provided apiKey('\".concat(credentials.apiKey, \"') doesn't provide access to the requested data\"));\n\n    default:\n      const e = credentials.apiVersion === API_VERSIONS.V1 ? JSON.stringify(json.errors) : json.error;\n      throw new Error(e);\n  }\n}\n\nfunction initURLParameters(credentials) {\n  const encodedApiKey = encodeParameter('api_key', credentials.apiKey);\n  const encodedClient = encodeParameter('client', \"deck-gl-carto\");\n  return [encodedApiKey, encodedClient];\n}\n\nfunction buildURLMapsAPIv1(_ref4) {\n  let {\n    mapConfig,\n    credentials\n  } = _ref4;\n  const parameters = initURLParameters(credentials);\n  const cfg = JSON.stringify(mapConfig);\n  return \"\".concat(mapsUrl(credentials), \"?\").concat(parameters.join('&'), \"&\").concat(encodeParameter('config', cfg));\n}\n\nfunction buildURLMapsAPIv2(_ref5) {\n  let {\n    connection,\n    type,\n    source,\n    credentials\n  } = _ref5;\n  const parameters = initURLParameters(credentials);\n  const mapsApiType = type === MAP_TYPES.QUERY ? 'sql' : type;\n  let url = \"\".concat(mapsUrl(credentials), \"/\").concat(connection, \"/\").concat(mapsApiType, \"?\");\n  url += \"\".concat(encodeParameter('source', source), \"&format=tilejson&\").concat(parameters.join('&'));\n  return url;\n}\n\nfunction mapsUrl(credentials) {\n  return credentials.mapsUrl.replace(DEFAULT_USER_COMPONENT_IN_URL, credentials.username).replace(DEFAULT_REGION_COMPONENT_IN_URL, credentials.region);\n}\n\nfunction createMapConfig(sql) {\n  return {\n    version: '1.3.1',\n    buffersize: {\n      mvt: BUFFER_SIZE\n    },\n    layers: [{\n      type: 'mapnik',\n      options: {\n        sql,\n        vector_extent: TILE_EXTENT\n      }\n    }]\n  };\n}","map":{"version":3,"sources":["../../../src/api/maps-client.js"],"names":["CONNECTIONS","BIGQUERY","CARTO","BUFFER_SIZE","TILE_EXTENT","credentials","defaultCredentials","getDefaultCredentials","apiVersion","localCreds","DEFAULT_MAPS_URL_FORMAT","connection","type","API_VERSIONS","mapConfig","createMapConfig","url","buildURLMapsAPIv1","layergroup","request","buildURLMapsAPIv2","response","fetch","headers","Accept","json","dealWithError","e","JSON","encodedApiKey","encodeParameter","encodedClient","parameters","initURLParameters","cfg","mapsUrl","mapsApiType","MAP_TYPES","version","buffersize","mvt","layers","options","vector_extent"],"mappings":"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","sourcesContent":["/**\n * Maps API Client for Maps API v1 and Maps API v2\n */\nimport {defaultClassicCredentials, getDefaultCredentials} from '../config';\nimport {\n  API_VERSIONS,\n  DEFAULT_MAPS_URL_FORMAT,\n  DEFAULT_REGION_COMPONENT_IN_URL,\n  DEFAULT_USER_COMPONENT_IN_URL,\n  encodeParameter,\n  MAP_TYPES\n} from './maps-api-common';\n\nexport const CONNECTIONS = {\n  BIGQUERY: 'bigquery',\n  CARTO: 'carto'\n};\n\nconst BUFFER_SIZE = 16;\nconst TILE_EXTENT = 4096;\n\n/**\n * Obtain a TileJson from Maps API v1 and v2\n */\nexport async function getDataV2({type, source, credentials}) {\n  const defaultCredentials = getDefaultCredentials();\n  const apiVersion = (credentials && credentials.apiVersion) || defaultCredentials.apiVersion;\n  // Only pick up default credentials if they have been defined for\n  // correct API version\n  const localCreds = {\n    ...defaultClassicCredentials,\n    ...(defaultCredentials.apiVersion === apiVersion && defaultCredentials),\n    ...credentials\n  };\n\n  if (!localCreds.mapsUrl) {\n    localCreds.mapsUrl = DEFAULT_MAPS_URL_FORMAT[apiVersion];\n  }\n\n  let url;\n\n  const connection = type === 'tileset' ? CONNECTIONS.BIGQUERY : CONNECTIONS.CARTO;\n\n  switch (apiVersion) {\n    case API_VERSIONS.V1:\n      // Maps API v1\n      const mapConfig = createMapConfig(source);\n      url = buildURLMapsAPIv1({mapConfig, credentials: localCreds});\n      const layergroup = await request({url, credentials: localCreds});\n      return layergroup.metadata.tilejson.vector;\n\n    case API_VERSIONS.V2:\n      // Maps API v2\n      url = buildURLMapsAPIv2({connection, type, source, credentials: localCreds});\n      return await request({url, credentials: localCreds});\n\n    default:\n      throw new Error(\n        `Invalid maps API version. It shoud be ${API_VERSIONS.V1} or ${API_VERSIONS.V2}`\n      );\n  }\n}\n\n/**\n * Request against Maps API\n */\nasync function request({url, credentials}) {\n  let response;\n\n  try {\n    /* global fetch */\n    /* eslint no-undef: \"error\" */\n    response = await fetch(url, {\n      headers: {\n        Accept: 'application/json'\n      }\n    });\n  } catch (error) {\n    throw new Error(`Failed to connect to Maps API: ${error}`);\n  }\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    dealWithError({response, json, credentials});\n  }\n\n  return json;\n}\n\n/**\n * Display proper message from Maps API error\n */\nfunction dealWithError({response, json, credentials}) {\n  switch (response.status) {\n    case 401:\n      throw new Error(\n        `Unauthorized access to Maps API: invalid combination of user ('${\n          credentials.username\n        }') and apiKey ('${credentials.apiKey}')`\n      );\n    case 403:\n      throw new Error(\n        `Unauthorized access to dataset: the provided apiKey('${\n          credentials.apiKey\n        }') doesn't provide access to the requested data`\n      );\n\n    default:\n      const e =\n        credentials.apiVersion === API_VERSIONS.V1 ? JSON.stringify(json.errors) : json.error;\n      throw new Error(e);\n  }\n}\n\nfunction initURLParameters(credentials) {\n  const encodedApiKey = encodeParameter('api_key', credentials.apiKey);\n  const encodedClient = encodeParameter('client', `deck-gl-carto`);\n  return [encodedApiKey, encodedClient];\n}\n\n/**\n * Build a URL with all required parameters\n */\nfunction buildURLMapsAPIv1({mapConfig, credentials}) {\n  const parameters = initURLParameters(credentials);\n  const cfg = JSON.stringify(mapConfig);\n  return `${mapsUrl(credentials)}?${parameters.join('&')}&${encodeParameter('config', cfg)}`;\n}\n\nfunction buildURLMapsAPIv2({connection, type, source, credentials}) {\n  const parameters = initURLParameters(credentials);\n  // Query type is mapped to 'sql' at maps api v1\n  const mapsApiType = type === MAP_TYPES.QUERY ? 'sql' : type;\n  let url = `${mapsUrl(credentials)}/${connection}/${mapsApiType}?`;\n  url += `${encodeParameter('source', source)}&format=tilejson&${parameters.join('&')}`;\n  return url;\n}\n\n/**\n * Prepare a url valid for the specified user\n */\nfunction mapsUrl(credentials) {\n  return credentials.mapsUrl\n    .replace(DEFAULT_USER_COMPONENT_IN_URL, credentials.username)\n    .replace(DEFAULT_REGION_COMPONENT_IN_URL, credentials.region);\n}\n\nfunction createMapConfig(sql) {\n  return {\n    version: '1.3.1',\n    buffersize: {\n      mvt: BUFFER_SIZE\n    },\n    layers: [\n      {\n        type: 'mapnik',\n        options: {\n          sql,\n          vector_extent: TILE_EXTENT\n        }\n      }\n    ]\n  };\n}\n"]},"metadata":{},"sourceType":"module"}