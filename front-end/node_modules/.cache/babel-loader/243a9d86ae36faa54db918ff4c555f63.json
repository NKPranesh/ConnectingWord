{"ast":null,"code":"import WorkerFarm from '../worker-farm/worker-farm';\nimport { removeNontransferableOptions } from '../worker-utils/remove-nontransferable-options';\nimport { getWorkerURL, getWorkerName } from './get-worker-url';\nexport function canProcessOnWorker(worker, options) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  return worker.worker && (options === null || options === void 0 ? void 0 : options.worker);\n}\nexport async function processOnWorker(worker, data) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const name = getWorkerName(worker);\n  const url = getWorkerURL(worker, options);\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const workerPool = workerFarm.getWorkerPool({\n    name,\n    url\n  });\n  const jobName = options.jobName || worker.name;\n  const job = await workerPool.startJob(jobName, onMessage.bind(null, context));\n  const transferableOptions = removeNontransferableOptions(options);\n  job.postMessage('process', {\n    input: data,\n    options: transferableOptions\n  });\n  const result = await job.result;\n  return result.result;\n}\n\nasync function onMessage(context, job, type, payload) {\n  switch (type) {\n    case 'done':\n      job.done(payload);\n      break;\n\n    case 'error':\n      job.error(payload.error);\n      break;\n\n    case 'process':\n      const {\n        id,\n        input,\n        options\n      } = payload;\n\n      try {\n        if (!context.process) {\n          job.postMessage('error', {\n            id,\n            error: 'Worker not set up to process on main thread'\n          });\n          return;\n        }\n\n        const result = await context.process(input, options);\n        job.postMessage('done', {\n          id,\n          result\n        });\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {\n          id,\n          error: message\n        });\n      }\n\n      break;\n\n    default:\n      console.warn(\"process-on-worker: unknown message \".concat(type));\n  }\n}","map":{"version":3,"sources":["../../../../src/lib/worker-api/process-on-worker.ts"],"names":["WorkerFarm","worker","options","context","name","getWorkerName","url","getWorkerURL","workerFarm","workerPool","jobName","job","onMessage","transferableOptions","removeNontransferableOptions","input","result","payload","error","message","console"],"mappings":"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","sourcesContent":["import type {\n  WorkerObject,\n  WorkerOptions,\n  WorkerContext,\n  WorkerMessageType,\n  WorkerMessagePayload\n} from '../../types';\nimport type WorkerJob from '../worker-farm/worker-job';\nimport WorkerFarm from '../worker-farm/worker-farm';\nimport {removeNontransferableOptions} from '../worker-utils/remove-nontransferable-options';\nimport {getWorkerURL, getWorkerName} from './get-worker-url';\n\ntype ProcessOnWorkerOptions = WorkerOptions & {\n  jobName?: string;\n  [key: string]: any;\n};\n\n/**\n * Determines if we can parse with worker\n * @param loader\n * @param data\n * @param options\n */\nexport function canProcessOnWorker(worker: WorkerObject, options?: WorkerOptions) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  return worker.worker && options?.worker;\n}\n\n/**\n * This function expects that the worker thread sends certain messages,\n * Creating such a worker can be automated if the worker is wrapper by a call to\n * createWorker in @loaders.gl/worker-utils.\n */\nexport async function processOnWorker(\n  worker: WorkerObject,\n  data: any,\n  options: ProcessOnWorkerOptions = {},\n  context: WorkerContext = {}\n): Promise<any> {\n  const name = getWorkerName(worker);\n  const url = getWorkerURL(worker, options);\n\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const workerPool = workerFarm.getWorkerPool({name, url});\n\n  const jobName = options.jobName || worker.name;\n  const job = await workerPool.startJob(\n    jobName,\n    // eslint-disable-next-line\n    onMessage.bind(null, context)\n  );\n\n  // Kick off the processing in the worker\n  const transferableOptions = removeNontransferableOptions(options);\n  job.postMessage('process', {input: data, options: transferableOptions});\n\n  const result = await job.result;\n  return result.result;\n}\n\n/**\n * Job completes when we receive the result\n * @param job\n * @param message\n */\nasync function onMessage(\n  context: WorkerContext,\n  job: WorkerJob,\n  type: WorkerMessageType,\n  payload: WorkerMessagePayload\n) {\n  switch (type) {\n    case 'done':\n      // Worker is done\n      job.done(payload);\n      break;\n\n    case 'error':\n      // Worker encountered an error\n      job.error(payload.error);\n      break;\n\n    case 'process':\n      // Worker is asking for us (main thread) to process something\n      const {id, input, options} = payload;\n      try {\n        if (!context.process) {\n          job.postMessage('error', {id, error: 'Worker not set up to process on main thread'});\n          return;\n        }\n        const result = await context.process(input, options);\n        job.postMessage('done', {id, result});\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {id, error: message});\n      }\n      break;\n\n    default:\n      // eslint-disable-next-line\n      console.warn(`process-on-worker: unknown message ${type}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}