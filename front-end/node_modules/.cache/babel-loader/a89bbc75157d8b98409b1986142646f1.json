{"ast":null,"code":"import Matrix4 from './matrix4';\nimport Vector3 from './vector3';\nimport Euler from './euler';\nexport default class Pose {\n  constructor() {\n    let {\n      x = 0,\n      y = 0,\n      z = 0,\n      roll = 0,\n      pitch = 0,\n      yaw = 0,\n      position = undefined,\n      orientation = undefined\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (Array.isArray(position) && position.length === 3) {\n      this.position = new Vector3(position);\n    } else {\n      this.position = new Vector3(x, y, z);\n    }\n\n    if (Array.isArray(orientation) && orientation.length === 4) {\n      this.orientation = new Euler(orientation, orientation[3]);\n    } else {\n      this.orientation = new Euler(roll, pitch, yaw, Euler.RollPitchYaw);\n    }\n  }\n\n  get x() {\n    return this.position.x;\n  }\n\n  set x(value) {\n    this.position.x = value;\n  }\n\n  get y() {\n    return this.position.y;\n  }\n\n  set y(value) {\n    this.position.y = value;\n  }\n\n  get z() {\n    return this.position.z;\n  }\n\n  set z(value) {\n    this.position.z = value;\n  }\n\n  get roll() {\n    return this.orientation.roll;\n  }\n\n  set roll(value) {\n    this.orientation.roll = value;\n  }\n\n  get pitch() {\n    return this.orientation.pitch;\n  }\n\n  set pitch(value) {\n    this.orientation.pitch = value;\n  }\n\n  get yaw() {\n    return this.orientation.yaw;\n  }\n\n  set yaw(value) {\n    this.orientation.yaw = value;\n  }\n\n  getPosition() {\n    return this.position;\n  }\n\n  getOrientation() {\n    return this.orientation;\n  }\n\n  equals(pose) {\n    if (!pose) {\n      return false;\n    }\n\n    return this.position.equals(pose.position) && this.orientation.equals(pose.orientation);\n  }\n\n  exactEquals(pose) {\n    if (!pose) {\n      return false;\n    }\n\n    return this.position.exactEquals(pose.position) && this.orientation.exactEquals(pose.orientation);\n  }\n\n  getTransformationMatrix() {\n    const sr = Math.sin(this.roll);\n    const sp = Math.sin(this.pitch);\n    const sw = Math.sin(this.yaw);\n    const cr = Math.cos(this.roll);\n    const cp = Math.cos(this.pitch);\n    const cw = Math.cos(this.yaw);\n    const matrix = new Matrix4().setRowMajor(cw * cp, -sw * cr + cw * sp * sr, sw * sr + cw * sp * cr, this.x, sw * cp, cw * cr + sw * sp * sr, -cw * sr + sw * sp * cr, this.y, -sp, cp * sr, cp * cr, this.z, 0, 0, 0, 1);\n    return matrix;\n  }\n\n  getTransformationMatrixFromPose(pose) {\n    return new Matrix4().multiplyRight(this.getTransformationMatrix()).multiplyRight(pose.getTransformationMatrix().invert());\n  }\n\n  getTransformationMatrixToPose(pose) {\n    return new Matrix4().multiplyRight(pose.getTransformationMatrix()).multiplyRight(this.getTransformationMatrix().invert());\n  }\n\n}","map":{"version":3,"sources":["../../../src/classes/pose.js"],"names":["constructor","x","y","z","roll","pitch","yaw","position","orientation","undefined","Array","Euler","getPosition","getOrientation","equals","pose","exactEquals","getTransformationMatrix","sr","Math","sp","sw","cr","cp","cw","matrix","getTransformationMatrixFromPose","getTransformationMatrixToPose"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Matrix4 from './matrix4';\nimport Vector3 from './vector3';\nimport Euler from './euler';\n\nexport default class Pose {\n  // @ts-ignore TS2740: Type '{}' is missing the following properties from type\n  constructor({\n    x = 0,\n    y = 0,\n    z = 0,\n    roll = 0,\n    pitch = 0,\n    yaw = 0,\n    position = undefined,\n    orientation = undefined\n  } = {}) {\n    if (Array.isArray(position) && position.length === 3) {\n      this.position = new Vector3(position);\n    } else {\n      this.position = new Vector3(x, y, z);\n    }\n    if (Array.isArray(orientation) && orientation.length === 4) {\n      this.orientation = new Euler(orientation, orientation[3]);\n    } else {\n      this.orientation = new Euler(roll, pitch, yaw, Euler.RollPitchYaw);\n    }\n  }\n\n  get x() {\n    return this.position.x;\n  }\n  set x(value) {\n    this.position.x = value;\n  }\n  get y() {\n    return this.position.y;\n  }\n  set y(value) {\n    this.position.y = value;\n  }\n  get z() {\n    return this.position.z;\n  }\n  set z(value) {\n    this.position.z = value;\n  }\n  get roll() {\n    return this.orientation.roll;\n  }\n  set roll(value) {\n    this.orientation.roll = value;\n  }\n  get pitch() {\n    return this.orientation.pitch;\n  }\n  set pitch(value) {\n    this.orientation.pitch = value;\n  }\n  get yaw() {\n    return this.orientation.yaw;\n  }\n  set yaw(value) {\n    this.orientation.yaw = value;\n  }\n\n  getPosition() {\n    return this.position;\n  }\n\n  getOrientation() {\n    return this.orientation;\n  }\n\n  equals(pose) {\n    if (!pose) {\n      return false;\n    }\n    return this.position.equals(pose.position) && this.orientation.equals(pose.orientation);\n  }\n\n  exactEquals(pose) {\n    if (!pose) {\n      return false;\n    }\n    return (\n      this.position.exactEquals(pose.position) && this.orientation.exactEquals(pose.orientation)\n    );\n  }\n\n  getTransformationMatrix() {\n    // setup precomputations for the sin/cos of the angles\n    const sr = Math.sin(this.roll);\n    const sp = Math.sin(this.pitch);\n    const sw = Math.sin(this.yaw);\n\n    const cr = Math.cos(this.roll);\n    const cp = Math.cos(this.pitch);\n    const cw = Math.cos(this.yaw);\n\n    const matrix = new Matrix4().setRowMajor(\n      cw * cp, // 0,0\n      -sw * cr + cw * sp * sr, // 0,1\n      sw * sr + cw * sp * cr, // 0,2\n      this.x, // 0,3\n\n      sw * cp, // 1,0\n      cw * cr + sw * sp * sr, // 1,1\n      -cw * sr + sw * sp * cr, // 1,2\n      this.y, // 1,3\n\n      -sp, // 2,0\n      cp * sr, // 2,1\n      cp * cr, // 2,2\n      this.z, // 2,3\n\n      0,\n      0,\n      0,\n      1\n    );\n\n    return matrix;\n  }\n\n  getTransformationMatrixFromPose(pose) {\n    return new Matrix4()\n      .multiplyRight(this.getTransformationMatrix())\n      .multiplyRight(pose.getTransformationMatrix().invert());\n  }\n\n  getTransformationMatrixToPose(pose) {\n    return new Matrix4()\n      .multiplyRight(pose.getTransformationMatrix())\n      .multiplyRight(this.getTransformationMatrix().invert());\n  }\n}\n"]},"metadata":{},"sourceType":"module"}