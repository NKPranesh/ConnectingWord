{"ast":null,"code":"function noop() {}\n\nconst DEFAULT_SETTINGS = {\n  onStart: noop,\n  onUpdate: noop,\n  onInterrupt: noop,\n  onEnd: noop\n};\nexport default class Transition {\n  constructor(timeline) {\n    this._inProgress = false;\n    this._handle = null;\n    this.timeline = timeline;\n    this.settings = {};\n  }\n\n  get inProgress() {\n    return this._inProgress;\n  }\n\n  start(props) {\n    this.cancel();\n    this.settings = { ...DEFAULT_SETTINGS,\n      ...props\n    };\n    this._inProgress = true;\n    this.settings.onStart(this);\n  }\n\n  end() {\n    if (this._inProgress) {\n      this.timeline.removeChannel(this._handle);\n      this._handle = null;\n      this._inProgress = false;\n      this.settings.onEnd(this);\n    }\n  }\n\n  cancel() {\n    if (this._inProgress) {\n      this.settings.onInterrupt(this);\n      this.timeline.removeChannel(this._handle);\n      this._handle = null;\n      this._inProgress = false;\n    }\n  }\n\n  update() {\n    if (!this._inProgress) {\n      return false;\n    }\n\n    if (this._handle === null) {\n      const {\n        timeline,\n        settings\n      } = this;\n      this._handle = timeline.addChannel({\n        delay: timeline.getTime(),\n        duration: settings.duration\n      });\n    }\n\n    this.time = this.timeline.getTime(this._handle);\n\n    this._onUpdate();\n\n    this.settings.onUpdate(this);\n\n    if (this.timeline.isFinished(this._handle)) {\n      this.end();\n    }\n\n    return true;\n  }\n\n  _onUpdate() {}\n\n}","map":{"version":3,"sources":["../../../src/transitions/transition.js"],"names":["DEFAULT_SETTINGS","onStart","onUpdate","onInterrupt","onEnd","noop","constructor","inProgress","start","props","end","cancel","update","settings","delay","timeline","duration","_onUpdate"],"mappings":"AAAA,SAAA,IAAA,GAAgB,CAAE;;AAElB,MAAMA,gBAAgB,GAAG;AACvBC,EAAAA,OAAO,EADgB,IAAA;AAEvBC,EAAAA,QAAQ,EAFe,IAAA;AAGvBC,EAAAA,WAAW,EAHY,IAAA;AAIvBC,EAAAA,KAAK,EAAEC;AAJgB,CAAzB;AAOA,eAAe,MAAA,UAAA,CAAiB;AAI9BC,EAAAA,WAAW,CAAA,QAAA,EAAW;AACpB,SAAA,WAAA,GAAA,KAAA;AACA,SAAA,OAAA,GAAA,IAAA;AACA,SAAA,QAAA,GAAA,QAAA;AAGA,SAAA,QAAA,GAAA,EAAA;AACD;;AAGD,MAAIC,UAAJ,GAAiB;AACf,WAAO,KAAP,WAAA;AACD;;AAMDC,EAAAA,KAAK,CAAA,KAAA,EAAQ;AACX,SAAA,MAAA;AACA,SAAA,QAAA,GAAgB,EAAC,GAAD,gBAAA;AAAsB,SAAGC;AAAzB,KAAhB;AACA,SAAA,WAAA,GAAA,IAAA;AACA,SAAA,QAAA,CAAA,OAAA,CAAA,IAAA;AACD;;AAKDC,EAAAA,GAAG,GAAG;AACJ,QAAI,KAAJ,WAAA,EAAsB;AACpB,WAAA,QAAA,CAAA,aAAA,CAA4B,KAA5B,OAAA;AACA,WAAA,OAAA,GAAA,IAAA;AACA,WAAA,WAAA,GAAA,KAAA;AACA,WAAA,QAAA,CAAA,KAAA,CAAA,IAAA;AACD;AACF;;AAKDC,EAAAA,MAAM,GAAG;AACP,QAAI,KAAJ,WAAA,EAAsB;AACpB,WAAA,QAAA,CAAA,WAAA,CAAA,IAAA;AACA,WAAA,QAAA,CAAA,aAAA,CAA4B,KAA5B,OAAA;AACA,WAAA,OAAA,GAAA,IAAA;AACA,WAAA,WAAA,GAAA,KAAA;AACD;AACF;;AAKDC,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAL,WAAA,EAAuB;AACrB,aAAA,KAAA;AACD;;AAMD,QAAI,KAAA,OAAA,KAAJ,IAAA,EAA2B;AACzB,YAAM;AAAA,QAAA,QAAA;AAAWC,QAAAA;AAAX,UAAN,IAAA;AACA,WAAA,OAAA,GAAe,QAAQ,CAAR,UAAA,CAAoB;AACjCC,QAAAA,KAAK,EAAEC,QAAQ,CADkB,OAC1BA,EAD0B;AAEjCC,QAAAA,QAAQ,EAAEH,QAAQ,CAACG;AAFc,OAApB,CAAf;AAID;;AAED,SAAA,IAAA,GAAY,KAAA,QAAA,CAAA,OAAA,CAAsB,KAAlC,OAAY,CAAZ;;AAEA,SAAA,SAAA;;AAEA,SAAA,QAAA,CAAA,QAAA,CAAA,IAAA;;AAIA,QAAI,KAAA,QAAA,CAAA,UAAA,CAAyB,KAA7B,OAAI,CAAJ,EAA4C;AAC1C,WAAA,GAAA;AACD;;AACD,WAAA,IAAA;AACD;;AAIDC,EAAAA,SAAS,GAAG,CAEX;;AA3F6B","sourcesContent":["function noop() {}\n\nconst DEFAULT_SETTINGS = {\n  onStart: noop,\n  onUpdate: noop,\n  onInterrupt: noop,\n  onEnd: noop\n};\n\nexport default class Transition {\n  /**\n   * @params timeline {Timeline}\n   */\n  constructor(timeline) {\n    this._inProgress = false;\n    this._handle = null;\n    this.timeline = timeline;\n\n    // Defaults\n    this.settings = {};\n  }\n\n  /* Public API */\n  get inProgress() {\n    return this._inProgress;\n  }\n\n  /**\n   * (re)start this transition.\n   * @params props {object} - optional overriding props. see constructor\n   */\n  start(props) {\n    this.cancel();\n    this.settings = {...DEFAULT_SETTINGS, ...props};\n    this._inProgress = true;\n    this.settings.onStart(this);\n  }\n\n  /**\n   * end this transition if it is in progress.\n   */\n  end() {\n    if (this._inProgress) {\n      this.timeline.removeChannel(this._handle);\n      this._handle = null;\n      this._inProgress = false;\n      this.settings.onEnd(this);\n    }\n  }\n\n  /**\n   * cancel this transition if it is in progress.\n   */\n  cancel() {\n    if (this._inProgress) {\n      this.settings.onInterrupt(this);\n      this.timeline.removeChannel(this._handle);\n      this._handle = null;\n      this._inProgress = false;\n    }\n  }\n\n  /**\n   * update this transition. Returns `true` if updated.\n   */\n  update() {\n    if (!this._inProgress) {\n      return false;\n    }\n\n    // It is important to initialize the handle during `update` instead of `start`.\n    // The CPU time that the `start` frame takes should not be counted towards the duration.\n    // On the other hand, `update` always happens during a render cycle. The clock starts when the\n    // transition is rendered for the first time.\n    if (this._handle === null) {\n      const {timeline, settings} = this;\n      this._handle = timeline.addChannel({\n        delay: timeline.getTime(),\n        duration: settings.duration\n      });\n    }\n\n    this.time = this.timeline.getTime(this._handle);\n    // Call subclass method\n    this._onUpdate();\n    // Call user callback\n    this.settings.onUpdate(this);\n\n    // This only works if `settings.duration` is set\n    // Spring transition must call `end` manually\n    if (this.timeline.isFinished(this._handle)) {\n      this.end();\n    }\n    return true;\n  }\n\n  /* Private API */\n\n  _onUpdate() {\n    // for subclass override\n  }\n}\n"]},"metadata":{},"sourceType":"module"}