{"ast":null,"code":"import { DracoLoader } from '@loaders.gl/draco';\nimport { GL } from '@loaders.gl/math';\nimport { Vector3 } from '@math.gl/core';\nimport Tile3DFeatureTable from '../classes/tile-3d-feature-table';\nimport Tile3DBatchTable from '../classes/tile-3d-batch-table';\nimport { parse3DTileHeaderSync } from './helpers/parse-3d-tile-header';\nimport { parse3DTileTablesHeaderSync, parse3DTileTablesSync } from './helpers/parse-3d-tile-tables';\nimport { normalize3DTileColorAttribute } from './helpers/normalize-3d-tile-colors';\nimport { normalize3DTileNormalAttribute } from './helpers/normalize-3d-tile-normals';\nimport { normalize3DTilePositionAttribute } from './helpers/normalize-3d-tile-positions';\nexport async function parsePointCloud3DTile(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n  byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset);\n  byteOffset = parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options);\n  initializeTile(tile);\n  const {\n    featureTable,\n    batchTable\n  } = parsePointCloudTables(tile);\n  await parseDraco(tile, featureTable, batchTable, options, context);\n  parsePositions(tile, featureTable, options);\n  parseColors(tile, featureTable, batchTable);\n  parseNormals(tile, featureTable);\n  return byteOffset;\n}\n\nfunction initializeTile(tile) {\n  tile.attributes = {\n    positions: null,\n    colors: null,\n    normals: null,\n    batchIds: null\n  };\n  tile.isQuantized = false;\n  tile.isTranslucent = false;\n  tile.isRGB565 = false;\n  tile.isOctEncoded16P = false;\n}\n\nfunction parsePointCloudTables(tile) {\n  const featureTable = new Tile3DFeatureTable(tile.featureTableJson, tile.featureTableBinary);\n  const pointsLength = featureTable.getGlobalProperty('POINTS_LENGTH');\n\n  if (!Number.isFinite(pointsLength)) {\n    throw new Error('POINTS_LENGTH must be defined');\n  }\n\n  featureTable.featuresLength = pointsLength;\n  tile.featuresLength = pointsLength;\n  tile.pointsLength = pointsLength;\n  tile.pointCount = pointsLength;\n  tile.rtcCenter = featureTable.getGlobalProperty('RTC_CENTER', GL.FLOAT, 3);\n  const batchTable = parseBatchIds(tile, featureTable);\n  return {\n    featureTable,\n    batchTable\n  };\n}\n\nfunction parsePositions(tile, featureTable, options) {\n  if (!tile.attributes.positions) {\n    if (featureTable.hasProperty('POSITION')) {\n      tile.attributes.positions = featureTable.getPropertyArray('POSITION', GL.FLOAT, 3);\n    } else if (featureTable.hasProperty('POSITION_QUANTIZED')) {\n      const positions = featureTable.getPropertyArray('POSITION_QUANTIZED', GL.UNSIGNED_SHORT, 3);\n      tile.isQuantized = true;\n      tile.quantizedRange = (1 << 16) - 1;\n      tile.quantizedVolumeScale = featureTable.getGlobalProperty('QUANTIZED_VOLUME_SCALE', GL.FLOAT, 3);\n\n      if (!tile.quantizedVolumeScale) {\n        throw new Error('QUANTIZED_VOLUME_SCALE must be defined for quantized positions.');\n      }\n\n      tile.quantizedVolumeOffset = featureTable.getGlobalProperty('QUANTIZED_VOLUME_OFFSET', GL.FLOAT, 3);\n\n      if (!tile.quantizedVolumeOffset) {\n        throw new Error('QUANTIZED_VOLUME_OFFSET must be defined for quantized positions.');\n      }\n\n      tile.attributes.positions = normalize3DTilePositionAttribute(tile, positions, options);\n    }\n  }\n\n  if (!tile.attributes.positions) {\n    throw new Error('Either POSITION or POSITION_QUANTIZED must be defined.');\n  }\n}\n\nfunction parseColors(tile, featureTable, batchTable) {\n  if (!tile.attributes.colors) {\n    let colors = null;\n\n    if (featureTable.hasProperty('RGBA')) {\n      colors = featureTable.getPropertyArray('RGBA', GL.UNSIGNED_BYTE, 4);\n      tile.isTranslucent = true;\n    } else if (featureTable.hasProperty('RGB')) {\n      colors = featureTable.getPropertyArray('RGB', GL.UNSIGNED_BYTE, 3);\n    } else if (featureTable.hasProperty('RGB565')) {\n      colors = featureTable.getPropertyArray('RGB565', GL.UNSIGNED_SHORT, 1);\n      tile.isRGB565 = true;\n    }\n\n    tile.attributes.colors = normalize3DTileColorAttribute(tile, colors, batchTable);\n  }\n\n  if (featureTable.hasProperty('CONSTANT_RGBA')) {\n    tile.constantRGBA = featureTable.getGlobalProperty('CONSTANT_RGBA', GL.UNSIGNED_BYTE, 4);\n  }\n}\n\nfunction parseNormals(tile, featureTable) {\n  if (!tile.attributes.normals) {\n    let normals = null;\n\n    if (featureTable.hasProperty('NORMAL')) {\n      normals = featureTable.getPropertyArray('NORMAL', GL.FLOAT, 3);\n    } else if (featureTable.hasProperty('NORMAL_OCT16P')) {\n      normals = featureTable.getPropertyArray('NORMAL_OCT16P', GL.UNSIGNED_BYTE, 2);\n      tile.isOctEncoded16P = true;\n    }\n\n    tile.attributes.normals = normalize3DTileNormalAttribute(tile, normals);\n  }\n}\n\nfunction parseBatchIds(tile, featureTable) {\n  let batchTable = null;\n\n  if (!tile.batchIds && featureTable.hasProperty('BATCH_ID')) {\n    tile.batchIds = featureTable.getPropertyArray('BATCH_ID', GL.UNSIGNED_SHORT, 1);\n\n    if (tile.batchIds) {\n      const batchFeatureLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n\n      if (!batchFeatureLength) {\n        throw new Error('Global property: BATCH_LENGTH must be defined when BATCH_ID is defined.');\n      }\n\n      const {\n        batchTableJson,\n        batchTableBinary\n      } = tile;\n      batchTable = new Tile3DBatchTable(batchTableJson, batchTableBinary, batchFeatureLength);\n    }\n  }\n\n  return batchTable;\n}\n\nasync function parseDraco(tile, featureTable, batchTable, options, context) {\n  let dracoBuffer;\n  let dracoFeatureTableProperties;\n  let dracoBatchTableProperties;\n  const batchTableDraco = tile.batchTableJson && tile.batchTableJson.extensions && tile.batchTableJson.extensions['3DTILES_draco_point_compression'];\n\n  if (batchTableDraco) {\n    dracoBatchTableProperties = batchTableDraco.properties;\n  }\n\n  const featureTableDraco = featureTable.getExtension('3DTILES_draco_point_compression');\n\n  if (featureTableDraco) {\n    dracoFeatureTableProperties = featureTableDraco.properties;\n    const dracoByteOffset = featureTableDraco.byteOffset;\n    const dracoByteLength = featureTableDraco.byteLength;\n\n    if (!dracoFeatureTableProperties || !Number.isFinite(dracoByteOffset) || !dracoByteLength) {\n      throw new Error('Draco properties, byteOffset, and byteLength must be defined');\n    }\n\n    dracoBuffer = tile.featureTableBinary.slice(dracoByteOffset, dracoByteOffset + dracoByteLength);\n    tile.hasPositions = Number.isFinite(dracoFeatureTableProperties.POSITION);\n    tile.hasColors = Number.isFinite(dracoFeatureTableProperties.RGB) || Number.isFinite(dracoFeatureTableProperties.RGBA);\n    tile.hasNormals = Number.isFinite(dracoFeatureTableProperties.NORMAL);\n    tile.hasBatchIds = Number.isFinite(dracoFeatureTableProperties.BATCH_ID);\n    tile.isTranslucent = Number.isFinite(dracoFeatureTableProperties.RGBA);\n  }\n\n  if (!dracoBuffer) {\n    return true;\n  }\n\n  const dracoData = {\n    buffer: dracoBuffer,\n    properties: { ...dracoFeatureTableProperties,\n      ...dracoBatchTableProperties\n    },\n    featureTableProperties: dracoFeatureTableProperties,\n    batchTableProperties: dracoBatchTableProperties,\n    dequantizeInShader: false\n  };\n  return await loadDraco(tile, dracoData, options, context);\n}\n\nexport async function loadDraco(tile, dracoData, options, context) {\n  const {\n    parse\n  } = context;\n  const dracoOptions = { ...options,\n    draco: { ...options.draco,\n      extraAttributes: dracoData.batchTableProperties || {}\n    }\n  };\n  delete dracoOptions['3d-tiles'];\n  const data = await parse(dracoData.buffer, DracoLoader, dracoOptions);\n  const decodedPositions = data.attributes.POSITION && data.attributes.POSITION.value;\n  const decodedColors = data.attributes.COLOR_0 && data.attributes.COLOR_0.value;\n  const decodedNormals = data.attributes.NORMAL && data.attributes.NORMAL.value;\n  const decodedBatchIds = data.attributes.BATCH_ID && data.attributes.BATCH_ID.value;\n  const isQuantizedDraco = decodedPositions && data.attributes.POSITION.value.quantization;\n  const isOctEncodedDraco = decodedNormals && data.attributes.NORMAL.value.quantization;\n\n  if (isQuantizedDraco) {\n    const quantization = data.POSITION.data.quantization;\n    const range = quantization.range;\n    tile.quantizedVolumeScale = new Vector3(range, range, range);\n    tile.quantizedVolumeOffset = new Vector3(quantization.minValues);\n    tile.quantizedRange = (1 << quantization.quantizationBits) - 1.0;\n    tile.isQuantizedDraco = true;\n  }\n\n  if (isOctEncodedDraco) {\n    tile.octEncodedRange = (1 << data.NORMAL.data.quantization.quantizationBits) - 1.0;\n    tile.isOctEncodedDraco = true;\n  }\n\n  const batchTableAttributes = {};\n\n  if (dracoData.batchTableProperties) {\n    for (const attributeName of Object.keys(dracoData.batchTableProperties)) {\n      if (data.attributes[attributeName] && data.attributes[attributeName].value) {\n        batchTableAttributes[attributeName.toLowerCase()] = data.attributes[attributeName].value;\n      }\n    }\n  }\n\n  tile.attributes = {\n    positions: decodedPositions,\n    colors: normalize3DTileColorAttribute(tile, decodedColors),\n    normals: decodedNormals,\n    batchIds: decodedBatchIds,\n    ...batchTableAttributes\n  };\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-3d-tile-point-cloud.js"],"names":["byteOffset","parse3DTileHeaderSync","parse3DTileTablesHeaderSync","parse3DTileTablesSync","initializeTile","batchTable","parsePointCloudTables","parseDraco","parsePositions","parseColors","parseNormals","tile","positions","colors","normals","batchIds","featureTable","pointsLength","Number","GL","parseBatchIds","normalize3DTilePositionAttribute","normalize3DTileColorAttribute","normalize3DTileNormalAttribute","batchFeatureLength","batchTableBinary","batchTableDraco","dracoBatchTableProperties","featureTableDraco","dracoFeatureTableProperties","dracoByteOffset","dracoByteLength","dracoBuffer","dracoData","buffer","properties","featureTableProperties","batchTableProperties","dequantizeInShader","loadDraco","parse","dracoOptions","draco","options","extraAttributes","data","decodedPositions","decodedColors","decodedNormals","decodedBatchIds","isQuantizedDraco","isOctEncodedDraco","quantization","range","batchTableAttributes","Object","attributeName"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {DracoLoader} from '@loaders.gl/draco';\nimport {GL} from '@loaders.gl/math';\nimport {Vector3} from '@math.gl/core';\n\nimport Tile3DFeatureTable from '../classes/tile-3d-feature-table';\nimport Tile3DBatchTable from '../classes/tile-3d-batch-table';\nimport {parse3DTileHeaderSync} from './helpers/parse-3d-tile-header';\nimport {parse3DTileTablesHeaderSync, parse3DTileTablesSync} from './helpers/parse-3d-tile-tables';\nimport {normalize3DTileColorAttribute} from './helpers/normalize-3d-tile-colors';\nimport {normalize3DTileNormalAttribute} from './helpers/normalize-3d-tile-normals';\nimport {normalize3DTilePositionAttribute} from './helpers/normalize-3d-tile-positions';\n\nexport async function parsePointCloud3DTile(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n  byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset);\n  byteOffset = parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options);\n  initializeTile(tile);\n\n  const {featureTable, batchTable} = parsePointCloudTables(tile);\n\n  await parseDraco(tile, featureTable, batchTable, options, context);\n\n  parsePositions(tile, featureTable, options);\n  parseColors(tile, featureTable, batchTable);\n  parseNormals(tile, featureTable);\n\n  return byteOffset;\n}\n\nfunction initializeTile(tile) {\n  // Initialize point cloud tile defaults\n  tile.attributes = {\n    positions: null,\n    colors: null,\n    normals: null,\n    batchIds: null\n  };\n  tile.isQuantized = false;\n  tile.isTranslucent = false;\n  tile.isRGB565 = false;\n  tile.isOctEncoded16P = false;\n}\n\nfunction parsePointCloudTables(tile) {\n  const featureTable = new Tile3DFeatureTable(tile.featureTableJson, tile.featureTableBinary);\n\n  const pointsLength = featureTable.getGlobalProperty('POINTS_LENGTH');\n  if (!Number.isFinite(pointsLength)) {\n    throw new Error('POINTS_LENGTH must be defined');\n  }\n  featureTable.featuresLength = pointsLength;\n\n  tile.featuresLength = pointsLength;\n  tile.pointsLength = pointsLength;\n  tile.pointCount = pointsLength;\n\n  tile.rtcCenter = featureTable.getGlobalProperty('RTC_CENTER', GL.FLOAT, 3);\n\n  const batchTable = parseBatchIds(tile, featureTable);\n\n  return {featureTable, batchTable};\n}\n\nfunction parsePositions(tile, featureTable, options) {\n  if (!tile.attributes.positions) {\n    if (featureTable.hasProperty('POSITION')) {\n      tile.attributes.positions = featureTable.getPropertyArray('POSITION', GL.FLOAT, 3);\n    } else if (featureTable.hasProperty('POSITION_QUANTIZED')) {\n      const positions = featureTable.getPropertyArray('POSITION_QUANTIZED', GL.UNSIGNED_SHORT, 3);\n\n      tile.isQuantized = true;\n      tile.quantizedRange = (1 << 16) - 1;\n\n      tile.quantizedVolumeScale = featureTable.getGlobalProperty(\n        'QUANTIZED_VOLUME_SCALE',\n        GL.FLOAT,\n        3\n      );\n      if (!tile.quantizedVolumeScale) {\n        throw new Error('QUANTIZED_VOLUME_SCALE must be defined for quantized positions.');\n      }\n\n      tile.quantizedVolumeOffset = featureTable.getGlobalProperty(\n        'QUANTIZED_VOLUME_OFFSET',\n        GL.FLOAT,\n        3\n      );\n      if (!tile.quantizedVolumeOffset) {\n        throw new Error('QUANTIZED_VOLUME_OFFSET must be defined for quantized positions.');\n      }\n\n      tile.attributes.positions = normalize3DTilePositionAttribute(tile, positions, options);\n    }\n  }\n\n  if (!tile.attributes.positions) {\n    throw new Error('Either POSITION or POSITION_QUANTIZED must be defined.');\n  }\n}\n\nfunction parseColors(tile, featureTable, batchTable) {\n  if (!tile.attributes.colors) {\n    let colors = null;\n    if (featureTable.hasProperty('RGBA')) {\n      colors = featureTable.getPropertyArray('RGBA', GL.UNSIGNED_BYTE, 4);\n      tile.isTranslucent = true;\n    } else if (featureTable.hasProperty('RGB')) {\n      colors = featureTable.getPropertyArray('RGB', GL.UNSIGNED_BYTE, 3);\n    } else if (featureTable.hasProperty('RGB565')) {\n      colors = featureTable.getPropertyArray('RGB565', GL.UNSIGNED_SHORT, 1);\n      tile.isRGB565 = true;\n    }\n\n    tile.attributes.colors = normalize3DTileColorAttribute(tile, colors, batchTable);\n  }\n\n  if (featureTable.hasProperty('CONSTANT_RGBA')) {\n    tile.constantRGBA = featureTable.getGlobalProperty('CONSTANT_RGBA', GL.UNSIGNED_BYTE, 4);\n  }\n}\n\nfunction parseNormals(tile, featureTable) {\n  if (!tile.attributes.normals) {\n    let normals = null;\n    if (featureTable.hasProperty('NORMAL')) {\n      normals = featureTable.getPropertyArray('NORMAL', GL.FLOAT, 3);\n    } else if (featureTable.hasProperty('NORMAL_OCT16P')) {\n      normals = featureTable.getPropertyArray('NORMAL_OCT16P', GL.UNSIGNED_BYTE, 2);\n      tile.isOctEncoded16P = true;\n    }\n\n    tile.attributes.normals = normalize3DTileNormalAttribute(tile, normals);\n  }\n}\n\nfunction parseBatchIds(tile, featureTable) {\n  let batchTable = null;\n  if (!tile.batchIds && featureTable.hasProperty('BATCH_ID')) {\n    tile.batchIds = featureTable.getPropertyArray('BATCH_ID', GL.UNSIGNED_SHORT, 1);\n\n    if (tile.batchIds) {\n      const batchFeatureLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n      if (!batchFeatureLength) {\n        throw new Error('Global property: BATCH_LENGTH must be defined when BATCH_ID is defined.');\n      }\n      const {batchTableJson, batchTableBinary} = tile;\n      batchTable = new Tile3DBatchTable(batchTableJson, batchTableBinary, batchFeatureLength);\n    }\n  }\n  return batchTable;\n}\n\n// eslint-disable-next-line complexity\nasync function parseDraco(tile, featureTable, batchTable, options, context) {\n  let dracoBuffer;\n  let dracoFeatureTableProperties;\n  let dracoBatchTableProperties;\n  const batchTableDraco =\n    tile.batchTableJson &&\n    tile.batchTableJson.extensions &&\n    tile.batchTableJson.extensions['3DTILES_draco_point_compression'];\n  if (batchTableDraco) {\n    dracoBatchTableProperties = batchTableDraco.properties;\n  }\n\n  const featureTableDraco = featureTable.getExtension('3DTILES_draco_point_compression');\n  if (featureTableDraco) {\n    dracoFeatureTableProperties = featureTableDraco.properties;\n    const dracoByteOffset = featureTableDraco.byteOffset;\n    const dracoByteLength = featureTableDraco.byteLength;\n    if (!dracoFeatureTableProperties || !Number.isFinite(dracoByteOffset) || !dracoByteLength) {\n      throw new Error('Draco properties, byteOffset, and byteLength must be defined');\n    }\n\n    dracoBuffer = tile.featureTableBinary.slice(dracoByteOffset, dracoByteOffset + dracoByteLength);\n\n    tile.hasPositions = Number.isFinite(dracoFeatureTableProperties.POSITION);\n    tile.hasColors =\n      Number.isFinite(dracoFeatureTableProperties.RGB) ||\n      Number.isFinite(dracoFeatureTableProperties.RGBA);\n    tile.hasNormals = Number.isFinite(dracoFeatureTableProperties.NORMAL);\n    tile.hasBatchIds = Number.isFinite(dracoFeatureTableProperties.BATCH_ID);\n    tile.isTranslucent = Number.isFinite(dracoFeatureTableProperties.RGBA);\n  }\n\n  if (!dracoBuffer) {\n    return true;\n  }\n\n  const dracoData = {\n    buffer: dracoBuffer,\n    properties: {...dracoFeatureTableProperties, ...dracoBatchTableProperties},\n    featureTableProperties: dracoFeatureTableProperties,\n    batchTableProperties: dracoBatchTableProperties,\n    dequantizeInShader: false\n  };\n\n  return await loadDraco(tile, dracoData, options, context);\n}\n\n// eslint-disable-next-line complexity, max-statements\nexport async function loadDraco(tile, dracoData, options, context) {\n  const {parse} = context;\n  const dracoOptions = {\n    ...options,\n    draco: {\n      ...options.draco,\n      extraAttributes: dracoData.batchTableProperties || {}\n    }\n  };\n\n  // The entire tileset might be included, too expensive to serialize\n  delete dracoOptions['3d-tiles'];\n\n  const data = await parse(dracoData.buffer, DracoLoader, dracoOptions);\n\n  const decodedPositions = data.attributes.POSITION && data.attributes.POSITION.value;\n  const decodedColors = data.attributes.COLOR_0 && data.attributes.COLOR_0.value;\n  const decodedNormals = data.attributes.NORMAL && data.attributes.NORMAL.value;\n  const decodedBatchIds = data.attributes.BATCH_ID && data.attributes.BATCH_ID.value;\n  const isQuantizedDraco = decodedPositions && data.attributes.POSITION.value.quantization;\n  const isOctEncodedDraco = decodedNormals && data.attributes.NORMAL.value.quantization;\n  if (isQuantizedDraco) {\n    // Draco quantization range == quantized volume scale - size in meters of the quantized volume\n    // Internal quantized range is the range of values of the quantized data, e.g. 255 for 8-bit, 1023 for 10-bit, etc\n    const quantization = data.POSITION.data.quantization;\n    const range = quantization.range;\n    tile.quantizedVolumeScale = new Vector3(range, range, range);\n    tile.quantizedVolumeOffset = new Vector3(quantization.minValues);\n    tile.quantizedRange = (1 << quantization.quantizationBits) - 1.0;\n    tile.isQuantizedDraco = true;\n  }\n  if (isOctEncodedDraco) {\n    tile.octEncodedRange = (1 << data.NORMAL.data.quantization.quantizationBits) - 1.0;\n    tile.isOctEncodedDraco = true;\n  }\n\n  // Extra batch table attributes\n  const batchTableAttributes = {};\n  if (dracoData.batchTableProperties) {\n    for (const attributeName of Object.keys(dracoData.batchTableProperties)) {\n      if (data.attributes[attributeName] && data.attributes[attributeName].value) {\n        batchTableAttributes[attributeName.toLowerCase()] = data.attributes[attributeName].value;\n      }\n    }\n  }\n\n  tile.attributes = {\n    positions: decodedPositions,\n    colors: normalize3DTileColorAttribute(tile, decodedColors),\n    normals: decodedNormals,\n    batchIds: decodedBatchIds,\n    ...batchTableAttributes\n  };\n}\n\n// TODO - this is the remaining code from Cesium's parser\n/*\n  const batchTable = new Tile3DBatchTable(tile);\n\n  // parseDracoBuffer(tile, featureTable, batchTable);\n\n  if (!tile.attributes.positions) {\n    throw new Error('Either POSITION or POSITION_QUANTIZED must be defined.');\n  }\n}\n/*\n\n  if (!tile.attributes.positions) {\n    if (featureTable.hasProperty('POSITION')) {\n      tile.attributes.positions = featureTable.getPropertyArray('POSITION', GL.FLOAT, 3);\n    } else if (featureTable.hasProperty('POSITION_QUANTIZED')) {\n      tile.attributes.positions = featureTable.getPropertyArray('POSITION_QUANTIZED', GL.UNSIGNED_SHORT, 3);\n\n\n  if (!tile.colors) {\n    if (featureTable.hasProperty('RGBA')) {\n      tile.colors = featureTable.getPropertyArray('RGBA', GL.UNSIGNED_BYTE, 4);\n      tile.isTranslucent = true;\n    } else if (featureTable.hasProperty('RGB')) {\n      tile.colors = featureTable.getPropertyArray('RGB', GL.UNSIGNED_BYTE, 3);\n    } else if (featureTable.hasPropertry('RGB565')) {\n      tile.colors = featureTable.getPropertyArray('RGB565', GL.UNSIGNED_SHORT, 1);\n      tile.isRGB565 = true;\n    }\n  }\n\n  if (!tile.attributes.normals) {\n    if (featureTable.getPropertry('NORMAL')) {\n      tile.attributes.normals = featureTable.getPropertyArray('NORMAL', GL.FLOAT, 3);\n    } else if (featureTable.getProperty('NORMAL_OCT16P')) {\n      tile.attributes.normals = featureTable.getPropertyArray('NORMAL_OCT16P', GL.UNSIGNED_BYTE, 2);\n      tile.isOctEncoded16P = true;\n    }\n  }\n\n  if (!tile.batchIds) {\n    if (featureTable.hasProperty('BATCH_ID')) {\n      tile.batchIds = featureTable.getPropertyArray('BATCH_ID', GL.UNSIGNED_SHORT, 1);\n    }\n  }\n\n  if (!tile.attributes.positions) {\n    throw new Error('Either POSITION or POSITION_QUANTIZED must be defined.');\n  }\n\n  if (featureTable.getPropertry('CONSTANT_RGBA')) {\n    tile.constantRGBA = featureTable.getGlobalProperty('CONSTANT_RGBA', GL.UNSIGNED_BYTE, 4);\n  }\n\n  if (tile.batchIds) {\n    const batchLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n    if (!defined(batchLength)) {\n      throw new Error('Global property: BATCH_LENGTH must be defined when BATCH_ID is defined.');\n    }\n\n    if (defined(batchTableBinary)) {\n      // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n      batchTableBinary = new Uint8Array(batchTableBinary);\n    }\n\n    if (defined(pointCloud._batchTableLoaded)) {\n      pointCloud._batchTableLoaded(batchLength, batchTableJson, batchTableBinary);\n    }\n  }\n\n  // If points are not batched and there are per-point properties, use these properties for styling purposes\n  var styleableProperties;\n  if (!hasBatchIds && defined(batchTableBinary)) {\n    tile.styleableProperties = Cesium3DTileBatchTable.getBinaryProperties(\n      pointsLength,\n      batchTableJson,\n      batchTableBinary\n    );\n  }\n\n  tile.draco = draco;\n}\n\n// Separate parsing and decoding of Draco\nexport function parseDracoBuffer(tile, featureTable, batchTable) {\n  let dracoBuffer;\n  let dracoFeatureTableProperties;\n  let dracoBatchTableProperties;\n\n  const batchTableDraco = batchTable.getExtension('3DTILES_draco_point_compression');\n  if (batchTableDraco) {\n    dracoBatchTableProperties = batchTableDraco.properties;\n  }\n\n  const featureTableDraco = featureTable.getExtension('3DTILES_draco_point_compression');\n  if (featureTableDraco) {\n    dracoFeatureTableProperties = featureTableDraco.properties;\n    const dracoByteOffset = featureTableDraco.byteOffset;\n    const dracoByteLength = featureTableDraco.byteLength;\n    if (!dracoFeatureTableProperties || !dracoByteOffset || !dracoByteLength) {\n      throw new Error('Draco properties, byteOffset, and byteLength must be defined');\n    }\n\n    dracoBuffer = arraySlice(\n      featureTableBinary,\n      dracoByteOffset,\n      dracoByteOffset + dracoByteLength\n    );\n    tile.hasPositions = dracoFeatureTableProperties.POSITION;\n    tile.hasColors = dracoFeatureTableProperties.RGB || dracoFeatureTableProperties.RGBA;\n    tile.hasNormals = dracoFeatureTableProperties.NORMAL;\n    tile.hasBatchIds = dracoFeatureTableProperties.BATCH_ID;\n    tile.isTranslucent = dracoFeatureTableProperties.RGBA;\n  }\n\n  if (dracoBuffer) {\n    tile.draco = {\n      buffer: dracoBuffer,\n      properties: {...dracoFeatureTableProperties, ...dracoBatchTableProperties},\n      featureTableProperties: dracoFeatureTableProperties,\n      batchTableProperties: dracoBatchTableProperties,\n      dequantizeInShader: false\n    };\n\n    tile.decodingState = DECODING_STATE.NEEDS_DECODE;\n  }\n}\n\n/*\nfunction decodeDraco(tile, context) {\n  if (tile.decodingState === DECODING_STATE.READY) {\n    return false;\n  }\n  if (tile.decodingState === DECODING_STATE.NEEDS_DECODE) {\n    var parsedContent = tile._parsedContent;\n    var draco = parsedContent.draco;\n    var decodePromise = DracoLoader.decodePointCloud(draco, context);\n    if (defined(decodePromise)) {\n      tile.decodingState = DECODING_STATE.DECODING;\n      decodePromise.then(function(result) {\n        tile.decodingState = DECODING_STATE.READY;\n        var decodedPositions = defined(result.POSITION) ? result.POSITION.array : undefined;\n        var decodedRgb = defined(result.RGB) ? result.RGB.array : undefined;\n        var decodedRgba = defined(result.RGBA) ? result.RGBA.array : undefined;\n        var decodedNormals = defined(result.NORMAL) ? result.NORMAL.array : undefined;\n        var decodedBatchIds = defined(result.BATCH_ID) ? result.BATCH_ID.array : undefined;\n        var isQuantizedDraco = defined(decodedPositions) && defined(result.POSITION.data.quantization);\n        var isOctEncodedDraco = defined(decodedNormals) && defined(result.NORMAL.data.quantization);\n        if (isQuantizedDraco) {\n          // Draco quantization range == quantized volume scale - size in meters of the quantized volume\n          // Internal quantized range is the range of values of the quantized data, e.g. 255 for 8-bit, 1023 for 10-bit, etc\n          var quantization = result.POSITION.data.quantization;\n          var range = quantization.range;\n          tile._quantizedVolumeScale = Cartesian3.fromElements(range, range, range);\n          tile._quantizedVolumeOffset = Cartesian3.unpack(quantization.minValues);\n          tile._quantizedRange = (1 << quantization.quantizationBits) - 1.0;\n          tile._isQuantizedDraco = true;\n        }\n        if (isOctEncodedDraco) {\n          tile._octEncodedRange = (1 << result.NORMAL.data.quantization.quantizationBits) - 1.0;\n          tile._isOctEncodedDraco = true;\n        }\n        var styleableProperties = parsedContent.styleableProperties;\n        var batchTableProperties = draco.batchTableProperties;\n        for (var name in batchTableProperties) {\n          if (batchTableProperties.hasOwnProperty(name)) {\n            var property = result[name];\n            if (!defined(styleableProperties)) {\n              styleableProperties = {};\n            }\n            styleableProperties[name] = {\n              typedArray : property.array,\n              componentCount : property.data.componentsPerAttribute\n            };\n          }\n        }\n        parsedContent.positions = defaultValue(decodedPositions, parsedContent.positions);\n        parsedContent.colors = defaultValue(defaultValue(decodedRgba, decodedRgb), parsedContent.colors);\n        parsedContent.normals = defaultValue(decodedNormals, parsedContent.normals);\n        parsedContent.batchIds = defaultValue(decodedBatchIds, parsedContent.batchIds);\n        parsedContent.styleableProperties = styleableProperties;\n      }).otherwise(function(error) {\n        tile.decodingState = DECODING_STATE.FAILED;\n        tile._readyPromise.reject(error);\n      });\n    }\n  }\n  return true;\n}\n*/\n"]},"metadata":{},"sourceType":"module"}