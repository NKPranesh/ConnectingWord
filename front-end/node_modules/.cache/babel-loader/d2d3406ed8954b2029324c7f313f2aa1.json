{"ast":null,"code":"import { assert } from '../utils/assert';\nconst GL_BYTE = 0x1400;\nconst GL_UNSIGNED_BYTE = 0x1401;\nconst GL_SHORT = 0x1402;\nconst GL_UNSIGNED_SHORT = 0x1403;\nconst GL_POINTS = 0x0;\nconst GL_LINES = 0x1;\nconst GL_LINE_LOOP = 0x2;\nconst GL_LINE_STRIP = 0x3;\nconst GL_TRIANGLES = 0x4;\nconst GL_TRIANGLE_STRIP = 0x5;\nconst GL_TRIANGLE_FAN = 0x6;\nconst GL_FLOAT = 0x1406;\nconst GL_FLOAT_VEC2 = 0x8b50;\nconst GL_FLOAT_VEC3 = 0x8b51;\nconst GL_FLOAT_VEC4 = 0x8b52;\nconst GL_INT = 0x1404;\nconst GL_INT_VEC2 = 0x8b53;\nconst GL_INT_VEC3 = 0x8b54;\nconst GL_INT_VEC4 = 0x8b55;\nconst GL_UNSIGNED_INT = 0x1405;\nconst GL_UNSIGNED_INT_VEC2 = 0x8dc6;\nconst GL_UNSIGNED_INT_VEC3 = 0x8dc7;\nconst GL_UNSIGNED_INT_VEC4 = 0x8dc8;\nconst GL_BOOL = 0x8b56;\nconst GL_BOOL_VEC2 = 0x8b57;\nconst GL_BOOL_VEC3 = 0x8b58;\nconst GL_BOOL_VEC4 = 0x8b59;\nconst GL_FLOAT_MAT2 = 0x8b5a;\nconst GL_FLOAT_MAT3 = 0x8b5b;\nconst GL_FLOAT_MAT4 = 0x8b5c;\nconst GL_FLOAT_MAT2x3 = 0x8b65;\nconst GL_FLOAT_MAT2x4 = 0x8b66;\nconst GL_FLOAT_MAT3x2 = 0x8b67;\nconst GL_FLOAT_MAT3x4 = 0x8b68;\nconst GL_FLOAT_MAT4x2 = 0x8b69;\nconst GL_FLOAT_MAT4x3 = 0x8b6a;\nconst COMPOSITE_GL_TYPES = {\n  [GL_FLOAT]: [GL_FLOAT, 1, 'float'],\n  [GL_FLOAT_VEC2]: [GL_FLOAT, 2, 'vec2'],\n  [GL_FLOAT_VEC3]: [GL_FLOAT, 3, 'vec3'],\n  [GL_FLOAT_VEC4]: [GL_FLOAT, 4, 'vec4'],\n  [GL_INT]: [GL_INT, 1, 'int'],\n  [GL_INT_VEC2]: [GL_INT, 2, 'ivec2'],\n  [GL_INT_VEC3]: [GL_INT, 3, 'ivec3'],\n  [GL_INT_VEC4]: [GL_INT, 4, 'ivec4'],\n  [GL_UNSIGNED_INT]: [GL_UNSIGNED_INT, 1, 'uint'],\n  [GL_UNSIGNED_INT_VEC2]: [GL_UNSIGNED_INT, 2, 'uvec2'],\n  [GL_UNSIGNED_INT_VEC3]: [GL_UNSIGNED_INT, 3, 'uvec3'],\n  [GL_UNSIGNED_INT_VEC4]: [GL_UNSIGNED_INT, 4, 'uvec4'],\n  [GL_BOOL]: [GL_FLOAT, 1, 'bool'],\n  [GL_BOOL_VEC2]: [GL_FLOAT, 2, 'bvec2'],\n  [GL_BOOL_VEC3]: [GL_FLOAT, 3, 'bvec3'],\n  [GL_BOOL_VEC4]: [GL_FLOAT, 4, 'bvec4'],\n  [GL_FLOAT_MAT2]: [GL_FLOAT, 8, 'mat2'],\n  [GL_FLOAT_MAT2x3]: [GL_FLOAT, 8, 'mat2x3'],\n  [GL_FLOAT_MAT2x4]: [GL_FLOAT, 8, 'mat2x4'],\n  [GL_FLOAT_MAT3]: [GL_FLOAT, 12, 'mat3'],\n  [GL_FLOAT_MAT3x2]: [GL_FLOAT, 12, 'mat3x2'],\n  [GL_FLOAT_MAT3x4]: [GL_FLOAT, 12, 'mat3x4'],\n  [GL_FLOAT_MAT4]: [GL_FLOAT, 16, 'mat4'],\n  [GL_FLOAT_MAT4x2]: [GL_FLOAT, 16, 'mat4x2'],\n  [GL_FLOAT_MAT4x3]: [GL_FLOAT, 16, 'mat4x3']\n};\nexport function getPrimitiveDrawMode(drawMode) {\n  switch (drawMode) {\n    case GL_POINTS:\n      return GL_POINTS;\n\n    case GL_LINES:\n      return GL_LINES;\n\n    case GL_LINE_STRIP:\n      return GL_LINES;\n\n    case GL_LINE_LOOP:\n      return GL_LINES;\n\n    case GL_TRIANGLES:\n      return GL_TRIANGLES;\n\n    case GL_TRIANGLE_STRIP:\n      return GL_TRIANGLES;\n\n    case GL_TRIANGLE_FAN:\n      return GL_TRIANGLES;\n\n    default:\n      assert(false);\n      return 0;\n  }\n}\nexport function getPrimitiveCount(_ref) {\n  let {\n    drawMode,\n    vertexCount\n  } = _ref;\n\n  switch (drawMode) {\n    case GL_POINTS:\n    case GL_LINE_LOOP:\n      return vertexCount;\n\n    case GL_LINES:\n      return vertexCount / 2;\n\n    case GL_LINE_STRIP:\n      return vertexCount - 1;\n\n    case GL_TRIANGLES:\n      return vertexCount / 3;\n\n    case GL_TRIANGLE_STRIP:\n    case GL_TRIANGLE_FAN:\n      return vertexCount - 2;\n\n    default:\n      assert(false);\n      return 0;\n  }\n}\nexport function getVertexCount(_ref2) {\n  let {\n    drawMode,\n    vertexCount\n  } = _ref2;\n  const primitiveCount = getPrimitiveCount({\n    drawMode,\n    vertexCount\n  });\n\n  switch (getPrimitiveDrawMode(drawMode)) {\n    case GL_POINTS:\n      return primitiveCount;\n\n    case GL_LINES:\n      return primitiveCount * 2;\n\n    case GL_TRIANGLES:\n      return primitiveCount * 3;\n\n    default:\n      assert(false);\n      return 0;\n  }\n}\nexport function decomposeCompositeGLType(compositeGLType) {\n  const typeAndSize = COMPOSITE_GL_TYPES[compositeGLType];\n\n  if (!typeAndSize) {\n    return null;\n  }\n\n  const [type, components] = typeAndSize;\n  return {\n    type,\n    components\n  };\n}\nexport function getCompositeGLType(type, components) {\n  switch (type) {\n    case GL_BYTE:\n    case GL_UNSIGNED_BYTE:\n    case GL_SHORT:\n    case GL_UNSIGNED_SHORT:\n      type = GL_FLOAT;\n      break;\n\n    default:\n  }\n\n  for (const glType in COMPOSITE_GL_TYPES) {\n    const [compType, compComponents, name] = COMPOSITE_GL_TYPES[glType];\n\n    if (compType === type && compComponents === components) {\n      return {\n        glType,\n        name\n      };\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["../../../src/webgl-utils/attribute-utils.js"],"names":["GL_BYTE","GL_UNSIGNED_BYTE","GL_SHORT","GL_UNSIGNED_SHORT","GL_POINTS","GL_LINES","GL_LINE_LOOP","GL_LINE_STRIP","GL_TRIANGLES","GL_TRIANGLE_STRIP","GL_TRIANGLE_FAN","GL_FLOAT","GL_FLOAT_VEC2","GL_FLOAT_VEC3","GL_FLOAT_VEC4","GL_INT","GL_INT_VEC2","GL_INT_VEC3","GL_INT_VEC4","GL_UNSIGNED_INT","GL_UNSIGNED_INT_VEC2","GL_UNSIGNED_INT_VEC3","GL_UNSIGNED_INT_VEC4","GL_BOOL","GL_BOOL_VEC2","GL_BOOL_VEC3","GL_BOOL_VEC4","GL_FLOAT_MAT2","GL_FLOAT_MAT3","GL_FLOAT_MAT4","GL_FLOAT_MAT2x3","GL_FLOAT_MAT2x4","GL_FLOAT_MAT3x2","GL_FLOAT_MAT3x4","GL_FLOAT_MAT4x2","GL_FLOAT_MAT4x3","COMPOSITE_GL_TYPES","assert","vertexCount","primitiveCount","getPrimitiveCount","getPrimitiveDrawMode","typeAndSize","components","type","compType","compComponents","name"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport {assert} from '../utils/assert';\n\nconst GL_BYTE = 0x1400;\nconst GL_UNSIGNED_BYTE = 0x1401;\nconst GL_SHORT = 0x1402;\nconst GL_UNSIGNED_SHORT = 0x1403;\n\nconst GL_POINTS = 0x0;\nconst GL_LINES = 0x1;\nconst GL_LINE_LOOP = 0x2;\nconst GL_LINE_STRIP = 0x3;\nconst GL_TRIANGLES = 0x4;\nconst GL_TRIANGLE_STRIP = 0x5;\nconst GL_TRIANGLE_FAN = 0x6;\n\n// Local constants - these will \"collapse\" during minification\nconst GL_FLOAT = 0x1406;\nconst GL_FLOAT_VEC2 = 0x8b50;\nconst GL_FLOAT_VEC3 = 0x8b51;\nconst GL_FLOAT_VEC4 = 0x8b52;\n\nconst GL_INT = 0x1404;\nconst GL_INT_VEC2 = 0x8b53;\nconst GL_INT_VEC3 = 0x8b54;\nconst GL_INT_VEC4 = 0x8b55;\n\nconst GL_UNSIGNED_INT = 0x1405;\nconst GL_UNSIGNED_INT_VEC2 = 0x8dc6;\nconst GL_UNSIGNED_INT_VEC3 = 0x8dc7;\nconst GL_UNSIGNED_INT_VEC4 = 0x8dc8;\n\nconst GL_BOOL = 0x8b56;\nconst GL_BOOL_VEC2 = 0x8b57;\nconst GL_BOOL_VEC3 = 0x8b58;\nconst GL_BOOL_VEC4 = 0x8b59;\n\nconst GL_FLOAT_MAT2 = 0x8b5a;\nconst GL_FLOAT_MAT3 = 0x8b5b;\nconst GL_FLOAT_MAT4 = 0x8b5c;\n\nconst GL_FLOAT_MAT2x3 = 0x8b65;\nconst GL_FLOAT_MAT2x4 = 0x8b66;\nconst GL_FLOAT_MAT3x2 = 0x8b67;\nconst GL_FLOAT_MAT3x4 = 0x8b68;\nconst GL_FLOAT_MAT4x2 = 0x8b69;\nconst GL_FLOAT_MAT4x3 = 0x8b6a;\n\n// Composite types table\nconst COMPOSITE_GL_TYPES = {\n  [GL_FLOAT]: [GL_FLOAT, 1, 'float'],\n  [GL_FLOAT_VEC2]: [GL_FLOAT, 2, 'vec2'],\n  [GL_FLOAT_VEC3]: [GL_FLOAT, 3, 'vec3'],\n  [GL_FLOAT_VEC4]: [GL_FLOAT, 4, 'vec4'],\n\n  [GL_INT]: [GL_INT, 1, 'int'],\n  [GL_INT_VEC2]: [GL_INT, 2, 'ivec2'],\n  [GL_INT_VEC3]: [GL_INT, 3, 'ivec3'],\n  [GL_INT_VEC4]: [GL_INT, 4, 'ivec4'],\n\n  [GL_UNSIGNED_INT]: [GL_UNSIGNED_INT, 1, 'uint'],\n  [GL_UNSIGNED_INT_VEC2]: [GL_UNSIGNED_INT, 2, 'uvec2'],\n  [GL_UNSIGNED_INT_VEC3]: [GL_UNSIGNED_INT, 3, 'uvec3'],\n  [GL_UNSIGNED_INT_VEC4]: [GL_UNSIGNED_INT, 4, 'uvec4'],\n\n  [GL_BOOL]: [GL_FLOAT, 1, 'bool'],\n  [GL_BOOL_VEC2]: [GL_FLOAT, 2, 'bvec2'],\n  [GL_BOOL_VEC3]: [GL_FLOAT, 3, 'bvec3'],\n  [GL_BOOL_VEC4]: [GL_FLOAT, 4, 'bvec4'],\n\n  [GL_FLOAT_MAT2]: [GL_FLOAT, 8, 'mat2'], // 4\n  [GL_FLOAT_MAT2x3]: [GL_FLOAT, 8, 'mat2x3'], // 6\n  [GL_FLOAT_MAT2x4]: [GL_FLOAT, 8, 'mat2x4'], // 8\n\n  [GL_FLOAT_MAT3]: [GL_FLOAT, 12, 'mat3'], // 9\n  [GL_FLOAT_MAT3x2]: [GL_FLOAT, 12, 'mat3x2'], // 6\n  [GL_FLOAT_MAT3x4]: [GL_FLOAT, 12, 'mat3x4'], // 12\n\n  [GL_FLOAT_MAT4]: [GL_FLOAT, 16, 'mat4'], // 16\n  [GL_FLOAT_MAT4x2]: [GL_FLOAT, 16, 'mat4x2'], // 8\n  [GL_FLOAT_MAT4x3]: [GL_FLOAT, 16, 'mat4x3'] // 12\n};\n\n// Counts the number of complete primitives given a number of vertices and a drawMode\nexport function getPrimitiveDrawMode(drawMode) {\n  switch (drawMode) {\n    case GL_POINTS:\n      return GL_POINTS;\n    case GL_LINES:\n      return GL_LINES;\n    case GL_LINE_STRIP:\n      return GL_LINES;\n    case GL_LINE_LOOP:\n      return GL_LINES;\n    case GL_TRIANGLES:\n      return GL_TRIANGLES;\n    case GL_TRIANGLE_STRIP:\n      return GL_TRIANGLES;\n    case GL_TRIANGLE_FAN:\n      return GL_TRIANGLES;\n    default:\n      assert(false);\n      return 0;\n  }\n}\n\n// Counts the number of complete \"primitives\" given a number of vertices and a drawMode\nexport function getPrimitiveCount({drawMode, vertexCount}) {\n  switch (drawMode) {\n    case GL_POINTS:\n    case GL_LINE_LOOP:\n      return vertexCount;\n    case GL_LINES:\n      return vertexCount / 2;\n    case GL_LINE_STRIP:\n      return vertexCount - 1;\n    case GL_TRIANGLES:\n      return vertexCount / 3;\n    case GL_TRIANGLE_STRIP:\n    case GL_TRIANGLE_FAN:\n      return vertexCount - 2;\n    default:\n      assert(false);\n      return 0;\n  }\n}\n\n// Counts the number of vertices after splitting the vertex stream into separate \"primitives\"\nexport function getVertexCount({drawMode, vertexCount}) {\n  const primitiveCount = getPrimitiveCount({drawMode, vertexCount});\n  switch (getPrimitiveDrawMode(drawMode)) {\n    case GL_POINTS:\n      return primitiveCount;\n    case GL_LINES:\n      return primitiveCount * 2;\n    case GL_TRIANGLES:\n      return primitiveCount * 3;\n    default:\n      assert(false);\n      return 0;\n  }\n}\n\n// Decomposes a composite type GL.VEC3 into a basic type (GL.FLOAT) and components (3)\nexport function decomposeCompositeGLType(compositeGLType) {\n  const typeAndSize = COMPOSITE_GL_TYPES[compositeGLType];\n  if (!typeAndSize) {\n    return null;\n  }\n  const [type, components] = typeAndSize;\n  return {type, components};\n}\n\nexport function getCompositeGLType(type, components) {\n  switch (type) {\n    case GL_BYTE:\n    case GL_UNSIGNED_BYTE:\n    case GL_SHORT:\n    case GL_UNSIGNED_SHORT:\n      type = GL_FLOAT;\n      break;\n    default:\n  }\n\n  for (const glType in COMPOSITE_GL_TYPES) {\n    const [compType, compComponents, name] = COMPOSITE_GL_TYPES[glType];\n    if (compType === type && compComponents === components) {\n      return {glType, name};\n    }\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}