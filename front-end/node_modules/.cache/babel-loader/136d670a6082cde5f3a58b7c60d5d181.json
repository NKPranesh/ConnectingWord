{"ast":null,"code":"import TransitionInterpolator from './transition-interpolator';\nimport { lerp } from 'math.gl';\nconst DEFAULT_PROPS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\nconst DEFAULT_REQUIRED_PROPS = ['longitude', 'latitude', 'zoom'];\nexport default class LinearInterpolator extends TransitionInterpolator {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const transitionProps = Array.isArray(opts) ? opts : opts.transitionProps;\n    super(transitionProps || {\n      compare: DEFAULT_PROPS,\n      extract: DEFAULT_PROPS,\n      required: DEFAULT_REQUIRED_PROPS\n    });\n    this.opts = opts;\n  }\n\n  initializeProps(startProps, endProps) {\n    const result = super.initializeProps(startProps, endProps);\n    const {\n      makeViewport,\n      around\n    } = this.opts;\n\n    if (makeViewport && around) {\n      const startViewport = makeViewport(startProps);\n      const endViewport = makeViewport(endProps);\n      const aroundPosition = startViewport.unproject(around);\n      result.start.around = around;\n      Object.assign(result.end, {\n        around: endViewport.project(aroundPosition),\n        aroundPosition,\n        width: endProps.width,\n        height: endProps.height\n      });\n    }\n\n    return result;\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const propsInTransition = {};\n\n    for (const key of this._propsToExtract) {\n      propsInTransition[key] = lerp(startProps[key] || 0, endProps[key] || 0, t);\n    }\n\n    if (endProps.aroundPosition) {\n      const viewport = this.opts.makeViewport({ ...endProps,\n        ...propsInTransition\n      });\n      Object.assign(propsInTransition, viewport.panByPosition(endProps.aroundPosition, lerp(startProps.around, endProps.around, t)));\n    }\n\n    return propsInTransition;\n  }\n\n}","map":{"version":3,"sources":["../../../src/transitions/linear-interpolator.js"],"names":["DEFAULT_PROPS","DEFAULT_REQUIRED_PROPS","constructor","opts","transitionProps","Array","compare","extract","required","initializeProps","result","around","makeViewport","startViewport","endViewport","aroundPosition","Object","width","endProps","height","interpolateProps","propsInTransition","lerp","startProps","viewport"],"mappings":"AAAA,OAAA,sBAAA,MAAA,2BAAA;AACA,SAAA,IAAA,QAAA,SAAA;AAEA,MAAMA,aAAa,GAAG,CAAA,WAAA,EAAA,UAAA,EAAA,MAAA,EAAA,SAAA,EAAtB,OAAsB,CAAtB;AACA,MAAMC,sBAAsB,GAAG,CAAA,WAAA,EAAA,UAAA,EAA/B,MAA+B,CAA/B;AAKA,eAAe,MAAA,kBAAA,SAAA,sBAAA,CAAwD;AAOrEC,EAAAA,WAAW,GAAY;AAAA,QAAXC,IAAW,uEAAZ,EAAY;AAErB,UAAMC,eAAe,GAAGC,KAAK,CAALA,OAAAA,CAAAA,IAAAA,IAAAA,IAAAA,GAA6BF,IAAI,CAAzD,eAAA;AACA,UACEC,eAAe,IAAI;AACjBE,MAAAA,OAAO,EADU,aAAA;AAEjBC,MAAAA,OAAO,EAFU,aAAA;AAGjBC,MAAAA,QAAQ,EAAEP;AAHO,KADrB;AAOA,SAAA,IAAA,GAAA,IAAA;AACD;;AAEDQ,EAAAA,eAAe,CAAA,UAAA,EAAA,QAAA,EAAuB;AACpC,UAAMC,MAAM,GAAG,MAAA,eAAA,CAAA,UAAA,EAAf,QAAe,CAAf;AAEA,UAAM;AAAA,MAAA,YAAA;AAAeC,MAAAA;AAAf,QAAyB,KAA/B,IAAA;;AACA,QAAIC,YAAY,IAAhB,MAAA,EAA4B;AAC1B,YAAMC,aAAa,GAAGD,YAAY,CAAlC,UAAkC,CAAlC;AACA,YAAME,WAAW,GAAGF,YAAY,CAAhC,QAAgC,CAAhC;AACA,YAAMG,cAAc,GAAGF,aAAa,CAAbA,SAAAA,CAAvB,MAAuBA,CAAvB;AACAH,MAAAA,MAAM,CAANA,KAAAA,CAAAA,MAAAA,GAAAA,MAAAA;AACAM,MAAAA,MAAM,CAANA,MAAAA,CAAcN,MAAM,CAApBM,GAAAA,EAA0B;AACxBL,QAAAA,MAAM,EAAEG,WAAW,CAAXA,OAAAA,CADgB,cAChBA,CADgB;AAAA,QAAA,cAAA;AAGxBG,QAAAA,KAAK,EAAEC,QAAQ,CAHS,KAAA;AAIxBC,QAAAA,MAAM,EAAED,QAAQ,CAACC;AAJO,OAA1BH;AAMD;;AAED,WAAA,MAAA;AACD;;AAEDI,EAAAA,gBAAgB,CAAA,UAAA,EAAA,QAAA,EAAA,CAAA,EAA0B;AACxC,UAAMC,iBAAiB,GAAvB,EAAA;;AACA,SAAK,MAAL,GAAA,IAAkB,KAAlB,eAAA,EAAwC;AACtCA,MAAAA,iBAAiB,CAAjBA,GAAiB,CAAjBA,GAAyBC,IAAI,CAACC,UAAU,CAAVA,GAAU,CAAVA,IAAD,CAAA,EAAuBL,QAAQ,CAARA,GAAQ,CAARA,IAAvB,CAAA,EAA7BG,CAA6B,CAA7BA;AACD;;AAED,QAAIH,QAAQ,CAAZ,cAAA,EAA6B;AAE3B,YAAMM,QAAQ,GAAG,KAAA,IAAA,CAAA,YAAA,CAAuB,EAAC,GAAD,QAAA;AAAc,WAAGH;AAAjB,OAAvB,CAAjB;AACAL,MAAAA,MAAM,CAANA,MAAAA,CAAAA,iBAAAA,EAEEQ,QAAQ,CAARA,aAAAA,CACEN,QAAQ,CADVM,cAAAA,EAGEF,IAAI,CAACC,UAAU,CAAX,MAAA,EAAoBL,QAAQ,CAA5B,MAAA,EALRF,CAKQ,CAHNQ,CAFFR;AAQD;;AACD,WAAA,iBAAA;AACD;;AA3DoE","sourcesContent":["import TransitionInterpolator from './transition-interpolator';\nimport {lerp} from 'math.gl';\n\nconst DEFAULT_PROPS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\nconst DEFAULT_REQUIRED_PROPS = ['longitude', 'latitude', 'zoom'];\n\n/**\n * Performs linear interpolation of two view states.\n */\nexport default class LinearInterpolator extends TransitionInterpolator {\n  /**\n   * @param {Object} opts\n   * @param {Array} opts.transitionProps - list of props to apply linear transition to.\n   * @param {Array} opts.around - a screen point to zoom/rotate around.\n   * @param {Function} opts.makeViewport - construct a viewport instance with given props.\n   */\n  constructor(opts = {}) {\n    // Backward compatibility\n    const transitionProps = Array.isArray(opts) ? opts : opts.transitionProps;\n    super(\n      transitionProps || {\n        compare: DEFAULT_PROPS,\n        extract: DEFAULT_PROPS,\n        required: DEFAULT_REQUIRED_PROPS\n      }\n    );\n    this.opts = opts;\n  }\n\n  initializeProps(startProps, endProps) {\n    const result = super.initializeProps(startProps, endProps);\n\n    const {makeViewport, around} = this.opts;\n    if (makeViewport && around) {\n      const startViewport = makeViewport(startProps);\n      const endViewport = makeViewport(endProps);\n      const aroundPosition = startViewport.unproject(around);\n      result.start.around = around;\n      Object.assign(result.end, {\n        around: endViewport.project(aroundPosition),\n        aroundPosition,\n        width: endProps.width,\n        height: endProps.height\n      });\n    }\n\n    return result;\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const propsInTransition = {};\n    for (const key of this._propsToExtract) {\n      propsInTransition[key] = lerp(startProps[key] || 0, endProps[key] || 0, t);\n    }\n\n    if (endProps.aroundPosition) {\n      // Linear transition should be performed in common space\n      const viewport = this.opts.makeViewport({...endProps, ...propsInTransition});\n      Object.assign(\n        propsInTransition,\n        viewport.panByPosition(\n          endProps.aroundPosition,\n          // anchor point in current screen coordinates\n          lerp(startProps.around, endProps.around, t)\n        )\n      );\n    }\n    return propsInTransition;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}