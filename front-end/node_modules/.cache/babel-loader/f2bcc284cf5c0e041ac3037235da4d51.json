{"ast":null,"code":"import { Layer, project32, gouraudLighting, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './point-cloud-layer-vertex.glsl';\nimport fs from './point-cloud-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_NORMAL = [0, 0, 1];\nconst defaultProps = {\n  sizeUnits: 'pixels',\n  pointSize: {\n    type: 'number',\n    min: 0,\n    value: 10\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getNormal: {\n    type: 'accessor',\n    value: DEFAULT_NORMAL\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  material: true,\n  radiusPixels: {\n    deprecatedFor: 'pointSize'\n  }\n};\n\nfunction normalizeData(data) {\n  const {\n    header,\n    attributes\n  } = data;\n\n  if (!header || !attributes) {\n    return;\n  }\n\n  data.length = header.vertexCount;\n\n  if (attributes.POSITION) {\n    attributes.instancePositions = attributes.POSITION;\n  }\n\n  if (attributes.NORMAL) {\n    attributes.instanceNormals = attributes.NORMAL;\n  }\n\n  if (attributes.COLOR_0) {\n    attributes.instanceColors = attributes.COLOR_0;\n  }\n}\n\nexport default class PointCloudLayer extends Layer {\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceNormals: {\n        size: 3,\n        transition: true,\n        accessor: 'getNormal',\n        defaultValue: DEFAULT_NORMAL\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      }\n    });\n  }\n\n  updateState(_ref) {\n    let {\n      props,\n      oldProps,\n      changeFlags\n    } = _ref;\n    super.updateState({\n      props,\n      oldProps,\n      changeFlags\n    });\n\n    if (changeFlags.extensionsChanged) {\n      var _this$state$model;\n\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (changeFlags.dataChanged) {\n      normalizeData(props.data);\n    }\n  }\n\n  draw(_ref2) {\n    let {\n      uniforms\n    } = _ref2;\n    const {\n      pointSize,\n      sizeUnits\n    } = this.props;\n    this.state.model.setUniforms(uniforms).setUniforms({\n      sizeUnits: UNIT[sizeUnits],\n      radiusPixels: pointSize\n    }).draw();\n  }\n\n  _getModel(gl) {\n    const positions = [];\n\n    for (let i = 0; i < 3; i++) {\n      const angle = i / 3 * Math.PI * 2;\n      positions.push(Math.cos(angle) * 2, Math.sin(angle) * 2, 0);\n    }\n\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 4,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n}\nPointCloudLayer.layerName = 'PointCloudLayer';\nPointCloudLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/point-cloud-layer/point-cloud-layer.js"],"names":["DEFAULT_COLOR","DEFAULT_NORMAL","defaultProps","sizeUnits","pointSize","type","min","value","getPosition","x","position","getNormal","getColor","material","radiusPixels","deprecatedFor","attributes","data","header","getShaders","modules","initializeState","instancePositions","size","fp64","transition","accessor","instanceNormals","defaultValue","instanceColors","normalized","updateState","changeFlags","gl","normalizeData","props","draw","uniforms","UNIT","_getModel","positions","i","angle","Math","id","geometry","drawMode","isInstanced","PointCloudLayer"],"mappings":"AAoBA,SAAA,KAAA,EAAA,SAAA,EAAA,eAAA,EAAA,OAAA,EAAA,IAAA,QAAA,eAAA;AAEA,SAAA,KAAA,EAAA,QAAA,QAAA,eAAA;AAEA,OAAA,EAAA,MAAA,iCAAA;AACA,OAAA,EAAA,MAAA,mCAAA;AAEA,MAAMA,aAAa,GAAG,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAtB,GAAsB,CAAtB;AACA,MAAMC,cAAc,GAAG,CAAA,CAAA,EAAA,CAAA,EAAvB,CAAuB,CAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EADU,QAAA;AAEnBC,EAAAA,SAAS,EAAE;AAACC,IAAAA,IAAI,EAAL,QAAA;AAAiBC,IAAAA,GAAG,EAApB,CAAA;AAAyBC,IAAAA,KAAK,EAAE;AAAhC,GAFQ;AAInBC,EAAAA,WAAW,EAAE;AAACH,IAAAA,IAAI,EAAL,UAAA;AAAmBE,IAAAA,KAAK,EAAEE,CAAC,IAAIA,CAAC,CAACC;AAAjC,GAJM;AAKnBC,EAAAA,SAAS,EAAE;AAACN,IAAAA,IAAI,EAAL,UAAA;AAAmBE,IAAAA,KAAK,EAAEN;AAA1B,GALQ;AAMnBW,EAAAA,QAAQ,EAAE;AAACP,IAAAA,IAAI,EAAL,UAAA;AAAmBE,IAAAA,KAAK,EAAEP;AAA1B,GANS;AAQnBa,EAAAA,QAAQ,EARW,IAAA;AAWnBC,EAAAA,YAAY,EAAE;AAACC,IAAAA,aAAa,EAAE;AAAhB;AAXK,CAArB;;AAeA,SAAA,aAAA,CAAA,IAAA,EAA6B;AAC3B,QAAM;AAAA,IAAA,MAAA;AAASC,IAAAA;AAAT,MAAN,IAAA;;AACA,MAAI,CAAA,MAAA,IAAW,CAAf,UAAA,EAA4B;AAC1B;AACD;;AAEDC,EAAAA,IAAI,CAAJA,MAAAA,GAAcC,MAAM,CAApBD,WAAAA;;AAEA,MAAID,UAAU,CAAd,QAAA,EAAyB;AACvBA,IAAAA,UAAU,CAAVA,iBAAAA,GAA+BA,UAAU,CAAzCA,QAAAA;AACD;;AACD,MAAIA,UAAU,CAAd,MAAA,EAAuB;AACrBA,IAAAA,UAAU,CAAVA,eAAAA,GAA6BA,UAAU,CAAvCA,MAAAA;AACD;;AACD,MAAIA,UAAU,CAAd,OAAA,EAAwB;AACtBA,IAAAA,UAAU,CAAVA,cAAAA,GAA4BA,UAAU,CAAtCA,OAAAA;AACD;AACF;;AAED,eAAe,MAAA,eAAA,SAAA,KAAA,CAAoC;AACjDG,EAAAA,UAAU,GAAG;AACX,WAAO,MAAA,UAAA,CAAiB;AAAA,MAAA,EAAA;AAAA,MAAA,EAAA;AAASC,MAAAA,OAAO,EAAE,CAAA,SAAA,EAAA,eAAA,EAAA,OAAA;AAAlB,KAAjB,CAAP;AACD;;AAEDC,EAAAA,eAAe,GAAG;AAEhB,SAAA,mBAAA,GAAA,YAAA,CAAwC;AACtCC,MAAAA,iBAAiB,EAAE;AACjBC,QAAAA,IAAI,EADa,CAAA;AAEjBlB,QAAAA,IAAI,EAFa,IAAA;AAGjBmB,QAAAA,IAAI,EAAE,KAHW,iBAGX,EAHW;AAIjBC,QAAAA,UAAU,EAJO,IAAA;AAKjBC,QAAAA,QAAQ,EAAE;AALO,OADmB;AAQtCC,MAAAA,eAAe,EAAE;AACfJ,QAAAA,IAAI,EADW,CAAA;AAEfE,QAAAA,UAAU,EAFK,IAAA;AAGfC,QAAAA,QAAQ,EAHO,WAAA;AAIfE,QAAAA,YAAY,EAAE3B;AAJC,OARqB;AActC4B,MAAAA,cAAc,EAAE;AACdN,QAAAA,IAAI,EAAE,KAAA,KAAA,CAAA,WAAA,CADQ,MAAA;AAEdlB,QAAAA,IAAI,EAFU,IAAA;AAGdyB,QAAAA,UAAU,EAHI,IAAA;AAIdL,QAAAA,UAAU,EAJI,IAAA;AAKdC,QAAAA,QAAQ,EALM,UAAA;AAMdE,QAAAA,YAAY,EAAE5B;AANA;AAdsB,KAAxC;AAwBD;;AAED+B,EAAAA,WAAW,OAAiC;AAAA,QAAhC;AAAA,MAAA,KAAA;AAAA,MAAA,QAAA;AAAkBC,MAAAA;AAAlB,KAAgC;AAC1C,UAAA,WAAA,CAAkB;AAAA,MAAA,KAAA;AAAA,MAAA,QAAA;AAAkBA,MAAAA;AAAlB,KAAlB;;AACA,QAAIA,WAAW,CAAf,iBAAA,EAAmC;AAAA,UAAA,iBAAA;;AACjC,YAAM;AAACC,QAAAA;AAAD,UAAO,KAAb,OAAA;AACA,OAAA,iBAAA,GAAA,KAAA,KAAA,CAAA,KAAA,MAAA,IAAA,IAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAA,MAAA,EAAA;AACA,WAAA,KAAA,CAAA,KAAA,GAAmB,KAAA,SAAA,CAAnB,EAAmB,CAAnB;AACA,WAAA,mBAAA,GAAA,aAAA;AACD;;AACD,QAAID,WAAW,CAAf,WAAA,EAA6B;AAC3BE,MAAAA,aAAa,CAACC,KAAK,CAAnBD,IAAa,CAAbA;AACD;AACF;;AAEDE,EAAAA,IAAI,QAAa;AAAA,QAAZ;AAACC,MAAAA;AAAD,KAAY;AACf,UAAM;AAAA,MAAA,SAAA;AAAYlC,MAAAA;AAAZ,QAAyB,KAA/B,KAAA;AAEA,SAAA,KAAA,CAAA,KAAA,CAAA,WAAA,CAAA,QAAA,EAAA,WAAA,CAEe;AACXA,MAAAA,SAAS,EAAEmC,IAAI,CADJ,SACI,CADJ;AAEXxB,MAAAA,YAAY,EAAEV;AAFH,KAFf,EAAA,IAAA;AAOD;;AAEDmC,EAAAA,SAAS,CAAA,EAAA,EAAK;AAEZ,UAAMC,SAAS,GAAf,EAAA;;AACA,SAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,CAAA,EAAuBA,CAAvB,EAAA,EAA4B;AAC1B,YAAMC,KAAK,GAAID,CAAC,GAAF,CAACA,GAASE,IAAI,CAAd,EAACF,GAAf,CAAA;AACAD,MAAAA,SAAS,CAATA,IAAAA,CAAeG,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,IAAfH,CAAAA,EAAoCG,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,IAApCH,CAAAA,EAAAA,CAAAA;AACD;;AAED,WAAO,IAAA,KAAA,CAAA,EAAA,EAAc,EACnB,GAAG,KADgB,UAChB,EADgB;AAEnBI,MAAAA,EAAE,EAAE,KAAA,KAAA,CAFe,EAAA;AAGnBC,MAAAA,QAAQ,EAAE,IAAA,QAAA,CAAa;AACrBC,QAAAA,QAAQ,EADa,CAAA;AAErB9B,QAAAA,UAAU,EAAE;AACVwB,UAAAA,SAAS,EAAE,IAAA,YAAA,CAAA,SAAA;AADD;AAFS,OAAb,CAHS;AASnBO,MAAAA,WAAW,EAAE;AATM,KAAd,CAAP;AAWD;;AA7EgD;AAgFnDC,eAAe,CAAfA,SAAAA,GAAAA,iBAAAA;AACAA,eAAe,CAAfA,YAAAA,GAAAA,YAAAA","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './point-cloud-layer-vertex.glsl';\nimport fs from './point-cloud-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_NORMAL = [0, 0, 1];\n\nconst defaultProps = {\n  sizeUnits: 'pixels',\n  pointSize: {type: 'number', min: 0, value: 10}, //  point radius in pixels\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getNormal: {type: 'accessor', value: DEFAULT_NORMAL},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  material: true,\n\n  // Depreated\n  radiusPixels: {deprecatedFor: 'pointSize'}\n};\n\n// support loaders.gl point cloud format\nfunction normalizeData(data) {\n  const {header, attributes} = data;\n  if (!header || !attributes) {\n    return;\n  }\n\n  data.length = header.vertexCount;\n\n  if (attributes.POSITION) {\n    attributes.instancePositions = attributes.POSITION;\n  }\n  if (attributes.NORMAL) {\n    attributes.instanceNormals = attributes.NORMAL;\n  }\n  if (attributes.COLOR_0) {\n    attributes.instanceColors = attributes.COLOR_0;\n  }\n}\n\nexport default class PointCloudLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, gouraudLighting, picking]});\n  }\n\n  initializeState() {\n    /* eslint-disable max-len */\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceNormals: {\n        size: 3,\n        transition: true,\n        accessor: 'getNormal',\n        defaultValue: DEFAULT_NORMAL\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n    if (changeFlags.dataChanged) {\n      normalizeData(props.data);\n    }\n  }\n\n  draw({uniforms}) {\n    const {pointSize, sizeUnits} = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        sizeUnits: UNIT[sizeUnits],\n        radiusPixels: pointSize\n      })\n      .draw();\n  }\n\n  _getModel(gl) {\n    // a triangle that minimally cover the unit circle\n    const positions = [];\n    for (let i = 0; i < 3; i++) {\n      const angle = (i / 3) * Math.PI * 2;\n      positions.push(Math.cos(angle) * 2, Math.sin(angle) * 2, 0);\n    }\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n\nPointCloudLayer.layerName = 'PointCloudLayer';\nPointCloudLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}