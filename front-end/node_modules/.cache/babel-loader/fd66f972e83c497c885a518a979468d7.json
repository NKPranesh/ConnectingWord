{"ast":null,"code":"export function getTransferList(object) {\n  let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let transfers = arguments.length > 2 ? arguments[2] : undefined;\n  const transfersSet = transfers || new Set();\n\n  if (!object) {} else if (isTransferable(object)) {\n    transfersSet.add(object);\n  } else if (isTransferable(object.buffer)) {\n    transfersSet.add(object.buffer);\n  } else if (ArrayBuffer.isView(object)) {} else if (recursive && typeof object === 'object') {\n    for (const key in object) {\n      getTransferList(object[key], recursive, transfersSet);\n    }\n  }\n\n  return transfers === undefined ? Array.from(transfersSet) : [];\n}\n\nfunction isTransferable(object) {\n  if (!object) {\n    return false;\n  }\n\n  if (object instanceof ArrayBuffer) {\n    return true;\n  }\n\n  if (typeof MessagePort !== 'undefined' && object instanceof MessagePort) {\n    return true;\n  }\n\n  if (typeof ImageBitmap !== 'undefined' && object instanceof ImageBitmap) {\n    return true;\n  }\n\n  if (typeof OffscreenCanvas !== 'undefined' && object instanceof OffscreenCanvas) {\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["../../../../src/lib/worker-utils/get-transfer-list.ts"],"names":["recursive","transfersSet","transfers","isTransferable","object","ArrayBuffer","getTransferList","Array"],"mappings":"AAWA,OAAO,SAAA,eAAA,CAAA,MAAA,EAIW;AAAA,MAFhBA,SAEgB,uEAJX,IAIW;AAAA,MAJX,SAIW;AAEhB,QAAMC,YAAY,GAAGC,SAAS,IAAI,IAAlC,GAAkC,EAAlC;;AAEA,MAAI,CAAJ,MAAA,EAAa,CAAb,CAAA,MAEO,IAAIC,cAAc,CAAlB,MAAkB,CAAlB,EAA4B;AACjCF,IAAAA,YAAY,CAAZA,GAAAA,CAAAA,MAAAA;AADK,GAAA,MAEA,IAAIE,cAAc,CAACC,MAAM,CAAzB,MAAkB,CAAlB,EAAmC;AAExCH,IAAAA,YAAY,CAAZA,GAAAA,CAAiBG,MAAM,CAAvBH,MAAAA;AAFK,GAAA,MAGA,IAAII,WAAW,CAAXA,MAAAA,CAAJ,MAAIA,CAAJ,EAAgC,CAAhC,CAAA,MAGA,IAAIL,SAAS,IAAI,OAAA,MAAA,KAAjB,QAAA,EAA6C;AAClD,SAAK,MAAL,GAAA,IAAA,MAAA,EAA0B;AAExBM,MAAAA,eAAe,CAACF,MAAM,CAAP,GAAO,CAAP,EAAA,SAAA,EAAfE,YAAe,CAAfA;AACD;AACF;;AAID,SAAOJ,SAAS,KAATA,SAAAA,GAA0BK,KAAK,CAALA,IAAAA,CAA1BL,YAA0BK,CAA1BL,GAAP,EAAA;AACD;;AAGD,SAAA,cAAA,CAAA,MAAA,EAAgC;AAC9B,MAAI,CAAJ,MAAA,EAAa;AACX,WAAA,KAAA;AACD;;AACD,MAAIE,MAAM,YAAV,WAAA,EAAmC;AACjC,WAAA,IAAA;AACD;;AACD,MAAI,OAAA,WAAA,KAAA,WAAA,IAAsCA,MAAM,YAAhD,WAAA,EAAyE;AACvE,WAAA,IAAA;AACD;;AACD,MAAI,OAAA,WAAA,KAAA,WAAA,IAAsCA,MAAM,YAAhD,WAAA,EAAyE;AACvE,WAAA,IAAA;AACD;;AAED,MAAI,OAAA,eAAA,KAAA,WAAA,IAA0CA,MAAM,YAApD,eAAA,EAAiF;AAC/E,WAAA,IAAA;AACD;;AACD,SAAA,KAAA;AACD","sourcesContent":["// NOTE - there is a copy of this function is both in core and loader-utils\n// core does not need all the utils in loader-utils, just this one.\n\n/**\n * Returns an array of Transferrable objects that can be used with postMessage\n * https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage\n * @param object data to be sent via postMessage\n * @param recursive - not for application use\n * @param transfers - not for application use\n * @returns a transfer list that can be passed to postMessage\n */\nexport function getTransferList(\n  object: any,\n  recursive: boolean = true,\n  transfers?: Set<any>\n): Transferable[] {\n  // Make sure that items in the transfer list is unique\n  const transfersSet = transfers || new Set();\n\n  if (!object) {\n    // ignore\n  } else if (isTransferable(object)) {\n    transfersSet.add(object);\n  } else if (isTransferable(object.buffer)) {\n    // Typed array\n    transfersSet.add(object.buffer);\n  } else if (ArrayBuffer.isView(object)) {\n    // object is a TypeArray viewing into a SharedArrayBuffer (not transferable)\n    // Do not iterate through the content in this case\n  } else if (recursive && typeof object === 'object') {\n    for (const key in object) {\n      // Avoid perf hit - only go one level deep\n      getTransferList(object[key], recursive, transfersSet);\n    }\n  }\n\n  // If transfers is defined, is internal recursive call\n  // Otherwise it's called by the user\n  return transfers === undefined ? Array.from(transfersSet) : [];\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/Transferable\nfunction isTransferable(object) {\n  if (!object) {\n    return false;\n  }\n  if (object instanceof ArrayBuffer) {\n    return true;\n  }\n  if (typeof MessagePort !== 'undefined' && object instanceof MessagePort) {\n    return true;\n  }\n  if (typeof ImageBitmap !== 'undefined' && object instanceof ImageBitmap) {\n    return true;\n  }\n  // @ts-ignore\n  if (typeof OffscreenCanvas !== 'undefined' && object instanceof OffscreenCanvas) {\n    return true;\n  }\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}