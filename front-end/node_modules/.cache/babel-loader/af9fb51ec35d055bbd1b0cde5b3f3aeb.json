{"ast":null,"code":"import { scaleLinear } from 'd3-scale';\nimport getPalette, { DEFAULT_PALETTE, NULL_COLOR } from './palette';\nimport { assert, getAttrValue } from './utils';\nexport default function colorContinuous(_ref) {\n  let {\n    attr,\n    domain,\n    colors = DEFAULT_PALETTE,\n    nullColor = NULL_COLOR\n  } = _ref;\n  assert(Array.isArray(domain), 'Expected \"domain\" to be an array of numbers');\n  const palette = typeof colors === 'string' ? getPalette(colors) : colors;\n  const color = scaleLinear().domain(domain).range(palette);\n  return d => {\n    const value = getAttrValue(attr, d);\n    return Number.isFinite(value) ? color(value) : nullColor;\n  };\n}","map":{"version":3,"sources":["../../../src/style/color-continuous-style.js"],"names":["colors","nullColor","NULL_COLOR","assert","Array","palette","getPalette","color","scaleLinear","d","value","getAttrValue","Number"],"mappings":"AAAA,SAAA,WAAA,QAAA,UAAA;AACA,OAAA,UAAA,IAAA,eAAA,EAAA,UAAA,QAAA,WAAA;AACA,SAAA,MAAA,EAAA,YAAA,QAAA,SAAA;AAEA,eAAe,SAAA,eAAA,OAKZ;AAAA,MALqC;AAAA,IAAA,IAAA;AAAA,IAAA,MAAA;AAGtCA,IAAAA,MAAM,GAHgC,eAAA;AAItCC,IAAAA,SAAS,GAAGC;AAJ0B,GAKrC;AACDC,EAAAA,MAAM,CAACC,KAAK,CAALA,OAAAA,CAAD,MAACA,CAAD,EAAND,6CAAM,CAANA;AAEA,QAAME,OAAO,GAAG,OAAA,MAAA,KAAA,QAAA,GAA6BC,UAAU,CAAvC,MAAuC,CAAvC,GAAhB,MAAA;AACA,QAAMC,KAAK,GAAGC,WAAW,GAAXA,MAAAA,CAAAA,MAAAA,EAAAA,KAAAA,CAAd,OAAcA,CAAd;AAIA,SAAOC,CAAC,IAAI;AACV,UAAMC,KAAK,GAAGC,YAAY,CAAA,IAAA,EAA1B,CAA0B,CAA1B;AACA,WAAOC,MAAM,CAANA,QAAAA,CAAAA,KAAAA,IAAyBL,KAAK,CAA9BK,KAA8B,CAA9BA,GAAP,SAAA;AAFF,GAAA;AAID","sourcesContent":["import {scaleLinear} from 'd3-scale';\nimport getPalette, {DEFAULT_PALETTE, NULL_COLOR} from './palette';\nimport {assert, getAttrValue} from './utils';\n\nexport default function colorContinuous({\n  attr,\n  domain,\n  colors = DEFAULT_PALETTE,\n  nullColor = NULL_COLOR\n}) {\n  assert(Array.isArray(domain), 'Expected \"domain\" to be an array of numbers');\n\n  const palette = typeof colors === 'string' ? getPalette(colors) : colors;\n  const color = scaleLinear()\n    .domain(domain)\n    .range(palette);\n\n  return d => {\n    const value = getAttrValue(attr, d);\n    return Number.isFinite(value) ? color(value) : nullColor;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}