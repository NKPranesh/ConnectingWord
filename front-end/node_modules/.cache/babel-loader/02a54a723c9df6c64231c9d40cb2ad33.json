{"ast":null,"code":"import { createElement } from 'react';\nimport { View } from '@deck.gl/core';\nimport { inheritsFrom } from './inherits-from';\nimport evaluateChildren from './evaluate-children';\nexport default function positionChildrenUnderViews(_ref) {\n  let {\n    children,\n    deck,\n    ContextProvider\n  } = _ref;\n  const {\n    viewManager\n  } = deck || {};\n\n  if (!viewManager || !viewManager.views.length) {\n    return [];\n  }\n\n  const views = {};\n  const defaultViewId = viewManager.views[0].id;\n\n  for (const child of children) {\n    let viewId = defaultViewId;\n    let viewChildren = child;\n\n    if (inheritsFrom(child.type, View)) {\n      viewId = child.props.id || defaultViewId;\n      viewChildren = child.props.children;\n    }\n\n    const viewport = viewManager.getViewport(viewId);\n    const viewState = viewManager.getViewState(viewId);\n\n    if (viewport) {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = viewport;\n      viewChildren = evaluateChildren(viewChildren, {\n        x,\n        y,\n        width,\n        height,\n        viewport,\n        viewState\n      });\n\n      if (!views[viewId]) {\n        views[viewId] = {\n          viewport,\n          children: []\n        };\n      }\n\n      views[viewId].children.push(viewChildren);\n    }\n  }\n\n  return Object.keys(views).map(viewId => {\n    const {\n      viewport,\n      children: viewChildren\n    } = views[viewId];\n    const {\n      x,\n      y,\n      width,\n      height\n    } = viewport;\n    const style = {\n      position: 'absolute',\n      left: x,\n      top: y,\n      width,\n      height\n    };\n    const key = \"view-\".concat(viewId);\n    const viewElement = createElement('div', {\n      key,\n      id: key,\n      style\n    }, ...viewChildren);\n\n    if (ContextProvider) {\n      const contextValue = {\n        viewport,\n        container: deck.canvas.offsetParent,\n        eventManager: deck.eventManager,\n        onViewStateChange: params => {\n          params.viewId = viewId;\n\n          deck._onViewStateChange(params);\n        }\n      };\n      return createElement(ContextProvider, {\n        key,\n        value: contextValue\n      }, viewElement);\n    }\n\n    return viewElement;\n  });\n}","map":{"version":3,"sources":["../../../src/utils/position-children-under-views.js"],"names":["ContextProvider","viewManager","deck","views","defaultViewId","viewId","viewChildren","inheritsFrom","child","viewport","viewState","height","evaluateChildren","children","style","position","left","top","key","viewElement","createElement","id","contextValue","container","eventManager","onViewStateChange","params","value"],"mappings":"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","sourcesContent":["import {createElement} from 'react';\nimport {View} from '@deck.gl/core';\nimport {inheritsFrom} from './inherits-from';\nimport evaluateChildren from './evaluate-children';\n\n// Iterate over views and reposition children associated with views\n// TODO - Can we supply a similar function for the non-React case?\nexport default function positionChildrenUnderViews({children, deck, ContextProvider}) {\n  const {viewManager} = deck || {};\n\n  if (!viewManager || !viewManager.views.length) {\n    return [];\n  }\n\n  const views = {};\n  const defaultViewId = viewManager.views[0].id;\n\n  // Sort children by view id\n  for (const child of children) {\n    // Unless child is a View, position / render as part of the default view\n    let viewId = defaultViewId;\n    let viewChildren = child;\n\n    if (inheritsFrom(child.type, View)) {\n      viewId = child.props.id || defaultViewId;\n      viewChildren = child.props.children;\n    }\n\n    const viewport = viewManager.getViewport(viewId);\n    const viewState = viewManager.getViewState(viewId);\n\n    // Drop (auto-hide) elements with viewId that are not matched by any current view\n    if (viewport) {\n      const {x, y, width, height} = viewport;\n      // Resolve potentially relative dimensions using the deck.gl container size\n      viewChildren = evaluateChildren(viewChildren, {\n        x,\n        y,\n        width,\n        height,\n        viewport,\n        viewState\n      });\n\n      if (!views[viewId]) {\n        views[viewId] = {\n          viewport,\n          children: []\n        };\n      }\n      views[viewId].children.push(viewChildren);\n    }\n  }\n\n  // Render views\n  return Object.keys(views).map(viewId => {\n    const {viewport, children: viewChildren} = views[viewId];\n    const {x, y, width, height} = viewport;\n    const style = {\n      position: 'absolute',\n      left: x,\n      top: y,\n      width,\n      height\n    };\n\n    const key = `view-${viewId}`;\n    // If children is passed as an array, React will throw the \"each element in a list needs\n    // a key\" warning. Sending each child as separate arguments removes this requirement.\n    const viewElement = createElement('div', {key, id: key, style}, ...viewChildren);\n\n    if (ContextProvider) {\n      const contextValue = {\n        viewport,\n        container: deck.canvas.offsetParent,\n        eventManager: deck.eventManager,\n        onViewStateChange: params => {\n          params.viewId = viewId;\n          deck._onViewStateChange(params);\n        }\n      };\n      return createElement(ContextProvider, {key, value: contextValue}, viewElement);\n    }\n\n    return viewElement;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}