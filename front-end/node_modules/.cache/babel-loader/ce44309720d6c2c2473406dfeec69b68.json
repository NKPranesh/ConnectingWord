{"ast":null,"code":"export function fp64ify(a) {\n  let out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let startIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  const hiPart = Math.fround(a);\n  const loPart = a - hiPart;\n  out[startIndex] = hiPart;\n  out[startIndex + 1] = loPart;\n  return out;\n}\nexport function fp64LowPart(a) {\n  return a - Math.fround(a);\n}\nexport function fp64ifyMatrix4(matrix) {\n  const matrixFP64 = new Float32Array(32);\n\n  for (let i = 0; i < 4; ++i) {\n    for (let j = 0; j < 4; ++j) {\n      const index = i * 4 + j;\n      fp64ify(matrix[j * 4 + i], matrixFP64, index * 2);\n    }\n  }\n\n  return matrixFP64;\n}","map":{"version":3,"sources":["../../../../src/modules/fp64/fp64-utils.js"],"names":["out","startIndex","hiPart","Math","loPart","a","matrixFP64","i","j","index","fp64ify","matrix"],"mappings":"AAMA,OAAO,SAAA,OAAA,CAAA,CAAA,EAA8C;AAAA,MAA1BA,GAA0B,uEAA9C,EAA8C;AAAA,MAAhBC,UAAgB,uEAA9C,CAA8C;AACnD,QAAMC,MAAM,GAAGC,IAAI,CAAJA,MAAAA,CAAf,CAAeA,CAAf;AACA,QAAMC,MAAM,GAAGC,CAAC,GAAhB,MAAA;AACAL,EAAAA,GAAG,CAAHA,UAAG,CAAHA,GAAAA,MAAAA;AACAA,EAAAA,GAAG,CAACC,UAAU,GAAdD,CAAG,CAAHA,GAAAA,MAAAA;AACA,SAAA,GAAA;AACD;AAGD,OAAO,SAAA,WAAA,CAAA,CAAA,EAAwB;AAC7B,SAAOK,CAAC,GAAGF,IAAI,CAAJA,MAAAA,CAAX,CAAWA,CAAX;AACD;AAMD,OAAO,SAAA,cAAA,CAAA,MAAA,EAAgC;AAErC,QAAMG,UAAU,GAAG,IAAA,YAAA,CAAnB,EAAmB,CAAnB;;AACA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,CAAA,EAAuB,EAAvB,CAAA,EAA4B;AAC1B,SAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,CAAA,EAAuB,EAAvB,CAAA,EAA4B;AAC1B,YAAMC,KAAK,GAAGF,CAAC,GAADA,CAAAA,GAAd,CAAA;AACAG,MAAAA,OAAO,CAACC,MAAM,CAACH,CAAC,GAADA,CAAAA,GAAR,CAAO,CAAP,EAAA,UAAA,EAAgCC,KAAK,GAA5CC,CAAO,CAAPA;AACD;AACF;;AACD,SAAA,UAAA;AACD","sourcesContent":["/** @typedef {import('./fp64-utils')} types */\n\n/**\n * Calculate WebGL 64 bit float\n * @type {types['fp64ify']}\n */\nexport function fp64ify(a, out = [], startIndex = 0) {\n  const hiPart = Math.fround(a);\n  const loPart = a - hiPart;\n  out[startIndex] = hiPart;\n  out[startIndex + 1] = loPart;\n  return out;\n}\n\n/** @type {types['fp64LowPart']} */\nexport function fp64LowPart(a) {\n  return a - Math.fround(a);\n}\n\n/**\n * Calculate WebGL 64 bit matrix (transposed \"Float64Array\")\n * @type {types['fp64ifyMatrix4']}\n * */\nexport function fp64ifyMatrix4(matrix) {\n  // Transpose the projection matrix to column major for GLSL.\n  const matrixFP64 = new Float32Array(32);\n  for (let i = 0; i < 4; ++i) {\n    for (let j = 0; j < 4; ++j) {\n      const index = i * 4 + j;\n      fp64ify(matrix[j * 4 + i], matrixFP64, index * 2);\n    }\n  }\n  return matrixFP64;\n}\n"]},"metadata":{},"sourceType":"module"}