{"ast":null,"code":"import { Quaternion, Vector3, Matrix3, Matrix4, degrees } from '@math.gl/core';\nimport { BoundingSphere, OrientedBoundingBox } from '@math.gl/culling';\nimport { Ellipsoid } from '@math.gl/geospatial';\nimport { assert } from '@loaders.gl/loader-utils';\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\nconst scratchScale = new Vector3();\nconst scratchNorthWest = new Vector3();\nconst scratchSouthEast = new Vector3();\nexport function createBoundingVolume(boundingVolumeHeader, transform, result) {\n  assert(boundingVolumeHeader, '3D Tile: boundingVolume must be defined');\n\n  if (boundingVolumeHeader.box) {\n    return createBox(boundingVolumeHeader.box, transform, result);\n  }\n\n  if (boundingVolumeHeader.region) {\n    const [west, south, east, north, minHeight, maxHeight] = boundingVolumeHeader.region;\n    const northWest = Ellipsoid.WGS84.cartographicToCartesian([degrees(west), degrees(north), minHeight], scratchNorthWest);\n    const southEast = Ellipsoid.WGS84.cartographicToCartesian([degrees(east), degrees(south), maxHeight], scratchSouthEast);\n    const centerInCartesian = new Vector3().addVectors(northWest, southEast).multiplyScalar(0.5);\n    const radius = new Vector3().subVectors(northWest, southEast).len() / 2.0;\n    return createSphere([centerInCartesian[0], centerInCartesian[1], centerInCartesian[2], radius], new Matrix4());\n  }\n\n  if (boundingVolumeHeader.sphere) {\n    return createSphere(boundingVolumeHeader.sphere, transform, result);\n  }\n\n  throw new Error('3D Tile: boundingVolume must contain a sphere, region, or box');\n}\n\nfunction createBox(box, transform, result) {\n  const center = new Vector3(box[0], box[1], box[2]);\n  transform.transform(center, center);\n  let origin = [];\n\n  if (box.length === 10) {\n    const halfSize = box.slice(3, 6);\n    const quaternion = new Quaternion();\n    quaternion.fromArray(box, 6);\n    const x = new Vector3([1, 0, 0]);\n    const y = new Vector3([0, 1, 0]);\n    const z = new Vector3([0, 0, 1]);\n    x.transformByQuaternion(quaternion);\n    x.scale(halfSize[0]);\n    y.transformByQuaternion(quaternion);\n    y.scale(halfSize[1]);\n    z.transformByQuaternion(quaternion);\n    z.scale(halfSize[2]);\n    origin = [...x.toArray(), ...y.toArray(), ...z.toArray()];\n  } else {\n    origin = [...box.slice(3, 6), ...box.slice(6, 9), ...box.slice(9, 12)];\n  }\n\n  const xAxis = transform.transformAsVector(origin.slice(0, 3));\n  const yAxis = transform.transformAsVector(origin.slice(3, 6));\n  const zAxis = transform.transformAsVector(origin.slice(6, 9));\n  const halfAxes = new Matrix3([xAxis[0], xAxis[1], xAxis[2], yAxis[0], yAxis[1], yAxis[2], zAxis[0], zAxis[1], zAxis[2]]);\n\n  if (defined(result)) {\n    result.center = center;\n    result.halfAxes = halfAxes;\n    return result;\n  }\n\n  return new OrientedBoundingBox(center, halfAxes);\n}\n\nfunction createSphere(sphere, transform, result) {\n  const center = new Vector3(sphere[0], sphere[1], sphere[2]);\n  transform.transform(center, center);\n  const scale = transform.getScale(scratchScale);\n  const uniformScale = Math.max(Math.max(scale[0], scale[1]), scale[2]);\n  const radius = sphere[3] * uniformScale;\n\n  if (defined(result)) {\n    result.center = center;\n    result.radius = radius;\n    return result;\n  }\n\n  return new BoundingSphere(center, radius);\n}","map":{"version":3,"sources":["../../../../src/tileset/helpers/bounding-volume.ts"],"names":["x","scratchScale","scratchNorthWest","scratchSouthEast","assert","boundingVolumeHeader","createBox","northWest","Ellipsoid","degrees","southEast","centerInCartesian","radius","createSphere","center","box","transform","origin","halfSize","quaternion","y","z","xAxis","yAxis","zAxis","halfAxes","defined","result","sphere","scale","uniformScale","Math"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* eslint-disable */\nimport {Quaternion, Vector3, Matrix3, Matrix4, degrees} from '@math.gl/core';\nimport {BoundingSphere, OrientedBoundingBox} from '@math.gl/culling';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {assert} from '@loaders.gl/loader-utils';\n\n// const scratchProjectedBoundingSphere = new BoundingSphere();\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\n// const scratchMatrix = new Matrix3();\nconst scratchScale = new Vector3();\nconst scratchNorthWest = new Vector3();\nconst scratchSouthEast = new Vector3();\n// const scratchRectangle = new Rectangle();\n// const scratchOrientedBoundingBox = new OrientedBoundingBox();\n// const scratchTransform = new Matrix4();\n\n/**\n * Create a bounding volume from the tile's bounding volume header.\n * @param {Object} boundingVolumeHeader The tile's bounding volume header.\n * @param {Matrix4} transform The transform to apply to the bounding volume.\n * @param [result] The object onto which to store the result.\n * @returns The modified result parameter or a new TileBoundingVolume instance if none was provided.\n */\nexport function createBoundingVolume(boundingVolumeHeader, transform, result) {\n  assert(boundingVolumeHeader, '3D Tile: boundingVolume must be defined');\n\n  // boundingVolume schema:\n  // https://github.com/AnalyticalGraphicsInc/3d-tiles/blob/master/specification/schema/boundingVolume.schema.json\n  if (boundingVolumeHeader.box) {\n    return createBox(boundingVolumeHeader.box, transform, result);\n  }\n  if (boundingVolumeHeader.region) {\n    // [west, south, east, north, minimum height, maximum height]\n    // Latitudes and longitudes are in the WGS 84 datum as defined in EPSG 4979 and are in radians.\n    // Heights are in meters above (or below) the WGS 84 ellipsoid.\n    const [west, south, east, north, minHeight, maxHeight] = boundingVolumeHeader.region;\n\n    const northWest = Ellipsoid.WGS84.cartographicToCartesian(\n      [degrees(west), degrees(north), minHeight],\n      scratchNorthWest\n    );\n    const southEast = Ellipsoid.WGS84.cartographicToCartesian(\n      [degrees(east), degrees(south), maxHeight],\n      scratchSouthEast\n    );\n    const centerInCartesian = new Vector3().addVectors(northWest, southEast).multiplyScalar(0.5);\n    const radius = new Vector3().subVectors(northWest, southEast).len() / 2.0;\n\n    // TODO improve region boundingVolume\n    // for now, create a sphere as the boundingVolume instead of box\n    return createSphere(\n      [centerInCartesian[0], centerInCartesian[1], centerInCartesian[2], radius],\n      new Matrix4()\n    );\n  }\n\n  if (boundingVolumeHeader.sphere) {\n    return createSphere(boundingVolumeHeader.sphere, transform, result);\n  }\n\n  throw new Error('3D Tile: boundingVolume must contain a sphere, region, or box');\n}\n\nfunction createBox(box, transform, result) {\n  // https://math.gl/modules/culling/docs/api-reference/oriented-bounding-box\n  // 1. A half-axes based representation.\n  // box: An array of 12 numbers that define an oriented bounding box.\n  // The first three elements define the x, y, and z values for the center of the box.\n  // The next three elements (with indices 3, 4, and 5) define the x axis direction and half-length.\n  // The next three elements (indices 6, 7, and 8) define the y axis direction and half-length.\n  // The last three elements (indices 9, 10, and 11) define the z axis direction and half-length.\n  // 2. A half-size-quaternion based representation.\n  // box: An array of 10 numbers that define an oriented bounding box.\n  // The first three elements define the x, y, and z values for the center of the box in a right-handed 3-axis (x, y, z) Cartesian coordinate system where the z-axis is up.\n  // The next three elements (with indices 3, 4, and 5) define the halfSize.\n  // The last four elements (indices 6, 7, 8 and 10) define the quaternion.\n  const center = new Vector3(box[0], box[1], box[2]);\n  transform.transform(center, center);\n  let origin: number[] = [];\n  if (box.length === 10) {\n    const halfSize = box.slice(3, 6);\n    const quaternion = new Quaternion();\n    quaternion.fromArray(box, 6);\n    const x = new Vector3([1, 0, 0]);\n    const y = new Vector3([0, 1, 0]);\n    const z = new Vector3([0, 0, 1]);\n    x.transformByQuaternion(quaternion);\n    x.scale(halfSize[0]);\n    y.transformByQuaternion(quaternion);\n    y.scale(halfSize[1]);\n    z.transformByQuaternion(quaternion);\n    z.scale(halfSize[2]);\n    origin = [...x.toArray(), ...y.toArray(), ...z.toArray()];\n  } else {\n    origin = [...box.slice(3, 6), ...box.slice(6, 9), ...box.slice(9, 12)];\n  }\n  const xAxis = transform.transformAsVector(origin.slice(0, 3));\n  const yAxis = transform.transformAsVector(origin.slice(3, 6));\n  const zAxis = transform.transformAsVector(origin.slice(6, 9));\n  const halfAxes = new Matrix3([\n    xAxis[0],\n    xAxis[1],\n    xAxis[2],\n    yAxis[0],\n    yAxis[1],\n    yAxis[2],\n    zAxis[0],\n    zAxis[1],\n    zAxis[2]\n  ]);\n\n  if (defined(result)) {\n    result.center = center;\n    result.halfAxes = halfAxes;\n    return result;\n  }\n\n  return new OrientedBoundingBox(center, halfAxes);\n}\n\n/*\nfunction createBoxFromTransformedRegion(region, transform, initialTransform, result) {\n  const rectangle = Rectangle.unpack(region, 0, scratchRectangle);\n  const minimumHeight = region[4];\n  const maximumHeight = region[5];\n\n  const orientedBoundingBox = OrientedBoundingBox.fromRectangle(\n    rectangle,\n    minimumHeight,\n    maximumHeight,\n    Ellipsoid.WGS84,\n    scratchOrientedBoundingBox\n  );\n  const center = orientedBoundingBox.center;\n  const halfAxes = orientedBoundingBox.halfAxes;\n\n  // A region bounding volume is not transformed by the transform in the tileset JSON,\n  // but may be transformed by additional transforms applied in Cesium.\n  // This is why the transform is calculated as the difference between the initial transform and the current transform.\n  transform = Matrix4.multiplyTransformation(\n    transform,\n    Matrix4.inverseTransformation(initialTransform, scratchTransform),\n    scratchTransform\n  );\n  center = Matrix4.multiplyByPoint(transform, center, center);\n  const rotationScale = Matrix4.getRotation(transform, scratchMatrix);\n  halfAxes = Matrix3.multiply(rotationScale, halfAxes, halfAxes);\n\n  if (defined(result) && result instanceof TileOrientedBoundingBox) {\n    result.update(center, halfAxes);\n    return result;\n  }\n\n  return new TileOrientedBoundingBox(center, halfAxes);\n}\n\nfunction createRegion(region, transform, initialTransform, result) {\n  if (!Matrix4.equalsEpsilon(transform, initialTransform, CesiumMath.EPSILON8)) {\n    return createBoxFromTransformedRegion(region, transform, initialTransform, result);\n  }\n\n  if (defined(result)) {\n    return result;\n  }\n\n  const rectangleRegion = Rectangle.unpack(region, 0, scratchRectangle);\n\n  return new TileBoundingRegion({\n    rectangle: rectangleRegion,\n    minimumHeight: region[4],\n    maximumHeight: region[5]\n  });\n}\n*/\n\nfunction createSphere(sphere, transform, result?) {\n  // Find the transformed center\n  const center = new Vector3(sphere[0], sphere[1], sphere[2]);\n  transform.transform(center, center);\n  const scale = transform.getScale(scratchScale);\n\n  const uniformScale = Math.max(Math.max(scale[0], scale[1]), scale[2]);\n  const radius = sphere[3] * uniformScale;\n\n  if (defined(result)) {\n    result.center = center;\n    result.radius = radius;\n    return result;\n  }\n\n  return new BoundingSphere(center, radius);\n}\n"]},"metadata":{},"sourceType":"module"}