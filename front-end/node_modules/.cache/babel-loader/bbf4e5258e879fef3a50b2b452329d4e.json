{"ast":null,"code":"import { isAsyncIterable } from '../utils/iterable-utils';\nimport { PROP_SYMBOLS } from './constants';\nconst {\n  ASYNC_ORIGINAL,\n  ASYNC_RESOLVED,\n  ASYNC_DEFAULTS\n} = PROP_SYMBOLS;\nconst EMPTY_PROPS = Object.freeze({});\nexport default class ComponentState {\n  constructor() {\n    let component = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    this.component = component;\n    this.asyncProps = {};\n\n    this.onAsyncPropUpdated = () => {};\n\n    this.oldProps = EMPTY_PROPS;\n    this.oldAsyncProps = null;\n  }\n\n  finalize() {\n    for (const propName in this.asyncProps) {\n      const asyncProp = this.asyncProps[propName];\n\n      if (asyncProp.type && asyncProp.type.release) {\n        asyncProp.type.release(asyncProp.resolvedValue, asyncProp.type, this.component);\n      }\n    }\n  }\n\n  getOldProps() {\n    return this.oldAsyncProps || this.oldProps;\n  }\n\n  resetOldProps() {\n    this.oldAsyncProps = null;\n    this.oldProps = this.component.props;\n  }\n\n  freezeAsyncOldProps() {\n    if (!this.oldAsyncProps) {\n      this.oldProps = this.oldProps || this.component.props;\n      this.oldAsyncProps = Object.create(this.oldProps);\n\n      for (const propName in this.asyncProps) {\n        Object.defineProperty(this.oldAsyncProps, propName, {\n          enumerable: true,\n          value: this.oldProps[propName]\n        });\n      }\n    }\n  }\n\n  hasAsyncProp(propName) {\n    return propName in this.asyncProps;\n  }\n\n  getAsyncProp(propName) {\n    const asyncProp = this.asyncProps[propName];\n    return asyncProp && asyncProp.resolvedValue;\n  }\n\n  isAsyncPropLoading(propName) {\n    if (propName) {\n      const asyncProp = this.asyncProps[propName];\n      return Boolean(asyncProp && asyncProp.pendingLoadCount > 0 && asyncProp.pendingLoadCount !== asyncProp.resolvedLoadCount);\n    }\n\n    for (const key in this.asyncProps) {\n      if (this.isAsyncPropLoading(key)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  reloadAsyncProp(propName, value) {\n    this._watchPromise(propName, Promise.resolve(value));\n  }\n\n  setAsyncProps(props) {\n    const resolvedValues = props[ASYNC_RESOLVED] || {};\n    const originalValues = props[ASYNC_ORIGINAL] || props;\n    const defaultValues = props[ASYNC_DEFAULTS] || {};\n\n    for (const propName in resolvedValues) {\n      const value = resolvedValues[propName];\n\n      this._createAsyncPropData(propName, defaultValues[propName]);\n\n      this._updateAsyncProp(propName, value);\n\n      resolvedValues[propName] = this.getAsyncProp(propName);\n    }\n\n    for (const propName in originalValues) {\n      const value = originalValues[propName];\n\n      this._createAsyncPropData(propName, defaultValues[propName]);\n\n      this._updateAsyncProp(propName, value);\n    }\n  }\n\n  _updateAsyncProp(propName, value) {\n    if (!this._didAsyncInputValueChange(propName, value)) {\n      return;\n    }\n\n    if (typeof value === 'string') {\n      var _this$layer;\n\n      const fetch = (_this$layer = this.layer) === null || _this$layer === void 0 ? void 0 : _this$layer.props.fetch;\n      const url = value;\n\n      if (fetch) {\n        value = fetch(url, {\n          propName,\n          layer: this.layer\n        });\n      }\n    }\n\n    if (value instanceof Promise) {\n      this._watchPromise(propName, value);\n\n      return;\n    }\n\n    if (isAsyncIterable(value)) {\n      this._resolveAsyncIterable(propName, value);\n\n      return;\n    }\n\n    this._setPropValue(propName, value);\n  }\n\n  _didAsyncInputValueChange(propName, value) {\n    const asyncProp = this.asyncProps[propName];\n\n    if (value === asyncProp.resolvedValue || value === asyncProp.lastValue) {\n      return false;\n    }\n\n    asyncProp.lastValue = value;\n    return true;\n  }\n\n  _setPropValue(propName, value) {\n    this.freezeAsyncOldProps();\n    const asyncProp = this.asyncProps[propName];\n    value = this._postProcessValue(asyncProp, value);\n    asyncProp.resolvedValue = value;\n    asyncProp.pendingLoadCount++;\n    asyncProp.resolvedLoadCount = asyncProp.pendingLoadCount;\n  }\n\n  _setAsyncPropValue(propName, value, loadCount) {\n    const asyncProp = this.asyncProps[propName];\n\n    if (asyncProp && loadCount >= asyncProp.resolvedLoadCount && value !== undefined) {\n      this.freezeAsyncOldProps();\n      asyncProp.resolvedValue = value;\n      asyncProp.resolvedLoadCount = loadCount;\n      this.onAsyncPropUpdated(propName, value);\n    }\n  }\n\n  _watchPromise(propName, promise) {\n    const asyncProp = this.asyncProps[propName];\n    asyncProp.pendingLoadCount++;\n    const loadCount = asyncProp.pendingLoadCount;\n    promise.then(data => {\n      var _this$layer2;\n\n      data = this._postProcessValue(asyncProp, data);\n\n      this._setAsyncPropValue(propName, data, loadCount);\n\n      const onDataLoad = (_this$layer2 = this.layer) === null || _this$layer2 === void 0 ? void 0 : _this$layer2.props.onDataLoad;\n\n      if (propName === 'data' && onDataLoad) {\n        onDataLoad(data, {\n          propName,\n          layer: this.layer\n        });\n      }\n    }).catch(error => {\n      var _this$layer3;\n\n      (_this$layer3 = this.layer) === null || _this$layer3 === void 0 ? void 0 : _this$layer3.raiseError(error, \"loading \".concat(propName, \" of \").concat(this.layer));\n    });\n  }\n\n  async _resolveAsyncIterable(propName, iterable) {\n    var _this$layer4;\n\n    if (propName !== 'data') {\n      this._setPropValue(propName, iterable);\n    }\n\n    const asyncProp = this.asyncProps[propName];\n    asyncProp.pendingLoadCount++;\n    const loadCount = asyncProp.pendingLoadCount;\n    let data = [];\n    let count = 0;\n\n    for await (const chunk of iterable) {\n      const {\n        dataTransform\n      } = this.component ? this.component.props : {};\n\n      if (dataTransform) {\n        data = dataTransform(chunk, data);\n      } else {\n        data = data.concat(chunk);\n      }\n\n      Object.defineProperty(data, '__diff', {\n        enumerable: false,\n        value: [{\n          startRow: count,\n          endRow: data.length\n        }]\n      });\n      count = data.length;\n\n      this._setAsyncPropValue(propName, data, loadCount);\n    }\n\n    const onDataLoad = (_this$layer4 = this.layer) === null || _this$layer4 === void 0 ? void 0 : _this$layer4.props.onDataLoad;\n\n    if (onDataLoad) {\n      onDataLoad(data, {\n        propName,\n        layer: this.layer\n      });\n    }\n  }\n\n  _postProcessValue(asyncProp, value) {\n    const propType = asyncProp.type;\n\n    if (propType) {\n      if (propType.release) {\n        propType.release(asyncProp.resolvedValue, propType, this.component);\n      }\n\n      if (propType.transform) {\n        return propType.transform(value, propType, this.component);\n      }\n    }\n\n    return value;\n  }\n\n  _createAsyncPropData(propName, defaultValue) {\n    const asyncProp = this.asyncProps[propName];\n\n    if (!asyncProp) {\n      const propTypes = this.component && this.component.constructor._propTypes;\n      this.asyncProps[propName] = {\n        type: propTypes && propTypes[propName],\n        lastValue: null,\n        resolvedValue: defaultValue,\n        pendingLoadCount: 0,\n        resolvedLoadCount: 0\n      };\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/lifecycle/component-state.js"],"names":["ASYNC_DEFAULTS","EMPTY_PROPS","Object","constructor","component","finalize","asyncProp","getOldProps","resetOldProps","freezeAsyncOldProps","enumerable","value","hasAsyncProp","propName","getAsyncProp","isAsyncPropLoading","Boolean","reloadAsyncProp","Promise","setAsyncProps","resolvedValues","props","originalValues","defaultValues","_updateAsyncProp","fetch","url","layer","isAsyncIterable","_didAsyncInputValueChange","_setPropValue","_setAsyncPropValue","loadCount","_watchPromise","promise","data","onDataLoad","error","_resolveAsyncIterable","count","dataTransform","startRow","endRow","length","_postProcessValue","propType","_createAsyncPropData","propTypes","type","lastValue","resolvedValue","pendingLoadCount","resolvedLoadCount"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {isAsyncIterable} from '../utils/iterable-utils';\nimport {PROP_SYMBOLS} from './constants';\nconst {ASYNC_ORIGINAL, ASYNC_RESOLVED, ASYNC_DEFAULTS} = PROP_SYMBOLS;\n\nconst EMPTY_PROPS = Object.freeze({});\n\nexport default class ComponentState {\n  constructor(component = null) {\n    this.component = component;\n    this.asyncProps = {}; // Prop values that the layer sees\n    this.onAsyncPropUpdated = () => {};\n    this.oldProps = EMPTY_PROPS; // Last props before update\n    this.oldAsyncProps = null; // Last props before update, with async values copied.\n  }\n\n  finalize() {\n    for (const propName in this.asyncProps) {\n      const asyncProp = this.asyncProps[propName];\n      if (asyncProp.type && asyncProp.type.release) {\n        // Release any resources created by transforms\n        asyncProp.type.release(asyncProp.resolvedValue, asyncProp.type, this.component);\n      }\n    }\n  }\n\n  getOldProps() {\n    return this.oldAsyncProps || this.oldProps;\n  }\n\n  resetOldProps() {\n    this.oldAsyncProps = null;\n    this.oldProps = this.component.props;\n  }\n\n  // Whenever async props are changing, we need to make a copy of oldProps\n  // otherwise the prop rewriting will affect the value both in props and oldProps.\n  // While the copy is relatively expensive, this only happens on load completion.\n  freezeAsyncOldProps() {\n    if (!this.oldAsyncProps) {\n      // Make sure oldProps is set\n      this.oldProps = this.oldProps || this.component.props;\n\n      // 1. inherit all synchronous props from oldProps\n      // 2. reconfigure the async prop descriptors to fixed values\n      this.oldAsyncProps = Object.create(this.oldProps);\n      for (const propName in this.asyncProps) {\n        Object.defineProperty(this.oldAsyncProps, propName, {\n          enumerable: true,\n          value: this.oldProps[propName]\n        });\n      }\n    }\n  }\n\n  // ASYNC PROP HANDLING\n  //\n\n  // Checks if a prop is overridden\n  hasAsyncProp(propName) {\n    return propName in this.asyncProps;\n  }\n\n  // Returns value of an overriden prop\n  getAsyncProp(propName) {\n    const asyncProp = this.asyncProps[propName];\n    return asyncProp && asyncProp.resolvedValue;\n  }\n\n  isAsyncPropLoading(propName) {\n    if (propName) {\n      const asyncProp = this.asyncProps[propName];\n      return Boolean(\n        asyncProp &&\n          asyncProp.pendingLoadCount > 0 &&\n          asyncProp.pendingLoadCount !== asyncProp.resolvedLoadCount\n      );\n    }\n    for (const key in this.asyncProps) {\n      if (this.isAsyncPropLoading(key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Without changing the original prop value, swap out the data resolution under the hood\n  reloadAsyncProp(propName, value) {\n    this._watchPromise(propName, Promise.resolve(value));\n  }\n\n  // Updates all async/overridden props (when new props come in)\n  // Checks if urls have changed, starts loading, or removes override\n  setAsyncProps(props) {\n    // NOTE: prop param and default values are only support for testing\n    const resolvedValues = props[ASYNC_RESOLVED] || {};\n    const originalValues = props[ASYNC_ORIGINAL] || props;\n    const defaultValues = props[ASYNC_DEFAULTS] || {};\n\n    // TODO - use async props from the layer's prop types\n    for (const propName in resolvedValues) {\n      const value = resolvedValues[propName];\n      this._createAsyncPropData(propName, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n      // Use transformed value\n      resolvedValues[propName] = this.getAsyncProp(propName);\n    }\n\n    for (const propName in originalValues) {\n      const value = originalValues[propName];\n      // Makes sure a record exists for this prop\n      this._createAsyncPropData(propName, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n    }\n  }\n\n  // Intercept strings (URLs) and Promises and activates loading and prop rewriting\n  _updateAsyncProp(propName, value) {\n    if (!this._didAsyncInputValueChange(propName, value)) {\n      return;\n    }\n\n    // interpret value string as url and start a new load tracked by a promise\n    if (typeof value === 'string') {\n      const fetch = this.layer?.props.fetch;\n      const url = value;\n      if (fetch) {\n        value = fetch(url, {propName, layer: this.layer});\n      }\n    }\n\n    // interprets promise and track the \"loading\"\n    if (value instanceof Promise) {\n      this._watchPromise(propName, value);\n      return;\n    }\n\n    if (isAsyncIterable(value)) {\n      this._resolveAsyncIterable(propName, value);\n      return;\n    }\n\n    // else, normal, non-async value. Just store value for now\n    this._setPropValue(propName, value);\n  }\n\n  // Checks if an input value actually changed (to avoid reloading/rewatching promises/urls)\n  _didAsyncInputValueChange(propName, value) {\n    const asyncProp = this.asyncProps[propName];\n    if (value === asyncProp.resolvedValue || value === asyncProp.lastValue) {\n      return false;\n    }\n    asyncProp.lastValue = value;\n    return true;\n  }\n\n  // Set normal, non-async value\n  _setPropValue(propName, value) {\n    // Save the current value before overwriting so that diffProps can access both\n    this.freezeAsyncOldProps();\n\n    const asyncProp = this.asyncProps[propName];\n    value = this._postProcessValue(asyncProp, value);\n    asyncProp.resolvedValue = value;\n    asyncProp.pendingLoadCount++;\n    asyncProp.resolvedLoadCount = asyncProp.pendingLoadCount;\n  }\n\n  // Set a just resolved async value, calling onAsyncPropUpdates if value changes asynchronously\n  _setAsyncPropValue(propName, value, loadCount) {\n    // Only update if loadCount is larger or equal to resolvedLoadCount\n    // otherwise a more recent load has already completed\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp && loadCount >= asyncProp.resolvedLoadCount && value !== undefined) {\n      // Save the current value before overwriting so that diffProps can access both\n      this.freezeAsyncOldProps();\n\n      asyncProp.resolvedValue = value;\n      asyncProp.resolvedLoadCount = loadCount;\n\n      // Call callback to inform listener\n      this.onAsyncPropUpdated(propName, value);\n    }\n  }\n\n  // Tracks a promise, sets the prop when loaded, handles load count\n  _watchPromise(propName, promise) {\n    const asyncProp = this.asyncProps[propName];\n    asyncProp.pendingLoadCount++;\n    const loadCount = asyncProp.pendingLoadCount;\n    promise\n      .then(data => {\n        data = this._postProcessValue(asyncProp, data);\n        this._setAsyncPropValue(propName, data, loadCount);\n\n        const onDataLoad = this.layer?.props.onDataLoad;\n        if (propName === 'data' && onDataLoad) {\n          onDataLoad(data, {propName, layer: this.layer});\n        }\n      })\n      .catch(error => {\n        this.layer?.raiseError(error, `loading ${propName} of ${this.layer}`);\n      });\n  }\n\n  async _resolveAsyncIterable(propName, iterable) {\n    if (propName !== 'data') {\n      // we only support data as async iterable\n      this._setPropValue(propName, iterable);\n    }\n\n    const asyncProp = this.asyncProps[propName];\n    asyncProp.pendingLoadCount++;\n    const loadCount = asyncProp.pendingLoadCount;\n    let data = [];\n    let count = 0;\n\n    for await (const chunk of iterable) {\n      const {dataTransform} = this.component ? this.component.props : {};\n      if (dataTransform) {\n        data = dataTransform(chunk, data);\n      } else {\n        data = data.concat(chunk);\n      }\n\n      // Used by the default _dataDiff function\n      Object.defineProperty(data, '__diff', {\n        enumerable: false,\n        value: [{startRow: count, endRow: data.length}]\n      });\n\n      count = data.length;\n      this._setAsyncPropValue(propName, data, loadCount);\n    }\n\n    const onDataLoad = this.layer?.props.onDataLoad;\n    if (onDataLoad) {\n      onDataLoad(data, {propName, layer: this.layer});\n    }\n  }\n\n  // Give the app a chance to post process the loaded data\n  _postProcessValue(asyncProp, value) {\n    const propType = asyncProp.type;\n    if (propType) {\n      if (propType.release) {\n        propType.release(asyncProp.resolvedValue, propType, this.component);\n      }\n      if (propType.transform) {\n        return propType.transform(value, propType, this.component);\n      }\n    }\n    return value;\n  }\n\n  // Creating an asyncProp record if needed\n  _createAsyncPropData(propName, defaultValue) {\n    const asyncProp = this.asyncProps[propName];\n    if (!asyncProp) {\n      const propTypes = this.component && this.component.constructor._propTypes;\n      // assert(defaultValue !== undefined);\n      this.asyncProps[propName] = {\n        type: propTypes && propTypes[propName],\n        lastValue: null, // Supplied prop value (can be url/promise, not visible to layer)\n        resolvedValue: defaultValue, // Resolved prop value (valid data, can be \"shown\" to layer)\n        pendingLoadCount: 0, // How many loads have been issued\n        resolvedLoadCount: 0 // Latest resolved load, (earlier loads will be ignored)\n      };\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}