{"ast":null,"code":"export function isImage(image) {\n  return Boolean(getImageTypeOrNull(image));\n}\nexport function deleteImage(image) {\n  switch (getImageType(image)) {\n    case 'imagebitmap':\n      image.close();\n      break;\n\n    default:\n  }\n}\nexport function getImageType(image) {\n  const format = getImageTypeOrNull(image);\n\n  if (!format) {\n    throw new Error('Not an image');\n  }\n\n  return format;\n}\nexport function getImageSize(image) {\n  return getImageData(image);\n}\nexport function getImageData(image) {\n  switch (getImageType(image)) {\n    case 'data':\n      return image;\n\n    case 'image':\n    case 'imagebitmap':\n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d');\n\n      if (!context) {\n        throw new Error('getImageData');\n      }\n\n      canvas.width = image.width;\n      canvas.height = image.height;\n      context.drawImage(image, 0, 0);\n      return context.getImageData(0, 0, image.width, image.height);\n\n    default:\n      throw new Error('getImageData');\n  }\n}\n\nfunction getImageTypeOrNull(image) {\n  if (typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    return 'imagebitmap';\n  }\n\n  if (typeof Image !== 'undefined' && image instanceof Image) {\n    return 'image';\n  }\n\n  if (image && typeof image === 'object' && image.data && image.width && image.height) {\n    return 'data';\n  }\n\n  return null;\n}","map":{"version":3,"sources":["../../../../src/lib/category-api/parsed-image-api.ts"],"names":["Boolean","getImageTypeOrNull","getImageType","image","format","getImageData","canvas","document","context"],"mappings":"AAEA,OAAO,SAAA,OAAA,CAAA,KAAA,EAA4C;AACjD,SAAOA,OAAO,CAACC,kBAAkB,CAAjC,KAAiC,CAAnB,CAAd;AACD;AAED,OAAO,SAAA,WAAA,CAAA,KAAA,EAA6C;AAClD,UAAQC,YAAY,CAApB,KAAoB,CAApB;AACE,SAAA,aAAA;AACGC,MAAAA,KAAD,CAAA,KAACA;AACD;;AACF;AAJF;AAOD;AAED,OAAO,SAAA,YAAA,CAAA,KAAA,EAAuD;AAC5D,QAAMC,MAAM,GAAGH,kBAAkB,CAAjC,KAAiC,CAAjC;;AACA,MAAI,CAAJ,MAAA,EAAa;AACX,UAAM,IAAA,KAAA,CAAN,cAAM,CAAN;AACD;;AACD,SAAA,MAAA;AACD;AAED,OAAO,SAAA,YAAA,CAAA,KAAA,EAAyE;AAC9E,SAAOI,YAAY,CAAnB,KAAmB,CAAnB;AACD;AAED,OAAO,SAAA,YAAA,CAAA,KAAA,EAAmE;AACxE,UAAQH,YAAY,CAApB,KAAoB,CAApB;AACE,SAAA,MAAA;AACE,aAAA,KAAA;;AAEF,SAAA,OAAA;AACA,SAAA,aAAA;AAEE,YAAMI,MAAM,GAAGC,QAAQ,CAARA,aAAAA,CAAf,QAAeA,CAAf;AAEA,YAAMC,OAAO,GAAGF,MAAM,CAANA,UAAAA,CAAhB,IAAgBA,CAAhB;;AACA,UAAI,CAAJ,OAAA,EAAc;AACZ,cAAM,IAAA,KAAA,CAAN,cAAM,CAAN;AACD;;AAEDA,MAAAA,MAAM,CAANA,KAAAA,GAAeH,KAAK,CAApBG,KAAAA;AAEAA,MAAAA,MAAM,CAANA,MAAAA,GAAgBH,KAAK,CAArBG,MAAAA;AAEAE,MAAAA,OAAO,CAAPA,SAAAA,CAAAA,KAAAA,EAAAA,CAAAA,EAAAA,CAAAA;AAEA,aAAOA,OAAO,CAAPA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAA2BL,KAAK,CAAhCK,KAAAA,EAAwCL,KAAK,CAApD,MAAOK,CAAP;;AAEF;AACE,YAAM,IAAA,KAAA,CAAN,cAAM,CAAN;AAvBJ;AAyBD;;AAKD,SAAA,kBAAA,CAAA,KAAA,EAAmC;AACjC,MAAI,OAAA,WAAA,KAAA,WAAA,IAAsCL,KAAK,YAA/C,WAAA,EAAwE;AACtE,WAAA,aAAA;AACD;;AACD,MAAI,OAAA,KAAA,KAAA,WAAA,IAAgCA,KAAK,YAAzC,KAAA,EAA4D;AAC1D,WAAA,OAAA;AACD;;AACD,MAAIA,KAAK,IAAI,OAAA,KAAA,KAATA,QAAAA,IAAsCA,KAAK,CAA3CA,IAAAA,IAAoDA,KAAK,CAAzDA,KAAAA,IAAmEA,KAAK,CAA5E,MAAA,EAAqF;AACnF,WAAA,MAAA;AACD;;AACD,SAAA,IAAA;AACD","sourcesContent":["import type {ImageType, ImageTypeEnum, ImageDataType} from '../../types';\n\nexport function isImage(image: ImageType): boolean {\n  return Boolean(getImageTypeOrNull(image));\n}\n\nexport function deleteImage(image: ImageType): void {\n  switch (getImageType(image)) {\n    case 'imagebitmap':\n      (image as ImageBitmap).close();\n      break;\n    default:\n    // Nothing to do for images and image data objects\n  }\n}\n\nexport function getImageType(image: ImageType): ImageTypeEnum {\n  const format = getImageTypeOrNull(image);\n  if (!format) {\n    throw new Error('Not an image');\n  }\n  return format;\n}\n\nexport function getImageSize(image: ImageType): {width: number; height: number} {\n  return getImageData(image);\n}\n\nexport function getImageData(image: ImageType): ImageDataType | ImageData {\n  switch (getImageType(image)) {\n    case 'data':\n      return image as unknown as ImageData;\n\n    case 'image':\n    case 'imagebitmap':\n      // Extract the image data from the image via a canvas\n      const canvas = document.createElement('canvas');\n      // TODO - reuse the canvas?\n      const context = canvas.getContext('2d');\n      if (!context) {\n        throw new Error('getImageData');\n      }\n      // @ts-ignore\n      canvas.width = image.width;\n      // @ts-ignore\n      canvas.height = image.height;\n      // @ts-ignore\n      context.drawImage(image, 0, 0);\n      // @ts-ignore\n      return context.getImageData(0, 0, image.width, image.height);\n\n    default:\n      throw new Error('getImageData');\n  }\n}\n\n// PRIVATE\n\n// eslint-disable-next-line complexity\nfunction getImageTypeOrNull(image) {\n  if (typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    return 'imagebitmap';\n  }\n  if (typeof Image !== 'undefined' && image instanceof Image) {\n    return 'image';\n  }\n  if (image && typeof image === 'object' && image.data && image.width && image.height) {\n    return 'data';\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}