{"ast":null,"code":"import { TILE3D_TYPE } from '../constants';\nimport { getMagicString } from './helpers/parse-utils';\nimport { parsePointCloud3DTile } from './parse-3d-tile-point-cloud';\nimport { parseBatchedModel3DTile } from './parse-3d-tile-batched-model';\nimport { parseInstancedModel3DTile } from './parse-3d-tile-instanced-model';\nimport { parseComposite3DTile } from './parse-3d-tile-composite';\nexport async function parse3DTile(arrayBuffer) {\n  let byteOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let options = arguments.length > 2 ? arguments[2] : undefined;\n  let context = arguments.length > 3 ? arguments[3] : undefined;\n  let tile = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  tile.byteOffset = byteOffset;\n  tile.type = getMagicString(arrayBuffer, byteOffset);\n\n  switch (tile.type) {\n    case TILE3D_TYPE.COMPOSITE:\n      return await parseComposite3DTile(tile, arrayBuffer, byteOffset, options, context, parse3DTile);\n\n    case TILE3D_TYPE.BATCHED_3D_MODEL:\n      return await parseBatchedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    case TILE3D_TYPE.INSTANCED_3D_MODEL:\n      return await parseInstancedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    case TILE3D_TYPE.POINT_CLOUD:\n      return await parsePointCloud3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    default:\n      throw new Error(\"3DTileLoader: unknown type \".concat(tile.type));\n  }\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-3d-tile.js"],"names":["byteOffset","tile","getMagicString","TILE3D_TYPE","parseComposite3DTile","parseBatchedModel3DTile","parseInstancedModel3DTile","parsePointCloud3DTile"],"mappings":"AAGA,SAAA,WAAA,QAAA,cAAA;AACA,SAAA,cAAA,QAAA,uBAAA;AAEA,SAAA,qBAAA,QAAA,6BAAA;AACA,SAAA,uBAAA,QAAA,+BAAA;AACA,SAAA,yBAAA,QAAA,iCAAA;AACA,SAAA,oBAAA,QAAA,2BAAA;AAGA,OAAO,eAAA,WAAA,CAAA,WAAA,EAAqF;AAAA,MAA7CA,UAA6C,uEAArF,CAAqF;AAAA,MAArF,OAAqF;AAAA,MAArF,OAAqF;AAAA,MAAXC,IAAW,uEAArF,EAAqF;AAC1FA,EAAAA,IAAI,CAAJA,UAAAA,GAAAA,UAAAA;AACAA,EAAAA,IAAI,CAAJA,IAAAA,GAAYC,cAAc,CAAA,WAAA,EAA1BD,UAA0B,CAA1BA;;AAEA,UAAQA,IAAI,CAAZ,IAAA;AACE,SAAKE,WAAW,CAAhB,SAAA;AAEE,aAAO,MAAMC,oBAAoB,CAAA,IAAA,EAAA,WAAA,EAAA,UAAA,EAAA,OAAA,EAAA,OAAA,EAAjC,WAAiC,CAAjC;;AASF,SAAKD,WAAW,CAAhB,gBAAA;AACE,aAAO,MAAME,uBAAuB,CAAA,IAAA,EAAA,WAAA,EAAA,UAAA,EAAA,OAAA,EAApC,OAAoC,CAApC;;AAEF,SAAKF,WAAW,CAAhB,kBAAA;AACE,aAAO,MAAMG,yBAAyB,CAAA,IAAA,EAAA,WAAA,EAAA,UAAA,EAAA,OAAA,EAAtC,OAAsC,CAAtC;;AAEF,SAAKH,WAAW,CAAhB,WAAA;AACE,aAAO,MAAMI,qBAAqB,CAAA,IAAA,EAAA,WAAA,EAAA,UAAA,EAAA,OAAA,EAAlC,OAAkC,CAAlC;;AAEF;AACE,YAAM,IAAA,KAAA,CAAA,8BAAA,MAAA,CAAwCN,IAAI,CAAlD,IAAM,CAAA,CAAN;AAtBJ;AAwBD","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {TILE3D_TYPE} from '../constants';\nimport {getMagicString} from './helpers/parse-utils';\n\nimport {parsePointCloud3DTile} from './parse-3d-tile-point-cloud';\nimport {parseBatchedModel3DTile} from './parse-3d-tile-batched-model';\nimport {parseInstancedModel3DTile} from './parse-3d-tile-instanced-model';\nimport {parseComposite3DTile} from './parse-3d-tile-composite';\n\n// Extracts\nexport async function parse3DTile(arrayBuffer, byteOffset = 0, options, context, tile = {}) {\n  tile.byteOffset = byteOffset;\n  tile.type = getMagicString(arrayBuffer, byteOffset);\n\n  switch (tile.type) {\n    case TILE3D_TYPE.COMPOSITE:\n      // Note: We pass this function as argument so that embedded tiles can be parsed recursively\n      return await parseComposite3DTile(\n        tile,\n        arrayBuffer,\n        byteOffset,\n        options,\n        context,\n        parse3DTile\n      );\n\n    case TILE3D_TYPE.BATCHED_3D_MODEL:\n      return await parseBatchedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    case TILE3D_TYPE.INSTANCED_3D_MODEL:\n      return await parseInstancedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    case TILE3D_TYPE.POINT_CLOUD:\n      return await parsePointCloud3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    default:\n      throw new Error(`3DTileLoader: unknown type ${tile.type}`); // eslint-disable-line\n  }\n}\n"]},"metadata":{},"sourceType":"module"}