{"ast":null,"code":"import Viewport from '../viewports/viewport';\nimport { parsePosition, getPosition } from '../utils/positions';\nimport { deepEqual } from '../utils/deep-equal';\nimport assert from '../utils/assert';\nexport default class View {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      id = null,\n      x = 0,\n      y = 0,\n      width = '100%',\n      height = '100%',\n      viewportInstance,\n      type = Viewport\n    } = props;\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n    this.id = id || this.constructor.displayName || 'view';\n    this.type = type;\n    this.props = { ...props,\n      id: this.id\n    };\n\n    this._parseDimensions({\n      x,\n      y,\n      width,\n      height\n    });\n\n    this.equals = this.equals.bind(this);\n    Object.seal(this);\n  }\n\n  equals(view) {\n    if (this === view) {\n      return true;\n    }\n\n    if (this.viewportInstance) {\n      return view.viewportInstance && this.viewportInstance.equals(view.viewportInstance);\n    }\n\n    const viewChanged = deepEqual(this.props, view.props);\n    return viewChanged;\n  }\n\n  makeViewport(_ref) {\n    let {\n      width,\n      height,\n      viewState\n    } = _ref;\n\n    if (this.viewportInstance) {\n      return this.viewportInstance;\n    }\n\n    viewState = this.filterViewState(viewState);\n    const viewportDimensions = this.getDimensions({\n      width,\n      height\n    });\n    return this._getViewport(viewState, viewportDimensions);\n  }\n\n  getViewStateId() {\n    switch (typeof this.props.viewState) {\n      case 'string':\n        return this.props.viewState;\n\n      case 'object':\n        return this.props.viewState && this.props.viewState.id;\n\n      default:\n        return this.id;\n    }\n  }\n\n  filterViewState(viewState) {\n    if (this.props.viewState && typeof this.props.viewState === 'object') {\n      if (!this.props.viewState.id) {\n        return this.props.viewState;\n      }\n\n      const newViewState = { ...viewState\n      };\n\n      for (const key in this.props.viewState) {\n        if (key !== 'id') {\n          newViewState[key] = this.props.viewState[key];\n        }\n      }\n\n      return newViewState;\n    }\n\n    return viewState;\n  }\n\n  getDimensions(_ref2) {\n    let {\n      width,\n      height\n    } = _ref2;\n    return {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n  }\n\n  _getControllerProps(defaultOpts) {\n    let opts = this.props.controller;\n\n    if (!opts) {\n      return null;\n    }\n\n    if (opts === true) {\n      return defaultOpts;\n    }\n\n    if (typeof opts === 'function') {\n      opts = {\n        type: opts\n      };\n    }\n\n    return { ...defaultOpts,\n      ...opts\n    };\n  }\n\n  _getViewport(viewState, viewportDimensions) {\n    const {\n      type: ViewportType\n    } = this;\n    return new ViewportType({ ...viewState,\n      ...this.props,\n      ...viewportDimensions\n    });\n  }\n\n  _parseDimensions(_ref3) {\n    let {\n      x,\n      y,\n      width,\n      height\n    } = _ref3;\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n  }\n\n}","map":{"version":3,"sources":["../../../src/views/view.js"],"names":["constructor","props","id","x","y","width","height","type","Viewport","assert","viewportInstance","Object","equals","view","viewChanged","deepEqual","makeViewport","viewState","viewportDimensions","getViewStateId","filterViewState","newViewState","key","getDimensions","getPosition","_getControllerProps","opts","_getViewport","ViewportType","_parseDimensions","parsePosition"],"mappings":"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","sourcesContent":["import Viewport from '../viewports/viewport';\nimport {parsePosition, getPosition} from '../utils/positions';\nimport {deepEqual} from '../utils/deep-equal';\nimport assert from '../utils/assert';\n\nexport default class View {\n  constructor(props = {}) {\n    const {\n      id = null,\n\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = '100%',\n      height = '100%',\n\n      // A View can be a wrapper for a viewport instance\n      viewportInstance,\n\n      // Internal: Viewport Type\n      type = Viewport // TODO - default to WebMercator?\n    } = props;\n\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n\n    // Id\n    this.id = id || this.constructor.displayName || 'view';\n    this.type = type;\n\n    this.props = {...props, id: this.id};\n\n    // Extents\n    this._parseDimensions({x, y, width, height});\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n\n    Object.seal(this);\n  }\n\n  equals(view) {\n    if (this === view) {\n      return true;\n    }\n\n    // if `viewportInstance` is set, it is the only prop that is used\n    // Delegate to `Viewport.equals`\n    if (this.viewportInstance) {\n      return view.viewportInstance && this.viewportInstance.equals(view.viewportInstance);\n    }\n\n    const viewChanged = deepEqual(this.props, view.props);\n\n    return viewChanged;\n  }\n\n  // Build a `Viewport` from a view descriptor\n  // TODO - add support for autosizing viewports using width and height\n  makeViewport({width, height, viewState}) {\n    if (this.viewportInstance) {\n      return this.viewportInstance;\n    }\n\n    viewState = this.filterViewState(viewState);\n\n    // Resolve relative viewport dimensions\n    const viewportDimensions = this.getDimensions({width, height});\n    return this._getViewport(viewState, viewportDimensions);\n  }\n\n  getViewStateId() {\n    switch (typeof this.props.viewState) {\n      case 'string':\n        // if View.viewState is a string, return it\n        return this.props.viewState;\n\n      case 'object':\n        // If it is an object, return its id component\n        return this.props.viewState && this.props.viewState.id;\n\n      default:\n        return this.id;\n    }\n  }\n\n  // Allows view to override (or completely define) viewState\n  filterViewState(viewState) {\n    if (this.props.viewState && typeof this.props.viewState === 'object') {\n      // If we have specified an id, then intent is to override,\n      // If not, completely specify the view state\n      if (!this.props.viewState.id) {\n        return this.props.viewState;\n      }\n\n      // Merge in all props from View's viewState, except id\n      const newViewState = {...viewState};\n      for (const key in this.props.viewState) {\n        if (key !== 'id') {\n          newViewState[key] = this.props.viewState[key];\n        }\n      }\n      return newViewState;\n    }\n\n    return viewState;\n  }\n\n  // Resolve relative viewport dimensions into actual dimensions (y='50%', width=800 => y=400)\n  getDimensions({width, height}) {\n    return {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n  }\n\n  // Used by sub classes to resolve controller props\n  _getControllerProps(defaultOpts) {\n    let opts = this.props.controller;\n\n    if (!opts) {\n      return null;\n    }\n    if (opts === true) {\n      return defaultOpts;\n    }\n    if (typeof opts === 'function') {\n      opts = {type: opts};\n    }\n    return {...defaultOpts, ...opts};\n  }\n\n  // Overridable method\n  _getViewport(viewState, viewportDimensions) {\n    // Get the type of the viewport\n    const {type: ViewportType} = this;\n    return new ViewportType({...viewState, ...this.props, ...viewportDimensions});\n  }\n\n  // Parse relative viewport dimension descriptors (e.g {y: '50%', height: '50%'})\n  _parseDimensions({x, y, width, height}) {\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}