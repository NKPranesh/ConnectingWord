{"ast":null,"code":"import UserTable from \"../data/usersTable.json\";\nlet nodes = [\"pranesh@gmail.com\", \"vamshi@gmail.com\", \"mahesh@gmail.com\", \"virat@gmail.com\", \"rohit@gmail.com\", \"tarak@gmail.com\", \"charan@gmail.com\"];\nlet graph = [[3, 5, 1], [0], [3, 6], [2, 4, 0], [3], [6, 0], [5, 2]];\n\nfunction toRadians(degrees) {\n  var pi = Math.PI;\n  return degrees * (pi / 180);\n}\n\nconst PNYlist = (latitude, longitude, loginEmail) => {\n  let distance = [];\n  nodes.map(node => {\n    UserTable.map(user => {\n      if (user.email === node && user.email !== loginEmail) {\n        let latitude1 = user.latitude;\n        let longitude1 = user.longitude;\n        let lon1 = toRadians(longitude);\n        let lon2 = toRadians(longitude1);\n        let lat1 = toRadians(latitude);\n        let lat2 = toRadians(latitude1); // Haversine formula\n\n        let dlon = lon2 - lon1;\n        let dlat = lat2 - lat1;\n        let a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);\n        let c = 2 * Math.asin(Math.sqrt(a)); // Radius of earth in kilometers. Use 3956\n        // for miles\n\n        let r = 6371;\n        distance.push({\n          name: user.name,\n          email: node,\n          distance: c * r,\n          latitude: user.latitude,\n          longitude: user.longitude\n        });\n      }\n    });\n  }); //distance.sort((a, b) => a.distance.localeCompare(b.distance));\n\n  console.log(distance);\n  return distance;\n}; //PNYlist(78.3453,3.4567);\n\n\n_c = PNYlist;\nexport default PNYlist;\n\nvar _c;\n\n$RefreshReg$(_c, \"PNYlist\");","map":{"version":3,"sources":["P:/projects/ConnectingWord/front-end/src/calc/PNYfunc.js"],"names":["UserTable","nodes","graph","toRadians","degrees","pi","Math","PI","PNYlist","latitude","longitude","loginEmail","distance","map","node","user","email","latitude1","longitude1","lon1","lon2","lat1","lat2","dlon","dlat","a","pow","sin","cos","c","asin","sqrt","r","push","name","console","log"],"mappings":"AAAA,OAASA,SAAT,MAAyB,yBAAzB;AACA,IAAIC,KAAK,GAAC,CAAC,mBAAD,EAAqB,kBAArB,EAAwC,kBAAxC,EAA2D,iBAA3D,EAA6E,iBAA7E,EAA+F,iBAA/F,EAAiH,kBAAjH,CAAV;AACA,IAAIC,KAAK,GAAC,CACN,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CADM,EAEN,CAAC,CAAD,CAFM,EAGN,CAAC,CAAD,EAAG,CAAH,CAHM,EAIN,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAJM,EAKN,CAAC,CAAD,CALM,EAMN,CAAC,CAAD,EAAG,CAAH,CANM,EAON,CAAC,CAAD,EAAG,CAAH,CAPM,CAAV;;AASA,SAASC,SAAT,CAAmBC,OAAnB,EACA;AACE,MAAIC,EAAE,GAAGC,IAAI,CAACC,EAAd;AACA,SAAOH,OAAO,IAAIC,EAAE,GAAC,GAAP,CAAd;AACD;;AACD,MAAMG,OAAO,GAAG,CAACC,QAAD,EAAUC,SAAV,EAAoBC,UAApB,KAAmC;AAC/C,MAAIC,QAAQ,GAAC,EAAb;AACAX,EAAAA,KAAK,CAACY,GAAN,CAAWC,IAAD,IAAQ;AACdd,IAAAA,SAAS,CAACa,GAAV,CAAeE,IAAD,IACd;AACI,UAAGA,IAAI,CAACC,KAAL,KAAeF,IAAf,IAAuBC,IAAI,CAACC,KAAL,KAAaL,UAAvC,EAAkD;AAClD,YAAIM,SAAS,GAACF,IAAI,CAACN,QAAnB;AACA,YAAIS,UAAU,GAACH,IAAI,CAACL,SAApB;AACA,YAAIS,IAAI,GAAGhB,SAAS,CAACO,SAAD,CAApB;AACA,YAAIU,IAAI,GAAGjB,SAAS,CAACe,UAAD,CAApB;AACA,YAAIG,IAAI,GAAGlB,SAAS,CAACM,QAAD,CAApB;AACA,YAAIa,IAAI,GAAGnB,SAAS,CAACc,SAAD,CAApB,CANkD,CAQlD;;AACA,YAAIM,IAAI,GAAGH,IAAI,GAAGD,IAAlB;AACA,YAAIK,IAAI,GAAGF,IAAI,GAAGD,IAAlB;AACA,YAAII,CAAC,GAAGnB,IAAI,CAACoB,GAAL,CAASpB,IAAI,CAACqB,GAAL,CAASH,IAAI,GAAG,CAAhB,CAAT,EAA6B,CAA7B,IACMlB,IAAI,CAACsB,GAAL,CAASP,IAAT,IAAiBf,IAAI,CAACsB,GAAL,CAASN,IAAT,CAAjB,GACAhB,IAAI,CAACoB,GAAL,CAASpB,IAAI,CAACqB,GAAL,CAASJ,IAAI,GAAG,CAAhB,CAAT,EAA4B,CAA5B,CAFd;AAIA,YAAIM,CAAC,GAAG,IAAIvB,IAAI,CAACwB,IAAL,CAAUxB,IAAI,CAACyB,IAAL,CAAUN,CAAV,CAAV,CAAZ,CAfkD,CAiBlD;AACA;;AACA,YAAIO,CAAC,GAAG,IAAR;AACApB,QAAAA,QAAQ,CAACqB,IAAT,CAAc;AAACC,UAAAA,IAAI,EAAGnB,IAAI,CAACmB,IAAb;AAAkBlB,UAAAA,KAAK,EAAGF,IAA1B;AACdF,UAAAA,QAAQ,EAAGiB,CAAC,GAACG,CADC;AACCvB,UAAAA,QAAQ,EAAGM,IAAI,CAACN,QADjB;AAC0BC,UAAAA,SAAS,EAAGK,IAAI,CAACL;AAD3C,SAAd;AAEH;AACA,KAzBD;AA0BH,GA3BD,EAF+C,CA8B/C;;AACAyB,EAAAA,OAAO,CAACC,GAAR,CAAYxB,QAAZ;AACQ,SACIA,QADJ;AAGP,CAnCL,C,CAoCI;;;KApCEJ,O;AAqCN,eAAeA,OAAf","sourcesContent":["import   UserTable from  \"../data/usersTable.json\";\r\nlet nodes=[\"pranesh@gmail.com\",\"vamshi@gmail.com\",\"mahesh@gmail.com\",\"virat@gmail.com\",\"rohit@gmail.com\",\"tarak@gmail.com\",\"charan@gmail.com\"];\r\nlet graph=[\r\n    [3,5,1],\r\n    [0],\r\n    [3,6],\r\n    [2,4,0],\r\n    [3],\r\n    [6,0],\r\n    [5,2]\r\n];\r\nfunction toRadians(degrees)\r\n{\r\n  var pi = Math.PI;\r\n  return degrees * (pi/180);\r\n}\r\nconst PNYlist = (latitude,longitude,loginEmail) => {\r\n    let distance=[];\r\n    nodes.map((node)=>{\r\n        UserTable.map((user)=>\r\n        {\r\n            if(user.email === node && user.email!==loginEmail){\r\n            let latitude1=user.latitude;\r\n            let longitude1=user.longitude;\r\n            let lon1 = toRadians(longitude);\r\n            let lon2 = toRadians(longitude1);\r\n            let lat1 = toRadians(latitude);\r\n            let lat2 = toRadians(latitude1);\r\n\r\n            // Haversine formula\r\n            let dlon = lon2 - lon1;\r\n            let dlat = lat2 - lat1;\r\n            let a = Math.pow(Math.sin(dlat / 2), 2)\r\n                        + Math.cos(lat1) * Math.cos(lat2)\r\n                        * Math.pow(Math.sin(dlon / 2),2);\r\n                    \r\n            let c = 2 * Math.asin(Math.sqrt(a));\r\n\r\n            // Radius of earth in kilometers. Use 3956\r\n            // for miles\r\n            let r = 6371; \r\n            distance.push({name : user.name,email : node,\r\n            distance : c*r,latitude : user.latitude,longitude : user.longitude});\r\n        }\r\n        })\r\n    })\r\n    //distance.sort((a, b) => a.distance.localeCompare(b.distance));\r\n    console.log(distance);\r\n            return(\r\n                distance\r\n            );\r\n    }\r\n    //PNYlist(78.3453,3.4567);\r\nexport default PNYlist;"]},"metadata":{},"sourceType":"module"}