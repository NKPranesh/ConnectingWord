{"ast":null,"code":"var _jsxFileName = \"P:\\\\projects\\\\ConnectingWord\\\\front-end\\\\src\\\\components\\\\mapStats.js\";\nimport React from \"react\";\nimport GITSearchBox from \"./gITSearchBox\";\nimport LocateUser from \"./locateUser\";\nimport PNYlist from \"../calc/PNYfunc\";\nimport GITlist from \"../calc/GITfunc\"; //import GetInTouchImg from \"../media/GetInTouch.svg\";\n\nimport \"../stylesheets/mapStats.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MapStats extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      PNYDisplay: true,\n      GITDisplay: false,\n      latitude: null,\n      longitude: null,\n      PNYData: [{\n        name: \"Mahesh\",\n        email: \"mahesh@gmail.com\",\n        latitude: 17.34,\n        longitude: 78.34,\n        distance: 200\n      }, {\n        name: \"Pranesh\",\n        email: \"mahesh@gmail.com\",\n        latitude: 17.34,\n        longitude: 78.34,\n        distance: 200\n      }],\n      GITSearchedData: null,\n      GITPathsData: [[\"MSD\", \"Teja\", \"Varun\", \"Mahesh\"], [\"MSD\", \"Vamshi\", \"Virat\", \"Rohit\", \"Mahesh\"]]\n    };\n\n    this.gITSearchedDataHandle = e => {\n      let newState = { ...this.state\n      };\n      newState.GITSearchedData = e;\n      newState.GITPathsData = GITlist(\"pranesh@gmail.com\", newState.GITSearchedData.email);\n      this.setState(newState);\n    };\n\n    this.locationHandle = (latitude, longitude) => {\n      let newState = { ...this.state\n      };\n      newState.latitude = latitude;\n      newState.longitude = longitude;\n      this.setState(newState);\n    };\n\n    this.getPNYDiv = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"MSPNYDiv\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"MSPNYLocationDiv\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"MSPNYLocationLabel\",\n            children: \"Your Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: \"220px\",\n              width: \"100%\",\n              paddingBottom: \"10px\"\n            },\n            children: /*#__PURE__*/_jsxDEV(LocateUser, {\n              locate: {\n                latitudeLongitudeUpdate: this.locationHandle\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"MSPNYLocationResultDiv\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Latitude: \", parseFloat(this.state.latitude).toFixed(4)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Longitude: \", parseFloat(this.state.longitude).toFixed(4)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"MSPNYResultDiv\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"MSPNYResultLabel\",\n            children: \"People\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"MSPNYListDiv\",\n            children: PNYlist(this.state.latitude, this.state.longitude, \"pranesh@gmail.com\").map(user => {\n              let index = user.email;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"MSPNYListItemDiv\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"MSPNYName\",\n                  children: user.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 81,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"MSPNYEmail\",\n                  children: [\"Email: \", user.email]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 82,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"MSPNYLatitudeLongitude\",\n                  children: [\"Latitude: \", user.latitude, \" \\u2003\\u2003 Longitude:\", \" \", user.longitude]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"MSPNYDistance\",\n                  children: [\"Occupation: \", user.occupation, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"MSPNYDistance\",\n                  children: [\"Distance: \", parseFloat(user.distance.toFixed(2)), \" Km\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 19\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.getGITDiv = () => {\n      // let pathcount=0;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"MSGITDiv\",\n        children: [/*#__PURE__*/_jsxDEV(GITSearchBox, {\n          sendSearchData: {\n            GITDataHandle: this.gITSearchedDataHandle\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 9\n        }, this), this.state.GITSearchedData === null ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"MSGITNoSearch\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Search for the person to get in touch.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"MSGITSearchInfoDiv\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"MSGITName\",\n              children: this.state.GITSearchedData.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"MSGITEmail\",\n              children: [\"Email: \", this.state.GITSearchedData.email]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"MSGITLatitudeLongitude\",\n              children: [\"Latitude: \", this.state.GITSearchedData.latitude, \" \\u2003\\u2003 Longitude: \", this.state.GITSearchedData.longitude]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"MSGITDistance\",\n              children: [\"Occupation: \", this.state.GITSearchedData.occupation]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 16\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"MSGITDistance\",\n              children: [\"Distance: \", PNYlist(this.state.GITSearchedData.latitude, this.state.GITSearchedData.longitude, \"pranesh@gmail.com\")]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"MSGITPathsDiv\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"MSGITPathsLabel\",\n              children: \"Possible Paths\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"MSGITPathListDiv\",\n              children: this.state.GITPathsData.map(path => {\n                let index = this.state.GITPathsData.indexOf(path);\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"MSGITPathDiv\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"MSGITPathNo\",\n                    children: [\"Path: \", index]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 134,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"MSGITPath\",\n                    children: path.map(node => {\n                      let i = path.indexOf(node) + 1;\n                      let returnValue = i === path.length ? node : node + \" --> \";\n                      return /*#__PURE__*/_jsxDEV(\"span\", {\n                        children: returnValue\n                      }, i, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 140,\n                        columnNumber: 34\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 135,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"MSGITPathLength\",\n                    children: [\"Path Length: \", path.length - 1]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 143,\n                    columnNumber: 23\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"MapStatsMainDiv\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"MSButtonsDiv\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: this.state.PNYDisplay ? \"MSPNYButton active\" : \"MSPNYButton\",\n          onClick: () => {\n            let newState = { ...this.state\n            };\n            newState.PNYDisplay = true;\n            newState.GITDisplay = false;\n            this.setState(newState);\n          },\n          children: \"People Near You\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: this.state.GITDisplay ? \"MSGITButton active\" : \"MSGITButton\",\n          onClick: () => {\n            let newState = { ...this.state\n            };\n            newState.PNYDisplay = false;\n            newState.GITDisplay = true;\n            this.setState(newState);\n          },\n          children: \"Get In Touch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), this.state.PNYDisplay && this.getPNYDiv(), this.state.GITDisplay && this.getGITDiv()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MapStats;","map":{"version":3,"sources":["P:/projects/ConnectingWord/front-end/src/components/mapStats.js"],"names":["React","GITSearchBox","LocateUser","PNYlist","GITlist","MapStats","Component","state","PNYDisplay","GITDisplay","latitude","longitude","PNYData","name","email","distance","GITSearchedData","GITPathsData","gITSearchedDataHandle","e","newState","setState","locationHandle","getPNYDiv","height","width","paddingBottom","latitudeLongitudeUpdate","parseFloat","toFixed","map","user","index","occupation","getGITDiv","GITDataHandle","path","indexOf","node","i","returnValue","length","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport GITSearchBox from \"./gITSearchBox\";\r\nimport LocateUser from \"./locateUser\";\r\nimport PNYlist from \"../calc/PNYfunc\";\r\nimport GITlist from \"../calc/GITfunc\";\r\n//import GetInTouchImg from \"../media/GetInTouch.svg\";\r\nimport \"../stylesheets/mapStats.css\";\r\n\r\nclass MapStats extends React.Component {\r\n  state = {\r\n    PNYDisplay: true,\r\n    GITDisplay: false,\r\n    latitude: null,\r\n    longitude: null,\r\n    PNYData: [\r\n      {\r\n        name: \"Mahesh\",\r\n        email: \"mahesh@gmail.com\",\r\n        latitude: 17.34,\r\n        longitude: 78.34,\r\n        distance: 200,\r\n      },\r\n      {\r\n        name: \"Pranesh\",\r\n        email: \"mahesh@gmail.com\",\r\n        latitude: 17.34,\r\n        longitude: 78.34,\r\n        distance: 200,\r\n      },\r\n    ],\r\n    GITSearchedData: null,\r\n    GITPathsData: [\r\n      [\"MSD\", \"Teja\", \"Varun\", \"Mahesh\"],\r\n      [\"MSD\", \"Vamshi\", \"Virat\", \"Rohit\", \"Mahesh\"],\r\n    ],\r\n  };\r\n  gITSearchedDataHandle = (e) => {\r\n    let newState = { ...this.state };\r\n    newState.GITSearchedData = e;\r\n    newState.GITPathsData=GITlist(\"pranesh@gmail.com\",newState.GITSearchedData.email);\r\n    this.setState(newState);\r\n  };\r\n\r\n  locationHandle = (latitude, longitude) => {\r\n    let newState = { ...this.state };\r\n    newState.latitude = latitude;\r\n    newState.longitude = longitude;\r\n    this.setState(newState);\r\n  };\r\n\r\n  getPNYDiv = () => {\r\n    return (\r\n      <div className=\"MSPNYDiv\">\r\n        <div className=\"MSPNYLocationDiv\">\r\n          <p className=\"MSPNYLocationLabel\">Your Location</p>\r\n          <div\r\n            style={{\r\n              height: \"220px\",\r\n              width: \"100%\",\r\n              paddingBottom: \"10px\",\r\n            }}\r\n          >\r\n            <LocateUser\r\n              locate={{ latitudeLongitudeUpdate: this.locationHandle }}\r\n            />\r\n          </div>\r\n          <div className=\"MSPNYLocationResultDiv\">\r\n            <span>Latitude: {parseFloat(this.state.latitude).toFixed(4)}</span>\r\n            <span>\r\n              Longitude: {parseFloat(this.state.longitude).toFixed(4)}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div className=\"MSPNYResultDiv\">\r\n          <p className=\"MSPNYResultLabel\">People</p>\r\n          <div className=\"MSPNYListDiv\">\r\n            {PNYlist(this.state.latitude,this.state.longitude,\"pranesh@gmail.com\").map((user) => {\r\n              let index = user.email;\r\n              return (\r\n                <div key={index} className=\"MSPNYListItemDiv\">\r\n                  <p className=\"MSPNYName\">{user.name}</p>\r\n                  <p className=\"MSPNYEmail\">Email: {user.email}</p>\r\n                  <p className=\"MSPNYLatitudeLongitude\">\r\n                    Latitude: {user.latitude} &emsp;&emsp; Longitude:{\" \"}\r\n                    {user.longitude}\r\n                  </p>\r\n                  <p className=\"MSPNYDistance\">Occupation: {user.occupation} </p>\r\n                  <p className=\"MSPNYDistance\">Distance: {parseFloat(user.distance.toFixed(2))} Km</p>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  getGITDiv = () => {\r\n    // let pathcount=0;\r\n    return (\r\n      <div className=\"MSGITDiv\">\r\n        <GITSearchBox\r\n          sendSearchData={{ GITDataHandle: this.gITSearchedDataHandle }}\r\n        />\r\n        {this.state.GITSearchedData === null ? (\r\n          <div className=\"MSGITNoSearch\">\r\n            <p>Search for the person to get in touch.</p>\r\n          </div>\r\n        ) : (\r\n          <React.Fragment>\r\n            <div className=\"MSGITSearchInfoDiv\">\r\n              <p className=\"MSGITName\">{this.state.GITSearchedData.name}</p>\r\n              <p className=\"MSGITEmail\">\r\n                Email: {this.state.GITSearchedData.email}\r\n              </p>\r\n              <p className=\"MSGITLatitudeLongitude\">\r\n                Latitude: {this.state.GITSearchedData.latitude} &emsp;&emsp;\r\n                Longitude: {this.state.GITSearchedData.longitude}\r\n              </p>\r\n               <p className=\"MSGITDistance\">\r\n                Occupation: {this.state.GITSearchedData.occupation}\r\n              </p>\r\n              <p className=\"MSGITDistance\">\r\n                Distance: {PNYlist(this.state.GITSearchedData.latitude,this.state.GITSearchedData.longitude,\"pranesh@gmail.com\")}\r\n              </p>\r\n            </div>\r\n            <div className=\"MSGITPathsDiv\">\r\n              <p className=\"MSGITPathsLabel\">Possible Paths</p>\r\n              <div className=\"MSGITPathListDiv\">\r\n                {this.state.GITPathsData.map((path) => {\r\n                  let index=this.state.GITPathsData.indexOf(path);\r\n                  return (\r\n                    <div className=\"MSGITPathDiv\" key={index}>\r\n                      <p className=\"MSGITPathNo\">Path: {index}</p>\r\n                      <p className=\"MSGITPath\">\r\n                        {path.map((node) => {\r\n                          let i = path.indexOf(node) + 1;\r\n                          let returnValue =\r\n                            i === path.length ? node : node + \" --> \";\r\n                          return <span key={i}>{returnValue}</span>;\r\n                        })}\r\n                      </p>\r\n                      <p className=\"MSGITPathLength\">\r\n                        Path Length: {path.length - 1}\r\n                      </p>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"MapStatsMainDiv\">\r\n        <div className=\"MSButtonsDiv\">\r\n          <button\r\n            className={\r\n              this.state.PNYDisplay ? \"MSPNYButton active\" : \"MSPNYButton\"\r\n            }\r\n            onClick={() => {\r\n              let newState = { ...this.state };\r\n              newState.PNYDisplay = true;\r\n              newState.GITDisplay = false;\r\n              this.setState(newState);\r\n            }}\r\n          >\r\n            People Near You\r\n          </button>\r\n          <button\r\n            className={\r\n              this.state.GITDisplay ? \"MSGITButton active\" : \"MSGITButton\"\r\n            }\r\n            onClick={() => {\r\n              let newState = { ...this.state };\r\n              newState.PNYDisplay = false;\r\n              newState.GITDisplay = true;\r\n              this.setState(newState);\r\n            }}\r\n          >\r\n            Get In Touch\r\n          </button>\r\n        </div>\r\n        {this.state.PNYDisplay && this.getPNYDiv()}\r\n        {this.state.GITDisplay && this.getGITDiv()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapStats;\r\n"]},"metadata":{},"sourceType":"module"}