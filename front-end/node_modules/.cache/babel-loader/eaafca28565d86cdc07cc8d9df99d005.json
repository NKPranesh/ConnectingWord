{"ast":null,"code":"import Geometry from '../geometry/geometry';\nimport { uid } from '@luma.gl/webgl';\nconst INDEX_OFFSETS = {\n  x: [2, 0, 1],\n  y: [0, 1, 2],\n  z: [1, 2, 0]\n};\nexport default class TruncatedConeGeometry extends Geometry {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      id = uid('truncated-code-geometry')\n    } = props;\n    const {\n      indices,\n      attributes\n    } = tesselateTruncatedCone(props);\n    super({ ...props,\n      id,\n      indices,\n      attributes: { ...attributes,\n        ...props.attributes\n      }\n    });\n  }\n\n}\n\nfunction tesselateTruncatedCone(props) {\n  const {\n    bottomRadius = 0,\n    topRadius = 0,\n    height = 1,\n    nradial = 10,\n    nvertical = 10,\n    verticalAxis = 'y',\n    topCap = false,\n    bottomCap = false\n  } = props;\n  const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n  const numVertices = (nradial + 1) * (nvertical + 1 + extra);\n  const slant = Math.atan2(bottomRadius - topRadius, height);\n  const msin = Math.sin;\n  const mcos = Math.cos;\n  const mpi = Math.PI;\n  const cosSlant = mcos(slant);\n  const sinSlant = msin(slant);\n  const start = topCap ? -2 : 0;\n  const end = nvertical + (bottomCap ? 2 : 0);\n  const vertsAroundEdge = nradial + 1;\n  const indices = new Uint16Array(nradial * (nvertical + extra) * 6);\n  const indexOffset = INDEX_OFFSETS[verticalAxis];\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n  const texCoords = new Float32Array(numVertices * 2);\n  let i3 = 0;\n  let i2 = 0;\n\n  for (let i = start; i <= end; i++) {\n    let v = i / nvertical;\n    let y = height * v;\n    let ringRadius;\n\n    if (i < 0) {\n      y = 0;\n      v = 1;\n      ringRadius = bottomRadius;\n    } else if (i > nvertical) {\n      y = height;\n      v = 1;\n      ringRadius = topRadius;\n    } else {\n      ringRadius = bottomRadius + (topRadius - bottomRadius) * (i / nvertical);\n    }\n\n    if (i === -2 || i === nvertical + 2) {\n      ringRadius = 0;\n      v = 0;\n    }\n\n    y -= height / 2;\n\n    for (let j = 0; j < vertsAroundEdge; j++) {\n      const sin = msin(j * mpi * 2 / nradial);\n      const cos = mcos(j * mpi * 2 / nradial);\n      positions[i3 + indexOffset[0]] = sin * ringRadius;\n      positions[i3 + indexOffset[1]] = y;\n      positions[i3 + indexOffset[2]] = cos * ringRadius;\n      normals[i3 + indexOffset[0]] = i < 0 || i > nvertical ? 0 : sin * cosSlant;\n      normals[i3 + indexOffset[1]] = i < 0 ? -1 : i > nvertical ? 1 : sinSlant;\n      normals[i3 + indexOffset[2]] = i < 0 || i > nvertical ? 0 : cos * cosSlant;\n      texCoords[i2 + 0] = j / nradial;\n      texCoords[i2 + 1] = v;\n      i2 += 2;\n      i3 += 3;\n    }\n  }\n\n  for (let i = 0; i < nvertical + extra; i++) {\n    for (let j = 0; j < nradial; j++) {\n      const index = (i * nradial + j) * 6;\n      indices[index + 0] = vertsAroundEdge * (i + 0) + 0 + j;\n      indices[index + 1] = vertsAroundEdge * (i + 0) + 1 + j;\n      indices[index + 2] = vertsAroundEdge * (i + 1) + 1 + j;\n      indices[index + 3] = vertsAroundEdge * (i + 0) + 0 + j;\n      indices[index + 4] = vertsAroundEdge * (i + 1) + 1 + j;\n      indices[index + 5] = vertsAroundEdge * (i + 1) + 0 + j;\n    }\n  }\n\n  return {\n    indices,\n    attributes: {\n      POSITION: {\n        size: 3,\n        value: positions\n      },\n      NORMAL: {\n        size: 3,\n        value: normals\n      },\n      TEXCOORD_0: {\n        size: 2,\n        value: texCoords\n      }\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/geometries/truncated-cone-geometry.js"],"names":["INDEX_OFFSETS","x","y","z","constructor","props","id","uid","attributes","tesselateTruncatedCone","bottomRadius","topRadius","height","nradial","nvertical","verticalAxis","topCap","bottomCap","extra","numVertices","slant","Math","msin","mcos","mpi","cosSlant","sinSlant","start","end","vertsAroundEdge","indices","indexOffset","positions","normals","texCoords","i3","i2","i","v","ringRadius","j","sin","cos","index","POSITION","size","value","NORMAL","TEXCOORD_0"],"mappings":"AAAA,OAAA,QAAA,MAAA,sBAAA;AACA,SAAA,GAAA,QAAA,gBAAA;AAEA,MAAMA,aAAa,GAAG;AACpBC,EAAAA,CAAC,EAAE,CAAA,CAAA,EAAA,CAAA,EADiB,CACjB,CADiB;AAEpBC,EAAAA,CAAC,EAAE,CAAA,CAAA,EAAA,CAAA,EAFiB,CAEjB,CAFiB;AAGpBC,EAAAA,CAAC,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAHiB,CAAtB;AAMA,eAAe,MAAA,qBAAA,SAAA,QAAA,CAA6C;AAC1DC,EAAAA,WAAW,GAAa;AAAA,QAAZC,KAAY,uEAAb,EAAa;AACtB,UAAM;AAACC,MAAAA,EAAE,GAAGC,GAAG,CAAA,yBAAA;AAAT,QAAN,KAAA;AACA,UAAM;AAAA,MAAA,OAAA;AAAUC,MAAAA;AAAV,QAAwBC,sBAAsB,CAApD,KAAoD,CAApD;AACA,UAAM,EACJ,GADI,KAAA;AAAA,MAAA,EAAA;AAAA,MAAA,OAAA;AAIJD,MAAAA,UAAU,EAAE,EAAC,GAAD,UAAA;AAAgB,WAAGH,KAAK,CAACG;AAAzB;AAJR,KAAN;AAMD;;AAVyD;;AAiB5D,SAAA,sBAAA,CAAA,KAAA,EAAuC;AACrC,QAAM;AACJE,IAAAA,YAAY,GADR,CAAA;AAEJC,IAAAA,SAAS,GAFL,CAAA;AAGJC,IAAAA,MAAM,GAHF,CAAA;AAIJC,IAAAA,OAAO,GAJH,EAAA;AAKJC,IAAAA,SAAS,GALL,EAAA;AAMJC,IAAAA,YAAY,GANR,GAAA;AAOJC,IAAAA,MAAM,GAPF,KAAA;AAQJC,IAAAA,SAAS,GAAG;AARR,MAAN,KAAA;AAWA,QAAMC,KAAK,GAAG,CAACF,MAAM,GAAA,CAAA,GAAP,CAAA,KAAoBC,SAAS,GAAA,CAAA,GAA3C,CAAc,CAAd;AACA,QAAME,WAAW,GAAG,CAACN,OAAO,GAAR,CAAA,KAAiBC,SAAS,GAATA,CAAAA,GAArC,KAAoB,CAApB;AAEA,QAAMM,KAAK,GAAGC,IAAI,CAAJA,KAAAA,CAAWX,YAAY,GAAvBW,SAAAA,EAAd,MAAcA,CAAd;AACA,QAAMC,IAAI,GAAGD,IAAI,CAAjB,GAAA;AACA,QAAME,IAAI,GAAGF,IAAI,CAAjB,GAAA;AACA,QAAMG,GAAG,GAAGH,IAAI,CAAhB,EAAA;AACA,QAAMI,QAAQ,GAAGF,IAAI,CAArB,KAAqB,CAArB;AACA,QAAMG,QAAQ,GAAGJ,IAAI,CAArB,KAAqB,CAArB;AACA,QAAMK,KAAK,GAAGX,MAAM,GAAG,CAAH,CAAA,GAApB,CAAA;AACA,QAAMY,GAAG,GAAGd,SAAS,IAAIG,SAAS,GAAA,CAAA,GAAlC,CAAqB,CAArB;AACA,QAAMY,eAAe,GAAGhB,OAAO,GAA/B,CAAA;AAEA,QAAMiB,OAAO,GAAG,IAAA,WAAA,CAAgBjB,OAAO,IAAIC,SAAS,GAApBD,KAAO,CAAPA,GAAhC,CAAgB,CAAhB;AACA,QAAMkB,WAAW,GAAG/B,aAAa,CAAjC,YAAiC,CAAjC;AAEA,QAAMgC,SAAS,GAAG,IAAA,YAAA,CAAiBb,WAAW,GAA9C,CAAkB,CAAlB;AACA,QAAMc,OAAO,GAAG,IAAA,YAAA,CAAiBd,WAAW,GAA5C,CAAgB,CAAhB;AACA,QAAMe,SAAS,GAAG,IAAA,YAAA,CAAiBf,WAAW,GAA9C,CAAkB,CAAlB;AAEA,MAAIgB,EAAE,GAAN,CAAA;AACA,MAAIC,EAAE,GAAN,CAAA;;AACA,OAAK,IAAIC,CAAC,GAAV,KAAA,EAAoBA,CAAC,IAArB,GAAA,EAA8BA,CAA9B,EAAA,EAAmC;AACjC,QAAIC,CAAC,GAAGD,CAAC,GAAT,SAAA;AACA,QAAInC,CAAC,GAAGU,MAAM,GAAd,CAAA;AACA,QAAA,UAAA;;AAEA,QAAIyB,CAAC,GAAL,CAAA,EAAW;AACTnC,MAAAA,CAAC,GAADA,CAAAA;AACAoC,MAAAA,CAAC,GAADA,CAAAA;AACAC,MAAAA,UAAU,GAAVA,YAAAA;AAHF,KAAA,MAIO,IAAIF,CAAC,GAAL,SAAA,EAAmB;AACxBnC,MAAAA,CAAC,GAADA,MAAAA;AACAoC,MAAAA,CAAC,GAADA,CAAAA;AACAC,MAAAA,UAAU,GAAVA,SAAAA;AAHK,KAAA,MAIA;AACLA,MAAAA,UAAU,GAAG7B,YAAY,GAAG,CAACC,SAAS,GAAV,YAAA,KAA8B0B,CAAC,GAA3DE,SAA4B,CAA5BA;AACD;;AACD,QAAIF,CAAC,KAAK,CAANA,CAAAA,IAAYA,CAAC,KAAKvB,SAAS,GAA/B,CAAA,EAAqC;AACnCyB,MAAAA,UAAU,GAAVA,CAAAA;AACAD,MAAAA,CAAC,GAADA,CAAAA;AACD;;AACDpC,IAAAA,CAAC,IAAIU,MAAM,GAAXV,CAAAA;;AACA,SAAK,IAAIsC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,eAAA,EAAqCA,CAArC,EAAA,EAA0C;AACxC,YAAMC,GAAG,GAAGnB,IAAI,CAAEkB,CAAC,GAADA,GAAAA,GAAD,CAACA,GAAlB,OAAgB,CAAhB;AACA,YAAME,GAAG,GAAGnB,IAAI,CAAEiB,CAAC,GAADA,GAAAA,GAAD,CAACA,GAAlB,OAAgB,CAAhB;AAEAR,MAAAA,SAAS,CAACG,EAAE,GAAGJ,WAAW,CAA1BC,CAA0B,CAAjB,CAATA,GAAiCS,GAAG,GAApCT,UAAAA;AACAA,MAAAA,SAAS,CAACG,EAAE,GAAGJ,WAAW,CAA1BC,CAA0B,CAAjB,CAATA,GAAAA,CAAAA;AACAA,MAAAA,SAAS,CAACG,EAAE,GAAGJ,WAAW,CAA1BC,CAA0B,CAAjB,CAATA,GAAiCU,GAAG,GAApCV,UAAAA;AAEAC,MAAAA,OAAO,CAACE,EAAE,GAAGJ,WAAW,CAAxBE,CAAwB,CAAjB,CAAPA,GAA+BI,CAAC,GAADA,CAAAA,IAASA,CAAC,GAAVA,SAAAA,GAAAA,CAAAA,GAA6BI,GAAG,GAA/DR,QAAAA;AACAA,MAAAA,OAAO,CAACE,EAAE,GAAGJ,WAAW,CAAxBE,CAAwB,CAAjB,CAAPA,GAA+BI,CAAC,GAADA,CAAAA,GAAQ,CAARA,CAAAA,GAAaA,CAAC,GAADA,SAAAA,GAAAA,CAAAA,GAA5CJ,QAAAA;AACAA,MAAAA,OAAO,CAACE,EAAE,GAAGJ,WAAW,CAAxBE,CAAwB,CAAjB,CAAPA,GAA+BI,CAAC,GAADA,CAAAA,IAASA,CAAC,GAAVA,SAAAA,GAAAA,CAAAA,GAA6BK,GAAG,GAA/DT,QAAAA;AAEAC,MAAAA,SAAS,CAACE,EAAE,GAAZF,CAAS,CAATA,GAAoBM,CAAC,GAArBN,OAAAA;AACAA,MAAAA,SAAS,CAACE,EAAE,GAAZF,CAAS,CAATA,GAAAA,CAAAA;AAEAE,MAAAA,EAAE,IAAFA,CAAAA;AACAD,MAAAA,EAAE,IAAFA,CAAAA;AACD;AACF;;AAED,OAAK,IAAIE,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGvB,SAAS,GAA7B,KAAA,EAAuCuB,CAAvC,EAAA,EAA4C;AAC1C,SAAK,IAAIG,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,OAAA,EAA6BA,CAA7B,EAAA,EAAkC;AAChC,YAAMG,KAAK,GAAG,CAACN,CAAC,GAADA,OAAAA,GAAD,CAAA,IAAd,CAAA;AACAP,MAAAA,OAAO,CAACa,KAAK,GAAbb,CAAO,CAAPA,GAAqBD,eAAe,IAAIQ,CAAC,GAApBR,CAAe,CAAfA,GAAAA,CAAAA,GAArBC,CAAAA;AACAA,MAAAA,OAAO,CAACa,KAAK,GAAbb,CAAO,CAAPA,GAAqBD,eAAe,IAAIQ,CAAC,GAApBR,CAAe,CAAfA,GAAAA,CAAAA,GAArBC,CAAAA;AACAA,MAAAA,OAAO,CAACa,KAAK,GAAbb,CAAO,CAAPA,GAAqBD,eAAe,IAAIQ,CAAC,GAApBR,CAAe,CAAfA,GAAAA,CAAAA,GAArBC,CAAAA;AACAA,MAAAA,OAAO,CAACa,KAAK,GAAbb,CAAO,CAAPA,GAAqBD,eAAe,IAAIQ,CAAC,GAApBR,CAAe,CAAfA,GAAAA,CAAAA,GAArBC,CAAAA;AACAA,MAAAA,OAAO,CAACa,KAAK,GAAbb,CAAO,CAAPA,GAAqBD,eAAe,IAAIQ,CAAC,GAApBR,CAAe,CAAfA,GAAAA,CAAAA,GAArBC,CAAAA;AACAA,MAAAA,OAAO,CAACa,KAAK,GAAbb,CAAO,CAAPA,GAAqBD,eAAe,IAAIQ,CAAC,GAApBR,CAAe,CAAfA,GAAAA,CAAAA,GAArBC,CAAAA;AACD;AACF;;AAED,SAAO;AAAA,IAAA,OAAA;AAELtB,IAAAA,UAAU,EAAE;AACVoC,MAAAA,QAAQ,EAAE;AAACC,QAAAA,IAAI,EAAL,CAAA;AAAUC,QAAAA,KAAK,EAAEd;AAAjB,OADA;AAEVe,MAAAA,MAAM,EAAE;AAACF,QAAAA,IAAI,EAAL,CAAA;AAAUC,QAAAA,KAAK,EAAEb;AAAjB,OAFE;AAGVe,MAAAA,UAAU,EAAE;AAACH,QAAAA,IAAI,EAAL,CAAA;AAAUC,QAAAA,KAAK,EAAEZ;AAAjB;AAHF;AAFP,GAAP;AAQD","sourcesContent":["import Geometry from '../geometry/geometry';\nimport {uid} from '@luma.gl/webgl';\n\nconst INDEX_OFFSETS = {\n  x: [2, 0, 1],\n  y: [0, 1, 2],\n  z: [1, 2, 0]\n};\n\nexport default class TruncatedConeGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('truncated-code-geometry')} = props;\n    const {indices, attributes} = tesselateTruncatedCone(props);\n    super({\n      ...props,\n      id,\n      indices,\n      attributes: {...attributes, ...props.attributes}\n    });\n  }\n}\n\n// Primitives inspired by TDL http://code.google.com/p/webglsamples/,\n// copyright 2011 Google Inc. new BSD License\n// (http://www.opensource.org/licenses/bsd-license.php).\n/* eslint-disable max-statements, complexity */\nfunction tesselateTruncatedCone(props) {\n  const {\n    bottomRadius = 0,\n    topRadius = 0,\n    height = 1,\n    nradial = 10,\n    nvertical = 10,\n    verticalAxis = 'y',\n    topCap = false,\n    bottomCap = false\n  } = props;\n\n  const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n  const numVertices = (nradial + 1) * (nvertical + 1 + extra);\n\n  const slant = Math.atan2(bottomRadius - topRadius, height);\n  const msin = Math.sin;\n  const mcos = Math.cos;\n  const mpi = Math.PI;\n  const cosSlant = mcos(slant);\n  const sinSlant = msin(slant);\n  const start = topCap ? -2 : 0;\n  const end = nvertical + (bottomCap ? 2 : 0);\n  const vertsAroundEdge = nradial + 1;\n\n  const indices = new Uint16Array(nradial * (nvertical + extra) * 6);\n  const indexOffset = INDEX_OFFSETS[verticalAxis];\n\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n  const texCoords = new Float32Array(numVertices * 2);\n\n  let i3 = 0;\n  let i2 = 0;\n  for (let i = start; i <= end; i++) {\n    let v = i / nvertical;\n    let y = height * v;\n    let ringRadius;\n\n    if (i < 0) {\n      y = 0;\n      v = 1;\n      ringRadius = bottomRadius;\n    } else if (i > nvertical) {\n      y = height;\n      v = 1;\n      ringRadius = topRadius;\n    } else {\n      ringRadius = bottomRadius + (topRadius - bottomRadius) * (i / nvertical);\n    }\n    if (i === -2 || i === nvertical + 2) {\n      ringRadius = 0;\n      v = 0;\n    }\n    y -= height / 2;\n    for (let j = 0; j < vertsAroundEdge; j++) {\n      const sin = msin((j * mpi * 2) / nradial);\n      const cos = mcos((j * mpi * 2) / nradial);\n\n      positions[i3 + indexOffset[0]] = sin * ringRadius;\n      positions[i3 + indexOffset[1]] = y;\n      positions[i3 + indexOffset[2]] = cos * ringRadius;\n\n      normals[i3 + indexOffset[0]] = i < 0 || i > nvertical ? 0 : sin * cosSlant;\n      normals[i3 + indexOffset[1]] = i < 0 ? -1 : i > nvertical ? 1 : sinSlant;\n      normals[i3 + indexOffset[2]] = i < 0 || i > nvertical ? 0 : cos * cosSlant;\n\n      texCoords[i2 + 0] = j / nradial;\n      texCoords[i2 + 1] = v;\n\n      i2 += 2;\n      i3 += 3;\n    }\n  }\n\n  for (let i = 0; i < nvertical + extra; i++) {\n    for (let j = 0; j < nradial; j++) {\n      const index = (i * nradial + j) * 6;\n      indices[index + 0] = vertsAroundEdge * (i + 0) + 0 + j;\n      indices[index + 1] = vertsAroundEdge * (i + 0) + 1 + j;\n      indices[index + 2] = vertsAroundEdge * (i + 1) + 1 + j;\n      indices[index + 3] = vertsAroundEdge * (i + 0) + 0 + j;\n      indices[index + 4] = vertsAroundEdge * (i + 1) + 1 + j;\n      indices[index + 5] = vertsAroundEdge * (i + 1) + 0 + j;\n    }\n  }\n\n  return {\n    indices,\n    attributes: {\n      POSITION: {size: 3, value: positions},\n      NORMAL: {size: 3, value: normals},\n      TEXCOORD_0: {size: 2, value: texCoords}\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}