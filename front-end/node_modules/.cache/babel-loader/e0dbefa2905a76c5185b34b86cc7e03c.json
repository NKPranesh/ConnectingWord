{"ast":null,"code":"import * as KHR_binary_glTF from '../extensions/KHR_binary_gltf';\nconst GLTF_ARRAYS = {\n  accessors: 'accessor',\n  animations: 'animation',\n  buffers: 'buffer',\n  bufferViews: 'bufferView',\n  images: 'image',\n  materials: 'material',\n  meshes: 'mesh',\n  nodes: 'node',\n  samplers: 'sampler',\n  scenes: 'scene',\n  skins: 'skin',\n  textures: 'texture'\n};\nconst GLTF_KEYS = {\n  accessor: 'accessors',\n  animations: 'animation',\n  buffer: 'buffers',\n  bufferView: 'bufferViews',\n  image: 'images',\n  material: 'materials',\n  mesh: 'meshes',\n  node: 'nodes',\n  sampler: 'samplers',\n  scene: 'scenes',\n  skin: 'skins',\n  texture: 'textures'\n};\n\nclass GLTFV1Normalizer {\n  constructor(gltf) {\n    this.idToIndexMap = {\n      animations: {},\n      accessors: {},\n      buffers: {},\n      bufferViews: {},\n      images: {},\n      materials: {},\n      meshes: {},\n      nodes: {},\n      samplers: {},\n      scenes: {},\n      skins: {},\n      textures: {}\n    };\n  }\n\n  normalize(gltf, options) {\n    this.json = gltf.json;\n    const json = gltf.json;\n\n    switch (json.asset && json.asset.version) {\n      case '2.0':\n        return;\n\n      case undefined:\n      case '1.0':\n        break;\n\n      default:\n        console.warn(\"glTF: Unknown version \".concat(json.asset.version));\n        return;\n    }\n\n    if (!options.normalize) {\n      throw new Error('glTF v1 is not supported.');\n    }\n\n    console.warn('Converting glTF v1 to glTF v2 format. This is experimental and may fail.');\n\n    this._addAsset(json);\n\n    this._convertTopLevelObjectsToArrays(json);\n\n    KHR_binary_glTF.decode(gltf);\n\n    this._convertObjectIdsToArrayIndices(json);\n\n    this._updateObjects(json);\n\n    this._updateMaterial(json);\n  }\n\n  _addAsset(json) {\n    json.asset = json.asset || {};\n    json.asset.version = '2.0';\n    json.asset.generator = json.asset.generator || 'Normalized to glTF 2.0 by loaders.gl';\n  }\n\n  _convertTopLevelObjectsToArrays(json) {\n    for (const arrayName in GLTF_ARRAYS) {\n      this._convertTopLevelObjectToArray(json, arrayName);\n    }\n  }\n\n  _convertTopLevelObjectToArray(json, mapName) {\n    const objectMap = json[mapName];\n\n    if (!objectMap || Array.isArray(objectMap)) {\n      return;\n    }\n\n    json[mapName] = [];\n\n    for (const id in objectMap) {\n      const object = objectMap[id];\n      object.id = object.id || id;\n      const index = json[mapName].length;\n      json[mapName].push(object);\n      this.idToIndexMap[mapName][id] = index;\n    }\n  }\n\n  _convertObjectIdsToArrayIndices(json) {\n    for (const arrayName in GLTF_ARRAYS) {\n      this._convertIdsToIndices(json, arrayName);\n    }\n\n    if ('scene' in json) {\n      json.scene = this._convertIdToIndex(json.scene, 'scene');\n    }\n\n    for (const texture of json.textures) {\n      this._convertTextureIds(texture);\n    }\n\n    for (const mesh of json.meshes) {\n      this._convertMeshIds(mesh);\n    }\n\n    for (const node of json.nodes) {\n      this._convertNodeIds(node);\n    }\n\n    for (const node of json.scenes) {\n      this._convertSceneIds(node);\n    }\n  }\n\n  _convertTextureIds(texture) {\n    if (texture.source) {\n      texture.source = this._convertIdToIndex(texture.source, 'image');\n    }\n  }\n\n  _convertMeshIds(mesh) {\n    for (const primitive of mesh.primitives) {\n      const {\n        attributes,\n        indices,\n        material\n      } = primitive;\n\n      for (const attributeName in attributes) {\n        attributes[attributeName] = this._convertIdToIndex(attributes[attributeName], 'accessor');\n      }\n\n      if (indices) {\n        primitive.indices = this._convertIdToIndex(indices, 'accessor');\n      }\n\n      if (material) {\n        primitive.material = this._convertIdToIndex(material, 'material');\n      }\n    }\n  }\n\n  _convertNodeIds(node) {\n    if (node.children) {\n      node.children = node.children.map(child => this._convertIdToIndex(child, 'node'));\n    }\n\n    if (node.meshes) {\n      node.meshes = node.meshes.map(mesh => this._convertIdToIndex(mesh, 'mesh'));\n    }\n  }\n\n  _convertSceneIds(scene) {\n    if (scene.nodes) {\n      scene.nodes = scene.nodes.map(node => this._convertIdToIndex(node, 'node'));\n    }\n  }\n\n  _convertIdsToIndices(json, topLevelArrayName) {\n    if (!json[topLevelArrayName]) {\n      console.warn(\"gltf v1: json doesn't contain attribute \".concat(topLevelArrayName));\n      json[topLevelArrayName] = [];\n    }\n\n    for (const object of json[topLevelArrayName]) {\n      for (const key in object) {\n        const id = object[key];\n\n        const index = this._convertIdToIndex(id, key);\n\n        object[key] = index;\n      }\n    }\n  }\n\n  _convertIdToIndex(id, key) {\n    const arrayName = GLTF_KEYS[key];\n\n    if (arrayName in this.idToIndexMap) {\n      const index = this.idToIndexMap[arrayName][id];\n\n      if (!Number.isFinite(index)) {\n        throw new Error(\"gltf v1: failed to resolve \".concat(key, \" with id \").concat(id));\n      }\n\n      return index;\n    }\n\n    return id;\n  }\n\n  _updateObjects(json) {\n    for (const buffer of this.json.buffers) {\n      delete buffer.type;\n    }\n  }\n\n  _updateMaterial(json) {\n    for (const material of json.materials) {\n      material.pbrMetallicRoughness = {\n        baseColorFactor: [1, 1, 1, 1],\n        metallicFactor: 1,\n        roughnessFactor: 1\n      };\n      const textureId = material.values && material.values.tex;\n      const textureIndex = json.textures.findIndex(texture => texture.id === textureId);\n\n      if (textureIndex !== -1) {\n        material.pbrMetallicRoughness.baseColorTexture = {\n          index: textureIndex\n        };\n      }\n    }\n  }\n\n}\n\nexport function normalizeGLTFV1(gltf) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new GLTFV1Normalizer().normalize(gltf, options);\n}","map":{"version":3,"sources":["../../../../src/lib/api/normalize-gltf-v1.js"],"names":["GLTF_ARRAYS","accessors","animations","buffers","bufferViews","images","materials","meshes","nodes","samplers","scenes","skins","textures","GLTF_KEYS","accessor","buffer","bufferView","image","material","mesh","node","sampler","scene","skin","texture","constructor","normalize","gltf","json","console","options","KHR_binary_glTF","_addAsset","_convertTopLevelObjectsToArrays","_convertTopLevelObjectToArray","objectMap","Array","object","index","_convertObjectIdsToArrayIndices","_convertTextureIds","_convertMeshIds","attributes","primitive","_convertNodeIds","child","_convertSceneIds","_convertIdsToIndices","id","_convertIdToIndex","arrayName","Number","_updateObjects","_updateMaterial","baseColorFactor","metallicFactor","roughnessFactor","textureId","textureIndex"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport * as KHR_binary_glTF from '../extensions/KHR_binary_gltf';\n\n// Binary format changes (mainly implemented by GLBLoader)\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/1.0/Khronos/KHR_binary_glTF\n\n// JSON format changes:\n// https://github.com/khronosgroup/gltf/issues/605\n\n// - [x] Top-level JSON objects are arrays now\n// - [ ] Removed indirection from animation: sampler now refers directly to accessors, #712\n// - [ ] material.parameter.value and technique.parameter.value must be an array, #690\n// - [ ] Node can have only one mesh #821\n// - [ ] Added reqs on JSON encoding\n// - [ ] Added reqs on binary data alignment #802 (comment)\n\n// Additions:\n// - [ ] Added accessor.normalized, #691, #706\n// - [ ] Added glExtensionsUsed property and 5125 (UNSIGNED_INT) accessor.componentType value, #619\n// - [ ] Added extensionsRequired property, #720, #721\n// - [ ] Added \"STEP\" as valid animation.sampler.interpolation value, #712\n\n// Removals:\n// - [x] Removed buffer.type, #786, #629\n// - [ ] Removed revision number from profile.version, #709\n// - [ ] Removed technique.functions.scissor and removed 3089 (SCISSOR_TEST) as a valid value for technique.states.enable, #681\n// - [ ] Techniques, programs, and shaders were moved out to KHR_technique_webgl extension.\n\n// Other edits:\n// - [x] asset is now required, #642\n// - [ ] buffer.byteLength and bufferView.byteLength are now required, #560.\n// - [ ] accessor.min and accessor.max are now required, #593, and clarified that the JSON value and binary data must be the same, #628.\n// - [ ] Clarified animation.sampler and animation.channel restrictions, #712\n// - [ ] skin.inverseBindMatrices is now optional, #461.\n// - [ ] Attribute parameters can't have a value defined in the technique or parameter, #563 (comment).\n// - [ ] Only TEXCOORD and COLOR attribute semantics can be written in the form [semantic]_[set_index], #563 (comment).\n// - [ ] TEXCOORD and COLOR attribute semantics must be written in the form [semantic]_[set_index], e.g., just TEXCOORD should be TEXCOORD_0, and just COLOR should be COLOR_0, #649\n// - [ ] camera.perspective.aspectRatio and camera.perspective.yfov must now be > 0, not >= 0, #563 (comment).\n// - [ ] Application-specific parameter semantics must start with an underscore, e.g., _TEMPERATURE and _SIMULATION_TIME, #563 (comment).\n// - [ ] Properties in technique.parameters must be defined in technique.uniforms or technique.attributes,\n\n// #563 (comment).\n// - [ ] technique.parameter.count can only be defined when the semantic is JOINTMATRIX or an application-specific semantic is used. It can never be defined for attribute parameters; only uniforms, d2f6945\n// - [ ] technique.parameter.semantic is required when the parameter is an attribute, 28e113d\n// - [ ] Mesh-only models are allowed, e.g., without materials, #642\n// - [ ] Skeleton hierarchies (nodes containing jointName) must be separated from non-skeleton hierarchies., #647\n// - [ ] technique.states.functions.blendColor and technique.states.functions.depthRange parameters now must match WebGL function min/max, #707\n\nconst GLTF_ARRAYS = {\n  accessors: 'accessor',\n  animations: 'animation',\n  buffers: 'buffer',\n  bufferViews: 'bufferView',\n  images: 'image',\n  materials: 'material',\n  meshes: 'mesh',\n  nodes: 'node',\n  samplers: 'sampler',\n  scenes: 'scene',\n  skins: 'skin',\n  textures: 'texture'\n};\n\nconst GLTF_KEYS = {\n  accessor: 'accessors',\n  animations: 'animation',\n  buffer: 'buffers',\n  bufferView: 'bufferViews',\n  image: 'images',\n  material: 'materials',\n  mesh: 'meshes',\n  node: 'nodes',\n  sampler: 'samplers',\n  scene: 'scenes',\n  skin: 'skins',\n  texture: 'textures'\n};\n\n/**\n * Converts (normalizes) glTF v1 to v2\n */\nclass GLTFV1Normalizer {\n  constructor(gltf) {\n    this.idToIndexMap = {\n      animations: {},\n      accessors: {},\n      buffers: {},\n      bufferViews: {},\n      images: {},\n      materials: {},\n      meshes: {},\n      nodes: {},\n      samplers: {},\n      scenes: {},\n      skins: {},\n      textures: {}\n    };\n  }\n\n  /**\n   * Convert (normalize) glTF < 2.0 to glTF 2.0\n   * @param gltf - object with json and binChunks\n   * @param options\n   * @param options normalize Whether to actually normalize\n   */\n  normalize(gltf, options) {\n    this.json = gltf.json;\n    const json = gltf.json;\n\n    // Check version\n    switch (json.asset && json.asset.version) {\n      // We are converting to v2 format. Return if there is nothing to do\n      case '2.0':\n        return;\n\n      // This class is written to convert 1.0\n      case undefined:\n      case '1.0':\n        break;\n\n      default:\n        // eslint-disable-next-line no-undef, no-console\n        console.warn(`glTF: Unknown version ${json.asset.version}`);\n        return;\n    }\n\n    if (!options.normalize) {\n      // We are still missing a few conversion tricks, remove once addressed\n      throw new Error('glTF v1 is not supported.');\n    }\n\n    // eslint-disable-next-line no-undef, no-console\n    console.warn('Converting glTF v1 to glTF v2 format. This is experimental and may fail.');\n\n    this._addAsset(json);\n\n    // In glTF2 top-level fields are Arrays not Object maps\n    this._convertTopLevelObjectsToArrays(json);\n\n    // Extract bufferView indices for images\n    // (this extension needs to be invoked early in the normalization process)\n    KHR_binary_glTF.decode(gltf);\n\n    // Convert object references from ids to indices\n    this._convertObjectIdsToArrayIndices(json);\n\n    this._updateObjects(json);\n\n    this._updateMaterial(json);\n  }\n\n  // asset is now required, #642 https://github.com/KhronosGroup/glTF/issues/639\n  _addAsset(json) {\n    json.asset = json.asset || {};\n    // We are normalizing to glTF v2, so change version to \"2.0\"\n    json.asset.version = '2.0';\n    json.asset.generator = json.asset.generator || 'Normalized to glTF 2.0 by loaders.gl';\n  }\n\n  _convertTopLevelObjectsToArrays(json) {\n    // TODO check that all arrays are covered\n    for (const arrayName in GLTF_ARRAYS) {\n      this._convertTopLevelObjectToArray(json, arrayName);\n    }\n  }\n\n  /** Convert one top level object to array */\n  _convertTopLevelObjectToArray(json, mapName) {\n    const objectMap = json[mapName];\n    if (!objectMap || Array.isArray(objectMap)) {\n      return;\n    }\n\n    // Rewrite the top-level field as an array\n    json[mapName] = [];\n    // Copy the map key into object.id\n    for (const id in objectMap) {\n      const object = objectMap[id];\n      object.id = object.id || id; // Mutates the loaded object\n      const index = json[mapName].length;\n      json[mapName].push(object);\n      this.idToIndexMap[mapName][id] = index;\n    }\n  }\n\n  /** Go through all objects in all top-level arrays and replace ids with indices */\n  _convertObjectIdsToArrayIndices(json) {\n    for (const arrayName in GLTF_ARRAYS) {\n      this._convertIdsToIndices(json, arrayName);\n    }\n    if ('scene' in json) {\n      json.scene = this._convertIdToIndex(json.scene, 'scene');\n    }\n\n    // Convert any index references that are not using array names\n\n    // texture.source (image)\n    for (const texture of json.textures) {\n      this._convertTextureIds(texture);\n    }\n    for (const mesh of json.meshes) {\n      this._convertMeshIds(mesh);\n    }\n    for (const node of json.nodes) {\n      this._convertNodeIds(node);\n    }\n    for (const node of json.scenes) {\n      this._convertSceneIds(node);\n    }\n  }\n\n  _convertTextureIds(texture) {\n    if (texture.source) {\n      texture.source = this._convertIdToIndex(texture.source, 'image');\n    }\n  }\n\n  _convertMeshIds(mesh) {\n    for (const primitive of mesh.primitives) {\n      const {attributes, indices, material} = primitive;\n      for (const attributeName in attributes) {\n        attributes[attributeName] = this._convertIdToIndex(attributes[attributeName], 'accessor');\n      }\n      if (indices) {\n        primitive.indices = this._convertIdToIndex(indices, 'accessor');\n      }\n      if (material) {\n        primitive.material = this._convertIdToIndex(material, 'material');\n      }\n    }\n  }\n\n  _convertNodeIds(node) {\n    if (node.children) {\n      node.children = node.children.map((child) => this._convertIdToIndex(child, 'node'));\n    }\n    if (node.meshes) {\n      node.meshes = node.meshes.map((mesh) => this._convertIdToIndex(mesh, 'mesh'));\n    }\n  }\n\n  _convertSceneIds(scene) {\n    if (scene.nodes) {\n      scene.nodes = scene.nodes.map((node) => this._convertIdToIndex(node, 'node'));\n    }\n  }\n\n  /** Go through all objects in a top-level array and replace ids with indices */\n  _convertIdsToIndices(json, topLevelArrayName) {\n    if (!json[topLevelArrayName]) {\n      console.warn(`gltf v1: json doesn't contain attribute ${topLevelArrayName}`); // eslint-disable-line no-console, no-undef\n      json[topLevelArrayName] = [];\n    }\n    for (const object of json[topLevelArrayName]) {\n      for (const key in object) {\n        const id = object[key];\n        const index = this._convertIdToIndex(id, key);\n        object[key] = index;\n      }\n    }\n  }\n\n  _convertIdToIndex(id, key) {\n    const arrayName = GLTF_KEYS[key];\n    if (arrayName in this.idToIndexMap) {\n      const index = this.idToIndexMap[arrayName][id];\n      if (!Number.isFinite(index)) {\n        throw new Error(`gltf v1: failed to resolve ${key} with id ${id}`);\n      }\n      return index;\n    }\n    return id;\n  }\n\n  /**\n   *\n   * @param {*} json\n   */\n  _updateObjects(json) {\n    for (const buffer of this.json.buffers) {\n      // - [x] Removed buffer.type, #786, #629\n      delete buffer.type;\n    }\n  }\n\n  /**\n   * Update material (set pbrMetallicRoughness)\n   * @param {*} json\n   */\n  _updateMaterial(json) {\n    for (const material of json.materials) {\n      material.pbrMetallicRoughness = {\n        baseColorFactor: [1, 1, 1, 1],\n        metallicFactor: 1,\n        roughnessFactor: 1\n      };\n\n      const textureId = material.values && material.values.tex;\n      const textureIndex = json.textures.findIndex((texture) => texture.id === textureId);\n      if (textureIndex !== -1) {\n        material.pbrMetallicRoughness.baseColorTexture = {index: textureIndex};\n      }\n    }\n  }\n}\n\nexport function normalizeGLTFV1(gltf, options = {}) {\n  return new GLTFV1Normalizer().normalize(gltf, options);\n}\n"]},"metadata":{},"sourceType":"module"}