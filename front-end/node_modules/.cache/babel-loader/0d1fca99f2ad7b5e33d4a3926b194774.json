{"ast":null,"code":"import Stat from './stat';\nexport default class Stats {\n  constructor(_ref) {\n    let {\n      id,\n      stats\n    } = _ref;\n    this.id = id;\n    this.stats = {};\n\n    this._initializeStats(stats);\n\n    Object.seal(this);\n  }\n\n  get(name) {\n    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'count';\n    return this._getOrCreate({\n      name,\n      type\n    });\n  }\n\n  get size() {\n    return Object.keys(this.stats).length;\n  }\n\n  reset() {\n    for (const key in this.stats) {\n      this.stats[key].reset();\n    }\n\n    return this;\n  }\n\n  forEach(fn) {\n    for (const key in this.stats) {\n      fn(this.stats[key]);\n    }\n  }\n\n  getTable() {\n    const table = {};\n    this.forEach(stat => {\n      table[stat.name] = {\n        time: stat.time || 0,\n        count: stat.count || 0,\n        average: stat.getAverageTime() || 0,\n        hz: stat.getHz() || 0\n      };\n    });\n    return table;\n  }\n\n  _initializeStats() {\n    let stats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    stats.forEach(stat => this._getOrCreate(stat));\n  }\n\n  _getOrCreate(stat) {\n    if (!stat || !stat.name) {\n      return null;\n    }\n\n    const {\n      name,\n      type\n    } = stat;\n\n    if (!this.stats[name]) {\n      if (stat instanceof Stat) {\n        this.stats[name] = stat;\n      } else {\n        this.stats[name] = new Stat(name, type);\n      }\n    }\n\n    return this.stats[name];\n  }\n\n}","map":{"version":3,"sources":["../../../src/lib/stats.js"],"names":["constructor","stats","Object","get","type","size","reset","forEach","fn","getTable","table","stat","time","count","average","hz","_initializeStats","_getOrCreate"],"mappings":"AAAA,OAAA,IAAA,MAAA,QAAA;AAEA,eAAe,MAAA,KAAA,CAAY;AACzBA,EAAAA,WAAW,OAAc;AAAA,QAAb;AAAA,MAAA,EAAA;AAAKC,MAAAA;AAAL,KAAa;AACvB,SAAA,EAAA,GAAA,EAAA;AACA,SAAA,KAAA,GAAA,EAAA;;AAEA,SAAA,gBAAA,CAAA,KAAA;;AAEAC,IAAAA,MAAM,CAANA,IAAAA,CAAAA,IAAAA;AACD;;AAGDC,EAAAA,GAAG,CAAA,IAAA,EAAuB;AAAA,QAAhBC,IAAgB,uEAAvB,OAAuB;AACxB,WAAO,KAAA,YAAA,CAAkB;AAAA,MAAA,IAAA;AAAOA,MAAAA;AAAP,KAAlB,CAAP;AACD;;AAEO,MAAJC,IAAI,GAAG;AACT,WAAOH,MAAM,CAANA,IAAAA,CAAY,KAAZA,KAAAA,EAAP,MAAA;AACD;;AAGDI,EAAAA,KAAK,GAAG;AACN,SAAK,MAAL,GAAA,IAAkB,KAAlB,KAAA,EAA8B;AAC5B,WAAA,KAAA,CAAA,GAAA,EAAA,KAAA;AACD;;AAED,WAAA,IAAA;AACD;;AAEDC,EAAAA,OAAO,CAAA,EAAA,EAAK;AACV,SAAK,MAAL,GAAA,IAAkB,KAAlB,KAAA,EAA8B;AAC5BC,MAAAA,EAAE,CAAC,KAAA,KAAA,CAAHA,GAAG,CAAD,CAAFA;AACD;AACF;;AAEDC,EAAAA,QAAQ,GAAG;AACT,UAAMC,KAAK,GAAX,EAAA;AACA,SAAA,OAAA,CAAaC,IAAI,IAAI;AACnBD,MAAAA,KAAK,CAACC,IAAI,CAAVD,IAAK,CAALA,GAAmB;AACjBE,QAAAA,IAAI,EAAED,IAAI,CAAJA,IAAAA,IADW,CAAA;AAEjBE,QAAAA,KAAK,EAAEF,IAAI,CAAJA,KAAAA,IAFU,CAAA;AAGjBG,QAAAA,OAAO,EAAEH,IAAI,CAAJA,cAAAA,MAHQ,CAAA;AAIjBI,QAAAA,EAAE,EAAEJ,IAAI,CAAJA,KAAAA,MAAgB;AAJH,OAAnBD;AADF,KAAA;AASA,WAAA,KAAA;AACD;;AAEDM,EAAAA,gBAAgB,GAAa;AAAA,QAAZf,KAAY,uEAAb,EAAa;AAC3BA,IAAAA,KAAK,CAALA,OAAAA,CAAcU,IAAI,IAAI,KAAA,YAAA,CAAtBV,IAAsB,CAAtBA;AACD;;AAEDgB,EAAAA,YAAY,CAAA,IAAA,EAAO;AACjB,QAAI,CAAA,IAAA,IAAS,CAACN,IAAI,CAAlB,IAAA,EAAyB;AACvB,aAAA,IAAA;AACD;;AAED,UAAM;AAAA,MAAA,IAAA;AAAOP,MAAAA;AAAP,QAAN,IAAA;;AACA,QAAI,CAAC,KAAA,KAAA,CAAL,IAAK,CAAL,EAAuB;AACrB,UAAIO,IAAI,YAAR,IAAA,EAA0B;AACxB,aAAA,KAAA,CAAA,IAAA,IAAA,IAAA;AADF,OAAA,MAEO;AACL,aAAA,KAAA,CAAA,IAAA,IAAmB,IAAA,IAAA,CAAA,IAAA,EAAnB,IAAmB,CAAnB;AACD;AACF;;AACD,WAAO,KAAA,KAAA,CAAP,IAAO,CAAP;AACD;;AAlEwB","sourcesContent":["import Stat from './stat';\n\nexport default class Stats {\n  constructor({id, stats}) {\n    this.id = id;\n    this.stats = {};\n\n    this._initializeStats(stats);\n\n    Object.seal(this);\n  }\n\n  // Acquire a stat. Create if it doesn't exist.\n  get(name, type = 'count') {\n    return this._getOrCreate({name, type});\n  }\n\n  get size() {\n    return Object.keys(this.stats).length;\n  }\n\n  // Reset all stats\n  reset() {\n    for (const key in this.stats) {\n      this.stats[key].reset();\n    }\n\n    return this;\n  }\n\n  forEach(fn) {\n    for (const key in this.stats) {\n      fn(this.stats[key]);\n    }\n  }\n\n  getTable() {\n    const table = {};\n    this.forEach(stat => {\n      table[stat.name] = {\n        time: stat.time || 0,\n        count: stat.count || 0,\n        average: stat.getAverageTime() || 0,\n        hz: stat.getHz() || 0\n      };\n    });\n\n    return table;\n  }\n\n  _initializeStats(stats = []) {\n    stats.forEach(stat => this._getOrCreate(stat));\n  }\n\n  _getOrCreate(stat) {\n    if (!stat || !stat.name) {\n      return null;\n    }\n\n    const {name, type} = stat;\n    if (!this.stats[name]) {\n      if (stat instanceof Stat) {\n        this.stats[name] = stat;\n      } else {\n        this.stats[name] = new Stat(name, type);\n      }\n    }\n    return this.stats[name];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}