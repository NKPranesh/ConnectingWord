{"ast":null,"code":"import { Vector3 } from '@math.gl/core';\nimport Geometry from '../geometry/geometry';\nimport { uid } from '@luma.gl/webgl';\nconst ICO_POSITIONS = [-1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 1, 0, -1, 0, 1, 0, 0];\nconst ICO_INDICES = [3, 4, 5, 3, 5, 1, 3, 1, 0, 3, 0, 4, 4, 0, 2, 4, 2, 5, 2, 0, 1, 5, 2, 1];\nexport default class IcoSphereGeometry extends Geometry {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      id = uid('ico-sphere-geometry')\n    } = props;\n    const {\n      indices,\n      attributes\n    } = tesselateIcosaHedron(props);\n    super({ ...props,\n      id,\n      indices,\n      attributes: { ...attributes,\n        ...props.attributes\n      }\n    });\n  }\n\n}\n\nfunction tesselateIcosaHedron(props) {\n  const {\n    iterations = 0\n  } = props;\n  const PI = Math.PI;\n  const PI2 = PI * 2;\n  const positions = [...ICO_POSITIONS];\n  let indices = [...ICO_INDICES];\n  positions.push();\n  indices.push();\n\n  const getMiddlePoint = (() => {\n    const pointMemo = {};\n    return (i1, i2) => {\n      i1 *= 3;\n      i2 *= 3;\n      const mini = i1 < i2 ? i1 : i2;\n      const maxi = i1 > i2 ? i1 : i2;\n      const key = `${mini}|${maxi}`;\n\n      if (key in pointMemo) {\n        return pointMemo[key];\n      }\n\n      const x1 = positions[i1];\n      const y1 = positions[i1 + 1];\n      const z1 = positions[i1 + 2];\n      const x2 = positions[i2];\n      const y2 = positions[i2 + 1];\n      const z2 = positions[i2 + 2];\n      let xm = (x1 + x2) / 2;\n      let ym = (y1 + y2) / 2;\n      let zm = (z1 + z2) / 2;\n      const len = Math.sqrt(xm * xm + ym * ym + zm * zm);\n      xm /= len;\n      ym /= len;\n      zm /= len;\n      positions.push(xm, ym, zm);\n      return pointMemo[key] = positions.length / 3 - 1;\n    };\n  })();\n\n  for (let i = 0; i < iterations; i++) {\n    const indices2 = [];\n\n    for (let j = 0; j < indices.length; j += 3) {\n      const a = getMiddlePoint(indices[j + 0], indices[j + 1]);\n      const b = getMiddlePoint(indices[j + 1], indices[j + 2]);\n      const c = getMiddlePoint(indices[j + 2], indices[j + 0]);\n      indices2.push(c, indices[j + 0], a, a, indices[j + 1], b, b, indices[j + 2], c, a, b, c);\n    }\n\n    indices = indices2;\n  }\n\n  const normals = new Array(positions.length);\n  const texCoords = new Array(positions.length / 3 * 2);\n  const l = indices.length;\n\n  for (let i = l - 3; i >= 0; i -= 3) {\n    const i1 = indices[i + 0];\n    const i2 = indices[i + 1];\n    const i3 = indices[i + 2];\n    const in1 = i1 * 3;\n    const in2 = i2 * 3;\n    const in3 = i3 * 3;\n    const iu1 = i1 * 2;\n    const iu2 = i2 * 2;\n    const iu3 = i3 * 2;\n    const x1 = positions[in1 + 0];\n    const y1 = positions[in1 + 1];\n    const z1 = positions[in1 + 2];\n    const theta1 = Math.acos(z1 / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1));\n    const phi1 = Math.atan2(y1, x1) + PI;\n    const v1 = theta1 / PI;\n    const u1 = 1 - phi1 / PI2;\n    const x2 = positions[in2 + 0];\n    const y2 = positions[in2 + 1];\n    const z2 = positions[in2 + 2];\n    const theta2 = Math.acos(z2 / Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2));\n    const phi2 = Math.atan2(y2, x2) + PI;\n    const v2 = theta2 / PI;\n    const u2 = 1 - phi2 / PI2;\n    const x3 = positions[in3 + 0];\n    const y3 = positions[in3 + 1];\n    const z3 = positions[in3 + 2];\n    const theta3 = Math.acos(z3 / Math.sqrt(x3 * x3 + y3 * y3 + z3 * z3));\n    const phi3 = Math.atan2(y3, x3) + PI;\n    const v3 = theta3 / PI;\n    const u3 = 1 - phi3 / PI2;\n    const vec1 = [x3 - x2, y3 - y2, z3 - z2];\n    const vec2 = [x1 - x2, y1 - y2, z1 - z2];\n    const normal = new Vector3(vec1).cross(vec2).normalize();\n    let newIndex;\n\n    if ((u1 === 0 || u2 === 0 || u3 === 0) && (u1 === 0 || u1 > 0.5) && (u2 === 0 || u2 > 0.5) && (u3 === 0 || u3 > 0.5)) {\n      positions.push(positions[in1 + 0], positions[in1 + 1], positions[in1 + 2]);\n      newIndex = positions.length / 3 - 1;\n      indices.push(newIndex);\n      texCoords[newIndex * 2 + 0] = 1;\n      texCoords[newIndex * 2 + 1] = v1;\n      normals[newIndex * 3 + 0] = normal.x;\n      normals[newIndex * 3 + 1] = normal.y;\n      normals[newIndex * 3 + 2] = normal.z;\n      positions.push(positions[in2 + 0], positions[in2 + 1], positions[in2 + 2]);\n      newIndex = positions.length / 3 - 1;\n      indices.push(newIndex);\n      texCoords[newIndex * 2 + 0] = 1;\n      texCoords[newIndex * 2 + 1] = v2;\n      normals[newIndex * 3 + 0] = normal.x;\n      normals[newIndex * 3 + 1] = normal.y;\n      normals[newIndex * 3 + 2] = normal.z;\n      positions.push(positions[in3 + 0], positions[in3 + 1], positions[in3 + 2]);\n      newIndex = positions.length / 3 - 1;\n      indices.push(newIndex);\n      texCoords[newIndex * 2 + 0] = 1;\n      texCoords[newIndex * 2 + 1] = v3;\n      normals[newIndex * 3 + 0] = normal.x;\n      normals[newIndex * 3 + 1] = normal.y;\n      normals[newIndex * 3 + 2] = normal.z;\n    }\n\n    normals[in1 + 0] = normals[in2 + 0] = normals[in3 + 0] = normal.x;\n    normals[in1 + 1] = normals[in2 + 1] = normals[in3 + 1] = normal.y;\n    normals[in1 + 2] = normals[in2 + 2] = normals[in3 + 2] = normal.z;\n    texCoords[iu1 + 0] = u1;\n    texCoords[iu1 + 1] = v1;\n    texCoords[iu2 + 0] = u2;\n    texCoords[iu2 + 1] = v2;\n    texCoords[iu3 + 0] = u3;\n    texCoords[iu3 + 1] = v3;\n  }\n\n  return {\n    indices: {\n      size: 1,\n      value: new Uint16Array(indices)\n    },\n    attributes: {\n      POSITION: {\n        size: 3,\n        value: new Float32Array(positions)\n      },\n      NORMAL: {\n        size: 3,\n        value: new Float32Array(normals)\n      },\n      TEXCOORD_0: {\n        size: 2,\n        value: new Float32Array(texCoords)\n      }\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/geometries/ico-sphere-geometry.js"],"names":["ICO_POSITIONS","ICO_INDICES","constructor","props","id","uid","attributes","tesselateIcosaHedron","iterations","PI","Math","PI2","positions","indices","getMiddlePoint","pointMemo","i1","i2","mini","maxi","key","x1","y1","z1","x2","y2","z2","xm","ym","zm","len","i","indices2","j","a","b","c","normals","texCoords","l","i3","in1","in2","in3","iu1","iu2","iu3","theta1","phi1","v1","u1","theta2","phi2","v2","u2","x3","y3","z3","theta3","phi3","v3","u3","vec1","vec2","normal","newIndex","size","value","POSITION","NORMAL","TEXCOORD_0"],"mappings":"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","sourcesContent":["import {Vector3} from '@math.gl/core';\nimport Geometry from '../geometry/geometry';\nimport {uid} from '@luma.gl/webgl';\n\n/* eslint-disable comma-spacing, max-statements, complexity */\n\nconst ICO_POSITIONS = [-1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 1, 0, -1, 0, 1, 0, 0];\nconst ICO_INDICES = [3, 4, 5, 3, 5, 1, 3, 1, 0, 3, 0, 4, 4, 0, 2, 4, 2, 5, 2, 0, 1, 5, 2, 1];\n\nexport default class IcoSphereGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('ico-sphere-geometry')} = props;\n    const {indices, attributes} = tesselateIcosaHedron(props);\n    super({\n      ...props,\n      id,\n      indices,\n      attributes: {...attributes, ...props.attributes}\n    });\n  }\n}\n\nfunction tesselateIcosaHedron(props) {\n  const {iterations = 0} = props;\n\n  const PI = Math.PI;\n  const PI2 = PI * 2;\n\n  const positions = [...ICO_POSITIONS];\n  let indices = [...ICO_INDICES];\n\n  positions.push();\n  indices.push();\n\n  const getMiddlePoint = (() => {\n    const pointMemo = {};\n\n    return (i1, i2) => {\n      i1 *= 3;\n      i2 *= 3;\n      const mini = i1 < i2 ? i1 : i2;\n      const maxi = i1 > i2 ? i1 : i2;\n      const key = `${mini}|${maxi}`;\n\n      if (key in pointMemo) {\n        return pointMemo[key];\n      }\n\n      const x1 = positions[i1];\n      const y1 = positions[i1 + 1];\n      const z1 = positions[i1 + 2];\n      const x2 = positions[i2];\n      const y2 = positions[i2 + 1];\n      const z2 = positions[i2 + 2];\n      let xm = (x1 + x2) / 2;\n      let ym = (y1 + y2) / 2;\n      let zm = (z1 + z2) / 2;\n      const len = Math.sqrt(xm * xm + ym * ym + zm * zm);\n\n      xm /= len;\n      ym /= len;\n      zm /= len;\n\n      positions.push(xm, ym, zm);\n\n      return (pointMemo[key] = positions.length / 3 - 1);\n    };\n  })();\n\n  for (let i = 0; i < iterations; i++) {\n    const indices2 = [];\n    for (let j = 0; j < indices.length; j += 3) {\n      const a = getMiddlePoint(indices[j + 0], indices[j + 1]);\n      const b = getMiddlePoint(indices[j + 1], indices[j + 2]);\n      const c = getMiddlePoint(indices[j + 2], indices[j + 0]);\n\n      indices2.push(c, indices[j + 0], a, a, indices[j + 1], b, b, indices[j + 2], c, a, b, c);\n    }\n    indices = indices2;\n  }\n\n  // Calculate texCoords and normals\n  const normals = new Array(positions.length);\n  const texCoords = new Array((positions.length / 3) * 2);\n\n  const l = indices.length;\n  for (let i = l - 3; i >= 0; i -= 3) {\n    const i1 = indices[i + 0];\n    const i2 = indices[i + 1];\n    const i3 = indices[i + 2];\n    const in1 = i1 * 3;\n    const in2 = i2 * 3;\n    const in3 = i3 * 3;\n    const iu1 = i1 * 2;\n    const iu2 = i2 * 2;\n    const iu3 = i3 * 2;\n    const x1 = positions[in1 + 0];\n    const y1 = positions[in1 + 1];\n    const z1 = positions[in1 + 2];\n    const theta1 = Math.acos(z1 / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1));\n    const phi1 = Math.atan2(y1, x1) + PI;\n    const v1 = theta1 / PI;\n    const u1 = 1 - phi1 / PI2;\n    const x2 = positions[in2 + 0];\n    const y2 = positions[in2 + 1];\n    const z2 = positions[in2 + 2];\n    const theta2 = Math.acos(z2 / Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2));\n    const phi2 = Math.atan2(y2, x2) + PI;\n    const v2 = theta2 / PI;\n    const u2 = 1 - phi2 / PI2;\n    const x3 = positions[in3 + 0];\n    const y3 = positions[in3 + 1];\n    const z3 = positions[in3 + 2];\n    const theta3 = Math.acos(z3 / Math.sqrt(x3 * x3 + y3 * y3 + z3 * z3));\n    const phi3 = Math.atan2(y3, x3) + PI;\n    const v3 = theta3 / PI;\n    const u3 = 1 - phi3 / PI2;\n    const vec1 = [x3 - x2, y3 - y2, z3 - z2];\n    const vec2 = [x1 - x2, y1 - y2, z1 - z2];\n    const normal = new Vector3(vec1).cross(vec2).normalize();\n    let newIndex;\n\n    if (\n      (u1 === 0 || u2 === 0 || u3 === 0) &&\n      (u1 === 0 || u1 > 0.5) &&\n      (u2 === 0 || u2 > 0.5) &&\n      (u3 === 0 || u3 > 0.5)\n    ) {\n      positions.push(positions[in1 + 0], positions[in1 + 1], positions[in1 + 2]);\n      newIndex = positions.length / 3 - 1;\n      indices.push(newIndex);\n      texCoords[newIndex * 2 + 0] = 1;\n      texCoords[newIndex * 2 + 1] = v1;\n      normals[newIndex * 3 + 0] = normal.x;\n      normals[newIndex * 3 + 1] = normal.y;\n      normals[newIndex * 3 + 2] = normal.z;\n\n      positions.push(positions[in2 + 0], positions[in2 + 1], positions[in2 + 2]);\n      newIndex = positions.length / 3 - 1;\n      indices.push(newIndex);\n      texCoords[newIndex * 2 + 0] = 1;\n      texCoords[newIndex * 2 + 1] = v2;\n      normals[newIndex * 3 + 0] = normal.x;\n      normals[newIndex * 3 + 1] = normal.y;\n      normals[newIndex * 3 + 2] = normal.z;\n\n      positions.push(positions[in3 + 0], positions[in3 + 1], positions[in3 + 2]);\n      newIndex = positions.length / 3 - 1;\n      indices.push(newIndex);\n      texCoords[newIndex * 2 + 0] = 1;\n      texCoords[newIndex * 2 + 1] = v3;\n      normals[newIndex * 3 + 0] = normal.x;\n      normals[newIndex * 3 + 1] = normal.y;\n      normals[newIndex * 3 + 2] = normal.z;\n    }\n\n    normals[in1 + 0] = normals[in2 + 0] = normals[in3 + 0] = normal.x;\n    normals[in1 + 1] = normals[in2 + 1] = normals[in3 + 1] = normal.y;\n    normals[in1 + 2] = normals[in2 + 2] = normals[in3 + 2] = normal.z;\n\n    texCoords[iu1 + 0] = u1;\n    texCoords[iu1 + 1] = v1;\n\n    texCoords[iu2 + 0] = u2;\n    texCoords[iu2 + 1] = v2;\n\n    texCoords[iu3 + 0] = u3;\n    texCoords[iu3 + 1] = v3;\n  }\n\n  return {\n    indices: {size: 1, value: new Uint16Array(indices)},\n    attributes: {\n      POSITION: {size: 3, value: new Float32Array(positions)},\n      NORMAL: {size: 3, value: new Float32Array(normals)},\n      TEXCOORD_0: {size: 2, value: new Float32Array(texCoords)}\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}