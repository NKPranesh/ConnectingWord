{"ast":null,"code":"import { normalizeLoader } from '../loader-utils/normalize-loader';\nimport { getGlobalLoaderState } from '../loader-utils/option-utils';\n\nconst getGlobalLoaderRegistry = () => {\n  const state = getGlobalLoaderState();\n  state.loaderRegistry = state.loaderRegistry || [];\n  return state.loaderRegistry;\n};\n\nexport function registerLoaders(loaders) {\n  const loaderRegistry = getGlobalLoaderRegistry();\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n\n  for (const loader of loaders) {\n    const normalizedLoader = normalizeLoader(loader);\n\n    if (!loaderRegistry.find(registeredLoader => normalizedLoader === registeredLoader)) {\n      loaderRegistry.unshift(normalizedLoader);\n    }\n  }\n}\nexport function getRegisteredLoaders() {\n  return getGlobalLoaderRegistry();\n}\nexport function _unregisterLoaders() {\n  const state = getGlobalLoaderState();\n  state.loaderRegistry = [];\n}","map":{"version":3,"sources":["../../../../src/lib/api/register-loaders.ts"],"names":["getGlobalLoaderRegistry","state","getGlobalLoaderState","loaderRegistry","loaders","Array","normalizedLoader","normalizeLoader","registeredLoader"],"mappings":"AACA,SAAA,eAAA,QAAA,kCAAA;AACA,SAAA,oBAAA,QAAA,8BAAA;;AAIA,MAAMA,uBAAuB,GAAG,MAAM;AACpC,QAAMC,KAAK,GAAGC,oBAAd,EAAA;AACAD,EAAAA,KAAK,CAALA,cAAAA,GAAuBA,KAAK,CAALA,cAAAA,IAAvBA,EAAAA;AACA,SAAOA,KAAK,CAAZ,cAAA;AAHF,CAAA;;AAMA,OAAO,SAAA,eAAA,CAAA,OAAA,EAA4C;AACjD,QAAME,cAAc,GAAGH,uBAAvB,EAAA;AAEAI,EAAAA,OAAO,GAAGC,KAAK,CAALA,OAAAA,CAAAA,OAAAA,IAAAA,OAAAA,GAAmC,CAA7CD,OAA6C,CAA7CA;;AAEA,OAAK,MAAL,MAAA,IAAA,OAAA,EAA8B;AAC5B,UAAME,gBAAgB,GAAGC,eAAe,CAAxC,MAAwC,CAAxC;;AACA,QAAI,CAACJ,cAAc,CAAdA,IAAAA,CAAqBK,gBAAD,IAAsBF,gBAAgB,KAA/D,gBAAKH,CAAL,EAAuF;AAErFA,MAAAA,cAAc,CAAdA,OAAAA,CAAAA,gBAAAA;AACD;AACF;AACF;AAED,OAAO,SAAA,oBAAA,GAA0C;AAC/C,SAAOH,uBAAP,EAAA;AACD;AAGD,OAAO,SAAA,kBAAA,GAA8B;AACnC,QAAMC,KAAK,GAAGC,oBAAd,EAAA;AACAD,EAAAA,KAAK,CAALA,cAAAA,GAAAA,EAAAA;AACD","sourcesContent":["import {Loader} from '@loaders.gl/loader-utils';\nimport {normalizeLoader} from '../loader-utils/normalize-loader';\nimport {getGlobalLoaderState} from '../loader-utils/option-utils';\n\n// Store global registered loaders on the global object to increase chances of cross loaders-version interoperability\n// This use case is not reliable but can help when testing new versions of loaders.gl with existing frameworks\nconst getGlobalLoaderRegistry = () => {\n  const state = getGlobalLoaderState();\n  state.loaderRegistry = state.loaderRegistry || [];\n  return state.loaderRegistry;\n};\n\nexport function registerLoaders(loaders: Loader[]) {\n  const loaderRegistry = getGlobalLoaderRegistry();\n\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n\n  for (const loader of loaders) {\n    const normalizedLoader = normalizeLoader(loader);\n    if (!loaderRegistry.find((registeredLoader) => normalizedLoader === registeredLoader)) {\n      // add to the beginning of the loaderRegistry, so the last registeredLoader get picked\n      loaderRegistry.unshift(normalizedLoader);\n    }\n  }\n}\n\nexport function getRegisteredLoaders(): Loader[] {\n  return getGlobalLoaderRegistry();\n}\n\n// For testing\nexport function _unregisterLoaders() {\n  const state = getGlobalLoaderState();\n  state.loaderRegistry = [];\n}\n"]},"metadata":{},"sourceType":"module"}