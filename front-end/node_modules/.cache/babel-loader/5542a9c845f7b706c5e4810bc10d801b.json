{"ast":null,"code":"import { fs } from '@loaders.gl/loader-utils';\nexport async function readArrayBuffer(file, start, length) {\n  if (typeof file === 'number') {\n    return await fs._readToArrayBuffer(file, start, length);\n  }\n\n  if (!(file instanceof Blob)) {\n    file = new Blob([file]);\n  }\n\n  const slice = file.slice(start, start + length);\n  return await readBlob(slice);\n}\nexport async function readBlob(blob) {\n  return await new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n\n    fileReader.onload = event => {\n      var _event$target;\n\n      return resolve(event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result);\n    };\n\n    fileReader.onerror = error => reject(error);\n\n    fileReader.readAsArrayBuffer(blob);\n  });\n}","map":{"version":3,"sources":["../../../../src/lib/fetch/read-array-buffer.ts"],"names":["fs","file","slice","start","readBlob","fileReader","event","resolve","error","reject"],"mappings":"AACA,SAAA,EAAA,QAAA,0BAAA;AASA,OAAO,eAAA,eAAA,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAIiB;AACtB,MAAI,OAAA,IAAA,KAAJ,QAAA,EAA8B;AAC5B,WAAO,MAAMA,EAAE,CAAFA,kBAAAA,CAAAA,IAAAA,EAAAA,KAAAA,EAAb,MAAaA,CAAb;AACD;;AAED,MAAI,EAAEC,IAAI,YAAV,IAAI,CAAJ,EAA6B;AAC3BA,IAAAA,IAAI,GAAG,IAAA,IAAA,CAAS,CAAhBA,IAAgB,CAAT,CAAPA;AACD;;AACD,QAAMC,KAAK,GAAGD,IAAI,CAAJA,KAAAA,CAAAA,KAAAA,EAAkBE,KAAK,GAArC,MAAcF,CAAd;AACA,SAAO,MAAMG,QAAQ,CAArB,KAAqB,CAArB;AACD;AASD,OAAO,eAAA,QAAA,CAAA,IAAA,EAA0D;AAC/D,SAAO,MAAM,IAAA,OAAA,CAAY,CAAA,OAAA,EAAA,MAAA,KAAqB;AAC5C,UAAMC,UAAU,GAAG,IAAnB,UAAmB,EAAnB;;AACAA,IAAAA,UAAU,CAAVA,MAAAA,GAAqBC,KAAD,IAAA;AAAA,UAAA,aAAA;;AAAA,aAClBC,OAAO,CAACD,KAAD,KAAA,IAACA,IAAAA,KAAD,KAAA,KAAA,CAACA,GAAD,KAAA,CAACA,GAAD,CAAA,aAAA,GAACA,KAAK,CAAN,MAAA,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAACA,aAAAA,CADU,MACX,CADW;AAApBD,KAAAA;;AAGAA,IAAAA,UAAU,CAAVA,OAAAA,GAAsBG,KAAD,IAAsCC,MAAM,CAAjEJ,KAAiE,CAAjEA;;AACAA,IAAAA,UAAU,CAAVA,iBAAAA,CAAAA,IAAAA;AANF,GAAa,CAAb;AAQD","sourcesContent":["//\nimport {fs} from '@loaders.gl/loader-utils';\n\n/**\n * Reads a chunk from a random access file\n * @param file\n * @param start\n * @param length\n * @returns\n */\nexport async function readArrayBuffer(\n  file: Blob | ArrayBuffer | string | number,\n  start: number,\n  length: number\n): Promise<ArrayBuffer> {\n  if (typeof file === 'number') {\n    return await fs._readToArrayBuffer(file, start, length);\n  }\n  // TODO - we can do better for ArrayBuffer and string\n  if (!(file instanceof Blob)) {\n    file = new Blob([file]);\n  }\n  const slice = file.slice(start, start + length);\n  return await readBlob(slice);\n}\n\n/**\n * Read a slice of a Blob or File, without loading the entire file into memory\n * The trick when reading File objects is to read successive \"slices\" of the File\n * Per spec https://w3c.github.io/FileAPI/, slicing a File only updates the start and end fields\n * Actually reading from file happens in `readAsArrayBuffer`\n * @param blob to read\n */\nexport async function readBlob(blob: Blob): Promise<ArrayBuffer> {\n  return await new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = (event: ProgressEvent<FileReader>) =>\n      resolve(event?.target?.result as ArrayBuffer);\n    // TODO - reject with a proper Error\n    fileReader.onerror = (error: ProgressEvent<FileReader>) => reject(error);\n    fileReader.readAsArrayBuffer(blob);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}