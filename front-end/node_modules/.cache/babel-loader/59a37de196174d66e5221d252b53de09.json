{"ast":null,"code":"export function makeDOMStream(source, options) {\n  const iterator = source[Symbol.asyncIterator] ? source[Symbol.asyncIterator]() : source[Symbol.iterator]();\n  return new ReadableStream({\n    type: 'bytes',\n\n    async pull(controller) {\n      try {\n        const {\n          done,\n          value\n        } = await iterator.next();\n\n        if (done) {\n          controller.close();\n        } else {\n          controller.enqueue(new Uint8Array(value));\n        }\n      } catch (error) {\n        controller.error(error);\n      }\n    },\n\n    async cancel() {\n      var _iterator$return;\n\n      await (iterator === null || iterator === void 0 ? void 0 : (_iterator$return = iterator.return) === null || _iterator$return === void 0 ? void 0 : _iterator$return.call(iterator));\n    }\n\n  }, {\n    highWaterMark: 2 ** 24,\n    ...options\n  });\n}","map":{"version":3,"sources":["../../../../src/iterators/make-stream/make-dom-stream.ts"],"names":["iterator","source","Symbol","type","value","controller","highWaterMark","options"],"mappings":"AAQA,OAAO,SAAA,aAAA,CAAA,MAAA,EAAA,OAAA,EAGW;AAChB,QAAMA,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAAbD,aAAM,CAANA,GACZA,MAAD,CAAuCC,MAAM,CADhCD,aACb,CAACA,EADYA,GAEZA,MAAD,CAAkCC,MAAM,CAF5C,QAEI,CAACD,EAFL;AAIA,SAAO,IAAA,cAAA,CACL;AAKEE,IAAAA,IAAI,EALN,OAAA;;AAOE,UAAA,IAAA,CAAA,UAAA,EAAuB;AACrB,UAAI;AACF,cAAM;AAAA,UAAA,IAAA;AAAOC,UAAAA;AAAP,YAAgB,MAAMJ,QAAQ,CAApC,IAA4BA,EAA5B;;AACA,YAAA,IAAA,EAAU;AACRK,UAAAA,UAAU,CAAVA,KAAAA;AADF,SAAA,MAEO;AAELA,UAAAA,UAAU,CAAVA,OAAAA,CAAmB,IAAA,UAAA,CAAnBA,KAAmB,CAAnBA;AACD;AAPH,OAAA,CAQE,OAAA,KAAA,EAAc;AACdA,QAAAA,UAAU,CAAVA,KAAAA,CAAAA,KAAAA;AACD;AAlBL,KAAA;;AAqBE,UAAA,MAAA,GAAe;AAAA,UAAA,gBAAA;;AACb,aAAML,QAAN,KAAA,IAAMA,IAAAA,QAAN,KAAA,KAAA,CAAMA,GAAN,KAAA,CAAMA,GAAN,CAAA,gBAAA,GAAMA,QAAQ,CAAd,MAAA,MAAA,IAAA,IAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAMA,gBAAAA,CAAAA,IAAAA,CAAN,QAAMA,CAAN;AACD;;AAvBH,GADK,EA2BL;AAEEM,IAAAA,aAAa,EAAE,KAFjB,EAAA;AAGE,OAAGC;AAHL,GA3BK,CAAP;AAiCD","sourcesContent":["export type MakeDOMStreamOptions = {\n  /** Stream allocates an arrayBuffer. Enables use of a default reader. */\n  autoAllocateChunkSize?: number;\n  /** Total number of chunks in queue before back pressure is applied */\n  highWaterMark?: number;\n};\n\n/** Builds a DOM stream from an iterator */\nexport function makeDOMStream<ArrayBuffer>(\n  source: Iterable<ArrayBuffer> | AsyncIterable<ArrayBuffer>,\n  options?: MakeDOMStreamOptions\n): ReadableStream {\n  const iterator = source[Symbol.asyncIterator]\n    ? (source as AsyncIterable<ArrayBuffer>)[Symbol.asyncIterator]()\n    : (source as Iterable<ArrayBuffer>)[Symbol.iterator]();\n\n  return new ReadableStream<Uint8Array>(\n    {\n      // Create a byte stream (enables `Response(stream).arrayBuffer()`)\n      // Only supported on Chrome\n      // See: https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController\n      // @ts-expect-error Only Chrome supports byte streams\n      type: 'bytes',\n\n      async pull(controller) {\n        try {\n          const {done, value} = await iterator.next();\n          if (done) {\n            controller.close();\n          } else {\n            // TODO - ignores controller.desiredSize\n            controller.enqueue(new Uint8Array(value));\n          }\n        } catch (error) {\n          controller.error(error);\n        }\n      },\n\n      async cancel() {\n        await iterator?.return?.();\n      }\n    },\n    // options: QueingStrategy<Uint8Array>\n    {\n      // This is bytes, not chunks\n      highWaterMark: 2 ** 24,\n      ...options\n    }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}