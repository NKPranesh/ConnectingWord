{"ast":null,"code":"import { Vector3, Matrix4 } from '@math.gl/core';\nimport { assert, uid } from '@luma.gl/webgl';\nexport default class ScenegraphNode {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      id\n    } = props;\n    this.id = id || uid(this.constructor.name);\n    this.display = true;\n    this.position = new Vector3();\n    this.rotation = new Vector3();\n    this.scale = new Vector3(1, 1, 1);\n    this.matrix = new Matrix4();\n    this.userData = {};\n    this.props = {};\n\n    this._setScenegraphNodeProps(props);\n  }\n\n  delete() {}\n\n  setProps(props) {\n    this._setScenegraphNodeProps(props);\n\n    return this;\n  }\n\n  toString() {\n    return `{type: ScenegraphNode, id: ${this.id})}`;\n  }\n\n  setPosition(position) {\n    assert(position.length === 3, 'setPosition requires vector argument');\n    this.position = position;\n    return this;\n  }\n\n  setRotation(rotation) {\n    assert(rotation.length === 3, 'setRotation requires vector argument');\n    this.rotation = rotation;\n    return this;\n  }\n\n  setScale(scale) {\n    assert(scale.length === 3, 'setScale requires vector argument');\n    this.scale = scale;\n    return this;\n  }\n\n  setMatrix(matrix) {\n    let copyMatrix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (copyMatrix) {\n      this.matrix.copy(matrix);\n    } else {\n      this.matrix = matrix;\n    }\n  }\n\n  setMatrixComponents(_ref) {\n    let {\n      position,\n      rotation,\n      scale,\n      update = true\n    } = _ref;\n\n    if (position) {\n      this.setPosition(position);\n    }\n\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n\n    if (scale) {\n      this.setScale(scale);\n    }\n\n    if (update) {\n      this.updateMatrix();\n    }\n\n    return this;\n  }\n\n  updateMatrix() {\n    const pos = this.position;\n    const rot = this.rotation;\n    const scale = this.scale;\n    this.matrix.identity();\n    this.matrix.translate(pos);\n    this.matrix.rotateXYZ(rot);\n    this.matrix.scale(scale);\n    return this;\n  }\n\n  update() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      position,\n      rotation,\n      scale\n    } = options;\n\n    if (position) {\n      this.setPosition(position);\n    }\n\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n\n    if (scale) {\n      this.setScale(scale);\n    }\n\n    this.updateMatrix();\n    return this;\n  }\n\n  getCoordinateUniforms(viewMatrix, modelMatrix) {\n    assert(viewMatrix);\n    modelMatrix = modelMatrix || this.matrix;\n    const worldMatrix = new Matrix4(viewMatrix).multiplyRight(modelMatrix);\n    const worldInverse = worldMatrix.invert();\n    const worldInverseTranspose = worldInverse.transpose();\n    return {\n      viewMatrix,\n      modelMatrix,\n      objectMatrix: modelMatrix,\n      worldMatrix,\n      worldInverseMatrix: worldInverse,\n      worldInverseTransposeMatrix: worldInverseTranspose\n    };\n  }\n\n  _setScenegraphNodeProps(props) {\n    if ('display' in props) {\n      this.display = props.display;\n    }\n\n    if ('position' in props) {\n      this.setPosition(props.position);\n    }\n\n    if ('rotation' in props) {\n      this.setRotation(props.rotation);\n    }\n\n    if ('scale' in props) {\n      this.setScale(props.scale);\n    }\n\n    if ('matrix' in props) {\n      this.setMatrix(props.matrix);\n    }\n\n    Object.assign(this.props, props);\n  }\n\n}","map":{"version":3,"sources":["../../../src/scenegraph/scenegraph-node.js"],"names":["constructor","props","id","uid","delete","setProps","toString","setPosition","assert","position","setRotation","rotation","setScale","scale","setMatrix","copyMatrix","setMatrixComponents","update","updateMatrix","pos","rot","options","getCoordinateUniforms","modelMatrix","worldMatrix","worldInverse","worldInverseTranspose","objectMatrix","worldInverseMatrix","worldInverseTransposeMatrix","_setScenegraphNodeProps","Object"],"mappings":"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","sourcesContent":["import {Vector3, Matrix4} from '@math.gl/core';\nimport {assert, uid} from '@luma.gl/webgl';\n\nexport default class ScenegraphNode {\n  constructor(props = {}) {\n    const {id} = props;\n\n    this.id = id || uid(this.constructor.name);\n\n    this.display = true; // whether to display the object at all\n    this.position = new Vector3();\n    this.rotation = new Vector3();\n    this.scale = new Vector3(1, 1, 1);\n    this.matrix = new Matrix4();\n    this.userData = {};\n\n    this.props = {};\n    this._setScenegraphNodeProps(props);\n  }\n\n  delete() {}\n\n  setProps(props) {\n    this._setScenegraphNodeProps(props);\n    return this;\n  }\n\n  toString() {\n    return `{type: ScenegraphNode, id: ${this.id})}`;\n  }\n\n  setPosition(position) {\n    assert(position.length === 3, 'setPosition requires vector argument');\n    this.position = position;\n    return this;\n  }\n\n  setRotation(rotation) {\n    assert(rotation.length === 3, 'setRotation requires vector argument');\n    this.rotation = rotation;\n    return this;\n  }\n\n  setScale(scale) {\n    assert(scale.length === 3, 'setScale requires vector argument');\n    this.scale = scale;\n    return this;\n  }\n\n  setMatrix(matrix, copyMatrix = true) {\n    if (copyMatrix) {\n      this.matrix.copy(matrix);\n    } else {\n      this.matrix = matrix;\n    }\n  }\n\n  setMatrixComponents({position, rotation, scale, update = true}) {\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    if (update) {\n      this.updateMatrix();\n    }\n    return this;\n  }\n\n  updateMatrix() {\n    const pos = this.position;\n    const rot = this.rotation;\n    const scale = this.scale;\n\n    this.matrix.identity();\n    this.matrix.translate(pos);\n    this.matrix.rotateXYZ(rot);\n    this.matrix.scale(scale);\n    return this;\n  }\n\n  update(options = {}) {\n    const {position, rotation, scale} = options;\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    this.updateMatrix();\n    return this;\n  }\n\n  getCoordinateUniforms(viewMatrix, modelMatrix) {\n    // TODO - solve multiple class problem\n    // assert(viewMatrix instanceof Matrix4);\n    assert(viewMatrix);\n    modelMatrix = modelMatrix || this.matrix;\n    const worldMatrix = new Matrix4(viewMatrix).multiplyRight(modelMatrix);\n    const worldInverse = worldMatrix.invert();\n    const worldInverseTranspose = worldInverse.transpose();\n\n    return {\n      viewMatrix,\n      modelMatrix,\n      objectMatrix: modelMatrix,\n      worldMatrix,\n      worldInverseMatrix: worldInverse,\n      worldInverseTransposeMatrix: worldInverseTranspose\n    };\n  }\n\n  // TODO - copied code, not yet vetted\n  /*\n  transform() {\n    if (!this.parent) {\n      this.endPosition.set(this.position);\n      this.endRotation.set(this.rotation);\n      this.endScale.set(this.scale);\n    } else {\n      const parent = this.parent;\n      this.endPosition.set(this.position.add(parent.endPosition));\n      this.endRotation.set(this.rotation.add(parent.endRotation));\n      this.endScale.set(this.scale.add(parent.endScale));\n    }\n\n    const ch = this.children;\n    for (let i = 0; i < ch.length; ++i) {\n      ch[i].transform();\n    }\n\n    return this;\n  }\n  */\n\n  _setScenegraphNodeProps(props) {\n    if ('display' in props) {\n      this.display = props.display;\n    }\n\n    if ('position' in props) {\n      this.setPosition(props.position);\n    }\n    if ('rotation' in props) {\n      this.setRotation(props.rotation);\n    }\n    if ('scale' in props) {\n      this.setScale(props.scale);\n    }\n\n    // Matrix overwrites other props\n    if ('matrix' in props) {\n      this.setMatrix(props.matrix);\n    }\n\n    Object.assign(this.props, props);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}