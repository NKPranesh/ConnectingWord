{"ast":null,"code":"import { assert } from '../env-utils/assert';\nimport { VERSION } from '../env-utils/version';\nexport function validateWorkerVersion(worker) {\n  let coreVersion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : VERSION;\n  assert(worker, 'no worker provided');\n  const workerVersion = worker.version;\n\n  if (!coreVersion || !workerVersion) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction parseVersion(version) {\n  const parts = version.split('.').map(Number);\n  return {\n    major: parts[0],\n    minor: parts[1]\n  };\n}","map":{"version":3,"sources":["../../../../src/lib/worker-api/validate-worker-version.ts"],"names":["coreVersion","assert","workerVersion","worker","parts","version","major","minor"],"mappings":"AACA,SAAA,MAAA,QAAA,qBAAA;AACA,SAAA,OAAA,QAAA,sBAAA;AAQA,OAAO,SAAA,qBAAA,CAAA,MAAA,EAGI;AAAA,MADTA,WACS,uEAHJ,OAGI;AACTC,EAAAA,MAAM,CAAA,MAAA,EAANA,oBAAM,CAANA;AAEA,QAAMC,aAAa,GAAGC,MAAM,CAA5B,OAAA;;AACA,MAAI,CAAA,WAAA,IAAgB,CAApB,aAAA,EAAoC;AAClC,WAAA,KAAA;AACD;;AAYD,SAAA,IAAA;AACD;;AAID,SAAA,YAAA,CAAA,OAAA,EAA+B;AAC7B,QAAMC,KAAK,GAAGC,OAAO,CAAPA,KAAAA,CAAAA,GAAAA,EAAAA,GAAAA,CAAd,MAAcA,CAAd;AACA,SAAO;AAACC,IAAAA,KAAK,EAAEF,KAAK,CAAb,CAAa,CAAb;AAAkBG,IAAAA,KAAK,EAAEH,KAAK,CAAA,CAAA;AAA9B,GAAP;AACD","sourcesContent":["import type {WorkerObject} from '../../types';\nimport {assert} from '../env-utils/assert';\nimport {VERSION} from '../env-utils/version';\n\n/**\n * Check if worker is compatible with this library version\n * @param worker\n * @param libVersion\n * @returns `true` if the two versions are compatible\n */\nexport function validateWorkerVersion(\n  worker: WorkerObject,\n  coreVersion: string = VERSION\n): boolean {\n  assert(worker, 'no worker provided');\n\n  const workerVersion = worker.version;\n  if (!coreVersion || !workerVersion) {\n    return false;\n  }\n\n  // TODO enable when fix the __version__ injection\n  // const coreVersions = parseVersion(coreVersion);\n  // const workerVersions = parseVersion(workerVersion);\n  // assert(\n  //   coreVersion.major === workerVersion.major && coreVersion.minor <= workerVersion.minor,\n  //   `worker: ${worker.name} is not compatible. ${coreVersion.major}.${\n  //     coreVersion.minor\n  //   }+ is required.`\n  // );\n\n  return true;\n}\n\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction parseVersion(version) {\n  const parts = version.split('.').map(Number);\n  return {major: parts[0], minor: parts[1]};\n}\n"]},"metadata":{},"sourceType":"module"}