{"ast":null,"code":"const globals = {\n  self: typeof self !== 'undefined' && self,\n  window: typeof window !== 'undefined' && window,\n  global: typeof global !== 'undefined' && global,\n  document: typeof document !== 'undefined' && document\n};\nconst self_ = globals.self || globals.window || globals.global || {};\nconst window_ = globals.window || globals.self || globals.global || {};\nconst global_ = globals.global || globals.self || globals.window || {};\nconst document_ = globals.document || {};\nexport { self_ as self, window_ as window, global_ as global, document_ as document };\nexport const isBrowser = typeof process !== 'object' || String(process) !== '[object process]' || process.browser;\nexport const isWorker = typeof importScripts === 'function';\nconst matches = typeof process !== 'undefined' && process.version && /v([0-9]*)/.exec(process.version);\nexport const nodeVersion = matches && parseFloat(matches[1]) || 0;","map":{"version":3,"sources":["../../../../src/lib/env-utils/globals.ts"],"names":["globals","self","window","global","document","self_","window_","global_","document_","isBrowser","String","process","isWorker","matches","nodeVersion","parseFloat"],"mappings":"AAIA,MAAMA,OAAO,GAAG;AACdC,EAAAA,IAAI,EAAE,OAAA,IAAA,KAAA,WAAA,IADQ,IAAA;AAEdC,EAAAA,MAAM,EAAE,OAAA,MAAA,KAAA,WAAA,IAFM,MAAA;AAGdC,EAAAA,MAAM,EAAE,OAAA,MAAA,KAAA,WAAA,IAHM,MAAA;AAIdC,EAAAA,QAAQ,EAAE,OAAA,QAAA,KAAA,WAAA,IAAmCA;AAJ/B,CAAhB;AAQA,MAAMC,KAAU,GAAGL,OAAO,CAAPA,IAAAA,IAAgBA,OAAO,CAAvBA,MAAAA,IAAkCA,OAAO,CAAzCA,MAAAA,IAAnB,EAAA;AACA,MAAMM,OAAY,GAAGN,OAAO,CAAPA,MAAAA,IAAkBA,OAAO,CAAzBA,IAAAA,IAAkCA,OAAO,CAAzCA,MAAAA,IAArB,EAAA;AACA,MAAMO,OAAY,GAAGP,OAAO,CAAPA,MAAAA,IAAkBA,OAAO,CAAzBA,IAAAA,IAAkCA,OAAO,CAAzCA,MAAAA,IAArB,EAAA;AACA,MAAMQ,SAAc,GAAGR,OAAO,CAAPA,QAAAA,IAAvB,EAAA;AAEA,SAAQK,KAAK,IAAb,IAAA,EAAuBC,OAAO,IAA9B,MAAA,EAA0CC,OAAO,IAAjD,MAAA,EAA6DC,SAAS,IAAtE,QAAA;AAGA,OAAO,MAAMC,SAAkB,GAE7B,OAAA,OAAA,KAAA,QAAA,IAA+BC,MAAM,CAANA,OAAM,CAANA,KAA/B,kBAAA,IAAyEC,OAAO,CAF3E,OAAA;AAKP,OAAO,MAAMC,QAAiB,GAAG,OAAA,aAAA,KAA1B,UAAA;AAGP,MAAMC,OAAO,GACX,OAAA,OAAA,KAAA,WAAA,IAAkCF,OAAO,CAAzC,OAAA,IAAqD,YAAA,IAAA,CAAiBA,OAAO,CAD/E,OACuD,CADvD;AAGA,OAAO,MAAMG,WAAmB,GAAID,OAAO,IAAIE,UAAU,CAACF,OAAO,CAA9B,CAA8B,CAAR,CAArBA,IAA7B,CAAA","sourcesContent":["// Purpose: include this in your module to avoid\n// dependencies on micro modules like 'global' and 'is-browser';\n\n/* eslint-disable no-restricted-globals */\nconst globals = {\n  self: typeof self !== 'undefined' && self,\n  window: typeof window !== 'undefined' && window,\n  global: typeof global !== 'undefined' && global,\n  document: typeof document !== 'undefined' && document\n};\n\ntype obj = {[key: string]: any};\nconst self_: obj = globals.self || globals.window || globals.global || {};\nconst window_: obj = globals.window || globals.self || globals.global || {};\nconst global_: obj = globals.global || globals.self || globals.window || {};\nconst document_: obj = globals.document || {};\n\nexport {self_ as self, window_ as window, global_ as global, document_ as document};\n\n/** true if running in a browser */\nexport const isBrowser: boolean =\n  // @ts-ignore process does not exist on browser\n  typeof process !== 'object' || String(process) !== '[object process]' || process.browser;\n\n/** true if running in a worker thread */\nexport const isWorker: boolean = typeof importScripts === 'function';\n\n// Extract node major version\nconst matches =\n  typeof process !== 'undefined' && process.version && /v([0-9]*)/.exec(process.version);\n/** Major Node version (as a number) */\nexport const nodeVersion: number = (matches && parseFloat(matches[1])) || 0;\n"]},"metadata":{},"sourceType":"module"}