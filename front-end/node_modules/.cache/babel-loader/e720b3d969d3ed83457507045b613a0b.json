{"ast":null,"code":"import Matrix from './base/matrix';\nimport { checkVector, deprecated } from '../lib/validators';\nimport { vec4_transformMat3 } from '../lib/gl-matrix-extras';\nimport * as mat3 from 'gl-matrix/mat3';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nconst IDENTITY = Object.freeze([1, 0, 0, 0, 1, 0, 0, 0, 1]);\nconst ZERO = Object.freeze([0, 0, 0, 0, 0, 0, 0, 0, 0]);\nconst INDICES = Object.freeze({\n  COL0ROW0: 0,\n  COL0ROW1: 1,\n  COL0ROW2: 2,\n  COL1ROW0: 3,\n  COL1ROW1: 4,\n  COL1ROW2: 5,\n  COL2ROW0: 6,\n  COL2ROW1: 7,\n  COL2ROW2: 8\n});\nconst constants = {};\nexport default class Matrix3 extends Matrix {\n  static get IDENTITY() {\n    constants.IDENTITY = constants.IDENTITY || Object.freeze(new Matrix3(IDENTITY));\n    return constants.IDENTITY;\n  }\n\n  static get ZERO() {\n    constants.ZERO = constants.ZERO || Object.freeze(new Matrix3(ZERO));\n    return constants.ZERO;\n  }\n\n  get ELEMENTS() {\n    return 9;\n  }\n\n  get RANK() {\n    return 3;\n  }\n\n  get INDICES() {\n    return INDICES;\n  }\n\n  constructor(array) {\n    super(-0, -0, -0, -0, -0, -0, -0, -0, -0);\n\n    if (arguments.length === 1 && Array.isArray(array)) {\n      this.copy(array);\n    } else {\n      this.identity();\n    }\n  }\n\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    this[4] = array[4];\n    this[5] = array[5];\n    this[6] = array[6];\n    this[7] = array[7];\n    this[8] = array[8];\n    return this.check();\n  }\n\n  set(m00, m10, m20, m01, m11, m21, m02, m12, m22) {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m01;\n    this[4] = m11;\n    this[5] = m21;\n    this[6] = m02;\n    this[7] = m12;\n    this[8] = m22;\n    return this.check();\n  }\n\n  setRowMajor(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m01;\n    this[4] = m11;\n    this[5] = m21;\n    this[6] = m02;\n    this[7] = m12;\n    this[8] = m22;\n    return this.check();\n  }\n\n  determinant() {\n    return mat3.determinant(this);\n  }\n\n  identity() {\n    return this.copy(IDENTITY);\n  }\n\n  fromQuaternion(q) {\n    mat3.fromQuat(this, q);\n    return this.check();\n  }\n\n  transpose() {\n    mat3.transpose(this, this);\n    return this.check();\n  }\n\n  invert() {\n    mat3.invert(this, this);\n    return this.check();\n  }\n\n  multiplyLeft(a) {\n    mat3.multiply(this, a, this);\n    return this.check();\n  }\n\n  multiplyRight(a) {\n    mat3.multiply(this, this, a);\n    return this.check();\n  }\n\n  rotate(radians) {\n    mat3.rotate(this, this, radians);\n    return this.check();\n  }\n\n  scale(factor) {\n    if (Array.isArray(factor)) {\n      mat3.scale(this, this, factor);\n    } else {\n      mat3.scale(this, this, [factor, factor, factor]);\n    }\n\n    return this.check();\n  }\n\n  translate(vec) {\n    mat3.translate(this, this, vec);\n    return this.check();\n  }\n\n  transform(vector, result) {\n    switch (vector.length) {\n      case 2:\n        result = vec2.transformMat3(result || [-0, -0], vector, this);\n        break;\n\n      case 3:\n        result = vec3.transformMat3(result || [-0, -0, -0], vector, this);\n        break;\n\n      case 4:\n        result = vec4_transformMat3(result || [-0, -0, -0, -0], vector, this);\n        break;\n\n      default:\n        throw new Error('Illegal vector');\n    }\n\n    checkVector(result, vector.length);\n    return result;\n  }\n\n  transformVector(vector, result) {\n    deprecated('Matrix3.transformVector');\n    return this.transform(vector, result);\n  }\n\n  transformVector2(vector, result) {\n    deprecated('Matrix3.transformVector');\n    return this.transform(vector, result);\n  }\n\n  transformVector3(vector, result) {\n    deprecated('Matrix3.transformVector');\n    return this.transform(vector, result);\n  }\n\n}","map":{"version":3,"sources":["../../../src/classes/matrix3.js"],"names":["IDENTITY","Object","ZERO","INDICES","COL0ROW0","COL0ROW1","COL0ROW2","COL1ROW0","COL1ROW1","COL1ROW2","COL2ROW0","COL2ROW1","COL2ROW2","constants","ELEMENTS","RANK","constructor","arguments","Array","copy","array","set","setRowMajor","determinant","mat3","identity","fromQuaternion","transpose","invert","multiplyLeft","multiplyRight","rotate","scale","translate","transform","vector","result","vec2","vec3","vec4_transformMat3","checkVector","transformVector","deprecated","transformVector2","transformVector3"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport Matrix from './base/matrix';\nimport {checkVector, deprecated} from '../lib/validators';\n// eslint-disable-next-line camelcase\nimport {vec4_transformMat3} from '../lib/gl-matrix-extras';\n\n// @ts-ignore: error TS2307: Cannot find module 'gl-matrix/...'.\nimport * as mat3 from 'gl-matrix/mat3';\n// @ts-ignore: error TS2307: Cannot find module 'gl-matrix/...'.\nimport * as vec2 from 'gl-matrix/vec2';\n// @ts-ignore: error TS2307: Cannot find module 'gl-matrix/...'.\nimport * as vec3 from 'gl-matrix/vec3';\n\nconst IDENTITY = Object.freeze([1, 0, 0, 0, 1, 0, 0, 0, 1]);\nconst ZERO = Object.freeze([0, 0, 0, 0, 0, 0, 0, 0, 0]);\n\nconst INDICES = Object.freeze({\n  COL0ROW0: 0,\n  COL0ROW1: 1,\n  COL0ROW2: 2,\n  COL1ROW0: 3,\n  COL1ROW1: 4,\n  COL1ROW2: 5,\n  COL2ROW0: 6,\n  COL2ROW1: 7,\n  COL2ROW2: 8\n});\n\nconst constants = {};\n\nexport default class Matrix3 extends Matrix {\n  static get IDENTITY() {\n    constants.IDENTITY = constants.IDENTITY || Object.freeze(new Matrix3(IDENTITY));\n    return constants.IDENTITY;\n  }\n\n  static get ZERO() {\n    constants.ZERO = constants.ZERO || Object.freeze(new Matrix3(ZERO));\n    return constants.ZERO;\n  }\n\n  get ELEMENTS() {\n    return 9;\n  }\n\n  get RANK() {\n    return 3;\n  }\n\n  get INDICES() {\n    return INDICES;\n  }\n\n  constructor(array) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0, -0, -0, -0, -0, -0);\n    if (arguments.length === 1 && Array.isArray(array)) {\n      this.copy(array);\n    } else {\n      this.identity();\n    }\n  }\n\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    this[4] = array[4];\n    this[5] = array[5];\n    this[6] = array[6];\n    this[7] = array[7];\n    this[8] = array[8];\n    return this.check();\n  }\n\n  // accepts column major order, stores in column major order\n  // eslint-disable-next-line max-params\n  set(m00, m10, m20, m01, m11, m21, m02, m12, m22) {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m01;\n    this[4] = m11;\n    this[5] = m21;\n    this[6] = m02;\n    this[7] = m12;\n    this[8] = m22;\n    return this.check();\n  }\n\n  // accepts row major order, stores as column major\n  // eslint-disable-next-line max-params\n  setRowMajor(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m01;\n    this[4] = m11;\n    this[5] = m21;\n    this[6] = m02;\n    this[7] = m12;\n    this[8] = m22;\n    return this.check();\n  }\n\n  // Accessors\n\n  determinant() {\n    return mat3.determinant(this);\n  }\n\n  // Constructors\n\n  identity() {\n    return this.copy(IDENTITY);\n  }\n\n  // Calculates a 3x3 matrix from the given quaternion\n  // q quat  Quaternion to create matrix from\n  fromQuaternion(q) {\n    mat3.fromQuat(this, q);\n    return this.check();\n  }\n\n  // Modifiers\n\n  transpose() {\n    mat3.transpose(this, this);\n    return this.check();\n  }\n\n  invert() {\n    mat3.invert(this, this);\n    return this.check();\n  }\n\n  // Operations\n\n  multiplyLeft(a) {\n    mat3.multiply(this, a, this);\n    return this.check();\n  }\n\n  multiplyRight(a) {\n    mat3.multiply(this, this, a);\n    return this.check();\n  }\n\n  rotate(radians) {\n    mat3.rotate(this, this, radians);\n    return this.check();\n  }\n\n  scale(factor) {\n    if (Array.isArray(factor)) {\n      mat3.scale(this, this, factor);\n    } else {\n      mat3.scale(this, this, [factor, factor, factor]);\n    }\n\n    return this.check();\n  }\n\n  translate(vec) {\n    mat3.translate(this, this, vec);\n    return this.check();\n  }\n\n  // Transforms\n\n  transform(vector, result) {\n    switch (vector.length) {\n      case 2:\n        result = vec2.transformMat3(result || [-0, -0], vector, this);\n        break;\n      case 3:\n        result = vec3.transformMat3(result || [-0, -0, -0], vector, this);\n        break;\n      case 4:\n        result = vec4_transformMat3(result || [-0, -0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(result, vector.length);\n    return result;\n  }\n\n  // DEPRECATED IN 3.0\n\n  transformVector(vector, result) {\n    deprecated('Matrix3.transformVector');\n    return this.transform(vector, result);\n  }\n\n  transformVector2(vector, result) {\n    deprecated('Matrix3.transformVector');\n    return this.transform(vector, result);\n  }\n\n  transformVector3(vector, result) {\n    deprecated('Matrix3.transformVector');\n    return this.transform(vector, result);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}