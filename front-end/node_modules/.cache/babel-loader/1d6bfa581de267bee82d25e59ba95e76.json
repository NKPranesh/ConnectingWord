{"ast":null,"code":"import { normalizeTransitionSettings } from './attribute/attribute-transition-utils';\nimport CPUInterpolationTransition from '../transitions/cpu-interpolation-transition';\nimport CPUSpringTransition from '../transitions/cpu-spring-transition';\nimport log from '../utils/log';\nconst TRANSITION_TYPES = {\n  interpolation: CPUInterpolationTransition,\n  spring: CPUSpringTransition\n};\nexport default class UniformTransitionManager {\n  constructor(timeline) {\n    this.transitions = new Map();\n    this.timeline = timeline;\n  }\n\n  get active() {\n    return this.transitions.size > 0;\n  }\n\n  add(key, fromValue, toValue, settings) {\n    const {\n      transitions\n    } = this;\n\n    if (transitions.has(key)) {\n      const transition = transitions.get(key);\n      const {\n        value = transition.settings.fromValue\n      } = transition;\n      fromValue = value;\n      this.remove(key);\n    }\n\n    settings = normalizeTransitionSettings(settings);\n\n    if (!settings) {\n      return;\n    }\n\n    const TransitionType = TRANSITION_TYPES[settings.type];\n\n    if (!TransitionType) {\n      log.error(\"unsupported transition type '\".concat(settings.type, \"'\"))();\n      return;\n    }\n\n    const transition = new TransitionType(this.timeline);\n    transition.start({ ...settings,\n      fromValue,\n      toValue\n    });\n    transitions.set(key, transition);\n  }\n\n  remove(key) {\n    const {\n      transitions\n    } = this;\n\n    if (transitions.has(key)) {\n      transitions.get(key).cancel();\n      transitions.delete(key);\n    }\n  }\n\n  update() {\n    const propsInTransition = {};\n\n    for (const [key, transition] of this.transitions) {\n      transition.update();\n      propsInTransition[key] = transition.value;\n\n      if (!transition.inProgress) {\n        this.remove(key);\n      }\n    }\n\n    return propsInTransition;\n  }\n\n  clear() {\n    for (const key of this.transitions.keys()) {\n      this.remove(key);\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/lib/uniform-transition-manager.js"],"names":["TRANSITION_TYPES","interpolation","spring","CPUSpringTransition","constructor","active","add","transitions","transition","value","fromValue","settings","normalizeTransitionSettings","TransitionType","log","toValue","remove","update","propsInTransition","clear"],"mappings":"AAAA,SAAA,2BAAA,QAAA,wCAAA;AACA,OAAA,0BAAA,MAAA,6CAAA;AACA,OAAA,mBAAA,MAAA,sCAAA;AACA,OAAA,GAAA,MAAA,cAAA;AAEA,MAAMA,gBAAgB,GAAG;AACvBC,EAAAA,aAAa,EADU,0BAAA;AAEvBC,EAAAA,MAAM,EAAEC;AAFe,CAAzB;AAKA,eAAe,MAAA,wBAAA,CAA+B;AAC5CC,EAAAA,WAAW,CAAA,QAAA,EAAW;AACpB,SAAA,WAAA,GAAmB,IAAnB,GAAmB,EAAnB;AACA,SAAA,QAAA,GAAA,QAAA;AACD;;AAED,MAAIC,MAAJ,GAAa;AACX,WAAO,KAAA,WAAA,CAAA,IAAA,GAAP,CAAA;AACD;;AAEDC,EAAAA,GAAG,CAAA,GAAA,EAAA,SAAA,EAAA,OAAA,EAAA,QAAA,EAAoC;AACrC,UAAM;AAACC,MAAAA;AAAD,QAAN,IAAA;;AACA,QAAIA,WAAW,CAAXA,GAAAA,CAAJ,GAAIA,CAAJ,EAA0B;AACxB,YAAMC,UAAU,GAAGD,WAAW,CAAXA,GAAAA,CAAnB,GAAmBA,CAAnB;AAEA,YAAM;AAACE,QAAAA,KAAK,GAAGD,UAAU,CAAVA,QAAAA,CAAoBE;AAA7B,UAAN,UAAA;AAEAA,MAAAA,SAAS,GAATA,KAAAA;AACA,WAAA,MAAA,CAAA,GAAA;AACD;;AAEDC,IAAAA,QAAQ,GAAGC,2BAA2B,CAAtCD,QAAsC,CAAtCA;;AACA,QAAI,CAAJ,QAAA,EAAe;AACb;AACD;;AAED,UAAME,cAAc,GAAGb,gBAAgB,CAACW,QAAQ,CAAhD,IAAuC,CAAvC;;AACA,QAAI,CAAJ,cAAA,EAAqB;AACnBG,MAAAA,GAAG,CAAHA,KAAAA,CAAAA,gCAAAA,MAAAA,CAA0CH,QAAQ,CAAlDG,IAAAA,EAAAA,GAAAA,CAAAA;AACA;AACD;;AACD,UAAMN,UAAU,GAAG,IAAA,cAAA,CAAmB,KAAtC,QAAmB,CAAnB;AACAA,IAAAA,UAAU,CAAVA,KAAAA,CAAiB,EACf,GADe,QAAA;AAAA,MAAA,SAAA;AAGfO,MAAAA;AAHe,KAAjBP;AAKAD,IAAAA,WAAW,CAAXA,GAAAA,CAAAA,GAAAA,EAAAA,UAAAA;AACD;;AAEDS,EAAAA,MAAM,CAAA,GAAA,EAAM;AACV,UAAM;AAACT,MAAAA;AAAD,QAAN,IAAA;;AACA,QAAIA,WAAW,CAAXA,GAAAA,CAAJ,GAAIA,CAAJ,EAA0B;AACxBA,MAAAA,WAAW,CAAXA,GAAAA,CAAAA,GAAAA,EAAAA,MAAAA;AACAA,MAAAA,WAAW,CAAXA,MAAAA,CAAAA,GAAAA;AACD;AACF;;AAEDU,EAAAA,MAAM,GAAG;AACP,UAAMC,iBAAiB,GAAvB,EAAA;;AAEA,SAAK,MAAM,CAAA,GAAA,EAAX,UAAW,CAAX,IAAgC,KAAhC,WAAA,EAAkD;AAChDV,MAAAA,UAAU,CAAVA,MAAAA;AACAU,MAAAA,iBAAiB,CAAjBA,GAAiB,CAAjBA,GAAyBV,UAAU,CAAnCU,KAAAA;;AACA,UAAI,CAACV,UAAU,CAAf,UAAA,EAA4B;AAE1B,aAAA,MAAA,CAAA,GAAA;AACD;AACF;;AAED,WAAA,iBAAA;AACD;;AAEDW,EAAAA,KAAK,GAAG;AACN,SAAK,MAAL,GAAA,IAAkB,KAAA,WAAA,CAAlB,IAAkB,EAAlB,EAA2C;AACzC,WAAA,MAAA,CAAA,GAAA;AACD;AACF;;AAnE2C","sourcesContent":["import {normalizeTransitionSettings} from './attribute/attribute-transition-utils';\nimport CPUInterpolationTransition from '../transitions/cpu-interpolation-transition';\nimport CPUSpringTransition from '../transitions/cpu-spring-transition';\nimport log from '../utils/log';\n\nconst TRANSITION_TYPES = {\n  interpolation: CPUInterpolationTransition,\n  spring: CPUSpringTransition\n};\n\nexport default class UniformTransitionManager {\n  constructor(timeline) {\n    this.transitions = new Map();\n    this.timeline = timeline;\n  }\n\n  get active() {\n    return this.transitions.size > 0;\n  }\n\n  add(key, fromValue, toValue, settings) {\n    const {transitions} = this;\n    if (transitions.has(key)) {\n      const transition = transitions.get(key);\n      // value may not be available if `update()` has not been called. Fallback to `fromValue`\n      const {value = transition.settings.fromValue} = transition;\n      // start from interrupted position\n      fromValue = value;\n      this.remove(key);\n    }\n\n    settings = normalizeTransitionSettings(settings);\n    if (!settings) {\n      return;\n    }\n\n    const TransitionType = TRANSITION_TYPES[settings.type];\n    if (!TransitionType) {\n      log.error(`unsupported transition type '${settings.type}'`)();\n      return;\n    }\n    const transition = new TransitionType(this.timeline);\n    transition.start({\n      ...settings,\n      fromValue,\n      toValue\n    });\n    transitions.set(key, transition);\n  }\n\n  remove(key) {\n    const {transitions} = this;\n    if (transitions.has(key)) {\n      transitions.get(key).cancel();\n      transitions.delete(key);\n    }\n  }\n\n  update() {\n    const propsInTransition = {};\n\n    for (const [key, transition] of this.transitions) {\n      transition.update();\n      propsInTransition[key] = transition.value;\n      if (!transition.inProgress) {\n        // transition ended\n        this.remove(key);\n      }\n    }\n\n    return propsInTransition;\n  }\n\n  clear() {\n    for (const key of this.transitions.keys()) {\n      this.remove(key);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}