{"ast":null,"code":"import * as vec4 from 'gl-matrix/vec4';\nexport function createMat4() {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\nexport function transformVector(matrix, vector) {\n  const result = vec4.transformMat4([], vector, matrix);\n  vec4.scale(result, result, 1 / result[3]);\n  return result;\n}\nexport function mod(value, divisor) {\n  const modulus = value % divisor;\n  return modulus < 0 ? divisor + modulus : modulus;\n}\nexport function lerp(start, end, step) {\n  return step * end + (1 - step) * start;\n}\n\nfunction ieLog2(x) {\n  return Math.log(x) * Math.LOG2E;\n}\n\nexport const log2 = Math.log2 || ieLog2;","map":{"version":3,"sources":["../../src/math-utils.js"],"names":["result","vec4","modulus","value","divisor","step","Math","log2"],"mappings":"AAAA,OAAO,KAAP,IAAA,MAAA,gBAAA;AAGA,OAAO,SAAA,UAAA,GAAsB;AAC3B,SAAO,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAP,CAAO,CAAP;AACD;AAGD,OAAO,SAAA,eAAA,CAAA,MAAA,EAAA,MAAA,EAAyC;AAC9C,QAAMA,MAAM,GAAGC,IAAI,CAAJA,aAAAA,CAAAA,EAAAA,EAAAA,MAAAA,EAAf,MAAeA,CAAf;AACAA,EAAAA,IAAI,CAAJA,KAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAA2B,IAAID,MAAM,CAArCC,CAAqC,CAArCA;AACA,SAAA,MAAA;AACD;AAED,OAAO,SAAA,GAAA,CAAA,KAAA,EAAA,OAAA,EAA6B;AAClC,QAAMC,OAAO,GAAGC,KAAK,GAArB,OAAA;AACA,SAAOD,OAAO,GAAPA,CAAAA,GAAcE,OAAO,GAArBF,OAAAA,GAAP,OAAA;AACD;AAED,OAAO,SAAA,IAAA,CAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAgC;AACrC,SAAOG,IAAI,GAAJA,GAAAA,GAAa,CAAC,IAAD,IAAA,IAApB,KAAA;AACD;;AAED,SAAA,MAAA,CAAA,CAAA,EAAmB;AACjB,SAAOC,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,IAAcA,IAAI,CAAzB,KAAA;AACD;;AAED,OAAO,MAAMC,IAAI,GAAGD,IAAI,CAAJA,IAAAA,IAAb,MAAA","sourcesContent":["import * as vec4 from 'gl-matrix/vec4';\n\n// Helper, avoids low-precision 32 bit matrices from gl-matrix mat4.create()\nexport function createMat4() {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\n\n// Transforms a vec4 with a projection matrix\nexport function transformVector(matrix, vector) {\n  const result = vec4.transformMat4([], vector, matrix);\n  vec4.scale(result, result, 1 / result[3]);\n  return result;\n}\n\nexport function mod(value, divisor) {\n  const modulus = value % divisor;\n  return modulus < 0 ? divisor + modulus : modulus;\n}\n\nexport function lerp(start, end, step) {\n  return step * end + (1 - step) * start;\n}\n\nfunction ieLog2(x) {\n  return Math.log(x) * Math.LOG2E;\n}\n// Handle missing log2 in IE 11\nexport const log2 = Math.log2 || ieLog2;\n"]},"metadata":{},"sourceType":"module"}