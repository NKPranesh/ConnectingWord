{"ast":null,"code":"import WebMercatorViewport from './web-mercator-viewport';\nimport assert from './assert';\nimport { log2 } from './math-utils';\nexport default function fitBounds(_ref) {\n  let {\n    width,\n    height,\n    bounds,\n    minExtent = 0,\n    maxZoom = 24,\n    padding = 0,\n    offset = [0, 0]\n  } = _ref;\n  const [[west, south], [east, north]] = bounds;\n\n  if (Number.isFinite(padding)) {\n    const p = padding;\n    padding = {\n      top: p,\n      bottom: p,\n      left: p,\n      right: p\n    };\n  } else {\n    assert(Number.isFinite(padding.top) && Number.isFinite(padding.bottom) && Number.isFinite(padding.left) && Number.isFinite(padding.right));\n  }\n\n  const viewport = new WebMercatorViewport({\n    width,\n    height,\n    longitude: 0,\n    latitude: 0,\n    zoom: 0\n  });\n  const nw = viewport.project([west, north]);\n  const se = viewport.project([east, south]);\n  const size = [Math.max(Math.abs(se[0] - nw[0]), minExtent), Math.max(Math.abs(se[1] - nw[1]), minExtent)];\n  const targetSize = [width - padding.left - padding.right - Math.abs(offset[0]) * 2, height - padding.top - padding.bottom - Math.abs(offset[1]) * 2];\n  assert(targetSize[0] > 0 && targetSize[1] > 0);\n  const scaleX = targetSize[0] / size[0];\n  const scaleY = targetSize[1] / size[1];\n  const offsetX = (padding.right - padding.left) / 2 / scaleX;\n  const offsetY = (padding.bottom - padding.top) / 2 / scaleY;\n  const center = [(se[0] + nw[0]) / 2 + offsetX, (se[1] + nw[1]) / 2 + offsetY];\n  const centerLngLat = viewport.unproject(center);\n  const zoom = Math.min(maxZoom, viewport.zoom + log2(Math.abs(Math.min(scaleX, scaleY))));\n  assert(Number.isFinite(zoom));\n  return {\n    longitude: centerLngLat[0],\n    latitude: centerLngLat[1],\n    zoom\n  };\n}","map":{"version":3,"sources":["../../src/fit-bounds.js"],"names":["minExtent","maxZoom","padding","offset","Number","p","top","bottom","left","right","assert","viewport","longitude","latitude","zoom","nw","se","size","Math","targetSize","width","height","scaleX","scaleY","offsetX","offsetY","center","centerLngLat","log2"],"mappings":"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","sourcesContent":["// @ts-nocheck TODO padding\nimport WebMercatorViewport from './web-mercator-viewport';\nimport assert from './assert';\nimport {log2} from './math-utils';\n\n// Returns map settings {latitude, longitude, zoom}\n// that will contain the provided corners within the provided width.\n// Only supports non-perspective mode.\n\nexport default function fitBounds({\n  width,\n  height,\n  bounds,\n  minExtent = 0, // 0.01 would be about 1000 meters (degree is ~110KM)\n  maxZoom = 24, // ~x4,000,000 => About 10 meter extents\n  // options\n  padding = 0,\n  offset = [0, 0]\n}) {\n  const [[west, south], [east, north]] = bounds;\n\n  if (Number.isFinite(padding)) {\n    const p = padding;\n    padding = {\n      top: p,\n      bottom: p,\n      left: p,\n      right: p\n    };\n  } else {\n    // Make sure all the required properties are set\n    assert(\n      Number.isFinite(padding.top) &&\n        Number.isFinite(padding.bottom) &&\n        Number.isFinite(padding.left) &&\n        Number.isFinite(padding.right)\n    );\n  }\n\n  const viewport = new WebMercatorViewport({\n    width,\n    height,\n    longitude: 0,\n    latitude: 0,\n    zoom: 0\n  });\n\n  const nw = viewport.project([west, north]);\n  const se = viewport.project([east, south]);\n\n  // width/height on the Web Mercator plane\n  const size = [\n    Math.max(Math.abs(se[0] - nw[0]), minExtent),\n    Math.max(Math.abs(se[1] - nw[1]), minExtent)\n  ];\n\n  const targetSize = [\n    width - padding.left - padding.right - Math.abs(offset[0]) * 2,\n    height - padding.top - padding.bottom - Math.abs(offset[1]) * 2\n  ];\n\n  assert(targetSize[0] > 0 && targetSize[1] > 0);\n\n  // scale = screen pixels per unit on the Web Mercator plane\n  const scaleX = targetSize[0] / size[0];\n  const scaleY = targetSize[1] / size[1];\n\n  // Find how much we need to shift the center\n  const offsetX = (padding.right - padding.left) / 2 / scaleX;\n  const offsetY = (padding.bottom - padding.top) / 2 / scaleY;\n\n  const center = [(se[0] + nw[0]) / 2 + offsetX, (se[1] + nw[1]) / 2 + offsetY];\n\n  const centerLngLat = viewport.unproject(center);\n  const zoom = Math.min(maxZoom, viewport.zoom + log2(Math.abs(Math.min(scaleX, scaleY))));\n\n  assert(Number.isFinite(zoom));\n\n  return {\n    longitude: centerLngLat[0],\n    latitude: centerLngLat[1],\n    zoom\n  };\n}\n"]},"metadata":{},"sourceType":"module"}