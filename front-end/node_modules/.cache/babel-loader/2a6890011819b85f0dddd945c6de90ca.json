{"ast":null,"code":"import Resource from './resource';\nexport default class ResourceManager {\n  constructor(_ref) {\n    let {\n      gl,\n      protocol\n    } = _ref;\n    this.protocol = protocol || 'resource://';\n    this._context = {\n      gl,\n      resourceManager: this\n    };\n    this._resources = {};\n    this._consumers = {};\n    this._pruneRequest = null;\n  }\n\n  contains(resourceId) {\n    if (resourceId.startsWith(this.protocol)) {\n      return true;\n    }\n\n    return resourceId in this._resources;\n  }\n\n  add(_ref2) {\n    let {\n      resourceId,\n      data,\n      forceUpdate = false,\n      persistent = true\n    } = _ref2;\n    let res = this._resources[resourceId];\n\n    if (res) {\n      res.setData(data, forceUpdate);\n    } else {\n      res = new Resource(resourceId, data, this._context);\n      this._resources[resourceId] = res;\n    }\n\n    res.persistent = persistent;\n  }\n\n  remove(resourceId) {\n    const res = this._resources[resourceId];\n\n    if (res) {\n      res.delete();\n      delete this._resources[resourceId];\n    }\n  }\n\n  unsubscribe(_ref3) {\n    let {\n      consumerId\n    } = _ref3;\n    const consumer = this._consumers[consumerId];\n\n    if (consumer) {\n      for (const requestId in consumer) {\n        const request = consumer[requestId];\n\n        if (request.resource) {\n          request.resource.unsubscribe(request);\n        }\n      }\n\n      delete this._consumers[consumerId];\n      this.prune();\n    }\n  }\n\n  subscribe(_ref4) {\n    let {\n      resourceId,\n      onChange,\n      consumerId,\n      requestId = 'default'\n    } = _ref4;\n    const {\n      _resources: resources,\n      protocol\n    } = this;\n\n    if (resourceId.startsWith(protocol)) {\n      resourceId = resourceId.replace(protocol, '');\n\n      if (!resources[resourceId]) {\n        this.add({\n          resourceId,\n          data: null,\n          persistent: false\n        });\n      }\n    }\n\n    const res = resources[resourceId];\n\n    this._track(consumerId, requestId, res, onChange);\n\n    if (res) {\n      return res.getData();\n    }\n\n    return undefined;\n  }\n\n  prune() {\n    if (!this._pruneRequest) {\n      this._pruneRequest = setTimeout(() => this._prune(), 0);\n    }\n  }\n\n  finalize() {\n    for (const key in this._resources) {\n      this._resources[key].delete();\n    }\n  }\n\n  _track(consumerId, requestId, resource, onChange) {\n    const consumers = this._consumers;\n    const consumer = consumers[consumerId] = consumers[consumerId] || {};\n    const request = consumer[requestId] || {};\n\n    if (request.resource) {\n      request.resource.unsubscribe(request);\n      request.resource = null;\n      this.prune();\n    }\n\n    if (resource) {\n      consumer[requestId] = request;\n      request.onChange = onChange;\n      request.resource = resource;\n      resource.subscribe(request);\n    }\n  }\n\n  _prune() {\n    this._pruneRequest = null;\n\n    for (const key of Object.keys(this._resources)) {\n      const res = this._resources[key];\n\n      if (!res.persistent && !res.inUse()) {\n        res.delete();\n        delete this._resources[key];\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../../src/lib/resource/resource-manager.js"],"names":["constructor","protocol","resourceManager","contains","resourceId","add","forceUpdate","persistent","res","remove","unsubscribe","consumerId","consumer","request","subscribe","requestId","_resources","resources","data","prune","setTimeout","finalize","_track","consumers","resource","_prune","Object"],"mappings":"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","sourcesContent":["/* global setTimeout */\nimport Resource from './resource';\n\nexport default class ResourceManager {\n  constructor({gl, protocol}) {\n    this.protocol = protocol || 'resource://';\n\n    this._context = {\n      gl,\n      resourceManager: this\n    };\n    this._resources = {};\n    this._consumers = {};\n\n    this._pruneRequest = null;\n  }\n\n  contains(resourceId) {\n    if (resourceId.startsWith(this.protocol)) {\n      return true;\n    }\n    return resourceId in this._resources;\n  }\n\n  add({resourceId, data, forceUpdate = false, persistent = true}) {\n    let res = this._resources[resourceId];\n\n    if (res) {\n      res.setData(data, forceUpdate);\n    } else {\n      res = new Resource(resourceId, data, this._context);\n      this._resources[resourceId] = res;\n    }\n    // persistent resources can only be removed by calling `remove`\n    // non-persistent resources may be released when there are no more consumers\n    res.persistent = persistent;\n  }\n\n  remove(resourceId) {\n    const res = this._resources[resourceId];\n\n    if (res) {\n      res.delete();\n      delete this._resources[resourceId];\n    }\n  }\n\n  unsubscribe({consumerId}) {\n    const consumer = this._consumers[consumerId];\n    if (consumer) {\n      for (const requestId in consumer) {\n        const request = consumer[requestId];\n        if (request.resource) {\n          request.resource.unsubscribe(request);\n        }\n      }\n      delete this._consumers[consumerId];\n      this.prune();\n    }\n  }\n\n  subscribe({resourceId, onChange, consumerId, requestId = 'default'}) {\n    const {_resources: resources, protocol} = this;\n    if (resourceId.startsWith(protocol)) {\n      resourceId = resourceId.replace(protocol, '');\n      if (!resources[resourceId]) {\n        // Add placeholder. When this resource becomes available, the consumer will be notified.\n        this.add({resourceId, data: null, persistent: false});\n      }\n    }\n    const res = resources[resourceId];\n    this._track(consumerId, requestId, res, onChange);\n    if (res) {\n      return res.getData();\n    }\n\n    return undefined;\n  }\n\n  prune() {\n    if (!this._pruneRequest) {\n      // prune() may be called multiple times in the same animation frame.\n      // Batch multiple requests together\n      this._pruneRequest = setTimeout(() => this._prune(), 0);\n    }\n  }\n\n  finalize() {\n    for (const key in this._resources) {\n      this._resources[key].delete();\n    }\n  }\n\n  _track(consumerId, requestId, resource, onChange) {\n    const consumers = this._consumers;\n    const consumer = (consumers[consumerId] = consumers[consumerId] || {});\n    const request = consumer[requestId] || {};\n\n    if (request.resource) {\n      request.resource.unsubscribe(request);\n      request.resource = null;\n      this.prune();\n    }\n    if (resource) {\n      consumer[requestId] = request;\n      request.onChange = onChange;\n      request.resource = resource;\n      resource.subscribe(request);\n    }\n  }\n\n  _prune() {\n    this._pruneRequest = null;\n\n    for (const key of Object.keys(this._resources)) {\n      const res = this._resources[key];\n      if (!res.persistent && !res.inUse()) {\n        res.delete();\n        delete this._resources[key];\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}