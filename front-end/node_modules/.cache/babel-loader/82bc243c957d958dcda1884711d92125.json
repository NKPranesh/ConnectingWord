{"ast":null,"code":"let arrayBuffer = null;\nexport function getScratchArrayBuffer(byteLength) {\n  if (!arrayBuffer || arrayBuffer.byteLength < byteLength) {\n    arrayBuffer = new ArrayBuffer(byteLength);\n  }\n\n  return arrayBuffer;\n}\nexport function getScratchArray(Type, length) {\n  const scratchArrayBuffer = getScratchArrayBuffer(Type.BYTES_PER_ELEMENT * length);\n  return new Type(scratchArrayBuffer, 0, length);\n}\nexport function fillArray(_ref) {\n  let {\n    target,\n    source,\n    start = 0,\n    count = 1\n  } = _ref;\n  const length = source.length;\n  const total = count * length;\n  let copied = 0;\n\n  for (let i = start; copied < length; copied++) {\n    target[i++] = source[copied];\n  }\n\n  while (copied < total) {\n    if (copied < total - copied) {\n      target.copyWithin(start + copied, start, start + copied);\n      copied *= 2;\n    } else {\n      target.copyWithin(start + copied, start, start + total - copied);\n      copied = total;\n    }\n  }\n\n  return target;\n}","map":{"version":3,"sources":["../../../src/utils/array-utils-flat.js"],"names":["arrayBuffer","scratchArrayBuffer","getScratchArrayBuffer","Type","start","count","length","source","total","copied","i","target"],"mappings":"AAAA,IAAIA,WAAW,GAAf,IAAA;AAEA,OAAO,SAAA,qBAAA,CAAA,UAAA,EAA2C;AAChD,MAAI,CAAA,WAAA,IAAgBA,WAAW,CAAXA,UAAAA,GAApB,UAAA,EAAyD;AACvDA,IAAAA,WAAW,GAAG,IAAA,WAAA,CAAdA,UAAc,CAAdA;AACD;;AACD,SAAA,WAAA;AACD;AAED,OAAO,SAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAuC;AAC5C,QAAMC,kBAAkB,GAAGC,qBAAqB,CAACC,IAAI,CAAJA,iBAAAA,GAAjD,MAAgD,CAAhD;AACA,SAAO,IAAA,IAAA,CAAA,kBAAA,EAAA,CAAA,EAAP,MAAO,CAAP;AACD;AAGD,OAAO,SAAA,SAAA,OAA2D;AAAA,MAAxC;AAAA,IAAA,MAAA;AAAA,IAAA,MAAA;AAAiBC,IAAAA,KAAK,GAAtB,CAAA;AAA4BC,IAAAA,KAAK,GAAG;AAApC,GAAwC;AAChE,QAAMC,MAAM,GAAGC,MAAM,CAArB,MAAA;AACA,QAAMC,KAAK,GAAGH,KAAK,GAAnB,MAAA;AACA,MAAII,MAAM,GAAV,CAAA;;AACA,OAAK,IAAIC,CAAC,GAAV,KAAA,EAAoBD,MAAM,GAA1B,MAAA,EAAqCA,MAArC,EAAA,EAA+C;AAC7CE,IAAAA,MAAM,CAACD,CAAPC,EAAM,CAANA,GAAcJ,MAAM,CAApBI,MAAoB,CAApBA;AACD;;AAED,SAAOF,MAAM,GAAb,KAAA,EAAuB;AAGrB,QAAIA,MAAM,GAAGD,KAAK,GAAlB,MAAA,EAA6B;AAC3BG,MAAAA,MAAM,CAANA,UAAAA,CAAkBP,KAAK,GAAvBO,MAAAA,EAAAA,KAAAA,EAAyCP,KAAK,GAA9CO,MAAAA;AACAF,MAAAA,MAAM,IAANA,CAAAA;AAFF,KAAA,MAGO;AACLE,MAAAA,MAAM,CAANA,UAAAA,CAAkBP,KAAK,GAAvBO,MAAAA,EAAAA,KAAAA,EAAyCP,KAAK,GAALA,KAAAA,GAAzCO,MAAAA;AACAF,MAAAA,MAAM,GAANA,KAAAA;AACD;AACF;;AAED,SAAA,MAAA;AACD","sourcesContent":["let arrayBuffer = null;\n\nexport function getScratchArrayBuffer(byteLength) {\n  if (!arrayBuffer || arrayBuffer.byteLength < byteLength) {\n    arrayBuffer = new ArrayBuffer(byteLength);\n  }\n  return arrayBuffer;\n}\n\nexport function getScratchArray(Type, length) {\n  const scratchArrayBuffer = getScratchArrayBuffer(Type.BYTES_PER_ELEMENT * length);\n  return new Type(scratchArrayBuffer, 0, length); // arrayBuffer, byteOffset, length (in elements)\n}\n\n// Uses copyWithin to significantly speed up typed array value filling\nexport function fillArray({target, source, start = 0, count = 1}) {\n  const length = source.length;\n  const total = count * length;\n  let copied = 0;\n  for (let i = start; copied < length; copied++) {\n    target[i++] = source[copied];\n  }\n\n  while (copied < total) {\n    // If we have copied less than half, copy everything we got\n    // else copy remaining in one operation\n    if (copied < total - copied) {\n      target.copyWithin(start + copied, start, start + copied);\n      copied *= 2;\n    } else {\n      target.copyWithin(start + copied, start, start + total - copied);\n      copied = total;\n    }\n  }\n\n  return target;\n}\n\n/*\n\n// Creates a new Uint8Array based on two different ArrayBuffers\n// @private\n// @param {ArrayBuffers} buffer1 The first buffer.\n// @param {ArrayBuffers} buffer2 The second buffer.\n// @return {ArrayBuffers} The new ArrayBuffer created out of the two.\n//\nexport function copyArrayBuffer(\n  targetBuffer, sourceBuffer, byteOffset, byteLength = sourceBuffer.byteLength\n) {\n  const targetArray = new Uint8Array(targetBuffer, byteOffset, byteLength);\n  const sourceArray = new Uint8Array(sourceBuffer);\n  targetArray.set(sourceArray);\n  return targetBuffer;\n}\n\n*/\n"]},"metadata":{},"sourceType":"module"}