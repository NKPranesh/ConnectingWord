{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nlet _Symbol$toStringTag, _Symbol$toStringTag2, _Symbol$toStringTag3, _Symbol$toStringTag4, _Symbol$toStringTag5, _Symbol$toStringTag6, _Symbol$toStringTag7;\n\nimport { Type } from './enum';\nexport { Type } from './enum';\nexport class DataType {\n  static isNull(x) {\n    return x && x.typeId === Type.Null;\n  }\n\n  static isInt(x) {\n    return x && x.typeId === Type.Int;\n  }\n\n  static isFloat(x) {\n    return x && x.typeId === Type.Float;\n  }\n\n  static isBinary(x) {\n    return x && x.typeId === Type.Binary;\n  }\n\n  static isUtf8(x) {\n    return x && x.typeId === Type.Utf8;\n  }\n\n  static isBool(x) {\n    return x && x.typeId === Type.Bool;\n  }\n\n  static isDecimal(x) {\n    return x && x.typeId === Type.Decimal;\n  }\n\n  static isDate(x) {\n    return x && x.typeId === Type.Date;\n  }\n\n  static isTime(x) {\n    return x && x.typeId === Type.Time;\n  }\n\n  static isTimestamp(x) {\n    return x && x.typeId === Type.Timestamp;\n  }\n\n  static isInterval(x) {\n    return x && x.typeId === Type.Interval;\n  }\n\n  static isList(x) {\n    return x && x.typeId === Type.List;\n  }\n\n  static isStruct(x) {\n    return x && x.typeId === Type.Struct;\n  }\n\n  static isUnion(x) {\n    return x && x.typeId === Type.Union;\n  }\n\n  static isFixedSizeBinary(x) {\n    return x && x.typeId === Type.FixedSizeBinary;\n  }\n\n  static isFixedSizeList(x) {\n    return x && x.typeId === Type.FixedSizeList;\n  }\n\n  static isMap(x) {\n    return x && x.typeId === Type.Map;\n  }\n\n  static isDictionary(x) {\n    return x && x.typeId === Type.Dictionary;\n  }\n\n  get typeId() {\n    return Type.NONE;\n  }\n\n  compareTo(other) {\n    return this === other;\n  }\n\n}\nexport class Null extends DataType {\n  get typeId() {\n    return Type.Null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Null';\n  }\n\n  toString() {\n    return 'Null';\n  }\n\n}\nexport class Bool extends DataType {\n  get typeId() {\n    return Type.Bool;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Bool';\n  }\n\n  toString() {\n    return 'Bool';\n  }\n\n}\n_Symbol$toStringTag = Symbol.toStringTag;\nexport class Int extends DataType {\n  constructor(isSigned, bitWidth) {\n    super();\n\n    _defineProperty(this, \"isSigned\", void 0);\n\n    _defineProperty(this, \"bitWidth\", void 0);\n\n    this.isSigned = isSigned;\n    this.bitWidth = bitWidth;\n  }\n\n  get typeId() {\n    return Type.Int;\n  }\n\n  get [_Symbol$toStringTag]() {\n    return 'Int';\n  }\n\n  toString() {\n    return \"\".concat(this.isSigned ? 'I' : 'Ui', \"nt\").concat(this.bitWidth);\n  }\n\n}\nexport class Int8 extends Int {\n  constructor() {\n    super(true, 8);\n  }\n\n}\nexport class Int16 extends Int {\n  constructor() {\n    super(true, 16);\n  }\n\n}\nexport class Int32 extends Int {\n  constructor() {\n    super(true, 32);\n  }\n\n}\nexport class Int64 extends Int {\n  constructor() {\n    super(true, 64);\n  }\n\n}\nexport class Uint8 extends Int {\n  constructor() {\n    super(false, 8);\n  }\n\n}\nexport class Uint16 extends Int {\n  constructor() {\n    super(false, 16);\n  }\n\n}\nexport class Uint32 extends Int {\n  constructor() {\n    super(false, 32);\n  }\n\n}\nexport class Uint64 extends Int {\n  constructor() {\n    super(false, 64);\n  }\n\n}\nconst Precision = {\n  HALF: 16,\n  SINGLE: 32,\n  DOUBLE: 64\n};\n_Symbol$toStringTag2 = Symbol.toStringTag;\nexport class Float extends DataType {\n  constructor(precision) {\n    super();\n\n    _defineProperty(this, \"precision\", void 0);\n\n    this.precision = precision;\n  }\n\n  get typeId() {\n    return Type.Float;\n  }\n\n  get [_Symbol$toStringTag2]() {\n    return 'Float';\n  }\n\n  toString() {\n    return \"Float\".concat(this.precision);\n  }\n\n}\nexport class Float16 extends Float {\n  constructor() {\n    super(Precision.HALF);\n  }\n\n}\nexport class Float32 extends Float {\n  constructor() {\n    super(Precision.SINGLE);\n  }\n\n}\nexport class Float64 extends Float {\n  constructor() {\n    super(Precision.DOUBLE);\n  }\n\n}\nexport class Binary extends DataType {\n  constructor() {\n    super();\n  }\n\n  get typeId() {\n    return Type.Binary;\n  }\n\n  toString() {\n    return 'Binary';\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Binary';\n  }\n\n}\nexport class Utf8 extends DataType {\n  get typeId() {\n    return Type.Utf8;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Utf8';\n  }\n\n  toString() {\n    return 'Utf8';\n  }\n\n}\nconst DateUnit = {\n  DAY: 0,\n  MILLISECOND: 1\n};\n_Symbol$toStringTag3 = Symbol.toStringTag;\nexport class Date extends DataType {\n  constructor(unit) {\n    super();\n\n    _defineProperty(this, \"unit\", void 0);\n\n    this.unit = unit;\n  }\n\n  get typeId() {\n    return Type.Date;\n  }\n\n  get [_Symbol$toStringTag3]() {\n    return 'Date';\n  }\n\n  toString() {\n    return \"Date\".concat((this.unit + 1) * 32, \"<\").concat(DateUnit[this.unit], \">\");\n  }\n\n}\nexport class DateDay extends Date {\n  constructor() {\n    super(DateUnit.DAY);\n  }\n\n}\nexport class DateMillisecond extends Date {\n  constructor() {\n    super(DateUnit.MILLISECOND);\n  }\n\n}\nconst TimeUnit = {\n  SECOND: 1,\n  MILLISECOND: 1e3,\n  MICROSECOND: 1e6,\n  NANOSECOND: 1e9\n};\n_Symbol$toStringTag4 = Symbol.toStringTag;\nexport class Time extends DataType {\n  constructor(unit, bitWidth) {\n    super();\n\n    _defineProperty(this, \"unit\", void 0);\n\n    _defineProperty(this, \"bitWidth\", void 0);\n\n    this.unit = unit;\n    this.bitWidth = bitWidth;\n  }\n\n  get typeId() {\n    return Type.Time;\n  }\n\n  toString() {\n    return \"Time\".concat(this.bitWidth, \"<\").concat(TimeUnit[this.unit], \">\");\n  }\n\n  get [_Symbol$toStringTag4]() {\n    return 'Time';\n  }\n\n}\nexport class TimeSecond extends Time {\n  constructor() {\n    super(TimeUnit.SECOND, 32);\n  }\n\n}\nexport class TimeMillisecond extends Time {\n  constructor() {\n    super(TimeUnit.MILLISECOND, 32);\n  }\n\n}\n_Symbol$toStringTag5 = Symbol.toStringTag;\nexport class Timestamp extends DataType {\n  constructor(unit) {\n    let timezone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    super();\n\n    _defineProperty(this, \"unit\", void 0);\n\n    _defineProperty(this, \"timezone\", void 0);\n\n    this.unit = unit;\n    this.timezone = timezone;\n  }\n\n  get typeId() {\n    return Type.Timestamp;\n  }\n\n  get [_Symbol$toStringTag5]() {\n    return 'Timestamp';\n  }\n\n  toString() {\n    return \"Timestamp<\".concat(TimeUnit[this.unit]).concat(this.timezone ? \", \".concat(this.timezone) : '', \">\");\n  }\n\n}\nexport class TimestampSecond extends Timestamp {\n  constructor() {\n    let timezone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    super(TimeUnit.SECOND, timezone);\n  }\n\n}\nexport class TimestampMillisecond extends Timestamp {\n  constructor() {\n    let timezone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    super(TimeUnit.MILLISECOND, timezone);\n  }\n\n}\nexport class TimestampMicrosecond extends Timestamp {\n  constructor() {\n    let timezone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    super(TimeUnit.MICROSECOND, timezone);\n  }\n\n}\nexport class TimestampNanosecond extends Timestamp {\n  constructor() {\n    let timezone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    super(TimeUnit.NANOSECOND, timezone);\n  }\n\n}\nconst IntervalUnit = {\n  DAY_TIME: 0,\n  YEAR_MONTH: 1\n};\n_Symbol$toStringTag6 = Symbol.toStringTag;\nexport class Interval extends DataType {\n  constructor(unit) {\n    super();\n\n    _defineProperty(this, \"unit\", void 0);\n\n    this.unit = unit;\n  }\n\n  get typeId() {\n    return Type.Interval;\n  }\n\n  get [_Symbol$toStringTag6]() {\n    return 'Interval';\n  }\n\n  toString() {\n    return \"Interval<\".concat(IntervalUnit[this.unit], \">\");\n  }\n\n}\nexport class IntervalDayTime extends Interval {\n  constructor() {\n    super(IntervalUnit.DAY_TIME);\n  }\n\n}\nexport class IntervalYearMonth extends Interval {\n  constructor() {\n    super(IntervalUnit.YEAR_MONTH);\n  }\n\n}\n_Symbol$toStringTag7 = Symbol.toStringTag;\nexport class FixedSizeList extends DataType {\n  constructor(listSize, child) {\n    super();\n\n    _defineProperty(this, \"listSize\", void 0);\n\n    _defineProperty(this, \"children\", void 0);\n\n    this.listSize = listSize;\n    this.children = [child];\n  }\n\n  get typeId() {\n    return Type.FixedSizeList;\n  }\n\n  get valueType() {\n    return this.children[0].type;\n  }\n\n  get valueField() {\n    return this.children[0];\n  }\n\n  get [_Symbol$toStringTag7]() {\n    return 'FixedSizeList';\n  }\n\n  toString() {\n    return \"FixedSizeList[\".concat(this.listSize, \"]<\").concat(this.valueType, \">\");\n  }\n\n}","map":{"version":3,"sources":["../../../../../src/lib/schema/impl/type.ts"],"names":["isNull","x","Type","isInt","isFloat","isBinary","isUtf8","isBool","isDecimal","isDate","isTime","isTimestamp","isInterval","isList","isStruct","isUnion","isFixedSizeBinary","isFixedSizeList","isMap","isDictionary","typeId","compareTo","Symbol","toStringTag","toString","constructor","Precision","HALF","SINGLE","DOUBLE","DateUnit","DAY","MILLISECOND","TimeUnit","SECOND","MICROSECOND","NANOSECOND","timezone","IntervalUnit","DAY_TIME","YEAR_MONTH","valueType","valueField"],"mappings":"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","sourcesContent":["// This code is adapted from ArrowJS https://github.com/apache/arrow\n// under Apache license http://www.apache.org/licenses/LICENSE-2.0\n\nimport {Type} from './enum';\n\nimport Field from './field';\n\nexport {Type} from './enum';\n\nexport type TypedIntArray =\n  | Int8Array\n  | Uint8Array\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Int32Array\n  | Uint32Array\n  | Uint8ClampedArray;\n\nexport type TypedFloatArray = Float32Array | Float64Array;\n\nexport type TypedArray = TypedIntArray | TypedFloatArray;\n\nexport type AnyArrayType = Array<any> | TypedIntArray | TypedFloatArray;\n\nexport class DataType {\n  static isNull(x: any): boolean {\n    return x && x.typeId === Type.Null;\n  }\n  static isInt(x: any): boolean {\n    return x && x.typeId === Type.Int;\n  }\n  static isFloat(x: any): boolean {\n    return x && x.typeId === Type.Float;\n  }\n  static isBinary(x: any): boolean {\n    return x && x.typeId === Type.Binary;\n  }\n  static isUtf8(x: any): boolean {\n    return x && x.typeId === Type.Utf8;\n  }\n  static isBool(x: any): boolean {\n    return x && x.typeId === Type.Bool;\n  }\n  static isDecimal(x: any): boolean {\n    return x && x.typeId === Type.Decimal;\n  }\n  static isDate(x: any): boolean {\n    return x && x.typeId === Type.Date;\n  }\n  static isTime(x: any): boolean {\n    return x && x.typeId === Type.Time;\n  }\n  static isTimestamp(x: any): boolean {\n    return x && x.typeId === Type.Timestamp;\n  }\n  static isInterval(x: any): boolean {\n    return x && x.typeId === Type.Interval;\n  }\n  static isList(x: any): boolean {\n    return x && x.typeId === Type.List;\n  }\n  static isStruct(x: any): boolean {\n    return x && x.typeId === Type.Struct;\n  }\n  static isUnion(x: any): boolean {\n    return x && x.typeId === Type.Union;\n  }\n  static isFixedSizeBinary(x: any): boolean {\n    return x && x.typeId === Type.FixedSizeBinary;\n  }\n  static isFixedSizeList(x: any): boolean {\n    return x && x.typeId === Type.FixedSizeList;\n  }\n  static isMap(x: any): boolean {\n    return x && x.typeId === Type.Map;\n  }\n  static isDictionary(x: any): boolean {\n    return x && x.typeId === Type.Dictionary;\n  }\n\n  get typeId(): Type {\n    return Type.NONE;\n  }\n\n  // get ArrayType(): AnyArrayType {\n  //   return Int8Array;\n  // }\n\n  // get ArrayType() { return Array; }\n  compareTo(other: DataType): boolean {\n    // TODO\n    return this === other; // comparer.visit(this, other);\n  }\n}\n\n// NULL\n\nexport class Null extends DataType {\n  get typeId(): Type {\n    return Type.Null;\n  }\n  get [Symbol.toStringTag](): string {\n    return 'Null';\n  }\n  toString(): string {\n    return 'Null';\n  }\n}\n\n// BOOLEANS\n\nexport class Bool extends DataType {\n  get typeId(): Type {\n    return Type.Bool;\n  }\n  // get ArrayType() {\n  //   return Uint8Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Bool';\n  }\n  toString(): string {\n    return 'Bool';\n  }\n}\n\n// INTS\n\nexport class Int extends DataType {\n  readonly isSigned: boolean;\n  readonly bitWidth: number;\n  constructor(isSigned, bitWidth) {\n    super();\n    this.isSigned = isSigned;\n    this.bitWidth = bitWidth;\n  }\n  get typeId(): Type {\n    return Type.Int;\n  }\n  // get ArrayType() {\n  //   switch (this.bitWidth) {\n  //     case 8:\n  //       return this.isSigned ? Int8Array : Uint8Array;\n  //     case 16:\n  //       return this.isSigned ? Int16Array : Uint16Array;\n  //     case 32:\n  //       return this.isSigned ? Int32Array : Uint32Array;\n  //     case 64:\n  //       return this.isSigned ? Int32Array : Uint32Array;\n  //     default:\n  //       throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n  //   }\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Int';\n  }\n  toString(): string {\n    return `${this.isSigned ? 'I' : 'Ui'}nt${this.bitWidth}`;\n  }\n}\n\nexport class Int8 extends Int {\n  constructor() {\n    super(true, 8);\n  }\n}\nexport class Int16 extends Int {\n  constructor() {\n    super(true, 16);\n  }\n}\nexport class Int32 extends Int {\n  constructor() {\n    super(true, 32);\n  }\n}\nexport class Int64 extends Int {\n  constructor() {\n    super(true, 64);\n  }\n}\nexport class Uint8 extends Int {\n  constructor() {\n    super(false, 8);\n  }\n}\nexport class Uint16 extends Int {\n  constructor() {\n    super(false, 16);\n  }\n}\nexport class Uint32 extends Int {\n  constructor() {\n    super(false, 32);\n  }\n}\nexport class Uint64 extends Int {\n  constructor() {\n    super(false, 64);\n  }\n}\n\n// FLOATS\n\nconst Precision = {\n  HALF: 16,\n  SINGLE: 32,\n  DOUBLE: 64\n};\n\nexport class Float extends DataType {\n  readonly precision: number;\n  constructor(precision) {\n    super();\n    this.precision = precision;\n  }\n  get typeId(): Type {\n    return Type.Float;\n  }\n  // get ArrayType() {\n  //   switch (this.precision) {\n  //     case Precision.HALF:\n  //       return Uint16Array;\n  //     case Precision.SINGLE:\n  //       return Float32Array;\n  //     case Precision.DOUBLE:\n  //       return Float64Array;\n  //     default:\n  //       throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n  //   }\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Float';\n  }\n  toString(): string {\n    return `Float${this.precision}`;\n  }\n}\n\nexport class Float16 extends Float {\n  constructor() {\n    super(Precision.HALF);\n  }\n}\nexport class Float32 extends Float {\n  constructor() {\n    super(Precision.SINGLE);\n  }\n}\nexport class Float64 extends Float {\n  constructor() {\n    super(Precision.DOUBLE);\n  }\n}\n\nexport class Binary extends DataType {\n  constructor() {\n    super();\n  }\n  get typeId() {\n    return Type.Binary;\n  }\n  toString() {\n    return 'Binary';\n  }\n  get [Symbol.toStringTag]() {\n    return 'Binary';\n  }\n}\n\n// STRINGS\n\nexport class Utf8 extends DataType {\n  get typeId(): Type {\n    return Type.Utf8;\n  }\n  // get ArrayType() {\n  //   return Uint8Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Utf8';\n  }\n  toString(): string {\n    return 'Utf8';\n  }\n}\n\n// DATES, TIMES AND INTERVALS\n\nconst DateUnit = {\n  DAY: 0,\n  MILLISECOND: 1\n};\n\nexport class Date extends DataType {\n  readonly unit: number;\n  constructor(unit) {\n    super();\n    this.unit = unit;\n  }\n  get typeId(): Type {\n    return Type.Date;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Date';\n  }\n  toString(): string {\n    return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`;\n  }\n}\n\nexport class DateDay extends Date {\n  constructor() {\n    super(DateUnit.DAY);\n  }\n}\nexport class DateMillisecond extends Date {\n  constructor() {\n    super(DateUnit.MILLISECOND);\n  }\n}\n\nconst TimeUnit = {\n  SECOND: 1,\n  MILLISECOND: 1e3,\n  MICROSECOND: 1e6,\n  NANOSECOND: 1e9\n};\n\nexport class Time extends DataType {\n  readonly unit: number;\n  readonly bitWidth: number;\n\n  constructor(unit, bitWidth) {\n    super();\n    this.unit = unit;\n    this.bitWidth = bitWidth;\n  }\n  get typeId(): Type {\n    return Type.Time;\n  }\n  toString(): string {\n    return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`;\n  }\n  get [Symbol.toStringTag](): string {\n    return 'Time';\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n}\n\nexport class TimeSecond extends Time {\n  constructor() {\n    super(TimeUnit.SECOND, 32);\n  }\n}\nexport class TimeMillisecond extends Time {\n  constructor() {\n    super(TimeUnit.MILLISECOND, 32);\n  }\n}\n// export class TimeMicrosecond extends Time { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n// export class TimeNanosecond extends Time { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\nexport class Timestamp extends DataType {\n  readonly unit: any;\n  readonly timezone: any;\n\n  constructor(unit: any, timezone = null) {\n    super();\n    this.unit = unit;\n    this.timezone = timezone;\n  }\n  get typeId(): Type {\n    return Type.Timestamp;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Timestamp';\n  }\n  toString(): string {\n    return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ''}>`;\n  }\n}\n\nexport class TimestampSecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.SECOND, timezone);\n  }\n}\nexport class TimestampMillisecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.MILLISECOND, timezone);\n  }\n}\nexport class TimestampMicrosecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.MICROSECOND, timezone);\n  }\n}\nexport class TimestampNanosecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.NANOSECOND, timezone);\n  }\n}\n\nconst IntervalUnit = {\n  DAY_TIME: 0,\n  YEAR_MONTH: 1\n};\n\nexport class Interval extends DataType {\n  readonly unit: number;\n  constructor(unit: number) {\n    super();\n    this.unit = unit;\n  }\n  get typeId(): Type {\n    return Type.Interval;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Interval';\n  }\n  toString(): string {\n    return `Interval<${IntervalUnit[this.unit]}>`;\n  }\n}\n\nexport class IntervalDayTime extends Interval {\n  constructor() {\n    super(IntervalUnit.DAY_TIME);\n  }\n}\nexport class IntervalYearMonth extends Interval {\n  constructor() {\n    super(IntervalUnit.YEAR_MONTH);\n  }\n}\n\nexport class FixedSizeList extends DataType {\n  readonly listSize: number;\n  readonly children: Field[];\n\n  constructor(listSize: number, child: Field) {\n    super();\n    this.listSize = listSize;\n    this.children = [child];\n  }\n  get typeId(): Type {\n    return Type.FixedSizeList;\n  }\n  get valueType() {\n    return this.children[0].type;\n  }\n  get valueField() {\n    return this.children[0];\n  }\n  // get ArrayType() {\n  //   return this.valueType.ArrayType;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'FixedSizeList';\n  }\n  toString(): string {\n    return `FixedSizeList[${this.listSize}]<${this.valueType}>`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}