{"ast":null,"code":"export const WGS84_RADIUS_X = 6378137.0;\nexport const WGS84_RADIUS_Y = 6378137.0;\nexport const WGS84_RADIUS_Z = 6356752.3142451793;\nexport const WGS84_CONSTANTS = {\n  radii: [WGS84_RADIUS_X, WGS84_RADIUS_Y, WGS84_RADIUS_Z],\n  radiiSquared: [WGS84_RADIUS_X * WGS84_RADIUS_X, WGS84_RADIUS_Y * WGS84_RADIUS_Y, WGS84_RADIUS_Z * WGS84_RADIUS_Z],\n  oneOverRadii: [1.0 / WGS84_RADIUS_X, 1.0 / WGS84_RADIUS_Y, 1.0 / WGS84_RADIUS_Z],\n  oneOverRadiiSquared: [1.0 / (WGS84_RADIUS_X * WGS84_RADIUS_X), 1.0 / (WGS84_RADIUS_Y * WGS84_RADIUS_Y), 1.0 / (WGS84_RADIUS_Z * WGS84_RADIUS_Z)],\n  maximumRadius: Math.max(WGS84_RADIUS_X, WGS84_RADIUS_Y, WGS84_RADIUS_Z),\n  centerToleranceSquared: 1e-1\n};","map":{"version":3,"sources":["../../src/constants.js"],"names":["WGS84_RADIUS_X","WGS84_RADIUS_Y","WGS84_RADIUS_Z","WGS84_CONSTANTS","radii","radiiSquared","oneOverRadii","oneOverRadiiSquared","maximumRadius","Math","centerToleranceSquared"],"mappings":"AAGA,OAAO,MAAMA,cAAc,GAApB,SAAA;AACP,OAAO,MAAMC,cAAc,GAApB,SAAA;AACP,OAAO,MAAMC,cAAc,GAApB,kBAAA;AAIP,OAAO,MAAMC,eAAe,GAAG;AAC7BC,EAAAA,KAAK,EAAE,CAAA,cAAA,EAAA,cAAA,EADsB,cACtB,CADsB;AAE7BC,EAAAA,YAAY,EAAE,CACZL,cAAc,GADF,cAAA,EAEZC,cAAc,GAFF,cAAA,EAGZC,cAAc,GALa,cAEf,CAFe;AAO7BI,EAAAA,YAAY,EAAE,CAAC,MAAD,cAAA,EAAuB,MAAvB,cAAA,EAA6C,MAP9B,cAOf,CAPe;AAQ7BC,EAAAA,mBAAmB,EAAE,CACnB,OAAOP,cAAc,GADF,cACnB,CADmB,EAEnB,OAAOC,cAAc,GAFF,cAEnB,CAFmB,EAGnB,OAAOC,cAAc,GAXM,cAW3B,CAHmB,CARQ;AAa7BM,EAAAA,aAAa,EAAEC,IAAI,CAAJA,GAAAA,CAAAA,cAAAA,EAAAA,cAAAA,EAbc,cAadA,CAbc;AAc7BC,EAAAA,sBAAsB,EAAE;AAdK,CAAxB","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nexport const WGS84_RADIUS_X = 6378137.0;\nexport const WGS84_RADIUS_Y = 6378137.0;\nexport const WGS84_RADIUS_Z = 6356752.3142451793;\n\n// Pre-calculated ellipsoid defaults to avoid utils depending on `ellipsoid.js`\n\nexport const WGS84_CONSTANTS = {\n  radii: [WGS84_RADIUS_X, WGS84_RADIUS_Y, WGS84_RADIUS_Z],\n  radiiSquared: [\n    WGS84_RADIUS_X * WGS84_RADIUS_X,\n    WGS84_RADIUS_Y * WGS84_RADIUS_Y,\n    WGS84_RADIUS_Z * WGS84_RADIUS_Z\n  ],\n  oneOverRadii: [1.0 / WGS84_RADIUS_X, 1.0 / WGS84_RADIUS_Y, 1.0 / WGS84_RADIUS_Z],\n  oneOverRadiiSquared: [\n    1.0 / (WGS84_RADIUS_X * WGS84_RADIUS_X),\n    1.0 / (WGS84_RADIUS_Y * WGS84_RADIUS_Y),\n    1.0 / (WGS84_RADIUS_Z * WGS84_RADIUS_Z)\n  ],\n  maximumRadius: Math.max(WGS84_RADIUS_X, WGS84_RADIUS_Y, WGS84_RADIUS_Z),\n  centerToleranceSquared: 1e-1 // EPSILON1;\n};\n"]},"metadata":{},"sourceType":"module"}