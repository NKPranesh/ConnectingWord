{"ast":null,"code":"function formatArrayValue(v, opts) {\n  const {\n    maxElts = 16,\n    size = 1\n  } = opts;\n  let string = '[';\n\n  for (let i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += `,${i % size === 0 ? ' ' : ''}`;\n    }\n\n    string += formatValue(v[i], opts);\n  }\n\n  const terminator = v.length > maxElts ? '...' : ']';\n  return `${string}${terminator}`;\n}\n\nexport function formatValue(v) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const EPSILON = 1e-16;\n  const {\n    isInteger = false\n  } = opts;\n\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, opts);\n  }\n\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n\n  if (isInteger) {\n    return v.toFixed(0);\n  }\n\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    return v.toFixed(0);\n  }\n\n  const string = v.toPrecision(2);\n  const decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}","map":{"version":3,"sources":["../../../src/utils/format-value.js"],"names":["maxElts","size","string","i","v","formatValue","terminator","opts","EPSILON","isInteger","Array","ArrayBuffer","formatArrayValue","Number","String","Math","decimal"],"mappings":"AAEA,SAAA,gBAAA,CAAA,CAAA,EAAA,IAAA,EAAmC;AACjC,QAAM;AAACA,IAAAA,OAAO,GAAR,EAAA;AAAeC,IAAAA,IAAI,GAAG;AAAtB,MAAN,IAAA;AACA,MAAIC,MAAM,GAAV,GAAA;;AACA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGC,CAAC,CAALD,MAAAA,IAAgBA,CAAC,GAAjC,OAAA,EAA6C,EAA7C,CAAA,EAAkD;AAChD,QAAIA,CAAC,GAAL,CAAA,EAAW;AACTD,MAAAA,MAAM,IAAK,IAAGC,CAAC,GAADA,IAAAA,KAAAA,CAAAA,GAAAA,GAAAA,GAAuB,EAArCD,EAAAA;AACD;;AACDA,IAAAA,MAAM,IAAIG,WAAW,CAACD,CAAC,CAAF,CAAE,CAAF,EAArBF,IAAqB,CAArBA;AACD;;AACD,QAAMI,UAAU,GAAGF,CAAC,CAADA,MAAAA,GAAAA,OAAAA,GAAAA,KAAAA,GAAnB,GAAA;AACA,SAAQ,GAAEF,MAAO,GAAEI,UAAnB,EAAA;AACD;;AAED,OAAO,SAAA,WAAA,CAAA,CAAA,EAAmC;AAAA,MAAXC,IAAW,uEAAnC,EAAmC;AACxC,QAAMC,OAAO,GAAb,KAAA;AACA,QAAM;AAACC,IAAAA,SAAS,GAAG;AAAb,MAAN,IAAA;;AACA,MAAIC,KAAK,CAALA,OAAAA,CAAAA,CAAAA,KAAoBC,WAAW,CAAXA,MAAAA,CAAxB,CAAwBA,CAAxB,EAA+C;AAC7C,WAAOC,gBAAgB,CAAA,CAAA,EAAvB,IAAuB,CAAvB;AACD;;AACD,MAAI,CAACC,MAAM,CAANA,QAAAA,CAAL,CAAKA,CAAL,EAAyB;AACvB,WAAOC,MAAM,CAAb,CAAa,CAAb;AACD;;AACD,MAAIC,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,IAAJ,OAAA,EAA2B;AACzB,WAAON,SAAS,GAAA,GAAA,GAAhB,IAAA;AACD;;AACD,MAAA,SAAA,EAAe;AACb,WAAOL,CAAC,CAADA,OAAAA,CAAP,CAAOA,CAAP;AACD;;AACD,MAAIW,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,IAAAA,GAAAA,IAAqBA,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,IAAzB,KAAA,EAA8C;AAC5C,WAAOX,CAAC,CAADA,OAAAA,CAAP,CAAOA,CAAP;AACD;;AACD,QAAMF,MAAM,GAAGE,CAAC,CAADA,WAAAA,CAAf,CAAeA,CAAf;AACA,QAAMY,OAAO,GAAGd,MAAM,CAANA,OAAAA,CAAhB,IAAgBA,CAAhB;AACA,SAAOc,OAAO,KAAKd,MAAM,CAANA,MAAAA,GAAZc,CAAAA,GAAgCd,MAAM,CAANA,KAAAA,CAAAA,CAAAA,EAAgB,CAAhDc,CAAgCd,CAAhCc,GAAP,MAAA;AACD","sourcesContent":["// TODO / DEPRECATED - delete when confident that probe.gl logging implements all opts\n/* eslint-disable no-console */\nfunction formatArrayValue(v, opts) {\n  const {maxElts = 16, size = 1} = opts;\n  let string = '[';\n  for (let i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += `,${i % size === 0 ? ' ' : ''}`;\n    }\n    string += formatValue(v[i], opts);\n  }\n  const terminator = v.length > maxElts ? '...' : ']';\n  return `${string}${terminator}`;\n}\n\nexport function formatValue(v, opts = {}) {\n  const EPSILON = 1e-16;\n  const {isInteger = false} = opts;\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, opts);\n  }\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n  if (isInteger) {\n    return v.toFixed(0);\n  }\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    return v.toFixed(0);\n  }\n  const string = v.toPrecision(2);\n  const decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}\n"]},"metadata":{},"sourceType":"module"}