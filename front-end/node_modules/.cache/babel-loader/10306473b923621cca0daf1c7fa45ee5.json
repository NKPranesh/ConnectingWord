{"ast":null,"code":"import { default as LayersPass } from './layers-pass';\nimport { Framebuffer, Texture2D, Renderbuffer, withParameters, cssToDeviceRatio } from '@luma.gl/core';\nexport default class ShadowPass extends LayersPass {\n  constructor(gl, props) {\n    super(gl, props);\n    this.shadowMap = new Texture2D(gl, {\n      width: 1,\n      height: 1,\n      parameters: {\n        [10241]: 9729,\n        [10240]: 9729,\n        [10242]: 33071,\n        [10243]: 33071\n      }\n    });\n    this.depthBuffer = new Renderbuffer(gl, {\n      format: 33189,\n      width: 1,\n      height: 1\n    });\n    this.fbo = new Framebuffer(gl, {\n      id: 'shadowmap',\n      width: 1,\n      height: 1,\n      attachments: {\n        [36064]: this.shadowMap,\n        [36096]: this.depthBuffer\n      }\n    });\n  }\n\n  render(params) {\n    const target = this.fbo;\n    withParameters(this.gl, {\n      depthRange: [0, 1],\n      depthTest: true,\n      blend: false,\n      clearColor: [1, 1, 1, 1]\n    }, () => {\n      const viewport = params.viewports[0];\n      const pixelRatio = cssToDeviceRatio(this.gl);\n      const width = viewport.width * pixelRatio;\n      const height = viewport.height * pixelRatio;\n\n      if (width !== target.width || height !== target.height) {\n        target.resize({\n          width,\n          height\n        });\n      }\n\n      super.render({ ...params,\n        target,\n        pass: 'shadow'\n      });\n    });\n  }\n\n  shouldDrawLayer(layer) {\n    return layer.props.shadowEnabled !== false;\n  }\n\n  getModuleParameters() {\n    return {\n      drawToShadowMap: true\n    };\n  }\n\n  delete() {\n    if (this.fbo) {\n      this.fbo.delete();\n      this.fbo = null;\n    }\n\n    if (this.shadowMap) {\n      this.shadowMap.delete();\n      this.shadowMap = null;\n    }\n\n    if (this.depthBuffer) {\n      this.depthBuffer.delete();\n      this.depthBuffer = null;\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/passes/shadow-pass.js"],"names":["default","constructor","width","height","parameters","format","id","attachments","depthBuffer","render","target","withParameters","depthRange","depthTest","blend","clearColor","viewport","params","pixelRatio","cssToDeviceRatio","pass","shouldDrawLayer","layer","getModuleParameters","drawToShadowMap","delete"],"mappings":"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","sourcesContent":["import {default as LayersPass} from './layers-pass';\nimport {\n  Framebuffer,\n  Texture2D,\n  Renderbuffer,\n  withParameters,\n  cssToDeviceRatio\n} from '@luma.gl/core';\n\nexport default class ShadowPass extends LayersPass {\n  constructor(gl, props) {\n    super(gl, props);\n\n    // The shadowMap texture\n    this.shadowMap = new Texture2D(gl, {\n      width: 1,\n      height: 1,\n      parameters: {\n        [gl.TEXTURE_MIN_FILTER]: gl.LINEAR,\n        [gl.TEXTURE_MAG_FILTER]: gl.LINEAR,\n        [gl.TEXTURE_WRAP_S]: gl.CLAMP_TO_EDGE,\n        [gl.TEXTURE_WRAP_T]: gl.CLAMP_TO_EDGE\n      }\n    });\n\n    this.depthBuffer = new Renderbuffer(gl, {\n      format: gl.DEPTH_COMPONENT16,\n      width: 1,\n      height: 1\n    });\n\n    this.fbo = new Framebuffer(gl, {\n      id: 'shadowmap',\n      width: 1,\n      height: 1,\n      attachments: {\n        [gl.COLOR_ATTACHMENT0]: this.shadowMap,\n        // Depth attachment has to be specified for depth test to work\n        [gl.DEPTH_ATTACHMENT]: this.depthBuffer\n      }\n    });\n  }\n\n  render(params) {\n    const target = this.fbo;\n\n    withParameters(\n      this.gl,\n      {\n        depthRange: [0, 1],\n        depthTest: true,\n        blend: false,\n        clearColor: [1, 1, 1, 1]\n      },\n      () => {\n        const viewport = params.viewports[0];\n        const pixelRatio = cssToDeviceRatio(this.gl);\n        const width = viewport.width * pixelRatio;\n        const height = viewport.height * pixelRatio;\n        if (width !== target.width || height !== target.height) {\n          target.resize({width, height});\n        }\n\n        super.render({...params, target, pass: 'shadow'});\n      }\n    );\n  }\n\n  shouldDrawLayer(layer) {\n    return layer.props.shadowEnabled !== false;\n  }\n\n  getModuleParameters() {\n    return {\n      drawToShadowMap: true\n    };\n  }\n\n  delete() {\n    if (this.fbo) {\n      this.fbo.delete();\n      this.fbo = null;\n    }\n\n    if (this.shadowMap) {\n      this.shadowMap.delete();\n      this.shadowMap = null;\n    }\n\n    if (this.depthBuffer) {\n      this.depthBuffer.delete();\n      this.depthBuffer = null;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}