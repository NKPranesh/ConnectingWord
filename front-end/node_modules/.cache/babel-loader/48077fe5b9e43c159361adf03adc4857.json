{"ast":null,"code":"import { clamp } from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport { normalizeViewportProps } from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5,\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\nexport class MapState extends ViewState {\n  constructor() {\n    let {\n      makeViewport,\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing = DEFAULT_STATE.bearing,\n      pitch = DEFAULT_STATE.pitch,\n      altitude = DEFAULT_STATE.altitude,\n      maxZoom = DEFAULT_STATE.maxZoom,\n      minZoom = DEFAULT_STATE.minZoom,\n      maxPitch = DEFAULT_STATE.maxPitch,\n      minPitch = DEFAULT_STATE.minPitch,\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom,\n      normalize\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    assert(Number.isFinite(longitude));\n    assert(Number.isFinite(latitude));\n    assert(Number.isFinite(zoom));\n    super({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      normalize\n    });\n    this._state = {\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n    this.makeViewport = makeViewport;\n  }\n\n  panStart(_ref) {\n    let {\n      pos\n    } = _ref;\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  pan(_ref2) {\n    let {\n      pos,\n      startPos\n    } = _ref2;\n\n    const startPanLngLat = this._state.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this._viewportProps);\n    const newProps = viewport.panByPosition(startPanLngLat, pos);\n    return this._getUpdatedState(newProps);\n  }\n\n  panEnd() {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  rotateStart(_ref3) {\n    let {\n      pos\n    } = _ref3;\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  rotate(_ref4) {\n    let {\n      pos,\n      deltaAngleX = 0,\n      deltaAngleY = 0\n    } = _ref4;\n    const {\n      startRotatePos,\n      startBearing,\n      startPitch\n    } = this._state;\n\n    if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    let newRotation;\n\n    if (pos) {\n      newRotation = this._calculateNewPitchAndBearing({ ...this._getRotationParams(pos, startRotatePos),\n        startBearing,\n        startPitch\n      });\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  zoomStart(_ref5) {\n    let {\n      pos\n    } = _ref5;\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  zoom(_ref6) {\n    let {\n      pos,\n      startPos,\n      scale\n    } = _ref6;\n    let {\n      startZoom,\n      startZoomLngLat\n    } = this._state;\n\n    if (!Number.isFinite(startZoom)) {\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    const zoom = this._calculateNewZoom({\n      scale,\n      startZoom\n    });\n\n    const zoomedViewport = this.makeViewport({ ...this._viewportProps,\n      zoom\n    });\n    return this._getUpdatedState({\n      zoom,\n      ...zoomedViewport.panByPosition(startZoomLngLat, pos)\n    });\n  }\n\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n    return this._zoomFromCenter(speed);\n  }\n\n  zoomOut() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n    return this._zoomFromCenter(1 / speed);\n  }\n\n  moveLeft() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveRight() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveUp() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n    return this._panFromCenter([0, speed]);\n  }\n\n  moveDown() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n    return this._panFromCenter([0, -speed]);\n  }\n\n  rotateLeft() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - speed\n    });\n  }\n\n  rotateRight() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + speed\n    });\n  }\n\n  rotateUp() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + speed\n    });\n  }\n\n  rotateDown() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - speed\n    });\n  }\n\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = { ...this._viewportProps\n    };\n    const {\n      bearing,\n      longitude\n    } = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n\n    return props;\n  }\n\n  _zoomFromCenter(scale) {\n    const {\n      width,\n      height\n    } = this._viewportProps;\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {\n      width,\n      height\n    } = this._viewportProps;\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this._viewportProps,\n      ...this._state,\n      ...newProps\n    });\n  }\n\n  _applyConstraints(props) {\n    const {\n      maxZoom,\n      minZoom,\n      zoom\n    } = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n    const {\n      maxPitch,\n      minPitch,\n      pitch\n    } = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n    const {\n      normalize = true\n    } = props;\n\n    if (normalize) {\n      Object.assign(props, normalizeViewportProps(props));\n    }\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  _calculateNewZoom(_ref7) {\n    let {\n      scale,\n      startZoom\n    } = _ref7;\n    const {\n      maxZoom,\n      minZoom\n    } = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  _calculateNewPitchAndBearing(_ref8) {\n    let {\n      deltaScaleX,\n      deltaScaleY,\n      startBearing,\n      startPitch\n    } = _ref8;\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n    const {\n      minPitch,\n      maxPitch\n    } = this._viewportProps;\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n\n    if (deltaScaleY > 0) {\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n\n  _getRotationParams(pos, startPos) {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {\n      width,\n      height\n    } = this._viewportProps;\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n    return {\n      deltaScaleX,\n      deltaScaleY\n    };\n  }\n\n}\nexport default class MapController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(MapState, props);\n  }\n\n  setProps(props) {\n    const oldProps = this.controllerStateProps;\n    super.setProps(props);\n    const dimensionChanged = !oldProps || oldProps.height !== props.height;\n\n    if (dimensionChanged) {\n      this.updateViewport(new this.ControllerState({\n        makeViewport: this.makeViewport,\n        ...this.controllerStateProps,\n        ...this._state\n      }));\n    }\n  }\n\n  get linearTransitionProps() {\n    return ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\n  }\n\n}","map":{"version":3,"sources":["../../../src/controllers/map-controller.js"],"names":["PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","DEFAULT_STATE","pitch","bearing","altitude","minZoom","maxZoom","minPitch","maxPitch","constructor","normalize","assert","Number","startZoom","panStart","pos","startPanLngLat","pan","startPos","viewport","newProps","panEnd","rotateStart","startRotatePos","startBearing","startPitch","rotate","deltaAngleX","deltaAngleY","newRotation","rotateEnd","zoomStart","startZoomLngLat","zoom","scale","zoomedViewport","zoomEnd","zoomIn","speed","zoomOut","moveLeft","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","shortestPathFrom","fromProps","viewState","props","_viewportProps","longitude","Math","_zoomFromCenter","height","width","_panFromCenter","offset","_getUpdatedState","makeViewport","_applyConstraints","clamp","Object","normalizeViewportProps","_unproject","_calculateNewZoom","_calculateNewPitchAndBearing","deltaScaleY","_getRotationParams","deltaX","deltaY","centerY","startY","deltaScaleX","setProps","oldProps","dimensionChanged","_state","linearTransitionProps"],"mappings":"AAAA,SAAA,KAAA,QAAA,SAAA;AACA,OAAA,UAAA,MAAA,cAAA;AACA,OAAA,SAAA,MAAA,cAAA;AACA,SAAA,sBAAA,QAAA,uBAAA;AACA,OAAA,MAAA,MAAA,iBAAA;AAEA,MAAMA,qBAAqB,GAA3B,CAAA;AACA,MAAMC,WAAW,GAAjB,GAAA;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,KAAK,EADe,CAAA;AAEpBC,EAAAA,OAAO,EAFa,CAAA;AAGpBC,EAAAA,QAAQ,EAHY,GAAA;AAIpBC,EAAAA,OAAO,EAJa,CAAA;AAKpBC,EAAAA,OAAO,EALa,EAAA;AAMpBC,EAAAA,QAAQ,EANY,CAAA;AAOpBC,EAAAA,QAAQ,EAAE;AAPU,CAAtB;AAYA,OAAO,MAAA,QAAA,SAAA,SAAA,CAAiC;AACtCC,EAAAA,WAAW,GA+CH;AAAA,QA/CI;AAAA,MAAA,YAAA;AAAA,MAAA,KAAA;AAAA,MAAA,MAAA;AAAA,MAAA,QAAA;AAAA,MAAA,SAAA;AAAA,MAAA,IAAA;AAeVN,MAAAA,OAAO,GAAGF,aAAa,CAfb,OAAA;AAiBVC,MAAAA,KAAK,GAAGD,aAAa,CAjBX,KAAA;AAuBVG,MAAAA,QAAQ,GAAGH,aAAa,CAvBd,QAAA;AA0BVK,MAAAA,OAAO,GAAGL,aAAa,CA1Bb,OAAA;AA2BVI,MAAAA,OAAO,GAAGJ,aAAa,CA3Bb,OAAA;AA4BVO,MAAAA,QAAQ,GAAGP,aAAa,CA5Bd,QAAA;AA6BVM,MAAAA,QAAQ,GAAGN,aAAa,CA7Bd,QAAA;AAAA,MAAA,cAAA;AAAA,MAAA,eAAA;AAAA,MAAA,cAAA;AAAA,MAAA,YAAA;AAAA,MAAA,UAAA;AAAA,MAAA,SAAA;AA8CVS,MAAAA;AA9CU,KA+CJ,uEA/CG,EA+CH;AACNC,IAAAA,MAAM,CAACC,MAAM,CAANA,QAAAA,CAAPD,SAAOC,CAAD,CAAND;AACAA,IAAAA,MAAM,CAACC,MAAM,CAANA,QAAAA,CAAPD,QAAOC,CAAD,CAAND;AACAA,IAAAA,MAAM,CAACC,MAAM,CAANA,QAAAA,CAAPD,IAAOC,CAAD,CAAND;AAEA,UAAM;AAAA,MAAA,KAAA;AAAA,MAAA,MAAA;AAAA,MAAA,QAAA;AAAA,MAAA,SAAA;AAAA,MAAA,IAAA;AAAA,MAAA,OAAA;AAAA,MAAA,KAAA;AAAA,MAAA,QAAA;AAAA,MAAA,OAAA;AAAA,MAAA,OAAA;AAAA,MAAA,QAAA;AAAA,MAAA,QAAA;AAaJD,MAAAA;AAbI,KAAN;AAgBA,SAAA,MAAA,GAAc;AAAA,MAAA,cAAA;AAAA,MAAA,eAAA;AAAA,MAAA,cAAA;AAAA,MAAA,YAAA;AAAA,MAAA,UAAA;AAMZG,MAAAA;AANY,KAAd;AASA,SAAA,YAAA,GAAA,YAAA;AACD;;AAMDC,EAAAA,QAAQ,OAAQ;AAAA,QAAP;AAACC,MAAAA;AAAD,KAAO;AACd,WAAO,KAAA,gBAAA,CAAsB;AAC3BC,MAAAA,cAAc,EAAE,KAAA,UAAA,CAAA,GAAA;AADW,KAAtB,CAAP;AAGD;;AAQDC,EAAAA,GAAG,QAAkB;AAAA,QAAjB;AAAA,MAAA,GAAA;AAAMC,MAAAA;AAAN,KAAiB;;AACnB,UAAMF,cAAc,GAAG,KAAA,MAAA,CAAA,cAAA,IAA8B,KAAA,UAAA,CAArD,QAAqD,CAArD;;AAEA,QAAI,CAAJ,cAAA,EAAqB;AACnB,aAAA,IAAA;AACD;;AAED,UAAMG,QAAQ,GAAG,KAAA,YAAA,CAAkB,KAAnC,cAAiB,CAAjB;AACA,UAAMC,QAAQ,GAAGD,QAAQ,CAARA,aAAAA,CAAAA,cAAAA,EAAjB,GAAiBA,CAAjB;AAEA,WAAO,KAAA,gBAAA,CAAP,QAAO,CAAP;AACD;;AAMDE,EAAAA,MAAM,GAAG;AACP,WAAO,KAAA,gBAAA,CAAsB;AAC3BL,MAAAA,cAAc,EAAE;AADW,KAAtB,CAAP;AAGD;;AAMDM,EAAAA,WAAW,QAAQ;AAAA,QAAP;AAACP,MAAAA;AAAD,KAAO;AACjB,WAAO,KAAA,gBAAA,CAAsB;AAC3BQ,MAAAA,cAAc,EADa,GAAA;AAE3BC,MAAAA,YAAY,EAAE,KAAA,cAAA,CAFa,OAAA;AAG3BC,MAAAA,UAAU,EAAE,KAAA,cAAA,CAAoBvB;AAHL,KAAtB,CAAP;AAKD;;AAMDwB,EAAAA,MAAM,QAA0C;AAAA,QAAzC;AAAA,MAAA,GAAA;AAAMC,MAAAA,WAAW,GAAjB,CAAA;AAAuBC,MAAAA,WAAW,GAAG;AAArC,KAAyC;AAC9C,UAAM;AAAA,MAAA,cAAA;AAAA,MAAA,YAAA;AAA+BH,MAAAA;AAA/B,QAA6C,KAAnD,MAAA;;AAEA,QAAI,CAAA,cAAA,IAAmB,CAACb,MAAM,CAANA,QAAAA,CAApB,YAAoBA,CAApB,IAAqD,CAACA,MAAM,CAANA,QAAAA,CAA1D,UAA0DA,CAA1D,EAAuF;AACrF,aAAA,IAAA;AACD;;AACD,QAAA,WAAA;;AACA,QAAA,GAAA,EAAS;AACPiB,MAAAA,WAAW,GAAG,KAAA,4BAAA,CAAkC,EAC9C,GAAG,KAAA,kBAAA,CAAA,GAAA,EAD2C,cAC3C,CAD2C;AAAA,QAAA,YAAA;AAG9CJ,QAAAA;AAH8C,OAAlC,CAAdI;AADF,KAAA,MAMO;AACLA,MAAAA,WAAW,GAAG;AACZ1B,QAAAA,OAAO,EAAEqB,YAAY,GADT,WAAA;AAEZtB,QAAAA,KAAK,EAAEuB,UAAU,GAAGG;AAFR,OAAdC;AAID;;AACD,WAAO,KAAA,gBAAA,CAAP,WAAO,CAAP;AACD;;AAMDC,EAAAA,SAAS,GAAG;AACV,WAAO,KAAA,gBAAA,CAAsB;AAC3BN,MAAAA,YAAY,EADe,IAAA;AAE3BC,MAAAA,UAAU,EAAE;AAFe,KAAtB,CAAP;AAID;;AAMDM,EAAAA,SAAS,QAAQ;AAAA,QAAP;AAAChB,MAAAA;AAAD,KAAO;AACf,WAAO,KAAA,gBAAA,CAAsB;AAC3BiB,MAAAA,eAAe,EAAE,KAAA,UAAA,CADU,GACV,CADU;AAE3BnB,MAAAA,SAAS,EAAE,KAAA,cAAA,CAAoBoB;AAFJ,KAAtB,CAAP;AAID;;AAUDA,EAAAA,IAAI,QAAyB;AAAA,QAAxB;AAAA,MAAA,GAAA;AAAA,MAAA,QAAA;AAAgBC,MAAAA;AAAhB,KAAwB;AAE3B,QAAI;AAAA,MAAA,SAAA;AAAYF,MAAAA;AAAZ,QAA+B,KAAnC,MAAA;;AAEA,QAAI,CAACpB,MAAM,CAANA,QAAAA,CAAL,SAAKA,CAAL,EAAiC;AAO/BC,MAAAA,SAAS,GAAG,KAAA,cAAA,CAAZA,IAAAA;AACAmB,MAAAA,eAAe,GAAG,KAAA,UAAA,CAAA,QAAA,KAA6B,KAAA,UAAA,CAA/CA,GAA+C,CAA/CA;AACD;;AAED,UAAMC,IAAI,GAAG,KAAA,iBAAA,CAAuB;AAAA,MAAA,KAAA;AAAQpB,MAAAA;AAAR,KAAvB,CAAb;;AAEA,UAAMsB,cAAc,GAAG,KAAA,YAAA,CAAkB,EAAC,GAAG,KAAJ,cAAA;AAAyBF,MAAAA;AAAzB,KAAlB,CAAvB;AAEA,WAAO,KAAA,gBAAA,CAAsB;AAAA,MAAA,IAAA;AAE3B,SAAGE,cAAc,CAAdA,aAAAA,CAAAA,eAAAA,EAAAA,GAAAA;AAFwB,KAAtB,CAAP;AAID;;AAMDC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAA,gBAAA,CAAsB;AAC3BJ,MAAAA,eAAe,EADY,IAAA;AAE3BnB,MAAAA,SAAS,EAAE;AAFgB,KAAtB,CAAP;AAID;;AAEDwB,EAAAA,MAAM,GAAY;AAAA,QAAXC,KAAW,uEAAZ,CAAY;AAChB,WAAO,KAAA,eAAA,CAAP,KAAO,CAAP;AACD;;AAEDC,EAAAA,OAAO,GAAY;AAAA,QAAXD,KAAW,uEAAZ,CAAY;AACjB,WAAO,KAAA,eAAA,CAAqB,IAA5B,KAAO,CAAP;AACD;;AAEDE,EAAAA,QAAQ,GAAc;AAAA,QAAbF,KAAa,uEAAd,GAAc;AACpB,WAAO,KAAA,cAAA,CAAoB,CAAA,KAAA,EAA3B,CAA2B,CAApB,CAAP;AACD;;AAEDG,EAAAA,SAAS,GAAc;AAAA,QAAbH,KAAa,uEAAd,GAAc;AACrB,WAAO,KAAA,cAAA,CAAoB,CAAC,CAAD,KAAA,EAA3B,CAA2B,CAApB,CAAP;AACD;;AAEDI,EAAAA,MAAM,GAAc;AAAA,QAAbJ,KAAa,uEAAd,GAAc;AAClB,WAAO,KAAA,cAAA,CAAoB,CAAA,CAAA,EAA3B,KAA2B,CAApB,CAAP;AACD;;AAEDK,EAAAA,QAAQ,GAAc;AAAA,QAAbL,KAAa,uEAAd,GAAc;AACpB,WAAO,KAAA,cAAA,CAAoB,CAAA,CAAA,EAAI,CAA/B,KAA2B,CAApB,CAAP;AACD;;AAEDM,EAAAA,UAAU,GAAa;AAAA,QAAZN,KAAY,uEAAb,EAAa;AACrB,WAAO,KAAA,gBAAA,CAAsB;AAC3BnC,MAAAA,OAAO,EAAE,KAAA,cAAA,CAAA,OAAA,GAA8BmC;AADZ,KAAtB,CAAP;AAGD;;AAEDO,EAAAA,WAAW,GAAa;AAAA,QAAZP,KAAY,uEAAb,EAAa;AACtB,WAAO,KAAA,gBAAA,CAAsB;AAC3BnC,MAAAA,OAAO,EAAE,KAAA,cAAA,CAAA,OAAA,GAA8BmC;AADZ,KAAtB,CAAP;AAGD;;AAEDQ,EAAAA,QAAQ,GAAa;AAAA,QAAZR,KAAY,uEAAb,EAAa;AACnB,WAAO,KAAA,gBAAA,CAAsB;AAC3BpC,MAAAA,KAAK,EAAE,KAAA,cAAA,CAAA,KAAA,GAA4BoC;AADR,KAAtB,CAAP;AAGD;;AAEDS,EAAAA,UAAU,GAAa;AAAA,QAAZT,KAAY,uEAAb,EAAa;AACrB,WAAO,KAAA,gBAAA,CAAsB;AAC3BpC,MAAAA,KAAK,EAAE,KAAA,cAAA,CAAA,KAAA,GAA4BoC;AADR,KAAtB,CAAP;AAGD;;AAEDU,EAAAA,gBAAgB,CAAA,SAAA,EAAY;AAE1B,UAAMC,SAAS,GAAGC,SAAS,CAA3B,gBAAkBA,EAAlB;AACA,UAAMC,KAAK,GAAG,EAAC,GAAG,KAAKC;AAAT,KAAd;AACA,UAAM;AAAA,MAAA,OAAA;AAAUC,MAAAA;AAAV,QAAN,KAAA;;AAEA,QAAIC,IAAI,CAAJA,GAAAA,CAASnD,OAAO,GAAG8C,SAAS,CAA5BK,OAAAA,IAAJ,GAAA,EAAiD;AAC/CH,MAAAA,KAAK,CAALA,OAAAA,GAAgBhD,OAAO,GAAPA,CAAAA,GAAcA,OAAO,GAArBA,GAAAA,GAA8BA,OAAO,GAArDgD,GAAAA;AACD;;AACD,QAAIG,IAAI,CAAJA,GAAAA,CAASD,SAAS,GAAGJ,SAAS,CAA9BK,SAAAA,IAAJ,GAAA,EAAqD;AACnDH,MAAAA,KAAK,CAALA,SAAAA,GAAkBE,SAAS,GAATA,CAAAA,GAAgBA,SAAS,GAAzBA,GAAAA,GAAkCA,SAAS,GAA7DF,GAAAA;AACD;;AACD,WAAA,KAAA;AACD;;AAIDI,EAAAA,eAAe,CAAA,KAAA,EAAQ;AACrB,UAAM;AAAA,MAAA,KAAA;AAAQC,MAAAA;AAAR,QAAkB,KAAxB,cAAA;AACA,WAAO,KAAA,IAAA,CAAU;AACfzC,MAAAA,GAAG,EAAE,CAAC0C,KAAK,GAAN,CAAA,EAAYD,MAAM,GADR,CACV,CADU;AAEftB,MAAAA;AAFe,KAAV,CAAP;AAID;;AAEDwB,EAAAA,cAAc,CAAA,MAAA,EAAS;AACrB,UAAM;AAAA,MAAA,KAAA;AAAQF,MAAAA;AAAR,QAAkB,KAAxB,cAAA;AACA,WAAO,KAAA,GAAA,CAAS;AACdtC,MAAAA,QAAQ,EAAE,CAACuC,KAAK,GAAN,CAAA,EAAYD,MAAM,GADd,CACJ,CADI;AAEdzC,MAAAA,GAAG,EAAE,CAAC0C,KAAK,GAALA,CAAAA,GAAYE,MAAM,CAAnB,CAAmB,CAAnB,EAAwBH,MAAM,GAANA,CAAAA,GAAaG,MAAM,CAA3C,CAA2C,CAA3C;AAFS,KAAT,CAAP;AAID;;AAEDC,EAAAA,gBAAgB,CAAA,QAAA,EAAW;AAEzB,WAAO,IAAI,KAAJ,WAAA,CAAqB;AAC1BC,MAAAA,YAAY,EAAE,KADY,YAAA;AAE1B,SAAG,KAFuB,cAAA;AAG1B,SAAG,KAHuB,MAAA;AAI1B,SAAGzC;AAJuB,KAArB,CAAP;AAMD;;AAGD0C,EAAAA,iBAAiB,CAAA,KAAA,EAAQ;AAEvB,UAAM;AAAA,MAAA,OAAA;AAAA,MAAA,OAAA;AAAmB7B,MAAAA;AAAnB,QAAN,KAAA;AACAkB,IAAAA,KAAK,CAALA,IAAAA,GAAaY,KAAK,CAAA,IAAA,EAAA,OAAA,EAAlBZ,OAAkB,CAAlBA;AAGA,UAAM;AAAA,MAAA,QAAA;AAAA,MAAA,QAAA;AAAqBjD,MAAAA;AAArB,QAAN,KAAA;AACAiD,IAAAA,KAAK,CAALA,KAAAA,GAAcY,KAAK,CAAA,KAAA,EAAA,QAAA,EAAnBZ,QAAmB,CAAnBA;AAGA,UAAM;AAACzC,MAAAA,SAAS,GAAG;AAAb,QAAN,KAAA;;AACA,QAAA,SAAA,EAAe;AACbsD,MAAAA,MAAM,CAANA,MAAAA,CAAAA,KAAAA,EAAqBC,sBAAsB,CAA3CD,KAA2C,CAA3CA;AACD;;AAED,WAAA,KAAA;AACD;;AAEDE,EAAAA,UAAU,CAAA,GAAA,EAAM;AACd,UAAM/C,QAAQ,GAAG,KAAA,YAAA,CAAkB,KAAnC,cAAiB,CAAjB;AACA,WAAOJ,GAAG,IAAII,QAAQ,CAARA,SAAAA,CAAd,GAAcA,CAAd;AACD;;AAGDgD,EAAAA,iBAAiB,QAAqB;AAAA,QAApB;AAAA,MAAA,KAAA;AAAQtD,MAAAA;AAAR,KAAoB;AACpC,UAAM;AAAA,MAAA,OAAA;AAAUR,MAAAA;AAAV,QAAqB,KAA3B,cAAA;AACA,UAAM4B,IAAI,GAAGpB,SAAS,GAAGyC,IAAI,CAAJA,IAAAA,CAAzB,KAAyBA,CAAzB;AACA,WAAOS,KAAK,CAAA,IAAA,EAAA,OAAA,EAAZ,OAAY,CAAZ;AACD;;AAGDK,EAAAA,4BAA4B,QAAuD;AAAA,QAAtD;AAAA,MAAA,WAAA;AAAA,MAAA,WAAA;AAAA,MAAA,YAAA;AAAyC3C,MAAAA;AAAzC,KAAsD;AAGjF4C,IAAAA,WAAW,GAAGN,KAAK,CAAA,WAAA,EAAc,CAAd,CAAA,EAAnBM,CAAmB,CAAnBA;AAEA,UAAM;AAAA,MAAA,QAAA;AAAW7D,MAAAA;AAAX,QAAuB,KAA7B,cAAA;AAEA,UAAML,OAAO,GAAGqB,YAAY,GAAG,MAA/B,WAAA;AACA,QAAItB,KAAK,GAAT,UAAA;;AACA,QAAImE,WAAW,GAAf,CAAA,EAAqB;AAEnBnE,MAAAA,KAAK,GAAGuB,UAAU,GAAG4C,WAAW,IAAI7D,QAAQ,GAA5CN,UAAgC,CAAhCA;AAFF,KAAA,MAGO,IAAImE,WAAW,GAAf,CAAA,EAAqB;AAE1BnE,MAAAA,KAAK,GAAGuB,UAAU,GAAG4C,WAAW,IAAI9D,QAAQ,GAA5CL,UAAgC,CAAhCA;AACD;;AAED,WAAO;AAAA,MAAA,KAAA;AAELC,MAAAA;AAFK,KAAP;AAID;;AAEDmE,EAAAA,kBAAkB,CAAA,GAAA,EAAA,QAAA,EAAgB;AAChC,UAAMC,MAAM,GAAGxD,GAAG,CAAHA,CAAG,CAAHA,GAASG,QAAQ,CAAhC,CAAgC,CAAhC;AACA,UAAMsD,MAAM,GAAGzD,GAAG,CAAHA,CAAG,CAAHA,GAASG,QAAQ,CAAhC,CAAgC,CAAhC;AACA,UAAMuD,OAAO,GAAG1D,GAAG,CAAnB,CAAmB,CAAnB;AACA,UAAM2D,MAAM,GAAGxD,QAAQ,CAAvB,CAAuB,CAAvB;AACA,UAAM;AAAA,MAAA,KAAA;AAAQsC,MAAAA;AAAR,QAAkB,KAAxB,cAAA;AAEA,UAAMmB,WAAW,GAAGJ,MAAM,GAA1B,KAAA;AACA,QAAIF,WAAW,GAAf,CAAA;;AAEA,QAAIG,MAAM,GAAV,CAAA,EAAgB;AACd,UAAIlB,IAAI,CAAJA,GAAAA,CAASE,MAAM,GAAfF,MAAAA,IAAJ,qBAAA,EAAuD;AAErDe,QAAAA,WAAW,GAAIG,MAAM,IAAIE,MAAM,GAAjB,MAAO,CAANF,GAAfH,WAAAA;AACD;AAJH,KAAA,MAKO,IAAIG,MAAM,GAAV,CAAA,EAAgB;AACrB,UAAIE,MAAM,GAAV,qBAAA,EAAoC;AAElCL,QAAAA,WAAW,GAAG,IAAII,OAAO,GAAzBJ,MAAAA;AACD;AACF;;AACDA,IAAAA,WAAW,GAAGf,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYA,IAAI,CAAJA,GAAAA,CAAS,CAATA,CAAAA,EAA1Be,WAA0Bf,CAAZA,CAAde;AACA,WAAO;AAAA,MAAA,WAAA;AAAcA,MAAAA;AAAd,KAAP;AACD;;AAzYqC;AA4YxC,eAAe,MAAA,aAAA,SAAA,UAAA,CAAuC;AACpD5D,EAAAA,WAAW,CAAA,KAAA,EAAQ;AACjB0C,IAAAA,KAAK,CAALA,QAAAA,GAAiBA,KAAK,CAALA,QAAAA,IAAjBA,KAAAA;AACA,UAAA,QAAA,EAAA,KAAA;AACD;;AAEDyB,EAAAA,QAAQ,CAAA,KAAA,EAAQ;AACd,UAAMC,QAAQ,GAAG,KAAjB,oBAAA;AAEA,UAAA,QAAA,CAAA,KAAA;AAEA,UAAMC,gBAAgB,GAAG,CAAA,QAAA,IAAaD,QAAQ,CAARA,MAAAA,KAAoB1B,KAAK,CAA/D,MAAA;;AACA,QAAA,gBAAA,EAAsB;AAEpB,WAAA,cAAA,CACE,IAAI,KAAJ,eAAA,CAAyB;AACvBU,QAAAA,YAAY,EAAE,KADS,YAAA;AAEvB,WAAG,KAFoB,oBAAA;AAGvB,WAAG,KAAKkB;AAHe,OAAzB,CADF;AAOD;AACF;;AAED,MAAIC,qBAAJ,GAA4B;AAC1B,WAAO,CAAA,WAAA,EAAA,UAAA,EAAA,MAAA,EAAA,SAAA,EAAP,OAAO,CAAP;AACD;;AA1BmD","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport {normalizeViewportProps} from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5,\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\n\n/* Utils */\n\nexport class MapState extends ViewState {\n  constructor({\n    makeViewport,\n\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = DEFAULT_STATE.maxZoom,\n    minZoom = DEFAULT_STATE.minZoom,\n    maxPitch = DEFAULT_STATE.maxPitch,\n    minPitch = DEFAULT_STATE.minPitch,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /* Pointer position when rotation started */\n    startRotatePos,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom,\n\n    /** Normalize viewport props to fit map height into viewport. Default `true` */\n    normalize\n  } = {}) {\n    assert(Number.isFinite(longitude)); // `longitude` must be supplied\n    assert(Number.isFinite(latitude)); // `latitude` must be supplied\n    assert(Number.isFinite(zoom)); // `zoom` must be supplied\n\n    super({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      normalize\n    });\n\n    this._state = {\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n\n    this.makeViewport = makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._state.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this._viewportProps);\n    const newProps = viewport.panByPosition(startPanLngLat, pos);\n\n    return this._getUpdatedState(newProps);\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startBearing, startPitch} = this._state;\n\n    if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n    let newRotation;\n    if (pos) {\n      newRotation = this._calculateNewPitchAndBearing({\n        ...this._getRotationParams(pos, startRotatePos),\n        startBearing,\n        startPitch\n      });\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._state;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    const zoom = this._calculateNewZoom({scale, startZoom});\n\n    const zoomedViewport = this.makeViewport({...this._viewportProps, zoom});\n\n    return this._getUpdatedState({\n      zoom,\n      ...zoomedViewport.panByPosition(startZoomLngLat, pos)\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this._zoomFromCenter(speed);\n  }\n\n  zoomOut(speed = 2) {\n    return this._zoomFromCenter(1 / speed);\n  }\n\n  moveLeft(speed = 100) {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveRight(speed = 100) {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveUp(speed = 100) {\n    return this._panFromCenter([0, speed]);\n  }\n\n  moveDown(speed = 100) {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - speed\n    });\n  }\n\n  shortestPathFrom(viewState) {\n    // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n    const fromProps = viewState.getViewportProps();\n    const props = {...this._viewportProps};\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n\n  _zoomFromCenter(scale) {\n    const {width, height} = this._viewportProps;\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {width, height} = this._viewportProps;\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this._viewportProps,\n      ...this._state,\n      ...newProps\n    });\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize viewport props to fit map height into viewport\n    const {normalize = true} = props;\n    if (normalize) {\n      Object.assign(props, normalizeViewportProps(props));\n    }\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n\n  _getRotationParams(pos, startPos) {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {width, height} = this._viewportProps;\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n    return {deltaScaleX, deltaScaleY};\n  }\n}\n\nexport default class MapController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(MapState, props);\n  }\n\n  setProps(props) {\n    const oldProps = this.controllerStateProps;\n\n    super.setProps(props);\n\n    const dimensionChanged = !oldProps || oldProps.height !== props.height;\n    if (dimensionChanged) {\n      // Dimensions changed, normalize the props\n      this.updateViewport(\n        new this.ControllerState({\n          makeViewport: this.makeViewport,\n          ...this.controllerStateProps,\n          ...this._state\n        })\n      );\n    }\n  }\n\n  get linearTransitionProps() {\n    return ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}