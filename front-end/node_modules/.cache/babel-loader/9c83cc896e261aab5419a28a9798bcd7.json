{"ast":null,"code":"const logState = {\n  attributeUpdateMessages: []\n};\nconst LOG_LEVEL_MAJOR_UPDATE = 1;\nconst LOG_LEVEL_MINOR_UPDATE = 2;\nconst LOG_LEVEL_UPDATE_DETAIL = 3;\nconst LOG_LEVEL_INFO = 4;\nconst LOG_LEVEL_DRAW = 2;\nexport const getLoggers = log => ({\n  'layer.changeFlag': (layer, key, flags) => {\n    log.log(LOG_LEVEL_UPDATE_DETAIL, \"\".concat(layer.id, \" \").concat(key, \": \"), flags[key])();\n  },\n  'layer.initialize': layer => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, \"Initializing \".concat(layer))();\n  },\n  'layer.update': (layer, needsUpdate) => {\n    if (needsUpdate) {\n      const flags = layer.getChangeFlags();\n      log.log(LOG_LEVEL_MINOR_UPDATE, \"Updating \".concat(layer, \" because: \").concat(Object.keys(flags).filter(key => flags[key]).join(', ')))();\n    } else {\n      log.log(LOG_LEVEL_INFO, \"\".concat(layer, \" does not need update\"))();\n    }\n  },\n  'layer.matched': (layer, changed) => {\n    if (changed) {\n      log.log(LOG_LEVEL_INFO, \"Matched \".concat(layer, \", state transfered\"))();\n    }\n  },\n  'layer.finalize': layer => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, \"Finalizing \".concat(layer))();\n  },\n  'compositeLayer.renderLayers': (layer, updated, subLayers) => {\n    if (updated) {\n      log.log(LOG_LEVEL_MINOR_UPDATE, \"Composite layer rendered new subLayers \".concat(layer), subLayers)();\n    } else {\n      log.log(LOG_LEVEL_INFO, \"Composite layer reused subLayers \".concat(layer), subLayers)();\n    }\n  },\n  'layerManager.setLayers': (layerManager, updated, layers) => {\n    if (updated) {\n      log.log(LOG_LEVEL_MINOR_UPDATE, \"Updating \".concat(layers.length, \" deck layers\"))();\n    }\n  },\n  'layerManager.activateViewport': (layerManager, viewport) => {\n    log.log(LOG_LEVEL_UPDATE_DETAIL, 'Viewport changed', viewport)();\n  },\n  'attributeManager.invalidate': (attributeManager, trigger, attributeNames) => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, attributeNames ? \"invalidated attributes \".concat(attributeNames, \" (\").concat(trigger, \") for \").concat(attributeManager.id) : \"invalidated all attributes for \".concat(attributeManager.id))();\n  },\n  'attributeManager.updateStart': attributeManager => {\n    logState.attributeUpdateMessages.length = 0;\n    logState.attributeManagerUpdateStart = Date.now();\n  },\n  'attributeManager.updateEnd': (attributeManager, numInstances) => {\n    const timeMs = Math.round(Date.now() - logState.attributeManagerUpdateStart);\n    log.groupCollapsed(LOG_LEVEL_MINOR_UPDATE, \"Updated attributes for \".concat(numInstances, \" instances in \").concat(attributeManager.id, \" in \").concat(timeMs, \"ms\"))();\n\n    for (const updateMessage of logState.attributeUpdateMessages) {\n      log.log(LOG_LEVEL_UPDATE_DETAIL, updateMessage)();\n    }\n\n    log.groupEnd(LOG_LEVEL_MINOR_UPDATE)();\n  },\n  'attribute.updateStart': attribute => {\n    logState.attributeUpdateStart = Date.now();\n  },\n  'attribute.allocate': (attribute, numInstances) => {\n    const message = \"\".concat(attribute.id, \" allocated \").concat(numInstances);\n    logState.attributeUpdateMessages.push(message);\n  },\n  'attribute.updateEnd': (attribute, numInstances) => {\n    const timeMs = Math.round(Date.now() - logState.attributeUpdateStart);\n    const message = \"\".concat(attribute.id, \" updated \").concat(numInstances, \" in \").concat(timeMs, \"ms\");\n    logState.attributeUpdateMessages.push(message);\n  },\n  'deckRenderer.renderLayers': (deckRenderer, renderStats, opts) => {\n    const {\n      pass,\n      redrawReason,\n      stats\n    } = opts;\n\n    for (const status of renderStats) {\n      const {\n        totalCount,\n        visibleCount,\n        compositeCount,\n        pickableCount\n      } = status;\n      const primitiveCount = totalCount - compositeCount;\n      const hiddenCount = primitiveCount - visibleCount;\n      log.log(LOG_LEVEL_DRAW, \"RENDER #\".concat(deckRenderer.renderCount, \"   \").concat(visibleCount, \" (of \").concat(totalCount, \" layers) to \").concat(pass, \" because \").concat(redrawReason, \"   (\").concat(hiddenCount, \" hidden, \").concat(compositeCount, \" composite \").concat(pickableCount, \" pickable)\"))();\n\n      if (stats) {\n        stats.get('Redraw Layers').add(visibleCount);\n      }\n    }\n  }\n});","map":{"version":3,"sources":["../../../src/debug/loggers.js"],"names":["logState","attributeUpdateMessages","LOG_LEVEL_MAJOR_UPDATE","LOG_LEVEL_MINOR_UPDATE","LOG_LEVEL_UPDATE_DETAIL","LOG_LEVEL_INFO","LOG_LEVEL_DRAW","getLoggers","log","layer","flags","Object","key","layers","attributeNames","attributeManager","Date","timeMs","Math","attribute","message","stats","pickableCount","primitiveCount","totalCount","hiddenCount","deckRenderer"],"mappings":"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","sourcesContent":["const logState = {\n  attributeUpdateMessages: []\n};\n\nconst LOG_LEVEL_MAJOR_UPDATE = 1; // Events with direct perf impact\nconst LOG_LEVEL_MINOR_UPDATE = 2; // Events that may affect perf\nconst LOG_LEVEL_UPDATE_DETAIL = 3;\nconst LOG_LEVEL_INFO = 4;\nconst LOG_LEVEL_DRAW = 2;\n\nexport const getLoggers = log => ({\n  /* Layer events */\n\n  'layer.changeFlag': (layer, key, flags) => {\n    log.log(LOG_LEVEL_UPDATE_DETAIL, `${layer.id} ${key}: `, flags[key])();\n  },\n\n  'layer.initialize': layer => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, `Initializing ${layer}`)();\n  },\n  'layer.update': (layer, needsUpdate) => {\n    if (needsUpdate) {\n      const flags = layer.getChangeFlags();\n      log.log(\n        LOG_LEVEL_MINOR_UPDATE,\n        `Updating ${layer} because: ${Object.keys(flags)\n          .filter(key => flags[key])\n          .join(', ')}`\n      )();\n    } else {\n      log.log(LOG_LEVEL_INFO, `${layer} does not need update`)();\n    }\n  },\n  'layer.matched': (layer, changed) => {\n    if (changed) {\n      log.log(LOG_LEVEL_INFO, `Matched ${layer}, state transfered`)();\n    }\n  },\n  'layer.finalize': layer => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, `Finalizing ${layer}`)();\n  },\n\n  /* CompositeLayer events */\n\n  'compositeLayer.renderLayers': (layer, updated, subLayers) => {\n    if (updated) {\n      log.log(\n        LOG_LEVEL_MINOR_UPDATE,\n        `Composite layer rendered new subLayers ${layer}`,\n        subLayers\n      )();\n    } else {\n      log.log(LOG_LEVEL_INFO, `Composite layer reused subLayers ${layer}`, subLayers)();\n    }\n  },\n\n  /* LayerManager events */\n\n  'layerManager.setLayers': (layerManager, updated, layers) => {\n    if (updated) {\n      log.log(LOG_LEVEL_MINOR_UPDATE, `Updating ${layers.length} deck layers`)();\n    }\n  },\n\n  'layerManager.activateViewport': (layerManager, viewport) => {\n    log.log(LOG_LEVEL_UPDATE_DETAIL, 'Viewport changed', viewport)();\n  },\n\n  /* AttributeManager events */\n\n  'attributeManager.invalidate': (attributeManager, trigger, attributeNames) => {\n    log.log(\n      LOG_LEVEL_MAJOR_UPDATE,\n      attributeNames\n        ? `invalidated attributes ${attributeNames} (${trigger}) for ${attributeManager.id}`\n        : `invalidated all attributes for ${attributeManager.id}`\n    )();\n  },\n\n  'attributeManager.updateStart': attributeManager => {\n    logState.attributeUpdateMessages.length = 0;\n    logState.attributeManagerUpdateStart = Date.now();\n  },\n  'attributeManager.updateEnd': (attributeManager, numInstances) => {\n    const timeMs = Math.round(Date.now() - logState.attributeManagerUpdateStart);\n    log.groupCollapsed(\n      LOG_LEVEL_MINOR_UPDATE,\n      `Updated attributes for ${numInstances} instances in ${attributeManager.id} in ${timeMs}ms`\n    )();\n    for (const updateMessage of logState.attributeUpdateMessages) {\n      log.log(LOG_LEVEL_UPDATE_DETAIL, updateMessage)();\n    }\n    log.groupEnd(LOG_LEVEL_MINOR_UPDATE)();\n  },\n\n  /* Attribute events */\n\n  'attribute.updateStart': attribute => {\n    logState.attributeUpdateStart = Date.now();\n  },\n  'attribute.allocate': (attribute, numInstances) => {\n    const message = `${attribute.id} allocated ${numInstances}`;\n    logState.attributeUpdateMessages.push(message);\n  },\n  'attribute.updateEnd': (attribute, numInstances) => {\n    const timeMs = Math.round(Date.now() - logState.attributeUpdateStart);\n    const message = `${attribute.id} updated ${numInstances} in ${timeMs}ms`;\n    logState.attributeUpdateMessages.push(message);\n  },\n\n  /* Render events */\n\n  'deckRenderer.renderLayers': (deckRenderer, renderStats, opts) => {\n    const {pass, redrawReason, stats} = opts;\n    for (const status of renderStats) {\n      const {totalCount, visibleCount, compositeCount, pickableCount} = status;\n      const primitiveCount = totalCount - compositeCount;\n      const hiddenCount = primitiveCount - visibleCount;\n\n      log.log(\n        LOG_LEVEL_DRAW,\n        `RENDER #${deckRenderer.renderCount} \\\n  ${visibleCount} (of ${totalCount} layers) to ${pass} because ${redrawReason} \\\n  (${hiddenCount} hidden, ${compositeCount} composite ${pickableCount} pickable)`\n      )();\n\n      if (stats) {\n        stats.get('Redraw Layers').add(visibleCount);\n      }\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"module"}