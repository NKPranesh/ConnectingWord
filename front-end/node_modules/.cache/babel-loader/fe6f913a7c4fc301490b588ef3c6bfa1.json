{"ast":null,"code":"import log from '../utils/log';\nimport { createMat4, getCameraPosition, getFrustumPlanes } from '../utils/math-utils';\nimport { Matrix4, Vector3, equals } from 'math.gl';\nimport * as mat4 from 'gl-matrix/mat4';\nimport { getDistanceScales, getMeterZoom, lngLatToWorld, worldToLngLat, worldToPixels, pixelsToWorld } from '@math.gl/web-mercator';\nimport { PROJECTION_MODE } from '../lib/constants';\nconst DEGREES_TO_RADIANS = Math.PI / 180;\nconst IDENTITY = createMat4();\nconst ZERO_VECTOR = [0, 0, 0];\nconst DEFAULT_ZOOM = 0;\nconst DEFAULT_DISTANCE_SCALES = {\n  unitsPerMeter: [1, 1, 1],\n  metersPerUnit: [1, 1, 1]\n};\nexport default class Viewport {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      id = null,\n      x = 0,\n      y = 0,\n      width = 1,\n      height = 1\n    } = opts;\n    this.id = id || this.constructor.displayName || 'viewport';\n    this.x = x;\n    this.y = y;\n    this.width = width || 1;\n    this.height = height || 1;\n    this._frustumPlanes = {};\n\n    this._initViewMatrix(opts);\n\n    this._initProjectionMatrix(opts);\n\n    this._initPixelMatrices();\n\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n  }\n\n  get metersPerPixel() {\n    return this.distanceScales.metersPerUnit[2] / this.scale;\n  }\n\n  get projectionMode() {\n    if (this.isGeospatial) {\n      return this.zoom < 12 ? PROJECTION_MODE.WEB_MERCATOR : PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET;\n    }\n\n    return PROJECTION_MODE.IDENTITY;\n  }\n\n  equals(viewport) {\n    if (!(viewport instanceof Viewport)) {\n      return false;\n    }\n\n    if (this === viewport) {\n      return true;\n    }\n\n    return viewport.width === this.width && viewport.height === this.height && viewport.scale === this.scale && equals(viewport.projectionMatrix, this.projectionMatrix) && equals(viewport.viewMatrix, this.viewMatrix);\n  }\n\n  project(xyz) {\n    let {\n      topLeft = true\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const worldPosition = this.projectPosition(xyz);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  unproject(xyz) {\n    let {\n      topLeft = true,\n      targetZ\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const [x, y, z] = xyz;\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  projectPosition(xyz) {\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n    return [X, Y, Z];\n  }\n\n  projectFlat(xyz) {\n    if (this.isGeospatial) {\n      return lngLatToWorld(xyz);\n    }\n\n    return xyz;\n  }\n\n  unprojectFlat(xyz) {\n    if (this.isGeospatial) {\n      return worldToLngLat(xyz);\n    }\n\n    return xyz;\n  }\n\n  getBounds() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const unprojectOption = {\n      targetZ: options.z || 0\n    };\n    const topLeft = this.unproject([0, 0], unprojectOption);\n    const topRight = this.unproject([this.width, 0], unprojectOption);\n    const bottomLeft = this.unproject([0, this.height], unprojectOption);\n    const bottomRight = this.unproject([this.width, this.height], unprojectOption);\n    return [Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]), Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]), Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]), Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1])];\n  }\n\n  getDistanceScales() {\n    let coordinateOrigin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    if (coordinateOrigin) {\n      return getDistanceScales({\n        longitude: coordinateOrigin[0],\n        latitude: coordinateOrigin[1],\n        highPrecision: true\n      });\n    }\n\n    return this.distanceScales;\n  }\n\n  containsPixel(_ref) {\n    let {\n      x,\n      y,\n      width = 1,\n      height = 1\n    } = _ref;\n    return x < this.x + this.width && this.x < x + width && y < this.y + this.height && this.y < y + height;\n  }\n\n  getFrustumPlanes() {\n    if (this._frustumPlanes.near) {\n      return this._frustumPlanes;\n    }\n\n    Object.assign(this._frustumPlanes, getFrustumPlanes(this.viewProjectionMatrix));\n    return this._frustumPlanes;\n  }\n\n  panByPosition(coords, pixel) {\n    return null;\n  }\n\n  getCameraPosition() {\n    return this.cameraPosition;\n  }\n\n  getCameraDirection() {\n    return this.cameraDirection;\n  }\n\n  getCameraUp() {\n    return this.cameraUp;\n  }\n\n  _createProjectionMatrix(_ref2) {\n    let {\n      orthographic,\n      fovyRadians,\n      aspect,\n      focalDistance,\n      near,\n      far\n    } = _ref2;\n    return orthographic ? new Matrix4().orthographic({\n      fovy: fovyRadians,\n      aspect,\n      focalDistance,\n      near,\n      far\n    }) : new Matrix4().perspective({\n      fovy: fovyRadians,\n      aspect,\n      near,\n      far\n    });\n  }\n\n  _initViewMatrix(opts) {\n    const {\n      viewMatrix = IDENTITY,\n      longitude = null,\n      latitude = null,\n      zoom = null,\n      position = null,\n      modelMatrix = null,\n      focalDistance = 1,\n      distanceScales = null\n    } = opts;\n    this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);\n    this.zoom = zoom;\n\n    if (!Number.isFinite(this.zoom)) {\n      this.zoom = this.isGeospatial ? getMeterZoom({\n        latitude\n      }) + Math.log2(focalDistance) : DEFAULT_ZOOM;\n    }\n\n    const scale = Math.pow(2, this.zoom);\n    this.scale = scale;\n    this.distanceScales = this.isGeospatial ? getDistanceScales({\n      latitude,\n      longitude\n    }) : distanceScales || DEFAULT_DISTANCE_SCALES;\n    this.focalDistance = focalDistance;\n    this.distanceScales.metersPerUnit = new Vector3(this.distanceScales.metersPerUnit);\n    this.distanceScales.unitsPerMeter = new Vector3(this.distanceScales.unitsPerMeter);\n    this.position = ZERO_VECTOR;\n    this.meterOffset = ZERO_VECTOR;\n\n    if (position) {\n      this.position = position;\n      this.modelMatrix = modelMatrix;\n      this.meterOffset = modelMatrix ? modelMatrix.transformVector(position) : position;\n    }\n\n    if (this.isGeospatial) {\n      this.longitude = longitude;\n      this.latitude = latitude;\n      this.center = this._getCenterInWorld({\n        longitude,\n        latitude\n      });\n    } else {\n      this.center = position ? this.projectPosition(position) : [0, 0, 0];\n    }\n\n    this.viewMatrixUncentered = viewMatrix;\n    this.viewMatrix = new Matrix4().multiplyRight(this.viewMatrixUncentered).translate(new Vector3(this.center || ZERO_VECTOR).negate());\n  }\n\n  _getCenterInWorld(_ref3) {\n    let {\n      longitude,\n      latitude\n    } = _ref3;\n    const {\n      meterOffset,\n      distanceScales\n    } = this;\n    const center = new Vector3(this.projectPosition([longitude, latitude, 0]));\n\n    if (meterOffset) {\n      const commonPosition = new Vector3(meterOffset).scale(distanceScales.unitsPerMeter);\n      center.add(commonPosition);\n    }\n\n    return center;\n  }\n\n  _initProjectionMatrix(opts) {\n    const {\n      projectionMatrix = null,\n      orthographic = false,\n      fovyRadians,\n      fovy = 75,\n      near = 0.1,\n      far = 1000,\n      focalDistance = 1\n    } = opts;\n    this.projectionMatrix = projectionMatrix || this._createProjectionMatrix({\n      orthographic,\n      fovyRadians: fovyRadians || fovy * DEGREES_TO_RADIANS,\n      aspect: this.width / this.height,\n      focalDistance,\n      near,\n      far\n    });\n  }\n\n  _initPixelMatrices() {\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, this.projectionMatrix);\n    mat4.multiply(vpm, vpm, this.viewMatrix);\n    this.viewProjectionMatrix = vpm;\n    this.viewMatrixInverse = mat4.invert([], this.viewMatrix) || this.viewMatrix;\n    this.cameraPosition = getCameraPosition(this.viewMatrixInverse);\n    const viewportMatrix = createMat4();\n    const pixelProjectionMatrix = createMat4();\n    mat4.scale(viewportMatrix, viewportMatrix, [this.width / 2, -this.height / 2, 1]);\n    mat4.translate(viewportMatrix, viewportMatrix, [1, -1, 0]);\n    mat4.multiply(pixelProjectionMatrix, viewportMatrix, this.viewProjectionMatrix);\n    this.pixelProjectionMatrix = pixelProjectionMatrix;\n    this.viewportMatrix = viewportMatrix;\n    this.pixelUnprojectionMatrix = mat4.invert(createMat4(), this.pixelProjectionMatrix);\n\n    if (!this.pixelUnprojectionMatrix) {\n      log.warn('Pixel project matrix not invertible')();\n    }\n  }\n\n}\nViewport.displayName = 'Viewport';","map":{"version":3,"sources":["../../../src/viewports/viewport.js"],"names":["DEGREES_TO_RADIANS","Math","IDENTITY","createMat4","ZERO_VECTOR","DEFAULT_ZOOM","DEFAULT_DISTANCE_SCALES","unitsPerMeter","metersPerUnit","constructor","opts","id","x","y","width","height","metersPerPixel","projectionMode","PROJECTION_MODE","equals","viewport","project","topLeft","worldPosition","coord","worldToPixels","y2","xyz","unproject","targetZ","targetZWorld","pixelsToWorld","Number","projectPosition","Z","unprojectPosition","projectFlat","lngLatToWorld","unprojectFlat","worldToLngLat","getBounds","options","unprojectOption","topRight","bottomLeft","bottomRight","getDistanceScales","coordinateOrigin","longitude","latitude","highPrecision","containsPixel","getFrustumPlanes","Object","panByPosition","getCameraPosition","getCameraDirection","getCameraUp","_createProjectionMatrix","far","orthographic","fovy","_initViewMatrix","viewMatrix","zoom","position","modelMatrix","focalDistance","distanceScales","scale","_getCenterInWorld","center","commonPosition","_initProjectionMatrix","projectionMatrix","near","fovyRadians","aspect","_initPixelMatrices","vpm","mat4","viewportMatrix","pixelProjectionMatrix","log","Viewport"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport log from '../utils/log';\nimport {createMat4, getCameraPosition, getFrustumPlanes} from '../utils/math-utils';\n\nimport {Matrix4, Vector3, equals} from 'math.gl';\nimport * as mat4 from 'gl-matrix/mat4';\n\nimport {\n  getDistanceScales,\n  getMeterZoom,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  pixelsToWorld\n} from '@math.gl/web-mercator';\n\nimport {PROJECTION_MODE} from '../lib/constants';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nconst IDENTITY = createMat4();\n\nconst ZERO_VECTOR = [0, 0, 0];\n\nconst DEFAULT_ZOOM = 0;\n\nconst DEFAULT_DISTANCE_SCALES = {\n  unitsPerMeter: [1, 1, 1],\n  metersPerUnit: [1, 1, 1]\n};\n\nexport default class Viewport {\n  /**\n   * @classdesc\n   * Manages coordinate system transformations for deck.gl.\n   *\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  constructor(opts = {}) {\n    const {\n      id = null,\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = 1,\n      height = 1\n    } = opts;\n\n    this.id = id || this.constructor.displayName || 'viewport';\n\n    this.x = x;\n    this.y = y;\n    // Silently allow apps to send in w,h = 0,0\n    this.width = width || 1;\n    this.height = height || 1;\n    this._frustumPlanes = {};\n\n    this._initViewMatrix(opts);\n    this._initProjectionMatrix(opts);\n    this._initPixelMatrices();\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n  }\n\n  get metersPerPixel() {\n    return this.distanceScales.metersPerUnit[2] / this.scale;\n  }\n\n  get projectionMode() {\n    if (this.isGeospatial) {\n      return this.zoom < 12\n        ? PROJECTION_MODE.WEB_MERCATOR\n        : PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET;\n    }\n    return PROJECTION_MODE.IDENTITY;\n  }\n\n  // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n  equals(viewport) {\n    if (!(viewport instanceof Viewport)) {\n      return false;\n    }\n    if (this === viewport) {\n      return true;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      viewport.scale === this.scale &&\n      equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      equals(viewport.viewMatrix, this.viewMatrix)\n    );\n    // TODO - check distance scales?\n  }\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @return {Array} - [x, y] or [x, y, z] in top left coords\n   */\n  project(xyz, {topLeft = true} = {}) {\n    const worldPosition = this.projectPosition(xyz);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, {topLeft = true, targetZ} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition(xyz) {\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n    return [X, Y, Z];\n  }\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   * @param {Array} lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return {Array} [x,y] coordinates.\n   */\n  projectFlat(xyz) {\n    if (this.isGeospatial) {\n      return lngLatToWorld(xyz);\n    }\n    return xyz;\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   * @param {object|Vector} xy - object with {x,y} members\n   *  representing point on projected map plane\n   * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xyz) {\n    if (this.isGeospatial) {\n      return worldToLngLat(xyz);\n    }\n    return xyz;\n  }\n\n  getBounds(options = {}) {\n    const unprojectOption = {targetZ: options.z || 0};\n\n    const topLeft = this.unproject([0, 0], unprojectOption);\n    const topRight = this.unproject([this.width, 0], unprojectOption);\n    const bottomLeft = this.unproject([0, this.height], unprojectOption);\n    const bottomRight = this.unproject([this.width, this.height], unprojectOption);\n\n    return [\n      Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),\n      Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]),\n      Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),\n      Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1])\n    ];\n  }\n\n  getDistanceScales(coordinateOrigin = null) {\n    if (coordinateOrigin) {\n      return getDistanceScales({\n        longitude: coordinateOrigin[0],\n        latitude: coordinateOrigin[1],\n        highPrecision: true\n      });\n    }\n    return this.distanceScales;\n  }\n\n  containsPixel({x, y, width = 1, height = 1}) {\n    return (\n      x < this.x + this.width &&\n      this.x < x + width &&\n      y < this.y + this.height &&\n      this.y < y + height\n    );\n  }\n\n  // Extract frustum planes in common space\n  getFrustumPlanes() {\n    if (this._frustumPlanes.near) {\n      return this._frustumPlanes;\n    }\n\n    Object.assign(this._frustumPlanes, getFrustumPlanes(this.viewProjectionMatrix));\n\n    return this._frustumPlanes;\n  }\n\n  // EXPERIMENTAL METHODS\n\n  /**\n   * Needed by panning and linear transition\n   * Pan the viewport to place a given world coordinate at screen point [x, y]\n   *\n   * @param {Array} coords - world coordinates\n   * @param {Array} pixel - [x,y] coordinates on screen\n   * @return {Object} props of the new viewport\n   */\n  panByPosition(coords, pixel) {\n    return null;\n  }\n\n  getCameraPosition() {\n    return this.cameraPosition;\n  }\n\n  getCameraDirection() {\n    return this.cameraDirection;\n  }\n\n  getCameraUp() {\n    return this.cameraUp;\n  }\n\n  // INTERNAL METHODS\n\n  _createProjectionMatrix({orthographic, fovyRadians, aspect, focalDistance, near, far}) {\n    return orthographic\n      ? new Matrix4().orthographic({fovy: fovyRadians, aspect, focalDistance, near, far})\n      : new Matrix4().perspective({fovy: fovyRadians, aspect, near, far});\n  }\n\n  /* eslint-disable complexity, max-statements */\n  _initViewMatrix(opts) {\n    const {\n      // view matrix\n      viewMatrix = IDENTITY,\n\n      longitude = null, // Anchor: lng lat zoom makes viewport work w/ geospatial coordinate systems\n      latitude = null,\n      zoom = null,\n\n      position = null, // Anchor position offset (in meters for geospatial viewports)\n      modelMatrix = null, // A model matrix to be applied to position, to match the layer props API\n      focalDistance = 1, // Only needed for orthographic views\n\n      distanceScales = null\n    } = opts;\n\n    // Check if we have a geospatial anchor\n    this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);\n\n    this.zoom = zoom;\n    if (!Number.isFinite(this.zoom)) {\n      this.zoom = this.isGeospatial\n        ? getMeterZoom({latitude}) + Math.log2(focalDistance)\n        : DEFAULT_ZOOM;\n    }\n    const scale = Math.pow(2, this.zoom);\n    this.scale = scale;\n\n    // Calculate distance scales if lng/lat/zoom are provided\n    this.distanceScales = this.isGeospatial\n      ? getDistanceScales({latitude, longitude})\n      : distanceScales || DEFAULT_DISTANCE_SCALES;\n\n    this.focalDistance = focalDistance;\n\n    this.distanceScales.metersPerUnit = new Vector3(this.distanceScales.metersPerUnit);\n    this.distanceScales.unitsPerMeter = new Vector3(this.distanceScales.unitsPerMeter);\n\n    this.position = ZERO_VECTOR;\n    this.meterOffset = ZERO_VECTOR;\n    if (position) {\n      // Apply model matrix if supplied\n      this.position = position;\n      this.modelMatrix = modelMatrix;\n      this.meterOffset = modelMatrix ? modelMatrix.transformVector(position) : position;\n    }\n\n    if (this.isGeospatial) {\n      // Determine camera center\n      this.longitude = longitude;\n      this.latitude = latitude;\n      this.center = this._getCenterInWorld({longitude, latitude});\n    } else {\n      this.center = position ? this.projectPosition(position) : [0, 0, 0];\n    }\n    this.viewMatrixUncentered = viewMatrix;\n    // Make a centered version of the matrix for projection modes without an offset\n    this.viewMatrix = new Matrix4()\n      // Apply the uncentered view matrix\n      .multiplyRight(this.viewMatrixUncentered)\n      // And center it\n      .translate(new Vector3(this.center || ZERO_VECTOR).negate());\n  }\n  /* eslint-enable complexity, max-statements */\n\n  _getCenterInWorld({longitude, latitude}) {\n    const {meterOffset, distanceScales} = this;\n\n    // Make a centered version of the matrix for projection modes without an offset\n    const center = new Vector3(this.projectPosition([longitude, latitude, 0]));\n\n    if (meterOffset) {\n      const commonPosition = new Vector3(meterOffset)\n        // Convert to pixels in current zoom\n        .scale(distanceScales.unitsPerMeter);\n      center.add(commonPosition);\n    }\n\n    return center;\n  }\n\n  _initProjectionMatrix(opts) {\n    const {\n      // Projection matrix\n      projectionMatrix = null,\n\n      // Projection matrix parameters, used if projectionMatrix not supplied\n      orthographic = false,\n      fovyRadians,\n      fovy = 75,\n      near = 0.1, // Distance of near clipping plane\n      far = 1000, // Distance of far clipping plane\n      focalDistance = 1\n    } = opts;\n\n    this.projectionMatrix =\n      projectionMatrix ||\n      this._createProjectionMatrix({\n        orthographic,\n        fovyRadians: fovyRadians || fovy * DEGREES_TO_RADIANS,\n        aspect: this.width / this.height,\n        focalDistance,\n        near,\n        far\n      });\n  }\n\n  _initPixelMatrices() {\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, this.projectionMatrix);\n    mat4.multiply(vpm, vpm, this.viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // console.log('VPM', this.viewMatrix, this.projectionMatrix, this.viewProjectionMatrix);\n\n    // Calculate inverse view matrix\n    this.viewMatrixInverse = mat4.invert([], this.viewMatrix) || this.viewMatrix;\n\n    // Decompose camera parameters\n    this.cameraPosition = getCameraPosition(this.viewMatrixInverse);\n\n    /*\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n\n    // matrix for conversion from world location to screen (pixel) coordinates\n    const viewportMatrix = createMat4(); // matrix from NDC to viewport.\n    const pixelProjectionMatrix = createMat4(); // matrix from world space to viewport.\n    mat4.scale(viewportMatrix, viewportMatrix, [this.width / 2, -this.height / 2, 1]);\n    mat4.translate(viewportMatrix, viewportMatrix, [1, -1, 0]);\n    mat4.multiply(pixelProjectionMatrix, viewportMatrix, this.viewProjectionMatrix);\n    this.pixelProjectionMatrix = pixelProjectionMatrix;\n    this.viewportMatrix = viewportMatrix;\n\n    this.pixelUnprojectionMatrix = mat4.invert(createMat4(), this.pixelProjectionMatrix);\n    if (!this.pixelUnprojectionMatrix) {\n      log.warn('Pixel project matrix not invertible')();\n      // throw new Error('Pixel project matrix not invertible');\n    }\n  }\n}\n\nViewport.displayName = 'Viewport';\n"]},"metadata":{},"sourceType":"module"}