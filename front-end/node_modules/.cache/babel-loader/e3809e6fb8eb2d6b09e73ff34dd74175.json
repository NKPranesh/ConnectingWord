{"ast":null,"code":"import { LayerExtension } from '@deck.gl/core';\nimport { shaderModule, shaderModule64 } from './shader-module';\nimport * as aggregator from './aggregator';\nimport { readPixelsToArray, clear } from '@luma.gl/core';\nconst defaultProps = {\n  getFilterValue: {\n    type: 'accessor',\n    value: 0\n  },\n  onFilteredItemsChange: {\n    type: 'function',\n    value: null,\n    compare: false\n  },\n  filterEnabled: true,\n  filterRange: [-1, 1],\n  filterSoftRange: null,\n  filterTransformSize: true,\n  filterTransformColor: true\n};\nconst DATA_TYPE_FROM_SIZE = {\n  1: 'float',\n  2: 'vec2',\n  3: 'vec3',\n  4: 'vec4'\n};\nexport default class DataFilterExtension extends LayerExtension {\n  constructor() {\n    let {\n      filterSize = 1,\n      fp64 = false,\n      countItems = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!DATA_TYPE_FROM_SIZE[filterSize]) {\n      throw new Error('filterSize out of range');\n    }\n\n    super({\n      filterSize,\n      fp64,\n      countItems\n    });\n  }\n\n  getShaders(extension) {\n    const {\n      filterSize,\n      fp64\n    } = extension.opts;\n    return {\n      modules: [fp64 ? shaderModule64 : shaderModule],\n      defines: {\n        DATAFILTER_TYPE: DATA_TYPE_FROM_SIZE[filterSize],\n        DATAFILTER_DOUBLE: Boolean(fp64)\n      }\n    };\n  }\n\n  initializeState(context, extension) {\n    const attributeManager = this.getAttributeManager();\n\n    if (attributeManager) {\n      attributeManager.add({\n        filterValues: {\n          size: extension.opts.filterSize,\n          type: extension.opts.fp64 ? 5130 : 5126,\n          accessor: 'getFilterValue',\n          shaderAttributes: {\n            filterValues: {\n              divisor: 0\n            },\n            instanceFilterValues: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n\n    const {\n      gl\n    } = this.context;\n\n    if (attributeManager && extension.opts.countItems) {\n      const useFloatTarget = aggregator.supportsFloatTarget(gl);\n      attributeManager.add({\n        filterIndices: {\n          size: useFloatTarget ? 1 : 2,\n          vertexOffset: 1,\n          type: 5121,\n          normalized: true,\n          accessor: (object, _ref) => {\n            let {\n              index\n            } = _ref;\n            const i = object && object.__source ? object.__source.index : index;\n            return useFloatTarget ? (i + 1) % 255 : [(i + 1) % 255, Math.floor(i / 255) % 255];\n          },\n          shaderAttributes: {\n            filterPrevIndices: {\n              vertexOffset: 0\n            },\n            filterIndices: {\n              vertexOffset: 1\n            }\n          }\n        }\n      });\n      const filterFBO = aggregator.getFramebuffer(gl, useFloatTarget);\n      const filterModel = aggregator.getModel(gl, extension.getShaders(extension), useFloatTarget);\n      this.setState({\n        filterFBO,\n        filterModel\n      });\n    }\n  }\n\n  updateState(_ref2) {\n    let {\n      props,\n      oldProps\n    } = _ref2;\n\n    if (this.state.filterModel) {\n      const attributeManager = this.getAttributeManager();\n      const filterNeedsUpdate = attributeManager.attributes.filterValues.needsUpdate() || props.filterEnabled !== oldProps.filterEnabled || props.filterRange !== oldProps.filterRange || props.filterSoftRange !== oldProps.filterSoftRange;\n\n      if (filterNeedsUpdate) {\n        this.setState({\n          filterNeedsUpdate\n        });\n      }\n    }\n  }\n\n  draw(params, extension) {\n    const {\n      filterFBO,\n      filterModel,\n      filterNeedsUpdate\n    } = this.state;\n    const {\n      onFilteredItemsChange\n    } = this.props;\n\n    if (filterNeedsUpdate && onFilteredItemsChange && filterModel) {\n      const {\n        attributes: {\n          filterValues,\n          filterIndices\n        }\n      } = this.getAttributeManager();\n      filterModel.setVertexCount(this.getNumInstances());\n      const {\n        gl\n      } = this.context;\n      clear(gl, {\n        framebuffer: filterFBO,\n        color: [0, 0, 0, 0]\n      });\n      filterModel.updateModuleSettings(params.moduleParameters).setAttributes({ ...filterValues.getShaderAttributes(),\n        ...(filterIndices && filterIndices.getShaderAttributes())\n      }).draw({\n        framebuffer: filterFBO,\n        parameters: { ...aggregator.parameters,\n          viewport: [0, 0, filterFBO.width, filterFBO.height]\n        }\n      });\n      const color = readPixelsToArray(filterFBO);\n      let count = 0;\n\n      for (let i = 0; i < color.length; i++) {\n        count += color[i];\n      }\n\n      onFilteredItemsChange({\n        id: this.id,\n        count\n      });\n      this.state.filterNeedsUpdate = false;\n    }\n  }\n\n  finalizeState() {\n    const {\n      filterFBO,\n      filterModel\n    } = this.state;\n\n    if (filterFBO) {\n      filterFBO.color.delete();\n      filterFBO.delete();\n      filterModel.delete();\n    }\n  }\n\n}\nDataFilterExtension.extensionName = 'DataFilterExtension';\nDataFilterExtension.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/data-filter/data-filter.js"],"names":["defaultProps","getFilterValue","type","value","onFilteredItemsChange","compare","filterEnabled","filterRange","filterSoftRange","filterTransformSize","filterTransformColor","DATA_TYPE_FROM_SIZE","constructor","filterSize","fp64","countItems","getShaders","extension","modules","defines","DATAFILTER_TYPE","DATAFILTER_DOUBLE","Boolean","initializeState","attributeManager","filterValues","size","accessor","shaderAttributes","divisor","instanceFilterValues","gl","useFloatTarget","aggregator","filterIndices","vertexOffset","normalized","index","i","object","Math","filterPrevIndices","filterFBO","filterModel","updateState","oldProps","filterNeedsUpdate","props","draw","attributes","clear","framebuffer","color","params","parameters","viewport","readPixelsToArray","count","id","finalizeState","DataFilterExtension"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension} from '@deck.gl/core';\nimport {shaderModule, shaderModule64} from './shader-module';\nimport * as aggregator from './aggregator';\nimport {readPixelsToArray, clear} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nconst defaultProps = {\n  getFilterValue: {type: 'accessor', value: 0},\n  onFilteredItemsChange: {type: 'function', value: null, compare: false},\n\n  filterEnabled: true,\n  filterRange: [-1, 1],\n  filterSoftRange: null,\n  filterTransformSize: true,\n  filterTransformColor: true\n};\n\nconst DATA_TYPE_FROM_SIZE = {\n  1: 'float',\n  2: 'vec2',\n  3: 'vec3',\n  4: 'vec4'\n};\n\nexport default class DataFilterExtension extends LayerExtension {\n  constructor({filterSize = 1, fp64 = false, countItems = false} = {}) {\n    if (!DATA_TYPE_FROM_SIZE[filterSize]) {\n      throw new Error('filterSize out of range');\n    }\n\n    super({filterSize, fp64, countItems});\n  }\n\n  getShaders(extension) {\n    const {filterSize, fp64} = extension.opts;\n\n    return {\n      modules: [fp64 ? shaderModule64 : shaderModule],\n      defines: {\n        DATAFILTER_TYPE: DATA_TYPE_FROM_SIZE[filterSize],\n        DATAFILTER_DOUBLE: Boolean(fp64)\n      }\n    };\n  }\n\n  initializeState(context, extension) {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.add({\n        filterValues: {\n          size: extension.opts.filterSize,\n          type: extension.opts.fp64 ? GL.DOUBLE : GL.FLOAT,\n          accessor: 'getFilterValue',\n          shaderAttributes: {\n            filterValues: {\n              divisor: 0\n            },\n            instanceFilterValues: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n\n    const {gl} = this.context;\n    if (attributeManager && extension.opts.countItems) {\n      const useFloatTarget = aggregator.supportsFloatTarget(gl);\n      // This attribute is needed for variable-width data, e.g. Path, SolidPolygon, Text\n      // The vertex shader checks if a vertex has the same \"index\" as the previous vertex\n      // so that we only write one count cross multiple vertices of the same object\n      attributeManager.add({\n        filterIndices: {\n          size: useFloatTarget ? 1 : 2,\n          vertexOffset: 1,\n          type: GL.UNSIGNED_BYTE,\n          normalized: true,\n          accessor: (object, {index}) => {\n            const i = object && object.__source ? object.__source.index : index;\n            return useFloatTarget ? (i + 1) % 255 : [(i + 1) % 255, Math.floor(i / 255) % 255];\n          },\n          shaderAttributes: {\n            filterPrevIndices: {\n              vertexOffset: 0\n            },\n            filterIndices: {\n              vertexOffset: 1\n            }\n          }\n        }\n      });\n\n      const filterFBO = aggregator.getFramebuffer(gl, useFloatTarget);\n      const filterModel = aggregator.getModel(gl, extension.getShaders(extension), useFloatTarget);\n      this.setState({filterFBO, filterModel});\n    }\n  }\n\n  updateState({props, oldProps}) {\n    if (this.state.filterModel) {\n      const attributeManager = this.getAttributeManager();\n      const filterNeedsUpdate =\n        attributeManager.attributes.filterValues.needsUpdate() ||\n        props.filterEnabled !== oldProps.filterEnabled ||\n        props.filterRange !== oldProps.filterRange ||\n        props.filterSoftRange !== oldProps.filterSoftRange;\n      if (filterNeedsUpdate) {\n        this.setState({filterNeedsUpdate});\n      }\n    }\n  }\n\n  draw(params, extension) {\n    const {filterFBO, filterModel, filterNeedsUpdate} = this.state;\n    const {onFilteredItemsChange} = this.props;\n    if (filterNeedsUpdate && onFilteredItemsChange && filterModel) {\n      const {\n        attributes: {filterValues, filterIndices}\n      } = this.getAttributeManager();\n      filterModel.setVertexCount(this.getNumInstances());\n\n      const {gl} = this.context;\n      clear(gl, {framebuffer: filterFBO, color: [0, 0, 0, 0]});\n\n      filterModel\n        .updateModuleSettings(params.moduleParameters)\n        .setAttributes({\n          ...filterValues.getShaderAttributes(),\n          ...(filterIndices && filterIndices.getShaderAttributes())\n        })\n        .draw({\n          framebuffer: filterFBO,\n          parameters: {\n            ...aggregator.parameters,\n            viewport: [0, 0, filterFBO.width, filterFBO.height]\n          }\n        });\n      const color = readPixelsToArray(filterFBO);\n      let count = 0;\n      for (let i = 0; i < color.length; i++) {\n        count += color[i];\n      }\n      onFilteredItemsChange({id: this.id, count});\n\n      this.state.filterNeedsUpdate = false;\n    }\n  }\n\n  finalizeState() {\n    const {filterFBO, filterModel} = this.state;\n    if (filterFBO) {\n      filterFBO.color.delete();\n      filterFBO.delete();\n      filterModel.delete();\n    }\n  }\n}\n\nDataFilterExtension.extensionName = 'DataFilterExtension';\nDataFilterExtension.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}