{"ast":null,"code":"import { isResponse, isBlob } from '../../javascript-utils/is-type';\nimport { parseMIMEType, parseMIMETypeFromURL } from './mime-type-utils';\nconst QUERY_STRING_PATTERN = /\\?.*/;\nexport function getResourceUrlAndType(resource) {\n  if (isResponse(resource)) {\n    const url = stripQueryString(resource.url || '');\n    const contentTypeHeader = resource.headers.get('content-type') || '';\n    return {\n      url,\n      type: parseMIMEType(contentTypeHeader) || parseMIMETypeFromURL(url)\n    };\n  }\n\n  if (isBlob(resource)) {\n    return {\n      url: stripQueryString(resource.name || ''),\n      type: resource.type || ''\n    };\n  }\n\n  if (typeof resource === 'string') {\n    return {\n      url: stripQueryString(resource),\n      type: parseMIMETypeFromURL(resource)\n    };\n  }\n\n  return {\n    url: '',\n    type: ''\n  };\n}\nexport function getResourceContentLength(resource) {\n  if (isResponse(resource)) {\n    return resource.headers['content-length'] || -1;\n  }\n\n  if (isBlob(resource)) {\n    return resource.size;\n  }\n\n  if (typeof resource === 'string') {\n    return resource.length;\n  }\n\n  if (resource instanceof ArrayBuffer) {\n    return resource.byteLength;\n  }\n\n  if (ArrayBuffer.isView(resource)) {\n    return resource.byteLength;\n  }\n\n  return -1;\n}\n\nfunction stripQueryString(url) {\n  return url.replace(QUERY_STRING_PATTERN, '');\n}","map":{"version":3,"sources":["../../../../src/lib/utils/resource-utils.ts"],"names":["QUERY_STRING_PATTERN","isResponse","url","stripQueryString","resource","contentTypeHeader","type","parseMIMEType","parseMIMETypeFromURL","isBlob","ArrayBuffer"],"mappings":"AAAA,SAAA,UAAA,EAAA,MAAA,QAAA,gCAAA;AACA,SAAA,aAAA,EAAA,oBAAA,QAAA,mBAAA;AAEA,MAAMA,oBAAoB,GAA1B,MAAA;AAUA,OAAO,SAAA,qBAAA,CAAA,QAAA,EAA2E;AAEhF,MAAIC,UAAU,CAAd,QAAc,CAAd,EAA0B;AACxB,UAAMC,GAAG,GAAGC,gBAAgB,CAACC,QAAQ,CAARA,GAAAA,IAA7B,EAA4B,CAA5B;AACA,UAAMC,iBAAiB,GAAGD,QAAQ,CAARA,OAAAA,CAAAA,GAAAA,CAAAA,cAAAA,KAA1B,EAAA;AACA,WAAO;AAAA,MAAA,GAAA;AAELE,MAAAA,IAAI,EAAEC,aAAa,CAAbA,iBAAa,CAAbA,IAAoCC,oBAAoB,CAAA,GAAA;AAFzD,KAAP;AAID;;AAGD,MAAIC,MAAM,CAAV,QAAU,CAAV,EAAsB;AACpB,WAAO;AAGLP,MAAAA,GAAG,EAAEC,gBAAgB,CAACC,QAAQ,CAARA,IAAAA,IAHjB,EAGgB,CAHhB;AAILE,MAAAA,IAAI,EAAEF,QAAQ,CAARA,IAAAA,IAAiB;AAJlB,KAAP;AAMD;;AAED,MAAI,OAAA,QAAA,KAAJ,QAAA,EAAkC;AAChC,WAAO;AAELF,MAAAA,GAAG,EAAEC,gBAAgB,CAFhB,QAEgB,CAFhB;AAILG,MAAAA,IAAI,EAAEE,oBAAoB,CAAA,QAAA;AAJrB,KAAP;AAMD;;AAGD,SAAO;AACLN,IAAAA,GAAG,EADE,EAAA;AAELI,IAAAA,IAAI,EAAE;AAFD,GAAP;AAID;AASD,OAAO,SAAA,wBAAA,CAAA,QAAA,EAAyD;AAC9D,MAAIL,UAAU,CAAd,QAAc,CAAd,EAA0B;AACxB,WAAOG,QAAQ,CAARA,OAAAA,CAAAA,gBAAAA,KAAsC,CAA7C,CAAA;AACD;;AACD,MAAIK,MAAM,CAAV,QAAU,CAAV,EAAsB;AACpB,WAAOL,QAAQ,CAAf,IAAA;AACD;;AACD,MAAI,OAAA,QAAA,KAAJ,QAAA,EAAkC;AAEhC,WAAOA,QAAQ,CAAf,MAAA;AACD;;AACD,MAAIA,QAAQ,YAAZ,WAAA,EAAqC;AACnC,WAAOA,QAAQ,CAAf,UAAA;AACD;;AACD,MAAIM,WAAW,CAAXA,MAAAA,CAAJ,QAAIA,CAAJ,EAAkC;AAChC,WAAON,QAAQ,CAAf,UAAA;AACD;;AACD,SAAO,CAAP,CAAA;AACD;;AAED,SAAA,gBAAA,CAAA,GAAA,EAA+B;AAC7B,SAAOF,GAAG,CAAHA,OAAAA,CAAAA,oBAAAA,EAAP,EAAOA,CAAP;AACD","sourcesContent":["import {isResponse, isBlob} from '../../javascript-utils/is-type';\nimport {parseMIMEType, parseMIMETypeFromURL} from './mime-type-utils';\n\nconst QUERY_STRING_PATTERN = /\\?.*/;\n\n/**\n * Returns an object with `url` and (MIME) `type` fields\n * If it cannot determine url or type, the corresponding value will be an empty string\n *\n * @param resource Any type, but only Responses, string URLs and data URLs are processed\n *\n * @todo string parameters are assumed to be URLs\n */\nexport function getResourceUrlAndType(resource: any): {url: string; type: string} {\n  // If resource is a response, it contains the information directly\n  if (isResponse(resource)) {\n    const url = stripQueryString(resource.url || '');\n    const contentTypeHeader = resource.headers.get('content-type') || '';\n    return {\n      url,\n      type: parseMIMEType(contentTypeHeader) || parseMIMETypeFromURL(url)\n    };\n  }\n\n  // If the resource is a Blob or a File (subclass of Blob)\n  if (isBlob(resource)) {\n    return {\n      // File objects have a \"name\" property. Blob objects don't have any\n      // url (name) information\n      url: stripQueryString(resource.name || ''),\n      type: resource.type || ''\n    };\n  }\n\n  if (typeof resource === 'string') {\n    return {\n      // TODO this could mess up data URL but it doesn't matter as it is just used for inference\n      url: stripQueryString(resource),\n      // If a data url\n      type: parseMIMETypeFromURL(resource)\n    };\n  }\n\n  // Unknown\n  return {\n    url: '',\n    type: ''\n  };\n}\n\n/**\n  * Returns (approximate) content length for a resource if it can be determined.\n  * Returns -1 if content length cannot be determined.\n  * @param resource\n\n  * @note string parameters are NOT assumed to be URLs\n  */\nexport function getResourceContentLength(resource: any): number {\n  if (isResponse(resource)) {\n    return resource.headers['content-length'] || -1;\n  }\n  if (isBlob(resource)) {\n    return resource.size;\n  }\n  if (typeof resource === 'string') {\n    // TODO - handle data URL?\n    return resource.length;\n  }\n  if (resource instanceof ArrayBuffer) {\n    return resource.byteLength;\n  }\n  if (ArrayBuffer.isView(resource)) {\n    return resource.byteLength;\n  }\n  return -1;\n}\n\nfunction stripQueryString(url) {\n  return url.replace(QUERY_STRING_PATTERN, '');\n}\n"]},"metadata":{},"sourceType":"module"}