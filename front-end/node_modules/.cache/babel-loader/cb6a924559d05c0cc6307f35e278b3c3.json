{"ast":null,"code":"import { PROP_SYMBOLS } from './constants';\nconst {\n  COMPONENT\n} = PROP_SYMBOLS;\nexport function validateProps(props) {\n  const propTypes = getPropTypes(props);\n\n  for (const propName in propTypes) {\n    const propType = propTypes[propName];\n    const {\n      validate\n    } = propType;\n\n    if (validate && !validate(props[propName], propType)) {\n      throw new Error(\"Invalid prop \".concat(propName, \": \").concat(props[propName]));\n    }\n  }\n}\nexport function diffProps(props, oldProps) {\n  const propsChangedReason = compareProps({\n    newProps: props,\n    oldProps,\n    propTypes: getPropTypes(props),\n    ignoreProps: {\n      data: null,\n      updateTriggers: null,\n      extensions: null,\n      transitions: null\n    }\n  });\n  const dataChangedReason = diffDataProps(props, oldProps);\n  let updateTriggersChangedReason = false;\n\n  if (!dataChangedReason) {\n    updateTriggersChangedReason = diffUpdateTriggers(props, oldProps);\n  }\n\n  return {\n    dataChanged: dataChangedReason,\n    propsChanged: propsChangedReason,\n    updateTriggersChanged: updateTriggersChangedReason,\n    extensionsChanged: diffExtensions(props, oldProps),\n    transitionsChanged: diffTransitions(props, oldProps)\n  };\n}\n\nfunction diffTransitions(props, oldProps) {\n  if (!props.transitions) {\n    return null;\n  }\n\n  const result = {};\n  const propTypes = getPropTypes(props);\n\n  for (const key in props.transitions) {\n    const propType = propTypes[key];\n    const type = propType && propType.type;\n    const isTransitionable = type === 'number' || type === 'color' || type === 'array';\n\n    if (isTransitionable && comparePropValues(props[key], oldProps[key], propType)) {\n      result[key] = true;\n    }\n  }\n\n  return result;\n}\n\nexport function compareProps() {\n  let {\n    newProps,\n    oldProps,\n    ignoreProps = {},\n    propTypes = {},\n    triggerName = 'props'\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (oldProps === newProps) {\n    return null;\n  }\n\n  if (typeof newProps !== 'object' || newProps === null) {\n    return \"\".concat(triggerName, \" changed shallowly\");\n  }\n\n  if (typeof oldProps !== 'object' || oldProps === null) {\n    return \"\".concat(triggerName, \" changed shallowly\");\n  }\n\n  for (const key of Object.keys(newProps)) {\n    if (!(key in ignoreProps)) {\n      if (!(key in oldProps)) {\n        return \"\".concat(triggerName, \".\").concat(key, \" added\");\n      }\n\n      const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);\n\n      if (changed) {\n        return \"\".concat(triggerName, \".\").concat(key, \" \").concat(changed);\n      }\n    }\n  }\n\n  for (const key of Object.keys(oldProps)) {\n    if (!(key in ignoreProps)) {\n      if (!(key in newProps)) {\n        return \"\".concat(triggerName, \".\").concat(key, \" dropped\");\n      }\n\n      if (!Object.hasOwnProperty.call(newProps, key)) {\n        const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);\n\n        if (changed) {\n          return \"\".concat(triggerName, \".\").concat(key, \" \").concat(changed);\n        }\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction comparePropValues(newProp, oldProp, propType) {\n  let equal = propType && propType.equal;\n\n  if (equal && !equal(newProp, oldProp, propType)) {\n    return 'changed deeply';\n  }\n\n  if (!equal) {\n    equal = newProp && oldProp && newProp.equals;\n\n    if (equal && !equal.call(newProp, oldProp)) {\n      return 'changed deeply';\n    }\n  }\n\n  if (!equal && oldProp !== newProp) {\n    return 'changed shallowly';\n  }\n\n  return null;\n}\n\nfunction diffDataProps(props, oldProps) {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  let dataChanged = null;\n  const {\n    dataComparator,\n    _dataDiff\n  } = props;\n\n  if (dataComparator) {\n    if (!dataComparator(props.data, oldProps.data)) {\n      dataChanged = 'Data comparator detected a change';\n    }\n  } else if (props.data !== oldProps.data) {\n    dataChanged = 'A new data container was supplied';\n  }\n\n  if (dataChanged && _dataDiff) {\n    dataChanged = _dataDiff(props.data, oldProps.data) || dataChanged;\n  }\n\n  return dataChanged;\n}\n\nfunction diffUpdateTriggers(props, oldProps) {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  if ('all' in props.updateTriggers) {\n    const diffReason = diffUpdateTrigger(props, oldProps, 'all');\n\n    if (diffReason) {\n      return {\n        all: true\n      };\n    }\n  }\n\n  const triggerChanged = {};\n  let reason = false;\n\n  for (const triggerName in props.updateTriggers) {\n    if (triggerName !== 'all') {\n      const diffReason = diffUpdateTrigger(props, oldProps, triggerName);\n\n      if (diffReason) {\n        triggerChanged[triggerName] = true;\n        reason = triggerChanged;\n      }\n    }\n  }\n\n  return reason;\n}\n\nfunction diffExtensions(props, oldProps) {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  const oldExtensions = oldProps.extensions;\n  const {\n    extensions\n  } = props;\n\n  if (extensions === oldExtensions) {\n    return false;\n  }\n\n  if (extensions.length !== oldExtensions.length) {\n    return true;\n  }\n\n  for (let i = 0; i < extensions.length; i++) {\n    if (!extensions[i].equals(oldExtensions[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction diffUpdateTrigger(props, oldProps, triggerName) {\n  let newTriggers = props.updateTriggers[triggerName];\n  newTriggers = newTriggers === undefined || newTriggers === null ? {} : newTriggers;\n  let oldTriggers = oldProps.updateTriggers[triggerName];\n  oldTriggers = oldTriggers === undefined || oldTriggers === null ? {} : oldTriggers;\n  const diffReason = compareProps({\n    oldProps: oldTriggers,\n    newProps: newTriggers,\n    triggerName\n  });\n  return diffReason;\n}\n\nfunction getPropTypes(props) {\n  const layer = props[COMPONENT];\n  const LayerType = layer && layer.constructor;\n  return LayerType ? LayerType._propTypes : {};\n}","map":{"version":3,"sources":["../../../src/lifecycle/props.js"],"names":["COMPONENT","propTypes","getPropTypes","propType","validate","props","propsChangedReason","compareProps","newProps","ignoreProps","data","updateTriggers","extensions","transitions","dataChangedReason","diffDataProps","updateTriggersChangedReason","diffUpdateTriggers","dataChanged","propsChanged","updateTriggersChanged","extensionsChanged","diffExtensions","transitionsChanged","diffTransitions","result","type","isTransitionable","comparePropValues","oldProps","triggerName","Object","key","changed","equal","newProp","oldProp","_dataDiff","dataComparator","diffReason","diffUpdateTrigger","all","triggerChanged","reason","oldExtensions","i","newTriggers","oldTriggers","layer","LayerType"],"mappings":"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","sourcesContent":["import {PROP_SYMBOLS} from './constants';\n\nconst {COMPONENT} = PROP_SYMBOLS;\n\nexport function validateProps(props) {\n  const propTypes = getPropTypes(props);\n\n  for (const propName in propTypes) {\n    const propType = propTypes[propName];\n    const {validate} = propType;\n    if (validate && !validate(props[propName], propType)) {\n      throw new Error(`Invalid prop ${propName}: ${props[propName]}`);\n    }\n  }\n}\n\n// Returns an object with \"change flags\", either false or strings indicating reason for change\nexport function diffProps(props, oldProps) {\n  // First check if any props have changed (ignore props that will be examined separately)\n  const propsChangedReason = compareProps({\n    newProps: props,\n    oldProps,\n    propTypes: getPropTypes(props),\n    ignoreProps: {data: null, updateTriggers: null, extensions: null, transitions: null}\n  });\n\n  // Now check if any data related props have changed\n  const dataChangedReason = diffDataProps(props, oldProps);\n\n  // Check update triggers to determine if any attributes need regeneration\n  // Note - if data has changed, all attributes will need regeneration, so skip this step\n  let updateTriggersChangedReason = false;\n  if (!dataChangedReason) {\n    updateTriggersChangedReason = diffUpdateTriggers(props, oldProps);\n  }\n\n  return {\n    dataChanged: dataChangedReason,\n    propsChanged: propsChangedReason,\n    updateTriggersChanged: updateTriggersChangedReason,\n    extensionsChanged: diffExtensions(props, oldProps),\n    transitionsChanged: diffTransitions(props, oldProps)\n  };\n}\n\nfunction diffTransitions(props, oldProps) {\n  if (!props.transitions) {\n    return null;\n  }\n  const result = {};\n  const propTypes = getPropTypes(props);\n\n  for (const key in props.transitions) {\n    const propType = propTypes[key];\n    const type = propType && propType.type;\n    const isTransitionable = type === 'number' || type === 'color' || type === 'array';\n    if (isTransitionable && comparePropValues(props[key], oldProps[key], propType)) {\n      result[key] = true;\n    }\n  }\n  return result;\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * @param {Object} opt.oldProps - object with old key/value pairs\n * @param {Object} opt.newProps - object with new key/value pairs\n * @param {Object} opt.ignoreProps={} - object, keys that should not be compared\n * @returns {null|String} - null when values of all keys are strictly equal.\n *   if unequal, returns a string explaining what changed.\n */\n/* eslint-disable max-statements, max-depth, complexity */\n/*\n * Note: for better performance, this function assumes that both oldProps and newProps\n   inherit the same prototype (defaultProps). That is, if neither object contains own\n   property <key>, assume `oldProps.<key>` and `newProps.<key>` are equal.\n */\nexport function compareProps({\n  newProps,\n  oldProps,\n  ignoreProps = {},\n  propTypes = {},\n  triggerName = 'props'\n} = {}) {\n  // shallow equality => deep equality\n  if (oldProps === newProps) {\n    return null;\n  }\n\n  // TODO - do we need these checks? Should never happen...\n  if (typeof newProps !== 'object' || newProps === null) {\n    return `${triggerName} changed shallowly`;\n  }\n\n  if (typeof oldProps !== 'object' || oldProps === null) {\n    return `${triggerName} changed shallowly`;\n  }\n\n  // Compare explicitly defined new props against old/default values\n  for (const key of Object.keys(newProps)) {\n    if (!(key in ignoreProps)) {\n      if (!(key in oldProps)) {\n        return `${triggerName}.${key} added`;\n      }\n      const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);\n      if (changed) {\n        return `${triggerName}.${key} ${changed}`;\n      }\n    }\n  }\n\n  // Test if any old props have been dropped\n  for (const key of Object.keys(oldProps)) {\n    if (!(key in ignoreProps)) {\n      if (!(key in newProps)) {\n        return `${triggerName}.${key} dropped`;\n      }\n      if (!Object.hasOwnProperty.call(newProps, key)) {\n        // Compare dropped old prop against default value\n        const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);\n        if (changed) {\n          return `${triggerName}.${key} ${changed}`;\n        }\n      }\n    }\n  }\n\n  return null;\n}\n/* eslint-enable max-statements, max-depth, complexity */\n\n// HELPERS\nfunction comparePropValues(newProp, oldProp, propType) {\n  // If prop type has an equal function, invoke it\n  let equal = propType && propType.equal;\n  if (equal && !equal(newProp, oldProp, propType)) {\n    return 'changed deeply';\n  }\n\n  if (!equal) {\n    // If object has an equals function, invoke it\n    equal = newProp && oldProp && newProp.equals;\n    if (equal && !equal.call(newProp, oldProp)) {\n      return 'changed deeply';\n    }\n  }\n\n  if (!equal && oldProp !== newProp) {\n    return 'changed shallowly';\n  }\n\n  return null;\n}\n\n// The comparison of the data prop requires special handling\n// the dataComparator should be used if supplied\nfunction diffDataProps(props, oldProps) {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  let dataChanged = null;\n  // Support optional app defined comparison of data\n  const {dataComparator, _dataDiff} = props;\n  if (dataComparator) {\n    if (!dataComparator(props.data, oldProps.data)) {\n      dataChanged = 'Data comparator detected a change';\n    }\n    // Otherwise, do a shallow equal on props\n  } else if (props.data !== oldProps.data) {\n    dataChanged = 'A new data container was supplied';\n  }\n  if (dataChanged && _dataDiff) {\n    dataChanged = _dataDiff(props.data, oldProps.data) || dataChanged;\n  }\n\n  return dataChanged;\n}\n\n// Checks if any update triggers have changed\n// also calls callback to invalidate attributes accordingly.\nfunction diffUpdateTriggers(props, oldProps) {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  // If the 'all' updateTrigger fires, ignore testing others\n  if ('all' in props.updateTriggers) {\n    const diffReason = diffUpdateTrigger(props, oldProps, 'all');\n    if (diffReason) {\n      return {all: true};\n    }\n  }\n\n  const triggerChanged = {};\n  let reason = false;\n  // If the 'all' updateTrigger didn't fire, need to check all others\n  for (const triggerName in props.updateTriggers) {\n    if (triggerName !== 'all') {\n      const diffReason = diffUpdateTrigger(props, oldProps, triggerName);\n      if (diffReason) {\n        triggerChanged[triggerName] = true;\n        reason = triggerChanged;\n      }\n    }\n  }\n\n  return reason;\n}\n\n// Returns true if any extensions have changed\nfunction diffExtensions(props, oldProps) {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  const oldExtensions = oldProps.extensions;\n  const {extensions} = props;\n\n  if (extensions === oldExtensions) {\n    return false;\n  }\n  if (extensions.length !== oldExtensions.length) {\n    return true;\n  }\n  for (let i = 0; i < extensions.length; i++) {\n    if (!extensions[i].equals(oldExtensions[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction diffUpdateTrigger(props, oldProps, triggerName) {\n  let newTriggers = props.updateTriggers[triggerName];\n  newTriggers = newTriggers === undefined || newTriggers === null ? {} : newTriggers;\n  let oldTriggers = oldProps.updateTriggers[triggerName];\n  oldTriggers = oldTriggers === undefined || oldTriggers === null ? {} : oldTriggers;\n  const diffReason = compareProps({\n    oldProps: oldTriggers,\n    newProps: newTriggers,\n    triggerName\n  });\n  return diffReason;\n}\n\nfunction getPropTypes(props) {\n  const layer = props[COMPONENT];\n  const LayerType = layer && layer.constructor;\n  return LayerType ? LayerType._propTypes : {};\n}\n"]},"metadata":{},"sourceType":"module"}