{"ast":null,"code":"import { isSVG, getBlob } from './svg-utils';\nimport parseToImage from './parse-to-image';\nconst EMPTY_OBJECT = {};\nlet imagebitmapOptionsSupported = true;\nexport default async function parseToImageBitmap(arrayBuffer, options, url) {\n  let blob;\n\n  if (isSVG(url)) {\n    const image = await parseToImage(arrayBuffer, options, url);\n    blob = image;\n  } else {\n    blob = getBlob(arrayBuffer, url);\n  }\n\n  const imagebitmapOptions = options && options.imagebitmap;\n  return await safeCreateImageBitmap(blob, imagebitmapOptions);\n}\n\nasync function safeCreateImageBitmap(blob) {\n  let imagebitmapOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (isEmptyObject(imagebitmapOptions) || !imagebitmapOptionsSupported) {\n    imagebitmapOptions = null;\n  }\n\n  if (imagebitmapOptions) {\n    try {\n      return await createImageBitmap(blob, imagebitmapOptions);\n    } catch (error) {\n      console.warn(error);\n      imagebitmapOptionsSupported = false;\n    }\n  }\n\n  return await createImageBitmap(blob);\n}\n\nfunction isEmptyObject(object) {\n  for (const key in object || EMPTY_OBJECT) {\n    return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-to-image-bitmap.ts"],"names":["EMPTY_OBJECT","imagebitmapOptionsSupported","isSVG","image","parseToImage","blob","getBlob","imagebitmapOptions","options","safeCreateImageBitmap","isEmptyObject","createImageBitmap","console","object"],"mappings":"AAAA,SAAA,KAAA,EAAA,OAAA,QAAA,aAAA;AACA,OAAA,YAAA,MAAA,kBAAA;AAEA,MAAMA,YAAY,GAAlB,EAAA;AAEA,IAAIC,2BAA2B,GAA/B,IAAA;AASA,eAAe,eAAA,kBAAA,CAAA,WAAA,EAAA,OAAA,EAAA,GAAA,EAA6D;AAC1E,MAAA,IAAA;;AAGA,MAAIC,KAAK,CAAT,GAAS,CAAT,EAAgB;AAEd,UAAMC,KAAK,GAAG,MAAMC,YAAY,CAAA,WAAA,EAAA,OAAA,EAAhC,GAAgC,CAAhC;AACAC,IAAAA,IAAI,GAAJA,KAAAA;AAHF,GAAA,MAIO;AAELA,IAAAA,IAAI,GAAGC,OAAO,CAAA,WAAA,EAAdD,GAAc,CAAdA;AACD;;AAED,QAAME,kBAAkB,GAAGC,OAAO,IAAIA,OAAO,CAA7C,WAAA;AAEA,SAAO,MAAMC,qBAAqB,CAAA,IAAA,EAAlC,kBAAkC,CAAlC;AACD;;AAQD,eAAA,qBAAA,CAAA,IAAA,EAAsE;AAAA,MAA3BF,kBAA2B,uEAAtE,IAAsE;;AACpE,MAAIG,aAAa,CAAbA,kBAAa,CAAbA,IAAqC,CAAzC,2BAAA,EAAuE;AACrEH,IAAAA,kBAAkB,GAAlBA,IAAAA;AACD;;AAED,MAAA,kBAAA,EAAwB;AACtB,QAAI;AAEF,aAAO,MAAMI,iBAAiB,CAAA,IAAA,EAA9B,kBAA8B,CAA9B;AAFF,KAAA,CAGE,OAAA,KAAA,EAAc;AACdC,MAAAA,OAAO,CAAPA,IAAAA,CAAAA,KAAAA;AACAX,MAAAA,2BAA2B,GAA3BA,KAAAA;AACD;AACF;;AAED,SAAO,MAAMU,iBAAiB,CAA9B,IAA8B,CAA9B;AACD;;AAED,SAAA,aAAA,CAAA,MAAA,EAA+B;AAE7B,OAAK,MAAL,GAAA,IAAkBE,MAAM,IAAxB,YAAA,EAA0C;AACxC,WAAA,KAAA;AACD;;AACD,SAAA,IAAA;AACD","sourcesContent":["import {isSVG, getBlob} from './svg-utils';\nimport parseToImage from './parse-to-image';\n\nconst EMPTY_OBJECT = {};\n\nlet imagebitmapOptionsSupported = true;\n\n/**\n * Asynchronously parses an array buffer into an ImageBitmap - this contains the decoded data\n * ImageBitmaps are supported on worker threads, but not supported on Edge, IE11 and Safari\n * https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap#Browser_compatibility\n *\n * TODO - createImageBitmap supports source rect (5 param overload), pass through?\n */\nexport default async function parseToImageBitmap(arrayBuffer, options, url) {\n  let blob;\n\n  // Cannot parse SVG directly to ImageBitmap, parse to Image first\n  if (isSVG(url)) {\n    // Note: this only works on main thread\n    const image = await parseToImage(arrayBuffer, options, url);\n    blob = image;\n  } else {\n    // Create blob from the array buffer\n    blob = getBlob(arrayBuffer, url);\n  }\n\n  const imagebitmapOptions = options && options.imagebitmap;\n\n  return await safeCreateImageBitmap(blob, imagebitmapOptions);\n}\n\n/**\n * Safely creates an imageBitmap with options\n * *\n * Firefox crashes if imagebitmapOptions is supplied\n * Avoid supplying if not provided or supported, remember if not supported\n */\nasync function safeCreateImageBitmap(blob, imagebitmapOptions = null) {\n  if (isEmptyObject(imagebitmapOptions) || !imagebitmapOptionsSupported) {\n    imagebitmapOptions = null;\n  }\n\n  if (imagebitmapOptions) {\n    try {\n      // @ts-ignore Options\n      return await createImageBitmap(blob, imagebitmapOptions);\n    } catch (error) {\n      console.warn(error); // eslint-disable-line\n      imagebitmapOptionsSupported = false;\n    }\n  }\n\n  return await createImageBitmap(blob);\n}\n\nfunction isEmptyObject(object) {\n  // @ts-ignore\n  for (const key in object || EMPTY_OBJECT) {\n    return false;\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}