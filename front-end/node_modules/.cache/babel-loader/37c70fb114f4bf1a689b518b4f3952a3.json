{"ast":null,"code":"import { LIFECYCLE } from '../lifecycle/constants';\nimport { createProps } from './create-props';\nimport { PROP_SYMBOLS } from './constants';\nconst {\n  ASYNC_ORIGINAL,\n  ASYNC_RESOLVED,\n  ASYNC_DEFAULTS\n} = PROP_SYMBOLS;\nimport ComponentState from './component-state';\nconst defaultProps = {};\nlet counter = 0;\nexport default class Component {\n  constructor() {\n    this.props = createProps.apply(this, arguments);\n    this.id = this.props.id;\n    this.count = counter++;\n    this.lifecycle = LIFECYCLE.NO_STATE;\n    this.parent = null;\n    this.context = null;\n    this.state = null;\n    this.internalState = null;\n    Object.seal(this);\n  }\n\n  get root() {\n    let component = this;\n\n    while (component.parent) {\n      component = component.parent;\n    }\n\n    return component;\n  }\n\n  clone(newProps) {\n    const {\n      props\n    } = this;\n    const asyncProps = {};\n\n    for (const key in props[ASYNC_DEFAULTS]) {\n      if (key in props[ASYNC_RESOLVED]) {\n        asyncProps[key] = props[ASYNC_RESOLVED][key];\n      } else if (key in props[ASYNC_ORIGINAL]) {\n        asyncProps[key] = props[ASYNC_ORIGINAL][key];\n      }\n    }\n\n    return new this.constructor({ ...props,\n      ...asyncProps,\n      ...newProps\n    });\n  }\n\n  get stats() {\n    return this.internalState.stats;\n  }\n\n  _initState() {\n    this.internalState = new ComponentState({});\n  }\n\n}\nComponent.componentName = 'Component';\nComponent.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/lifecycle/component.js"],"names":["ASYNC_DEFAULTS","defaultProps","counter","constructor","createProps","LIFECYCLE","Object","root","component","clone","props","asyncProps","key","newProps","stats","_initState","Component"],"mappings":"AAAA,SAAA,SAAA,QAAA,wBAAA;AACA,SAAA,WAAA,QAAA,gBAAA;AACA,SAAA,YAAA,QAAA,aAAA;AACA,MAAM;AAAA,EAAA,cAAA;AAAA,EAAA,cAAA;AAAiCA,EAAAA;AAAjC,IAAN,YAAA;AACA,OAAA,cAAA,MAAA,mBAAA;AAEA,MAAMC,YAAY,GAAlB,EAAA;AAEA,IAAIC,OAAO,GAAX,CAAA;AAEA,eAAe,MAAA,SAAA,CAAgB;AAC7BC,EAAAA,WAAW,GAAuB;AAGhC,SAAA,KAAA,GAAaC,WAAW,CAAXA,KAAAA,CAAAA,IAAAA,EAAb,SAAaA,CAAb;AAIA,SAAA,EAAA,GAAU,KAAA,KAAA,CAAV,EAAA;AACA,SAAA,KAAA,GAAaF,OAAb,EAAA;AACA,SAAA,SAAA,GAAiBG,SAAS,CAA1B,QAAA;AACA,SAAA,MAAA,GAAA,IAAA;AACA,SAAA,OAAA,GAAA,IAAA;AACA,SAAA,KAAA,GAAA,IAAA;AACA,SAAA,aAAA,GAAA,IAAA;AAGAC,IAAAA,MAAM,CAANA,IAAAA,CAAAA,IAAAA;AACD;;AAED,MAAIC,IAAJ,GAAW;AAET,QAAIC,SAAS,GAAb,IAAA;;AACA,WAAOA,SAAS,CAAhB,MAAA,EAAyB;AACvBA,MAAAA,SAAS,GAAGA,SAAS,CAArBA,MAAAA;AACD;;AACD,WAAA,SAAA;AACD;;AAGDC,EAAAA,KAAK,CAAA,QAAA,EAAW;AACd,UAAM;AAACC,MAAAA;AAAD,QAAN,IAAA;AAGA,UAAMC,UAAU,GAAhB,EAAA;;AAGA,SAAK,MAAL,GAAA,IAAkBD,KAAK,CAAvB,cAAuB,CAAvB,EAAyC;AACvC,UAAIE,GAAG,IAAIF,KAAK,CAAhB,cAAgB,CAAhB,EAAkC;AAChCC,QAAAA,UAAU,CAAVA,GAAU,CAAVA,GAAkBD,KAAK,CAALA,cAAK,CAALA,CAAlBC,GAAkBD,CAAlBC;AADF,OAAA,MAEO,IAAIC,GAAG,IAAIF,KAAK,CAAhB,cAAgB,CAAhB,EAAkC;AACvCC,QAAAA,UAAU,CAAVA,GAAU,CAAVA,GAAkBD,KAAK,CAALA,cAAK,CAALA,CAAlBC,GAAkBD,CAAlBC;AACD;AACF;;AAGD,WAAO,IAAI,KAAJ,WAAA,CAAqB,EAAC,GAAD,KAAA;AAAW,SAAX,UAAA;AAA0B,SAAGE;AAA7B,KAArB,CAAP;AACD;;AAED,MAAIC,KAAJ,GAAY;AACV,WAAO,KAAA,aAAA,CAAP,KAAA;AACD;;AAIDC,EAAAA,UAAU,GAAG;AACX,SAAA,aAAA,GAAqB,IAAA,cAAA,CAArB,EAAqB,CAArB;AACD;;AAzD4B;AA4D/BC,SAAS,CAATA,aAAAA,GAAAA,WAAAA;AACAA,SAAS,CAATA,YAAAA,GAAAA,YAAAA","sourcesContent":["import {LIFECYCLE} from '../lifecycle/constants';\nimport {createProps} from './create-props';\nimport {PROP_SYMBOLS} from './constants';\nconst {ASYNC_ORIGINAL, ASYNC_RESOLVED, ASYNC_DEFAULTS} = PROP_SYMBOLS;\nimport ComponentState from './component-state';\n\nconst defaultProps = {};\n\nlet counter = 0;\n\nexport default class Component {\n  constructor(/* ...propObjects */) {\n    // Merge supplied props with default props and freeze them.\n    /* eslint-disable prefer-spread */\n    this.props = createProps.apply(this, arguments);\n    /* eslint-enable prefer-spread */\n\n    // Define all members before layer is sealed\n    this.id = this.props.id; // The layer's id, used for matching with layers from last render cycle\n    this.count = counter++; // Keep track of how many layer instances you are generating\n    this.lifecycle = LIFECYCLE.NO_STATE; // Helps track and debug the life cycle of the layers\n    this.parent = null; // reference to the composite layer parent that rendered this layer\n    this.context = null; // Will reference layer manager's context, contains state shared by layers\n    this.state = null; // Will be set to the shared layer state object during layer matching\n    this.internalState = null;\n\n    // Seal the layer\n    Object.seal(this);\n  }\n\n  get root() {\n    // eslint-disable-next-line consistent-this\n    let component = this;\n    while (component.parent) {\n      component = component.parent;\n    }\n    return component;\n  }\n\n  // clone this layer with modified props\n  clone(newProps) {\n    const {props} = this;\n\n    // Async props cannot be copied with Object.assign, copy them separately\n    const asyncProps = {};\n\n    // See async props definition in create-props.js\n    for (const key in props[ASYNC_DEFAULTS]) {\n      if (key in props[ASYNC_RESOLVED]) {\n        asyncProps[key] = props[ASYNC_RESOLVED][key];\n      } else if (key in props[ASYNC_ORIGINAL]) {\n        asyncProps[key] = props[ASYNC_ORIGINAL][key];\n      }\n    }\n\n    // Some custom layer implementation may not support multiple arguments in the constructor\n    return new this.constructor({...props, ...asyncProps, ...newProps});\n  }\n\n  get stats() {\n    return this.internalState.stats;\n  }\n\n  // PROTECTED METHODS, override in subclass\n\n  _initState() {\n    this.internalState = new ComponentState({});\n  }\n}\n\nComponent.componentName = 'Component';\nComponent.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}