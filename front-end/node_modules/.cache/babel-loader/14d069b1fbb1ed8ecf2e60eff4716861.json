{"ast":null,"code":"import { Buffer, Transform, Framebuffer, Texture2D, readPixelsToArray } from '@luma.gl/core';\nimport { padBuffer, getAttributeTypeFromSize, getSourceBufferAttribute, getAttributeBufferLength, cycleBuffers } from '../lib/attribute/attribute-transition-utils';\nimport Attribute from '../lib/attribute/attribute';\nimport Transition from './transition';\nexport default class GPUSpringTransition {\n  constructor(_ref) {\n    let {\n      gl,\n      attribute,\n      timeline\n    } = _ref;\n    this.gl = gl;\n    this.type = 'spring';\n    this.transition = new Transition(timeline);\n    this.attribute = attribute;\n    this.attributeInTransition = new Attribute(gl, { ...attribute.settings,\n      normalized: false\n    });\n    this.currentStartIndices = attribute.startIndices;\n    this.currentLength = 0;\n    this.texture = getTexture(gl);\n    this.framebuffer = getFramebuffer(gl, this.texture);\n    this.transform = getTransform(gl, attribute, this.framebuffer);\n    const bufferOpts = {\n      byteLength: 0,\n      usage: 35050\n    };\n    this.buffers = [new Buffer(gl, bufferOpts), new Buffer(gl, bufferOpts), new Buffer(gl, bufferOpts)];\n  }\n\n  get inProgress() {\n    return this.transition.inProgress;\n  }\n\n  start(transitionSettings, numInstances) {\n    const {\n      gl,\n      buffers,\n      attribute\n    } = this;\n    const padBufferOpts = {\n      numInstances,\n      attribute,\n      fromLength: this.currentLength,\n      fromStartIndices: this.currentStartIndices,\n      getData: transitionSettings.enter\n    };\n\n    for (const buffer of buffers) {\n      padBuffer({\n        buffer,\n        ...padBufferOpts\n      });\n    }\n\n    this.currentStartIndices = attribute.startIndices;\n    this.currentLength = getAttributeBufferLength(attribute, numInstances);\n    this.attributeInTransition.update({\n      buffer: buffers[1],\n      value: attribute.value\n    });\n    this.transition.start(transitionSettings);\n    this.transform.update({\n      elementCount: Math.floor(this.currentLength / attribute.size),\n      sourceBuffers: {\n        aTo: getSourceBufferAttribute(gl, attribute)\n      }\n    });\n  }\n\n  update() {\n    const {\n      buffers,\n      transform,\n      framebuffer,\n      transition\n    } = this;\n    const updated = transition.update();\n\n    if (!updated) {\n      return false;\n    }\n\n    transform.update({\n      sourceBuffers: {\n        aPrev: buffers[0],\n        aCur: buffers[1]\n      },\n      feedbackBuffers: {\n        vNext: buffers[2]\n      }\n    });\n    transform.run({\n      framebuffer,\n      discard: false,\n      clearRenderTarget: true,\n      uniforms: {\n        stiffness: transition.settings.stiffness,\n        damping: transition.settings.damping\n      },\n      parameters: {\n        depthTest: false,\n        blend: true,\n        viewport: [0, 0, 1, 1],\n        blendFunc: [1, 1],\n        blendEquation: [32776, 32776]\n      }\n    });\n    cycleBuffers(buffers);\n    this.attributeInTransition.update({\n      buffer: buffers[1],\n      value: this.attribute.value\n    });\n    const isTransitioning = readPixelsToArray(framebuffer)[0] > 0;\n\n    if (!isTransitioning) {\n      transition.end();\n    }\n\n    return true;\n  }\n\n  cancel() {\n    this.transition.cancel();\n    this.transform.delete();\n\n    while (this.buffers.length) {\n      this.buffers.pop().delete();\n    }\n\n    this.texture.delete();\n    this.texture = null;\n    this.framebuffer.delete();\n    this.framebuffer = null;\n  }\n\n}\n\nfunction getTransform(gl, attribute, framebuffer) {\n  const attributeType = getAttributeTypeFromSize(attribute.size);\n  return new Transform(gl, {\n    framebuffer,\n    vs: \"\\n#define SHADER_NAME spring-transition-vertex-shader\\n\\n#define EPSILON 0.00001\\n\\nuniform float stiffness;\\nuniform float damping;\\nattribute ATTRIBUTE_TYPE aPrev;\\nattribute ATTRIBUTE_TYPE aCur;\\nattribute ATTRIBUTE_TYPE aTo;\\nvarying ATTRIBUTE_TYPE vNext;\\nvarying float vIsTransitioningFlag;\\n\\nATTRIBUTE_TYPE getNextValue(ATTRIBUTE_TYPE cur, ATTRIBUTE_TYPE prev, ATTRIBUTE_TYPE dest) {\\n  ATTRIBUTE_TYPE velocity = cur - prev;\\n  ATTRIBUTE_TYPE delta = dest - cur;\\n  ATTRIBUTE_TYPE spring = delta * stiffness;\\n  ATTRIBUTE_TYPE damper = velocity * -1.0 * damping;\\n  return spring + damper + velocity + cur;\\n}\\n\\nvoid main(void) {\\n  bool isTransitioning = length(aCur - aPrev) > EPSILON || length(aTo - aCur) > EPSILON;\\n  vIsTransitioningFlag = isTransitioning ? 1.0 : 0.0;\\n\\n  vNext = getNextValue(aCur, aPrev, aTo);\\n  gl_Position = vec4(0, 0, 0, 1);\\n  gl_PointSize = 100.0;\\n}\\n\",\n    fs: \"\\n#define SHADER_NAME spring-transition-is-transitioning-fragment-shader\\n\\nvarying float vIsTransitioningFlag;\\n\\nvoid main(void) {\\n  if (vIsTransitioningFlag == 0.0) {\\n    discard;\\n  }\\n  gl_FragColor = vec4(1.0);\\n}\",\n    defines: {\n      ATTRIBUTE_TYPE: attributeType\n    },\n    varyings: ['vNext']\n  });\n}\n\nfunction getTexture(gl) {\n  return new Texture2D(gl, {\n    data: new Uint8Array(4),\n    format: 6408,\n    type: 5121,\n    border: 0,\n    mipmaps: false,\n    dataFormat: 6408,\n    width: 1,\n    height: 1\n  });\n}\n\nfunction getFramebuffer(gl, texture) {\n  return new Framebuffer(gl, {\n    id: 'spring-transition-is-transitioning-framebuffer',\n    width: 1,\n    height: 1,\n    attachments: {\n      [36064]: texture\n    }\n  });\n}","map":{"version":3,"sources":["../../../src/transitions/gpu-spring-transition.js"],"names":["constructor","timeline","attribute","normalized","getTexture","getFramebuffer","getTransform","bufferOpts","byteLength","usage","inProgress","start","padBufferOpts","fromLength","fromStartIndices","getData","transitionSettings","enter","padBuffer","getAttributeBufferLength","buffer","buffers","value","elementCount","Math","sourceBuffers","aTo","getSourceBufferAttribute","update","transition","updated","transform","aPrev","aCur","feedbackBuffers","vNext","discard","clearRenderTarget","uniforms","stiffness","damping","parameters","depthTest","blend","viewport","blendFunc","blendEquation","cycleBuffers","isTransitioning","readPixelsToArray","cancel","attributeType","getAttributeTypeFromSize","vs","fs","defines","ATTRIBUTE_TYPE","varyings","data","format","type","border","mipmaps","dataFormat","width","height","id","attachments","texture"],"mappings":"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","sourcesContent":["/* eslint-disable complexity, max-statements, max-params */\nimport GL from '@luma.gl/constants';\nimport {Buffer, Transform, Framebuffer, Texture2D, readPixelsToArray} from '@luma.gl/core';\nimport {\n  padBuffer,\n  getAttributeTypeFromSize,\n  getSourceBufferAttribute,\n  getAttributeBufferLength,\n  cycleBuffers\n} from '../lib/attribute/attribute-transition-utils';\nimport Attribute from '../lib/attribute/attribute';\nimport Transition from './transition';\n\nexport default class GPUSpringTransition {\n  constructor({gl, attribute, timeline}) {\n    this.gl = gl;\n    this.type = 'spring';\n    this.transition = new Transition(timeline);\n    this.attribute = attribute;\n    // this is the attribute we return during the transition - note: if it is a constant\n    // attribute, it will be converted and returned as a regular attribute\n    // `attribute.userData` is the original options passed when constructing the attribute.\n    // This ensures that we set the proper `doublePrecision` flag and shader attributes.\n    this.attributeInTransition = new Attribute(gl, {...attribute.settings, normalized: false});\n    this.currentStartIndices = attribute.startIndices;\n    // storing currentLength because this.buffer may be larger than the actual length we want to use\n    // this is because we only reallocate buffers when they grow, not when they shrink,\n    // due to performance costs\n    this.currentLength = 0;\n    this.texture = getTexture(gl);\n    this.framebuffer = getFramebuffer(gl, this.texture);\n    this.transform = getTransform(gl, attribute, this.framebuffer);\n    const bufferOpts = {\n      byteLength: 0,\n      usage: GL.DYNAMIC_COPY\n    };\n    this.buffers = [\n      new Buffer(gl, bufferOpts), // previous\n      new Buffer(gl, bufferOpts), // current\n      new Buffer(gl, bufferOpts) // next\n    ];\n  }\n\n  get inProgress() {\n    return this.transition.inProgress;\n  }\n\n  // this is called when an attribute's values have changed and\n  // we need to start animating towards the new values\n  // this also correctly resizes / pads the transform's buffers\n  // in case the attribute's buffer has changed in length or in\n  // startIndices\n  start(transitionSettings, numInstances) {\n    const {gl, buffers, attribute} = this;\n    const padBufferOpts = {\n      numInstances,\n      attribute,\n      fromLength: this.currentLength,\n      fromStartIndices: this.currentStartIndices,\n      getData: transitionSettings.enter\n    };\n\n    for (const buffer of buffers) {\n      padBuffer({buffer, ...padBufferOpts});\n    }\n\n    this.currentStartIndices = attribute.startIndices;\n    this.currentLength = getAttributeBufferLength(attribute, numInstances);\n    this.attributeInTransition.update({\n      buffer: buffers[1],\n      // Hack: Float64Array is required for double-precision attributes\n      // to generate correct shader attributes\n      value: attribute.value\n    });\n\n    // when an attribute changes values, a new transition is started. These\n    // are properties that we have to store on this.transition but can change\n    // when new transitions are started, so we have to keep them up-to-date.\n    // this.transition.start() takes the latest settings and updates them.\n    this.transition.start(transitionSettings);\n\n    this.transform.update({\n      elementCount: Math.floor(this.currentLength / attribute.size),\n      sourceBuffers: {\n        aTo: getSourceBufferAttribute(gl, attribute)\n      }\n    });\n  }\n\n  update() {\n    const {buffers, transform, framebuffer, transition} = this;\n    const updated = transition.update();\n    if (!updated) {\n      return false;\n    }\n\n    transform.update({\n      sourceBuffers: {\n        aPrev: buffers[0],\n        aCur: buffers[1]\n      },\n      feedbackBuffers: {\n        vNext: buffers[2]\n      }\n    });\n    transform.run({\n      framebuffer,\n      discard: false,\n      clearRenderTarget: true,\n      uniforms: {\n        stiffness: transition.settings.stiffness,\n        damping: transition.settings.damping\n      },\n      parameters: {\n        depthTest: false,\n        blend: true,\n        viewport: [0, 0, 1, 1],\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: [GL.MAX, GL.MAX]\n      }\n    });\n\n    cycleBuffers(buffers);\n    this.attributeInTransition.update({\n      buffer: buffers[1],\n      // Hack: Float64Array is required for double-precision attributes\n      // to generate correct shader attributes\n      value: this.attribute.value\n    });\n\n    const isTransitioning = readPixelsToArray(framebuffer)[0] > 0;\n\n    if (!isTransitioning) {\n      transition.end();\n    }\n\n    return true;\n  }\n\n  cancel() {\n    this.transition.cancel();\n    this.transform.delete();\n    while (this.buffers.length) {\n      this.buffers.pop().delete();\n    }\n    this.texture.delete();\n    this.texture = null;\n    this.framebuffer.delete();\n    this.framebuffer = null;\n  }\n}\n\nfunction getTransform(gl, attribute, framebuffer) {\n  const attributeType = getAttributeTypeFromSize(attribute.size);\n  return new Transform(gl, {\n    framebuffer,\n    vs: `\n#define SHADER_NAME spring-transition-vertex-shader\n\n#define EPSILON 0.00001\n\nuniform float stiffness;\nuniform float damping;\nattribute ATTRIBUTE_TYPE aPrev;\nattribute ATTRIBUTE_TYPE aCur;\nattribute ATTRIBUTE_TYPE aTo;\nvarying ATTRIBUTE_TYPE vNext;\nvarying float vIsTransitioningFlag;\n\nATTRIBUTE_TYPE getNextValue(ATTRIBUTE_TYPE cur, ATTRIBUTE_TYPE prev, ATTRIBUTE_TYPE dest) {\n  ATTRIBUTE_TYPE velocity = cur - prev;\n  ATTRIBUTE_TYPE delta = dest - cur;\n  ATTRIBUTE_TYPE spring = delta * stiffness;\n  ATTRIBUTE_TYPE damper = velocity * -1.0 * damping;\n  return spring + damper + velocity + cur;\n}\n\nvoid main(void) {\n  bool isTransitioning = length(aCur - aPrev) > EPSILON || length(aTo - aCur) > EPSILON;\n  vIsTransitioningFlag = isTransitioning ? 1.0 : 0.0;\n\n  vNext = getNextValue(aCur, aPrev, aTo);\n  gl_Position = vec4(0, 0, 0, 1);\n  gl_PointSize = 100.0;\n}\n`,\n    fs: `\n#define SHADER_NAME spring-transition-is-transitioning-fragment-shader\n\nvarying float vIsTransitioningFlag;\n\nvoid main(void) {\n  if (vIsTransitioningFlag == 0.0) {\n    discard;\n  }\n  gl_FragColor = vec4(1.0);\n}`,\n    defines: {\n      ATTRIBUTE_TYPE: attributeType\n    },\n    varyings: ['vNext']\n  });\n}\n\nfunction getTexture(gl) {\n  return new Texture2D(gl, {\n    data: new Uint8Array(4),\n    format: GL.RGBA,\n    type: GL.UNSIGNED_BYTE,\n    border: 0,\n    mipmaps: false,\n    dataFormat: GL.RGBA,\n    width: 1,\n    height: 1\n  });\n}\n\nfunction getFramebuffer(gl, texture) {\n  return new Framebuffer(gl, {\n    id: 'spring-transition-is-transitioning-framebuffer',\n    width: 1,\n    height: 1,\n    attachments: {\n      [GL.COLOR_ATTACHMENT0]: texture\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}