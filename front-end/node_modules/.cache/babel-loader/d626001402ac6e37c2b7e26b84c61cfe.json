{"ast":null,"code":"import MathArray from './base/math-array';\nimport { checkNumber, checkVector } from '../lib/validators';\nimport assert from '../lib/assert';\nimport * as quat from 'gl-matrix/quat';\nimport * as vec4 from 'gl-matrix/vec4';\nconst IDENTITY_QUATERNION = [0, 0, 0, 1];\nexport default class Quaternion extends MathArray {\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    super(-0, -0, -0, -0);\n\n    if (Array.isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      this.set(x, y, z, w);\n    }\n  }\n\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    return this.check();\n  }\n\n  set(x, y, z, w) {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = w;\n    return this.check();\n  }\n\n  fromMatrix3(m) {\n    quat.fromMat3(this, m);\n    return this.check();\n  }\n\n  identity() {\n    quat.identity(this);\n    return this.check();\n  }\n\n  fromAxisRotation(axis, rad) {\n    quat.setAxisAngle(this, axis, rad);\n    return this.check();\n  }\n\n  setAxisAngle(axis, rad) {\n    return this.fromAxisRotation(axis, rad);\n  }\n\n  get ELEMENTS() {\n    return 4;\n  }\n\n  get x() {\n    return this[0];\n  }\n\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get y() {\n    return this[1];\n  }\n\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n\n  get z() {\n    return this[2];\n  }\n\n  set z(value) {\n    this[2] = checkNumber(value);\n  }\n\n  get w() {\n    return this[3];\n  }\n\n  set w(value) {\n    this[3] = checkNumber(value);\n  }\n\n  len() {\n    return quat.length(this);\n  }\n\n  lengthSquared() {\n    return quat.squaredLength(this);\n  }\n\n  dot(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.dot only takes one argument');\n    }\n\n    return quat.dot(this, a);\n  }\n\n  rotationTo(vectorA, vectorB) {\n    quat.rotationTo(this, vectorA, vectorB);\n    return this.check();\n  }\n\n  add(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.add only takes one argument');\n    }\n\n    quat.add(this, this, a);\n    return this.check();\n  }\n\n  calculateW() {\n    quat.calculateW(this, this);\n    return this.check();\n  }\n\n  conjugate() {\n    quat.conjugate(this, this);\n    return this.check();\n  }\n\n  invert() {\n    quat.invert(this, this);\n    return this.check();\n  }\n\n  lerp(a, b, t) {\n    quat.lerp(this, a, b, t);\n    return this.check();\n  }\n\n  multiplyRight(a, b) {\n    assert(!b);\n    quat.multiply(this, this, a);\n    return this.check();\n  }\n\n  multiplyLeft(a, b) {\n    assert(!b);\n    quat.multiply(this, a, this);\n    return this.check();\n  }\n\n  normalize() {\n    const length = this.len();\n    const l = length > 0 ? 1 / length : 0;\n    this[0] = this[0] * l;\n    this[1] = this[1] * l;\n    this[2] = this[2] * l;\n    this[3] = this[3] * l;\n\n    if (length === 0) {\n      this[3] = 1;\n    }\n\n    return this.check();\n  }\n\n  rotateX(rad) {\n    quat.rotateX(this, this, rad);\n    return this.check();\n  }\n\n  rotateY(rad) {\n    quat.rotateY(this, this, rad);\n    return this.check();\n  }\n\n  rotateZ(rad) {\n    quat.rotateZ(this, this, rad);\n    return this.check();\n  }\n\n  scale(b) {\n    quat.scale(this, this, b);\n    return this.check();\n  }\n\n  slerp(start, target, ratio) {\n    switch (arguments.length) {\n      case 1:\n        ({\n          start = IDENTITY_QUATERNION,\n          target,\n          ratio\n        } = arguments[0]);\n        break;\n\n      case 2:\n        [target, ratio] = arguments;\n        start = this;\n        break;\n\n      default:\n    }\n\n    quat.slerp(this, start, target, ratio);\n    return this.check();\n  }\n\n  transformVector4(vector) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : vector;\n    vec4.transformQuat(result, vector, this);\n    return checkVector(result, 4);\n  }\n\n  lengthSq() {\n    return this.lengthSquared();\n  }\n\n  setFromAxisAngle(axis, rad) {\n    return this.setAxisAngle(axis, rad);\n  }\n\n  premultiply(a, b) {\n    return this.multiplyLeft(a, b);\n  }\n\n  multiply(a, b) {\n    return this.multiplyRight(a, b);\n  }\n\n}","map":{"version":3,"sources":["../../../src/classes/quaternion.js"],"names":["IDENTITY_QUATERNION","constructor","x","y","z","w","Array","arguments","copy","array","set","fromMatrix3","quat","identity","fromAxisRotation","setAxisAngle","ELEMENTS","checkNumber","len","lengthSquared","dot","b","rotationTo","add","calculateW","conjugate","invert","lerp","multiplyRight","assert","multiplyLeft","normalize","length","l","rotateX","rotateY","rotateZ","scale","slerp","start","ratio","transformVector4","result","vec4","checkVector","lengthSq","setFromAxisAngle","premultiply","multiply"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport MathArray from './base/math-array';\nimport {checkNumber, checkVector} from '../lib/validators';\nimport assert from '../lib/assert';\n\n// @ts-ignore: error TS2307: Cannot find module 'gl-matrix/...'.\nimport * as quat from 'gl-matrix/quat';\n// @ts-ignore: error TS2307: Cannot find module 'gl-matrix/...'.\nimport * as vec4 from 'gl-matrix/vec4';\n\nconst IDENTITY_QUATERNION = [0, 0, 0, 1];\n\nexport default class Quaternion extends MathArray {\n  constructor(x = 0, y = 0, z = 0, w = 1) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0);\n    // eslint-disable-next-line prefer-rest-params\n    if (Array.isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      this.set(x, y, z, w);\n    }\n  }\n\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    return this.check();\n  }\n\n  set(x, y, z, w) {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = w;\n    return this.check();\n  }\n\n  // Creates a quaternion from the given 3x3 rotation matrix.\n  // NOTE: The resultant quaternion is not normalized, so you should\n  // be sure to renormalize the quaternion yourself where necessary.\n  fromMatrix3(m) {\n    quat.fromMat3(this, m);\n    return this.check();\n  }\n\n  // Set a quat to the identity quaternion\n  identity() {\n    quat.identity(this);\n    return this.check();\n  }\n\n  fromAxisRotation(axis, rad) {\n    quat.setAxisAngle(this, axis, rad);\n    return this.check();\n  }\n\n  // Set the components of a quat to the given values\n  // set(i, j, k, l) {\n  //   quat.set(this, i, j, k, l);\n  //   return this.check();\n  // }\n\n  // Sets a quat from the given angle and rotation axis, then returns it.\n  setAxisAngle(axis, rad) {\n    return this.fromAxisRotation(axis, rad);\n  }\n\n  // Getters/setters\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  get ELEMENTS() {\n    return 4;\n  }\n\n  get x() {\n    return this[0];\n  }\n\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get y() {\n    return this[1];\n  }\n\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n\n  get z() {\n    return this[2];\n  }\n\n  set z(value) {\n    this[2] = checkNumber(value);\n  }\n\n  get w() {\n    return this[3];\n  }\n\n  set w(value) {\n    this[3] = checkNumber(value);\n  }\n\n  /* eslint-enable no-multi-spaces, brace-style, no-return-assign */\n\n  // Calculates the length of a quat\n  len() {\n    return quat.length(this);\n  }\n\n  // Calculates the squared length of a quat\n  lengthSquared() {\n    return quat.squaredLength(this);\n  }\n\n  // Calculates the dot product of two quat's\n  // @return {Number}\n  dot(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.dot only takes one argument');\n    }\n    return quat.dot(this, a);\n  }\n\n  // Gets the rotation axis and angle for a given quaternion.\n  // If a quaternion is created with setAxisAngle, this method will\n  // return the same values as providied in the original parameter\n  // list OR functionally equivalent values.\n  // Example: The quaternion formed by axis [0, 0, 1] and angle -90\n  // is the same as the quaternion formed by [0, 0, 1] and 270.\n  // This method favors the latter.\n  // @return {{[x,y,z], Number}}\n  // getAxisAngle() {\n  //   const axis = [];\n  //   const angle = quat.getAxisAngle(axis, this);\n  //   return {axis, angle};\n  // }\n\n  // MODIFIERS\n\n  // Sets a quaternion to represent the shortest rotation from one vector\n  // to another. Both vectors are assumed to be unit length.\n  rotationTo(vectorA, vectorB) {\n    quat.rotationTo(this, vectorA, vectorB);\n    return this.check();\n  }\n\n  // Sets the specified quaternion with values corresponding to the given axes.\n  // Each axis is a vec3 and is expected to be unit length and perpendicular\n  // to all other specified axes.\n  // setAxes() {\n  //   Number\n  // }\n\n  // Performs a spherical linear interpolation with two control points\n  // sqlerp() {\n  //   Number;\n  // }\n\n  // Adds two quat's\n  add(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.add only takes one argument');\n    }\n    quat.add(this, this, a);\n    return this.check();\n  }\n\n  // Calculates the W component of a quat from the X, Y, and Z components.\n  // Any existing W component will be ignored.\n  calculateW() {\n    quat.calculateW(this, this);\n    return this.check();\n  }\n\n  // Calculates the conjugate of a quat If the quaternion is normalized,\n  // this function is faster than quat.inverse and produces the same result.\n  conjugate() {\n    quat.conjugate(this, this);\n    return this.check();\n  }\n\n  // Calculates the inverse of a quat\n  invert() {\n    quat.invert(this, this);\n    return this.check();\n  }\n\n  // Performs a linear interpolation between two quat's\n  lerp(a, b, t) {\n    quat.lerp(this, a, b, t);\n    return this.check();\n  }\n\n  // Multiplies two quat's\n  multiplyRight(a, b) {\n    assert(!b); // Quaternion.multiply only takes one argument\n    quat.multiply(this, this, a);\n    return this.check();\n  }\n\n  multiplyLeft(a, b) {\n    assert(!b); // Quaternion.multiply only takes one argument\n    quat.multiply(this, a, this);\n    return this.check();\n  }\n\n  // Normalize a quat\n  normalize() {\n    // Handle 0 case\n    const length = this.len();\n    const l = length > 0 ? 1 / length : 0;\n    this[0] = this[0] * l;\n    this[1] = this[1] * l;\n    this[2] = this[2] * l;\n    this[3] = this[3] * l;\n    // Set to [0, 0, 0, 1] if length is 0\n    if (length === 0) {\n      this[3] = 1;\n    }\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the X axis\n  rotateX(rad) {\n    quat.rotateX(this, this, rad);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the Y axis\n  rotateY(rad) {\n    quat.rotateY(this, this, rad);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the Z axis\n  rotateZ(rad) {\n    quat.rotateZ(this, this, rad);\n    return this.check();\n  }\n\n  // Scales a quat by a scalar number\n  scale(b) {\n    quat.scale(this, this, b);\n    return this.check();\n  }\n\n  // Performs a spherical linear interpolation between two quat\n  slerp(start, target, ratio) {\n    // eslint-disable-next-line prefer-rest-params\n    switch (arguments.length) {\n      case 1: // Deprecated signature ({start, target, ratio})\n        // eslint-disable-next-line prefer-rest-params\n        ({start = IDENTITY_QUATERNION, target, ratio} = arguments[0]);\n        break;\n      case 2: // THREE.js compatibility signature (target, ration)\n        // eslint-disable-next-line prefer-rest-params\n        [target, ratio] = arguments;\n        start = this; // eslint-disable-line\n        break;\n      default: // Default signature: (start, target, ratio)\n    }\n    quat.slerp(this, start, target, ratio);\n    return this.check();\n  }\n\n  transformVector4(vector, result = vector) {\n    vec4.transformQuat(result, vector, this);\n    return checkVector(result, 4);\n  }\n\n  // THREE.js Math API compatibility\n  lengthSq() {\n    return this.lengthSquared();\n  }\n\n  setFromAxisAngle(axis, rad) {\n    return this.setAxisAngle(axis, rad);\n  }\n\n  premultiply(a, b) {\n    return this.multiplyLeft(a, b);\n  }\n\n  multiply(a, b) {\n    return this.multiplyRight(a, b);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}