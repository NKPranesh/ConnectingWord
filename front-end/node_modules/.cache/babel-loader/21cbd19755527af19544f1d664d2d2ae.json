{"ast":null,"code":"import { VERSION } from './lib/utils/version';\nimport { encodeGLTFSync } from './lib/encoders/encode-gltf';\nexport const GLTFWriter = {\n  name: 'glTF',\n  id: 'gltf',\n  module: 'gltf',\n  version: VERSION,\n  extensions: ['glb'],\n  mimeTypes: ['model/gltf-binary'],\n  binary: true,\n  encodeSync,\n  options: {\n    gltf: {}\n  }\n};\n\nfunction encodeSync(gltf) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    byteOffset = 0\n  } = options;\n  const byteLength = encodeGLTFSync(gltf, null, byteOffset, options);\n  const arrayBuffer = new ArrayBuffer(byteLength);\n  const dataView = new DataView(arrayBuffer);\n  encodeGLTFSync(gltf, dataView, byteOffset, options);\n  return arrayBuffer;\n}\n\nexport const _TypecheckGLBLoader = GLTFWriter;","map":{"version":3,"sources":["../../src/gltf-writer.ts"],"names":["GLTFWriter","name","id","module","version","extensions","mimeTypes","binary","options","gltf","byteOffset","byteLength","encodeGLTFSync","arrayBuffer","dataView","_TypecheckGLBLoader"],"mappings":"AACA,SAAA,OAAA,QAAA,qBAAA;AACA,SAAA,cAAA,QAAA,4BAAA;AAUA,OAAO,MAAMA,UAAU,GAAG;AACxBC,EAAAA,IAAI,EADoB,MAAA;AAExBC,EAAAA,EAAE,EAFsB,MAAA;AAGxBC,EAAAA,MAAM,EAHkB,MAAA;AAIxBC,EAAAA,OAAO,EAJiB,OAAA;AAMxBC,EAAAA,UAAU,EAAE,CANY,KAMZ,CANY;AAOxBC,EAAAA,SAAS,EAAE,CAPa,mBAOb,CAPa;AAQxBC,EAAAA,MAAM,EARkB,IAAA;AAAA,EAAA,UAAA;AAYxBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE;AADC;AAZe,CAAnB;;AAiBP,SAAA,UAAA,CAAA,IAAA,EAA2D;AAAA,MAAjCD,OAAiC,uEAA3D,EAA2D;AACzD,QAAM;AAACE,IAAAA,UAAU,GAAG;AAAd,MAAN,OAAA;AAGA,QAAMC,UAAU,GAAGC,cAAc,CAAA,IAAA,EAAA,IAAA,EAAA,UAAA,EAAjC,OAAiC,CAAjC;AACA,QAAMC,WAAW,GAAG,IAAA,WAAA,CAApB,UAAoB,CAApB;AACA,QAAMC,QAAQ,GAAG,IAAA,QAAA,CAAjB,WAAiB,CAAjB;AACAF,EAAAA,cAAc,CAAA,IAAA,EAAA,QAAA,EAAA,UAAA,EAAdA,OAAc,CAAdA;AAEA,SAAA,WAAA;AACD;;AAGD,OAAO,MAAMG,mBAA2B,GAAjC,UAAA","sourcesContent":["import type {Writer} from '@loaders.gl/loader-utils';\nimport {VERSION} from './lib/utils/version';\nimport {encodeGLTFSync} from './lib/encoders/encode-gltf';\n\nexport type GLTFWriterOptions = {\n  gltf?: {};\n  byteOffset?: number;\n};\n\n/**\n * GLTF exporter\n */\nexport const GLTFWriter = {\n  name: 'glTF',\n  id: 'gltf',\n  module: 'gltf',\n  version: VERSION,\n\n  extensions: ['glb'], // We only support encoding to binary GLB, not to JSON GLTF\n  mimeTypes: ['model/gltf-binary'], // 'model/gltf+json',\n  binary: true,\n\n  encodeSync,\n\n  options: {\n    gltf: {}\n  }\n};\n\nfunction encodeSync(gltf, options: GLTFWriterOptions = {}) {\n  const {byteOffset = 0} = options;\n\n  // Calculate length, then create arraybuffer and encode\n  const byteLength = encodeGLTFSync(gltf, null, byteOffset, options);\n  const arrayBuffer = new ArrayBuffer(byteLength);\n  const dataView = new DataView(arrayBuffer);\n  encodeGLTFSync(gltf, dataView, byteOffset, options);\n\n  return arrayBuffer;\n}\n\n// TYPE TESTS - TODO find a better way than exporting junk\nexport const _TypecheckGLBLoader: Writer = GLTFWriter;\n"]},"metadata":{},"sourceType":"module"}