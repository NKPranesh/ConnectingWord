{"ast":null,"code":"function _extendableBuiltin(cls) {\n  function ExtendableBuiltin() {\n    var instance = Reflect.construct(cls, Array.from(arguments));\n    Object.setPrototypeOf(instance, Object.getPrototypeOf(this));\n    return instance;\n  }\n\n  ExtendableBuiltin.prototype = Object.create(cls.prototype, {\n    constructor: {\n      value: cls,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(ExtendableBuiltin, cls);\n  } else {\n    ExtendableBuiltin.__proto__ = cls;\n  }\n\n  return ExtendableBuiltin;\n}\n\nimport { config, formatValue, equals, isArray } from '../../lib/common';\nimport assert from '../../lib/assert';\nexport default class MathArray extends _extendableBuiltin(Array) {\n  get ELEMENTS() {\n    assert(false);\n    return 0;\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  from(arrayOrObject) {\n    return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : this.fromObject(arrayOrObject);\n  }\n\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = array[i + offset];\n    }\n\n    return this.check();\n  }\n\n  to(arrayOrObject) {\n    if (arrayOrObject === this) {\n      return this;\n    }\n\n    return isArray(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);\n  }\n\n  toTarget(target) {\n    return target ? this.to(target) : this;\n  }\n\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      array[offset + i] = this[i];\n    }\n\n    return array;\n  }\n\n  toFloat32Array() {\n    return new Float32Array(this);\n  }\n\n  toString() {\n    return this.formatString(config);\n  }\n\n  formatString(opts) {\n    let string = '';\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      string += (i > 0 ? ', ' : '') + formatValue(this[i], opts);\n    }\n\n    return \"\".concat(opts.printTypes ? this.constructor.name : '', \"[\").concat(string, \"]\");\n  }\n\n  equals(array) {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (!equals(this[i], array[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  exactEquals(array) {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (this[i] !== array[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  negate() {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = -this[i];\n    }\n\n    return this.check();\n  }\n\n  lerp(a, b, t) {\n    if (t === undefined) {\n      t = b;\n      b = a;\n      a = this;\n    }\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const ai = a[i];\n      this[i] = ai + t * (b[i] - ai);\n    }\n\n    return this.check();\n  }\n\n  min(vector) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(vector[i], this[i]);\n    }\n\n    return this.check();\n  }\n\n  max(vector) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.max(vector[i], this[i]);\n    }\n\n    return this.check();\n  }\n\n  clamp(minVector, maxVector) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);\n    }\n\n    return this.check();\n  }\n\n  add() {\n    for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {\n      vectors[_key] = arguments[_key];\n    }\n\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] += vector[i];\n      }\n    }\n\n    return this.check();\n  }\n\n  subtract() {\n    for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      vectors[_key2] = arguments[_key2];\n    }\n\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] -= vector[i];\n      }\n    }\n\n    return this.check();\n  }\n\n  scale(scale) {\n    if (Array.isArray(scale)) {\n      return this.multiply(scale);\n    }\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scale;\n    }\n\n    return this.check();\n  }\n\n  sub(a) {\n    return this.subtract(a);\n  }\n\n  setScalar(a) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = a;\n    }\n\n    return this.check();\n  }\n\n  addScalar(a) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] += a;\n    }\n\n    return this.check();\n  }\n\n  subScalar(a) {\n    return this.addScalar(-a);\n  }\n\n  multiplyScalar(scalar) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scalar;\n    }\n\n    return this.check();\n  }\n\n  divideScalar(a) {\n    return this.scale(1 / a);\n  }\n\n  clampScalar(min, max) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(Math.max(this[i], min), max);\n    }\n\n    return this.check();\n  }\n\n  multiplyByScalar(scalar) {\n    return this.scale(scalar);\n  }\n\n  get elements() {\n    return this;\n  }\n\n  check() {\n    if (config.debug && !this.validate()) {\n      throw new Error(\"math.gl: \".concat(this.constructor.name, \" some fields set to invalid numbers'\"));\n    }\n\n    return this;\n  }\n\n  validate() {\n    let valid = this.length === this.ELEMENTS;\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      valid = valid && Number.isFinite(this[i]);\n    }\n\n    return valid;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/classes/base/math-array.js"],"names":["ELEMENTS","assert","clone","from","Array","fromArray","offset","i","array","to","arrayOrObject","isArray","toTarget","target","toArray","toFloat32Array","toString","formatString","string","formatValue","opts","equals","exactEquals","negate","lerp","t","b","a","ai","min","Math","vector","max","clamp","minVector","maxVector","add","subtract","scale","sub","setScalar","addScalar","subScalar","multiplyScalar","divideScalar","clampScalar","multiplyByScalar","elements","check","config","validate","valid","Number"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {config, formatValue, equals, isArray} from '../../lib/common';\nimport assert from '../../lib/assert';\n\nexport default class MathArray extends Array {\n  // Defined by derived class\n  get ELEMENTS() {\n    assert(false);\n    return 0;\n  }\n\n  clone() {\n    // @ts-ignore error TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.\n    return new this.constructor().copy(this);\n  }\n\n  from(arrayOrObject) {\n    // @ts-ignore error TS2339: Property 'copy' does not exist on type 'MathArray'.\n    return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : this.fromObject(arrayOrObject);\n  }\n\n  fromArray(array, offset = 0) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = array[i + offset];\n    }\n    return this.check();\n  }\n\n  to(arrayOrObject) {\n    if (arrayOrObject === this) {\n      return this;\n    }\n    // @ts-ignore error TS2339: Property 'toObject' does not exist on type 'MathArray'.\n    return isArray(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);\n  }\n\n  toTarget(target) {\n    return target ? this.to(target) : this;\n  }\n\n  toArray(array = [], offset = 0) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      array[offset + i] = this[i];\n    }\n    return array;\n  }\n\n  toFloat32Array() {\n    return new Float32Array(this);\n  }\n\n  toString() {\n    return this.formatString(config);\n  }\n\n  formatString(opts) {\n    let string = '';\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      string += (i > 0 ? ', ' : '') + formatValue(this[i], opts);\n    }\n    return `${opts.printTypes ? this.constructor.name : ''}[${string}]`;\n  }\n\n  equals(array) {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (!equals(this[i], array[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  exactEquals(array) {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (this[i] !== array[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // Modifiers\n\n  negate() {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = -this[i];\n    }\n    return this.check();\n  }\n\n  lerp(a, b, t) {\n    if (t === undefined) {\n      t = b;\n      b = a;\n      a = this; // eslint-disable-line\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const ai = a[i];\n      this[i] = ai + t * (b[i] - ai);\n    }\n    return this.check();\n  }\n\n  min(vector) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(vector[i], this[i]);\n    }\n    return this.check();\n  }\n\n  max(vector) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.max(vector[i], this[i]);\n    }\n    return this.check();\n  }\n\n  clamp(minVector, maxVector) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);\n    }\n    return this.check();\n  }\n\n  add(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] += vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  subtract(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] -= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  scale(scale) {\n    if (Array.isArray(scale)) {\n      // @ts-ignore error TS2339: Property 'multiply' does not exist on type 'MathArray'.\n      return this.multiply(scale);\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scale;\n    }\n    return this.check();\n  }\n\n  // three.js compatibility\n\n  sub(a) {\n    return this.subtract(a);\n  }\n\n  setScalar(a) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = a;\n    }\n    return this.check();\n  }\n\n  addScalar(a) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] += a;\n    }\n    return this.check();\n  }\n\n  subScalar(a) {\n    return this.addScalar(-a);\n  }\n\n  multiplyScalar(scalar) {\n    // Multiplies all elements\n    // `Matrix4.scale` only scales its 3x3 \"minor\"\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scalar;\n    }\n    return this.check();\n  }\n\n  divideScalar(a) {\n    return this.scale(1 / a);\n  }\n\n  clampScalar(min, max) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(Math.max(this[i], min), max);\n    }\n    return this.check();\n  }\n\n  // Cesium compatibility\n\n  multiplyByScalar(scalar) {\n    return this.scale(scalar);\n  }\n\n  // THREE.js compatibility\n  get elements() {\n    return this;\n  }\n\n  // Debug checks\n\n  check() {\n    if (config.debug && !this.validate()) {\n      throw new Error(`math.gl: ${this.constructor.name} some fields set to invalid numbers'`);\n    }\n    return this;\n  }\n\n  validate() {\n    let valid = this.length === this.ELEMENTS;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      valid = valid && Number.isFinite(this[i]);\n    }\n    return valid;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}