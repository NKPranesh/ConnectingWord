{"ast":null,"code":"import { isWebGL2 } from '@luma.gl/gltools';\nexport const TEXTURE_FORMATS = {\n  [6407]: {\n    dataFormat: 6407,\n    types: [5121, 33635]\n  },\n  [6408]: {\n    dataFormat: 6408,\n    types: [5121, 32819, 32820]\n  },\n  [6406]: {\n    dataFormat: 6406,\n    types: [5121]\n  },\n  [6409]: {\n    dataFormat: 6409,\n    types: [5121]\n  },\n  [6410]: {\n    dataFormat: 6410,\n    types: [5121]\n  },\n  [33326]: {\n    dataFormat: 6403,\n    types: [5126],\n    gl2: true\n  },\n  [33328]: {\n    dataFormat: 33319,\n    types: [5126],\n    gl2: true\n  },\n  [34837]: {\n    dataFormat: 6407,\n    types: [5126],\n    gl2: true\n  },\n  [34836]: {\n    dataFormat: 6408,\n    types: [5126],\n    gl2: true\n  }\n};\nexport const DATA_FORMAT_CHANNELS = {\n  [6403]: 1,\n  [36244]: 1,\n  [33319]: 2,\n  [33320]: 2,\n  [6407]: 3,\n  [36248]: 3,\n  [6408]: 4,\n  [36249]: 4,\n  [6402]: 1,\n  [34041]: 1,\n  [6406]: 1,\n  [6409]: 1,\n  [6410]: 2\n};\nexport const TYPE_SIZES = {\n  [5126]: 4,\n  [5125]: 4,\n  [5124]: 4,\n  [5123]: 2,\n  [5122]: 2,\n  [5131]: 2,\n  [5120]: 1,\n  [5121]: 1\n};\nexport function isFormatSupported(gl, format) {\n  const info = TEXTURE_FORMATS[format];\n\n  if (!info) {\n    return false;\n  }\n\n  if (info.gl1 === undefined && info.gl2 === undefined) {\n    return true;\n  }\n\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  return typeof value === 'string' ? gl.getExtension(value) : value;\n}\nexport function isLinearFilteringSupported(gl, format) {\n  const info = TEXTURE_FORMATS[format];\n\n  switch (info && info.types[0]) {\n    case 5126:\n      return gl.getExtension('OES_texture_float_linear');\n\n    case 5131:\n      return gl.getExtension('OES_texture_half_float_linear');\n\n    default:\n      return true;\n  }\n}","map":{"version":3,"sources":["../../../src/classes/texture-formats.js"],"names":["TEXTURE_FORMATS","dataFormat","types","gl2","DATA_FORMAT_CHANNELS","TYPE_SIZES","info","value","isWebGL2","gl"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {isWebGL2} from '@luma.gl/gltools';\n\n// const S3TC = 'WEBGL_compressed_texture_s3tc';\n// const PVRTC = 'WEBGL_compressed_texture_pvrtc';\n// const ES3 = 'WEBGL_compressed_texture_es3';\n// const ETC1 = 'WEBGL_compressed_texture_etc1';\n// const SRGB = 'EXT_sRGB';\n// const DEPTH = 'WEBGL_depth_texture';\n\n// Legal combinations for internalFormat, format and type\nexport const TEXTURE_FORMATS = {\n  // Unsized texture format - more performance\n  [GL.RGB]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5]},\n  // TODO: format: GL.RGBA type: GL.FLOAT is supported in WebGL1 when 'OES_texure_float' is suported\n  // we need to update this table structure to specify extensions (gl1: 'OES_texure_float', gl2: false) for each type.\n  [GL.RGBA]: {\n    dataFormat: GL.RGBA,\n    types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4, GL.UNSIGNED_SHORT_5_5_5_1]\n  },\n  [GL.ALPHA]: {dataFormat: GL.ALPHA, types: [GL.UNSIGNED_BYTE]},\n  [GL.LUMINANCE]: {dataFormat: GL.LUMINANCE, types: [GL.UNSIGNED_BYTE]},\n  [GL.LUMINANCE_ALPHA]: {dataFormat: GL.LUMINANCE_ALPHA, types: [GL.UNSIGNED_BYTE]},\n\n  // 32 bit floats\n  [GL.R32F]: {dataFormat: GL.RED, types: [GL.FLOAT], gl2: true},\n  [GL.RG32F]: {dataFormat: GL.RG, types: [GL.FLOAT], gl2: true},\n  [GL.RGB32F]: {dataFormat: GL.RGB, types: [GL.FLOAT], gl2: true},\n  [GL.RGBA32F]: {dataFormat: GL.RGBA, types: [GL.FLOAT], gl2: true}\n\n  // [GL.DEPTH_COMPONENT]: {types: [GL.UNSIGNED_SHORT, GL.UNSIGNED_INT, GL.UNSIGNED_INT_24_8], gl1: DEPTH},\n  // [GL.DEPTH_STENCIL]: {gl1: DEPTH},\n\n  // Sized texture format - more performance\n  // R\n  // [GL.R8]: {dataFormat: GL.RED, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // [GL.R16F]: {dataFormat: GL.RED, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.R8UI]: {dataFormat: GL.RED_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RG\n  // [GL.RG8]: {dataFormat: GL.RG, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // [GL.RG16F]: {dataFormat: GL.RG, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RG8UI]: {dataFormat: GL.RG_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RGB\n  // [GL.RGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.SRGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.RGB565]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5], gl2: true},\n  // [GL.R11F_G11F_B10F]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_INT_10F_11F_11F_REV, GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RGB9_E5]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_half_float'},\n  // [GL.RGB16F]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_float'},\n  // [GL.RGB8UI]: {dataFormat: GL.RGB_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RGBA\n  // [GL.RGBA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.SRGB8_ALPHA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.RGB5_A1]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_5_5_1], gl2: true},\n  // [GL.RGBA4]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4], gl2: true},\n  // [GL.RGBA16F]: {dataFormat: GL.RGBA, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RGBA8UI]: {dataFormat: GL.RGBA_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true}\n\n  // Compressed formats\n\n  // WEBGL_compressed_texture_s3tc\n\n  // [GL.COMPRESSED_RGB_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT3_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT5_EXT]: {compressed: true, gl1: S3TC},\n\n  // WEBGL_compressed_texture_es3\n\n  // [GL.COMPRESSED_R11_EAC]: {compressed: true, gl1: ES3}, // RED\n  // [GL.COMPRESSED_SIGNED_R11_EAC]: {compressed: true, gl1: ES3}, // RED\n  // [GL.COMPRESSED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG\n  // [GL.COMPRESSED_SIGNED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG\n  // [GL.COMPRESSED_RGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB\n  // [GL.COMPRESSED_RGBA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RBG\n  // [GL.COMPRESSED_SRGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB\n  // [GL.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RGBA\n  // [GL.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA\n  // [GL.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA\n  /* WebGL2 guaranteed availability compressed formats?\n  COMPRESSED_R11_EAC RED\n  COMPRESSED_SIGNED_R11_EAC RED\n  COMPRESSED_RG11_EAC RG\n  COMPRESSED_SIGNED_RG11_EAC RG\n  COMPRESSED_RGB8_ETC2 RGB\n  COMPRESSED_SRGB8_ETC2 RGB\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA\n  COMPRESSED_RGBA8_ETC2_EAC RGBA\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\n  */\n\n  // WEBGL_compressed_texture_pvrtc\n\n  // [GL.COMPRESSED_RGB_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGB_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n\n  // WEBGL_compressed_texture_etc1\n\n  // [GL.COMPRESSED_RGB_ETC1_WEBGL]: {compressed: true, gl1: ETC1},\n\n  // WEBGL_compressed_texture_atc\n\n  // [GL.COMPRESSED_RGB_ATC_WEBGL]: {compressed: true, gl1: ETC1},\n  // [GL.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL]: {compressed: true, gl1: ETC1},\n  // [GL.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL]: {compressed: true, gl1: ETC1}\n};\n\nexport const DATA_FORMAT_CHANNELS = {\n  [GL.RED]: 1,\n  [GL.RED_INTEGER]: 1,\n  [GL.RG]: 2,\n  [GL.RG_INTEGER]: 2,\n  [GL.RGB]: 3,\n  [GL.RGB_INTEGER]: 3,\n  [GL.RGBA]: 4,\n  [GL.RGBA_INTEGER]: 4,\n  [GL.DEPTH_COMPONENT]: 1,\n  [GL.DEPTH_STENCIL]: 1,\n  [GL.ALPHA]: 1,\n  [GL.LUMINANCE]: 1,\n  [GL.LUMINANCE_ALPHA]: 2\n};\n\nexport const TYPE_SIZES = {\n  [GL.FLOAT]: 4,\n  [GL.UNSIGNED_INT]: 4,\n  [GL.INT]: 4,\n  [GL.UNSIGNED_SHORT]: 2,\n  [GL.SHORT]: 2,\n  [GL.HALF_FLOAT]: 2,\n  [GL.BYTE]: 1,\n  [GL.UNSIGNED_BYTE]: 1\n};\n\nexport function isFormatSupported(gl, format) {\n  const info = TEXTURE_FORMATS[format];\n  if (!info) {\n    return false;\n  }\n  if (info.gl1 === undefined && info.gl2 === undefined) {\n    // No info - always supported\n    return true;\n  }\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  return typeof value === 'string' ? gl.getExtension(value) : value;\n}\n\nexport function isLinearFilteringSupported(gl, format) {\n  const info = TEXTURE_FORMATS[format];\n  switch (info && info.types[0]) {\n    // Both WebGL1 and WebGL2?\n    case GL.FLOAT:\n      return gl.getExtension('OES_texture_float_linear');\n    // Not in WebGL2?\n    case GL.HALF_FLOAT:\n      return gl.getExtension('OES_texture_half_float_linear');\n    default:\n      return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}