{"ast":null,"code":"const ALLOWED_ATTR_TYPES = Object.freeze(['function', 'string']);\nexport function getAttrValue(attr, d) {\n  assert(typeof d === 'object', 'Expected \"data\" to be an object');\n  assert(ALLOWED_ATTR_TYPES.includes(typeof attr), 'Expected \"attr\" to be a function or string');\n\n  if (typeof attr === ALLOWED_ATTR_TYPES[0]) {\n    return attr(d);\n  }\n\n  if (typeof attr === ALLOWED_ATTR_TYPES[1]) {\n    return d.properties[attr];\n  }\n\n  return {};\n}\nexport function assert(condition) {\n  let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  if (!condition) {\n    throw new Error(\"CARTO style error: \".concat(message));\n  }\n}","map":{"version":3,"sources":["../../../src/style/utils.js"],"names":["ALLOWED_ATTR_TYPES","Object","assert","attr","d","message"],"mappings":"AAAA,MAAMA,kBAAkB,GAAGC,MAAM,CAANA,MAAAA,CAAc,CAAA,UAAA,EAAzC,QAAyC,CAAdA,CAA3B;AAEA,OAAO,SAAA,YAAA,CAAA,IAAA,EAAA,CAAA,EAA+B;AACpCC,EAAAA,MAAM,CAAC,OAAA,CAAA,KAAD,QAAA,EAANA,iCAAM,CAANA;AACAA,EAAAA,MAAM,CAACF,kBAAkB,CAAlBA,QAAAA,CAA4B,OAA7B,IAACA,CAAD,EAANE,4CAAM,CAANA;;AAGA,MAAI,OAAA,IAAA,KAAgBF,kBAAkB,CAAtC,CAAsC,CAAtC,EAA2C;AACzC,WAAOG,IAAI,CAAX,CAAW,CAAX;AACD;;AAGD,MAAI,OAAA,IAAA,KAAgBH,kBAAkB,CAAtC,CAAsC,CAAtC,EAA2C;AACzC,WAAOI,CAAC,CAADA,UAAAA,CAAP,IAAOA,CAAP;AACD;;AAED,SAAA,EAAA;AACD;AAED,OAAO,SAAA,MAAA,CAAA,SAAA,EAAyC;AAAA,MAAdC,OAAc,uEAAzC,EAAyC;;AAC9C,MAAI,CAAJ,SAAA,EAAgB;AACd,UAAM,IAAA,KAAA,CAAA,sBAAA,MAAA,CAAN,OAAM,CAAA,CAAN;AACD;AACF","sourcesContent":["const ALLOWED_ATTR_TYPES = Object.freeze(['function', 'string']);\n\nexport function getAttrValue(attr, d) {\n  assert(typeof d === 'object', 'Expected \"data\" to be an object');\n  assert(ALLOWED_ATTR_TYPES.includes(typeof attr), 'Expected \"attr\" to be a function or string');\n\n  // Is function\n  if (typeof attr === ALLOWED_ATTR_TYPES[0]) {\n    return attr(d);\n  }\n\n  // Is string\n  if (typeof attr === ALLOWED_ATTR_TYPES[1]) {\n    return d.properties[attr];\n  }\n\n  return {};\n}\n\nexport function assert(condition, message = '') {\n  if (!condition) {\n    throw new Error(`CARTO style error: ${message}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}