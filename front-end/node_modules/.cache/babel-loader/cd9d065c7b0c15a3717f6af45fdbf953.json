{"ast":null,"code":"import { log } from '@luma.gl/gltools';\nimport Accessor from './accessor';\nimport Buffer from './buffer';\nimport VertexArrayObject from './vertex-array-object';\nimport { assert } from '../utils/assert';\nimport { stubRemovedMethods } from '../utils/stub-methods';\nconst ERR_ATTRIBUTE_TYPE = 'VertexArray: attributes must be Buffers or constants (i.e. typed array)';\nconst MULTI_LOCATION_ATTRIBUTE_REGEXP = /^(.+)__LOCATION_([0-9]+)$/;\nconst DEPRECATIONS_V6 = ['setBuffers', 'setGeneric', 'clearBindings', 'setLocations', 'setGenericValues', 'setDivisor', 'enable', 'disable'];\nexport default class VertexArray {\n  constructor(gl) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const id = opts.id || opts.program && opts.program.id;\n    this.id = id;\n    this.gl = gl;\n    this.configuration = null;\n    this.elements = null;\n    this.elementsAccessor = null;\n    this.values = null;\n    this.accessors = null;\n    this.unused = null;\n    this.drawParams = null;\n    this.buffer = null;\n    this.attributes = {};\n    this.vertexArrayObject = new VertexArrayObject(gl);\n    stubRemovedMethods(this, 'VertexArray', 'v6.0', DEPRECATIONS_V6);\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  delete() {\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n\n    this.vertexArrayObject.delete();\n  }\n\n  initialize() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.reset();\n    this.configuration = null;\n    this.bindOnUse = false;\n    return this.setProps(props);\n  }\n\n  reset() {\n    this.elements = null;\n    this.elementsAccessor = null;\n    const {\n      MAX_ATTRIBUTES\n    } = this.vertexArrayObject;\n    this.values = new Array(MAX_ATTRIBUTES).fill(null);\n    this.accessors = new Array(MAX_ATTRIBUTES).fill(null);\n    this.unused = {};\n    this.drawParams = null;\n    return this;\n  }\n\n  setProps(props) {\n    if ('program' in props) {\n      this.configuration = props.program && props.program.configuration;\n    }\n\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n\n    if ('elements' in props) {\n      this.setElementBuffer(props.elements);\n    }\n\n    if ('bindOnUse' in props) {\n      props = props.bindOnUse;\n    }\n\n    return this;\n  }\n\n  clearDrawParams() {\n    this.drawParams = null;\n  }\n\n  getDrawParams() {\n    this.drawParams = this.drawParams || this._updateDrawParams();\n    return this.drawParams;\n  }\n\n  setAttributes(attributes) {\n    Object.assign(this.attributes, attributes);\n    this.vertexArrayObject.bind(() => {\n      for (const locationOrName in attributes) {\n        const value = attributes[locationOrName];\n\n        this._setAttribute(locationOrName, value);\n      }\n\n      this.gl.bindBuffer(34962, null);\n    });\n    return this;\n  }\n\n  setElementBuffer() {\n    let elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.elements = elementBuffer;\n    this.elementsAccessor = accessor;\n    this.clearDrawParams();\n    this.vertexArrayObject.setElementBuffer(elementBuffer, accessor);\n    return this;\n  }\n\n  setBuffer(locationOrName, buffer) {\n    let appAccessor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (buffer.target === 34963) {\n      return this.setElementBuffer(buffer, appAccessor);\n    }\n\n    const {\n      location,\n      accessor\n    } = this._resolveLocationAndAccessor(locationOrName, buffer, buffer.accessor, appAccessor);\n\n    if (location >= 0) {\n      this.values[location] = buffer;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n      this.vertexArrayObject.setBuffer(location, buffer, accessor);\n    }\n\n    return this;\n  }\n\n  setConstant(locationOrName, arrayValue) {\n    let appAccessor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    const {\n      location,\n      accessor\n    } = this._resolveLocationAndAccessor(locationOrName, arrayValue, Object.assign({\n      size: arrayValue.length\n    }, appAccessor));\n\n    if (location >= 0) {\n      arrayValue = this.vertexArrayObject._normalizeConstantArrayValue(arrayValue);\n      this.values[location] = arrayValue;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n      this.vertexArrayObject.enable(location, false);\n    }\n\n    return this;\n  }\n\n  unbindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.vertexArrayObject.setElementBuffer(null);\n      }\n\n      this.buffer = this.buffer || new Buffer(this.gl, {\n        accessor: {\n          size: 4\n        }\n      });\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        if (this.values[location] instanceof Buffer) {\n          this.gl.disableVertexAttribArray(location);\n          this.gl.bindBuffer(34962, this.buffer.handle);\n          this.gl.vertexAttribPointer(location, 1, 5126, false, 0, 0);\n        }\n      }\n    });\n    return this;\n  }\n\n  bindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.setElementBuffer(this.elements);\n      }\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        const buffer = this.values[location];\n\n        if (buffer instanceof Buffer) {\n          this.setBuffer(location, buffer);\n        }\n      }\n    });\n    return this;\n  }\n\n  bindForDraw(vertexCount, instanceCount, func) {\n    let value;\n    this.vertexArrayObject.bind(() => {\n      this._setConstantAttributes(vertexCount, instanceCount);\n\n      value = func();\n    });\n    return value;\n  }\n\n  _resolveLocationAndAccessor(locationOrName, value, valueAccessor, appAccessor) {\n    const INVALID_RESULT = {\n      location: -1,\n      accessor: null\n    };\n\n    const {\n      location,\n      name\n    } = this._getAttributeIndex(locationOrName);\n\n    if (!Number.isFinite(location) || location < 0) {\n      this.unused[locationOrName] = value;\n      log.once(3, () => `unused value ${locationOrName} in ${this.id}`)();\n      return INVALID_RESULT;\n    }\n\n    const accessInfo = this._getAttributeInfo(name || location);\n\n    if (!accessInfo) {\n      return INVALID_RESULT;\n    }\n\n    const currentAccessor = this.accessors[location] || {};\n    const accessor = Accessor.resolve(accessInfo.accessor, currentAccessor, valueAccessor, appAccessor);\n    const {\n      size,\n      type\n    } = accessor;\n    assert(Number.isFinite(size) && Number.isFinite(type));\n    return {\n      location,\n      accessor\n    };\n  }\n\n  _getAttributeInfo(attributeName) {\n    return this.configuration && this.configuration.getAttributeInfo(attributeName);\n  }\n\n  _getAttributeIndex(locationOrName) {\n    const location = Number(locationOrName);\n\n    if (Number.isFinite(location)) {\n      return {\n        location\n      };\n    }\n\n    const multiLocation = MULTI_LOCATION_ATTRIBUTE_REGEXP.exec(locationOrName);\n    const name = multiLocation ? multiLocation[1] : locationOrName;\n    const locationOffset = multiLocation ? Number(multiLocation[2]) : 0;\n\n    if (this.configuration) {\n      return {\n        location: this.configuration.getAttributeLocation(name) + locationOffset,\n        name\n      };\n    }\n\n    return {\n      location: -1\n    };\n  }\n\n  _setAttribute(locationOrName, value) {\n    if (value instanceof Buffer) {\n      this.setBuffer(locationOrName, value);\n    } else if (Array.isArray(value) && value.length && value[0] instanceof Buffer) {\n      const buffer = value[0];\n      const accessor = value[1];\n      this.setBuffer(locationOrName, buffer, accessor);\n    } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {\n      const constant = value;\n      this.setConstant(locationOrName, constant);\n    } else if (value.buffer instanceof Buffer) {\n      const accessor = value;\n      this.setBuffer(locationOrName, accessor.buffer, accessor);\n    } else {\n      throw new Error(ERR_ATTRIBUTE_TYPE);\n    }\n  }\n\n  _setConstantAttributes(vertexCount, instanceCount) {\n    const elementCount = Math.max(vertexCount | 0, instanceCount | 0);\n    let constant = this.values[0];\n\n    if (ArrayBuffer.isView(constant)) {\n      this._setConstantAttributeZero(constant, elementCount);\n    }\n\n    for (let location = 1; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      constant = this.values[location];\n\n      if (ArrayBuffer.isView(constant)) {\n        this._setConstantAttribute(location, constant);\n      }\n    }\n  }\n\n  _setConstantAttributeZero(constant, elementCount) {\n    if (VertexArrayObject.isSupported(this.gl, {\n      constantAttributeZero: true\n    })) {\n      this._setConstantAttribute(0, constant);\n\n      return;\n    }\n\n    const buffer = this.vertexArrayObject.getConstantBuffer(elementCount, constant);\n    this.vertexArrayObject.setBuffer(0, buffer, this.accessors[0]);\n  }\n\n  _setConstantAttribute(location, constant) {\n    VertexArrayObject.setConstant(this.gl, location, constant);\n  }\n\n  _updateDrawParams() {\n    const drawParams = {\n      isIndexed: false,\n      isInstanced: false,\n      indexCount: Infinity,\n      vertexCount: Infinity,\n      instanceCount: Infinity\n    };\n\n    for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      this._updateDrawParamsForLocation(drawParams, location);\n    }\n\n    if (this.elements) {\n      drawParams.elementCount = this.elements.getElementCount(this.elements.accessor);\n      drawParams.isIndexed = true;\n      drawParams.indexType = this.elementsAccessor.type || this.elements.accessor.type;\n      drawParams.indexOffset = this.elementsAccessor.offset || 0;\n    }\n\n    if (drawParams.indexCount === Infinity) {\n      drawParams.indexCount = 0;\n    }\n\n    if (drawParams.vertexCount === Infinity) {\n      drawParams.vertexCount = 0;\n    }\n\n    if (drawParams.instanceCount === Infinity) {\n      drawParams.instanceCount = 0;\n    }\n\n    return drawParams;\n  }\n\n  _updateDrawParamsForLocation(drawParams, location) {\n    const value = this.values[location];\n    const accessor = this.accessors[location];\n\n    if (!value) {\n      return;\n    }\n\n    const {\n      divisor\n    } = accessor;\n    const isInstanced = divisor > 0;\n    drawParams.isInstanced = drawParams.isInstanced || isInstanced;\n\n    if (value instanceof Buffer) {\n      const buffer = value;\n\n      if (isInstanced) {\n        const instanceCount = buffer.getVertexCount(accessor);\n        drawParams.instanceCount = Math.min(drawParams.instanceCount, instanceCount);\n      } else {\n        const vertexCount = buffer.getVertexCount(accessor);\n        drawParams.vertexCount = Math.min(drawParams.vertexCount, vertexCount);\n      }\n    }\n  }\n\n  setElements() {\n    let elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    log.deprecated('setElements', 'setElementBuffer')();\n    return this.setElementBuffer(elementBuffer, accessor);\n  }\n\n}","map":{"version":3,"sources":["../../../src/classes/vertex-array.js"],"names":["ERR_ATTRIBUTE_TYPE","MULTI_LOCATION_ATTRIBUTE_REGEXP","DEPRECATIONS_V6","constructor","opts","id","stubRemovedMethods","Object","delete","initialize","props","reset","MAX_ATTRIBUTES","setProps","clearDrawParams","getDrawParams","setAttributes","value","attributes","setElementBuffer","elementBuffer","accessor","setBuffer","appAccessor","buffer","location","setConstant","size","arrayValue","length","unbindBuffers","bindBuffers","bindForDraw","func","_resolveLocationAndAccessor","INVALID_RESULT","name","Number","log","locationOrName","accessInfo","currentAccessor","Accessor","type","assert","_getAttributeInfo","_getAttributeIndex","multiLocation","locationOffset","_setAttribute","Array","ArrayBuffer","constant","_setConstantAttributes","elementCount","Math","vertexCount","instanceCount","_setConstantAttributeZero","constantAttributeZero","_setConstantAttribute","VertexArrayObject","_updateDrawParams","drawParams","isIndexed","isInstanced","indexCount","Infinity","_updateDrawParamsForLocation","divisor","setElements"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {log} from '@luma.gl/gltools';\nimport Accessor from './accessor';\nimport Buffer from './buffer';\nimport VertexArrayObject from './vertex-array-object';\nimport {assert} from '../utils/assert';\nimport {stubRemovedMethods} from '../utils/stub-methods';\n\nconst ERR_ATTRIBUTE_TYPE =\n  'VertexArray: attributes must be Buffers or constants (i.e. typed array)';\n\n// This is done to support mat type attributes.\n// See section \"Notes about setting mat type attributes\"\n// in vertex-array.md\nconst MULTI_LOCATION_ATTRIBUTE_REGEXP = /^(.+)__LOCATION_([0-9]+)$/;\n\nconst DEPRECATIONS_V6 = [\n  'setBuffers',\n  'setGeneric',\n  'clearBindings',\n  'setLocations',\n  'setGenericValues',\n  'setDivisor',\n  'enable',\n  'disable'\n];\n\nexport default class VertexArray {\n  constructor(gl, opts = {}) {\n    // Use program's id if program is supplied but no id is supplied\n    const id = opts.id || (opts.program && opts.program.id);\n    // super(gl, Object.assign({}, opts, {id}));\n\n    this.id = id;\n    this.gl = gl;\n    this.configuration = null;\n\n    // Extracted information\n    this.elements = null;\n    this.elementsAccessor = null;\n    this.values = null;\n    this.accessors = null;\n    this.unused = null;\n    this.drawParams = null;\n    this.buffer = null; // For attribute 0 on desktops, and created when unbinding buffers\n\n    this.attributes = {};\n\n    this.vertexArrayObject = new VertexArrayObject(gl);\n\n    // Issue errors when using removed methods\n    stubRemovedMethods(this, 'VertexArray', 'v6.0', DEPRECATIONS_V6);\n\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  delete() {\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n\n    this.vertexArrayObject.delete();\n  }\n\n  initialize(props = {}) {\n    this.reset();\n    this.configuration = null;\n    this.bindOnUse = false;\n    return this.setProps(props);\n  }\n\n  // Resets all attributes (to default valued constants)\n  reset() {\n    // this.vertexArrayObject.reset();\n\n    this.elements = null;\n    this.elementsAccessor = null;\n    const {MAX_ATTRIBUTES} = this.vertexArrayObject;\n    this.values = new Array(MAX_ATTRIBUTES).fill(null);\n    this.accessors = new Array(MAX_ATTRIBUTES).fill(null);\n    this.unused = {};\n\n    // Auto detects draw params\n    this.drawParams = null;\n\n    return this;\n  }\n\n  setProps(props) {\n    if ('program' in props) {\n      this.configuration = props.program && props.program.configuration;\n    }\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('elements' in props) {\n      this.setElementBuffer(props.elements);\n    }\n    if ('bindOnUse' in props) {\n      props = props.bindOnUse;\n    }\n    return this;\n  }\n\n  // Automatically called if buffers changed through VertexArray API\n  clearDrawParams() {\n    this.drawParams = null;\n  }\n\n  getDrawParams() {\n    // Auto deduced draw parameters\n    this.drawParams = this.drawParams || this._updateDrawParams();\n\n    return this.drawParams;\n  }\n\n  // Set (bind) an array or map of vertex array buffers, either in numbered or named locations.\n  // For names that are not present in `location`, the supplied buffers will be ignored.\n  // if a single buffer of type GL.ELEMENT_ARRAY_BUFFER is present, it will be set as elements\n  //   Signatures:\n  //     {attributeName: buffer}\n  //     {attributeName: [buffer, accessor]}\n  //     {attributeName: (typed) array} => constant\n  setAttributes(attributes) {\n    Object.assign(this.attributes, attributes);\n    this.vertexArrayObject.bind(() => {\n      for (const locationOrName in attributes) {\n        const value = attributes[locationOrName];\n        this._setAttribute(locationOrName, value);\n      }\n      // Make sure we don't leave any bindings\n      this.gl.bindBuffer(GL.ARRAY_BUFFER, null);\n    });\n\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, accessor = {}) {\n    this.elements = elementBuffer; // Save value for debugging\n    this.elementsAccessor = accessor;\n    this.clearDrawParams();\n    this.vertexArrayObject.setElementBuffer(elementBuffer, accessor);\n\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a buffer\n  setBuffer(locationOrName, buffer, appAccessor = {}) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer, appAccessor);\n    }\n\n    const {location, accessor} = this._resolveLocationAndAccessor(\n      locationOrName,\n      buffer,\n      buffer.accessor,\n      appAccessor\n    );\n\n    if (location >= 0) {\n      this.values[location] = buffer;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n      this.vertexArrayObject.setBuffer(location, buffer, accessor);\n    }\n\n    return this;\n  }\n\n  // Set attribute to constant value (small typed array corresponding to one vertex' worth of data)\n  setConstant(locationOrName, arrayValue, appAccessor = {}) {\n    const {location, accessor} = this._resolveLocationAndAccessor(\n      locationOrName,\n      arrayValue,\n      // Ensure that size isn't taken from program for multi-column\n      // attributes\n      Object.assign({size: arrayValue.length}, appAccessor)\n    );\n\n    if (location >= 0) {\n      arrayValue = this.vertexArrayObject._normalizeConstantArrayValue(arrayValue);\n\n      this.values[location] = arrayValue;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n\n      // NOTE: We set the actual constant value later on bind. We can't set the value now since\n      // constants are global and affect all other VertexArrays that have disabled attributes\n      // in the same location.\n      // We do disable the attribute which makes it use the global constant value at that location\n      this.vertexArrayObject.enable(location, false);\n    }\n\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, unbind temporarily to avoid conflicting with TransformFeedback\n  unbindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.vertexArrayObject.setElementBuffer(null);\n      }\n\n      // Chrome does not like buffers that are bound to several binding points,\n      // so we need to offer and unbind facility\n      // WebGL offers disabling, but no clear way to set a VertexArray buffer to `null`\n      // So we just bind all the attributes to the dummy \"attribute zero\" buffer\n      this.buffer = this.buffer || new Buffer(this.gl, {accessor: {size: 4}});\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        if (this.values[location] instanceof Buffer) {\n          this.gl.disableVertexAttribArray(location);\n          this.gl.bindBuffer(GL.ARRAY_BUFFER, this.buffer.handle);\n          this.gl.vertexAttribPointer(location, 1, GL.FLOAT, false, 0, 0);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, rebind rebind after temporary unbind\n  bindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.setElementBuffer(this.elements);\n      }\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        const buffer = this.values[location];\n        if (buffer instanceof Buffer) {\n          this.setBuffer(location, buffer);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Bind for use\n  // When a vertex array is about to be used, we must:\n  // - Set constant attributes (since these are stored on the context and reset on bind)\n  // - Check if we need to initialize the buffer\n  bindForDraw(vertexCount, instanceCount, func) {\n    let value;\n\n    this.vertexArrayObject.bind(() => {\n      // Make sure that any constant attributes are updated (stored on the context, not the VAO)\n      // Also handles attribute 0\n      this._setConstantAttributes(vertexCount, instanceCount);\n\n      value = func();\n    });\n\n    return value;\n  }\n\n  // PRIVATE\n\n  // Resolve locations and accessors\n  _resolveLocationAndAccessor(locationOrName, value, valueAccessor, appAccessor) {\n    const INVALID_RESULT = {\n      location: -1,\n      accessor: null\n    };\n\n    const {location, name} = this._getAttributeIndex(locationOrName);\n    if (!Number.isFinite(location) || location < 0) {\n      this.unused[locationOrName] = value;\n      log.once(3, () => `unused value ${locationOrName} in ${this.id}`)();\n      return INVALID_RESULT;\n    }\n\n    const accessInfo = this._getAttributeInfo(name || location);\n\n    // Attribute location wasn't directly found.\n    // Likely due to multi-location attributes (e.g. matrix)\n    if (!accessInfo) {\n      return INVALID_RESULT;\n    }\n\n    // Resolve the partial accessors into a final accessor\n    const currentAccessor = this.accessors[location] || {};\n    const accessor = Accessor.resolve(\n      accessInfo.accessor,\n      currentAccessor,\n      valueAccessor,\n      appAccessor\n    );\n\n    const {size, type} = accessor;\n    assert(Number.isFinite(size) && Number.isFinite(type));\n\n    return {location, accessor};\n  }\n\n  _getAttributeInfo(attributeName) {\n    return this.configuration && this.configuration.getAttributeInfo(attributeName);\n  }\n\n  _getAttributeIndex(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return {location};\n    }\n\n    const multiLocation = MULTI_LOCATION_ATTRIBUTE_REGEXP.exec(locationOrName);\n    const name = multiLocation ? multiLocation[1] : locationOrName;\n    const locationOffset = multiLocation ? Number(multiLocation[2]) : 0;\n\n    if (this.configuration) {\n      return {\n        location: this.configuration.getAttributeLocation(name) + locationOffset,\n        name\n      };\n    }\n\n    return {location: -1};\n  }\n\n  _setAttribute(locationOrName, value) {\n    if (value instanceof Buffer) {\n      //  Signature: {attributeName: Buffer}\n      this.setBuffer(locationOrName, value);\n    } else if (Array.isArray(value) && value.length && value[0] instanceof Buffer) {\n      // Signature: {attributeName: [buffer, accessor]}\n      const buffer = value[0];\n      const accessor = value[1];\n      this.setBuffer(locationOrName, buffer, accessor);\n    } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {\n      // Signature: {attributeName: constant}, constant == short (typed) array\n      const constant = value;\n      this.setConstant(locationOrName, constant);\n    } else if (value.buffer instanceof Buffer) {\n      // luma.gl v7: Support accessor objects with 'buffer' field\n      // for interleaved data\n      // Signature: {attributeName: {...accessor, buffer}}\n      const accessor = value;\n      this.setBuffer(locationOrName, accessor.buffer, accessor);\n    } else {\n      throw new Error(ERR_ATTRIBUTE_TYPE);\n    }\n  }\n\n  // Updates all constant attribute values (constants are used when vertex attributes are disabled).\n  // This needs to be done repeatedly since in contrast to buffer bindings,\n  // constants are stored on the WebGL context, not the VAO\n  _setConstantAttributes(vertexCount, instanceCount) {\n    // TODO - use accessor to determine what length to use\n    const elementCount = Math.max(vertexCount | 0, instanceCount | 0);\n    let constant = this.values[0];\n    if (ArrayBuffer.isView(constant)) {\n      this._setConstantAttributeZero(constant, elementCount);\n    }\n\n    for (let location = 1; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      constant = this.values[location];\n      if (ArrayBuffer.isView(constant)) {\n        this._setConstantAttribute(location, constant);\n      }\n    }\n  }\n\n  _setConstantAttributeZero(constant, elementCount) {\n    if (VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true})) {\n      this._setConstantAttribute(0, constant);\n      return;\n    }\n\n    // Get a dummy buffer populated with repeated constants\n    const buffer = this.vertexArrayObject.getConstantBuffer(elementCount, constant);\n\n    // Set the buffer on location 0\n    this.vertexArrayObject.setBuffer(0, buffer, this.accessors[0]);\n  }\n\n  _setConstantAttribute(location, constant) {\n    VertexArrayObject.setConstant(this.gl, location, constant);\n  }\n\n  // Walks the buffers and updates draw parameters\n  _updateDrawParams() {\n    const drawParams = {\n      isIndexed: false,\n      isInstanced: false,\n      indexCount: Infinity,\n      vertexCount: Infinity,\n      instanceCount: Infinity\n    };\n\n    for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      this._updateDrawParamsForLocation(drawParams, location);\n    }\n\n    if (this.elements) {\n      // indexing is autodetected - buffer with target GL.ELEMENT_ARRAY_BUFFER\n      // index type is saved for drawElement calls\n      drawParams.elementCount = this.elements.getElementCount(this.elements.accessor);\n      drawParams.isIndexed = true;\n      drawParams.indexType = this.elementsAccessor.type || this.elements.accessor.type;\n      drawParams.indexOffset = this.elementsAccessor.offset || 0;\n    }\n\n    // Post-calculation checks\n    if (drawParams.indexCount === Infinity) {\n      drawParams.indexCount = 0;\n    }\n    if (drawParams.vertexCount === Infinity) {\n      drawParams.vertexCount = 0;\n    }\n    if (drawParams.instanceCount === Infinity) {\n      drawParams.instanceCount = 0;\n    }\n\n    return drawParams;\n  }\n\n  _updateDrawParamsForLocation(drawParams, location) {\n    const value = this.values[location];\n    const accessor = this.accessors[location];\n\n    if (!value) {\n      return;\n    }\n\n    // Check if instanced (whether buffer or constant)\n    const {divisor} = accessor;\n    const isInstanced = divisor > 0;\n    drawParams.isInstanced = drawParams.isInstanced || isInstanced;\n\n    if (value instanceof Buffer) {\n      const buffer = value;\n\n      if (isInstanced) {\n        // instance attribute\n        const instanceCount = buffer.getVertexCount(accessor);\n        drawParams.instanceCount = Math.min(drawParams.instanceCount, instanceCount);\n      } else {\n        // normal attribute\n        const vertexCount = buffer.getVertexCount(accessor);\n        drawParams.vertexCount = Math.min(drawParams.vertexCount, vertexCount);\n      }\n    }\n  }\n\n  // DEPRECATED in v6.x - but not warnings not properly implemented\n\n  setElements(elementBuffer = null, accessor = {}) {\n    log.deprecated('setElements', 'setElementBuffer')();\n    return this.setElementBuffer(elementBuffer, accessor);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}