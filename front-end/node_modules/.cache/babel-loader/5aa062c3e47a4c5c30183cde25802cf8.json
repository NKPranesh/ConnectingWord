{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport WorkerPool from './worker-pool';\nimport WorkerThread from './worker-thread';\nconst DEFAULT_PROPS = {\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  onDebug: () => {},\n  reuseWorkers: true\n};\nexport default class WorkerFarm {\n  static isSupported() {\n    return WorkerThread.isSupported();\n  }\n\n  static getWorkerFarm() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    WorkerFarm._workerFarm = WorkerFarm._workerFarm || new WorkerFarm({});\n\n    WorkerFarm._workerFarm.setProps(props);\n\n    return WorkerFarm._workerFarm;\n  }\n\n  constructor(props) {\n    _defineProperty(this, \"props\", void 0);\n\n    _defineProperty(this, \"workerPools\", new Map());\n\n    this.props = { ...DEFAULT_PROPS\n    };\n    this.setProps(props);\n    this.workerPools = new Map();\n  }\n\n  destroy() {\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.destroy();\n    }\n  }\n\n  setProps(props) {\n    this.props = { ...this.props,\n      ...props\n    };\n\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.setProps(this._getWorkerPoolProps());\n    }\n  }\n\n  getWorkerPool(options) {\n    const {\n      name,\n      source,\n      url\n    } = options;\n    let workerPool = this.workerPools.get(name);\n\n    if (!workerPool) {\n      workerPool = new WorkerPool({\n        name,\n        source,\n        url\n      });\n      workerPool.setProps(this._getWorkerPoolProps());\n      this.workerPools.set(name, workerPool);\n    }\n\n    return workerPool;\n  }\n\n  _getWorkerPoolProps() {\n    return {\n      maxConcurrency: this.props.maxConcurrency,\n      maxMobileConcurrency: this.props.maxMobileConcurrency,\n      reuseWorkers: this.props.reuseWorkers,\n      onDebug: this.props.onDebug\n    };\n  }\n\n}\n\n_defineProperty(WorkerFarm, \"_workerFarm\", void 0);","map":{"version":3,"sources":["../../../../src/lib/worker-farm/worker-farm.ts"],"names":["DEFAULT_PROPS","maxConcurrency","maxMobileConcurrency","onDebug","reuseWorkers","WorkerFarm","isSupported","WorkerThread","getWorkerFarm","props","constructor","destroy","workerPool","setProps","getWorkerPool","url","_getWorkerPoolProps"],"mappings":";AAAA,OAAA,UAAA,MAAA,eAAA;AACA,OAAA,YAAA,MAAA,iBAAA;AAYA,MAAMA,aAA8B,GAAG;AACrCC,EAAAA,cAAc,EADuB,CAAA;AAErCC,EAAAA,oBAAoB,EAFiB,CAAA;AAGrCC,EAAAA,OAAO,EAAE,MAAM,CAHsB,CAAA;AAIrCC,EAAAA,YAAY,EAAE;AAJuB,CAAvC;AAUA,eAAe,MAAA,UAAA,CAAiB;AAOZ,SAAXE,WAAW,GAAY;AAC5B,WAAOC,YAAY,CAAnB,WAAOA,EAAP;AACD;;AAGmB,SAAbC,aAAa,GAA0C;AAAA,QAAzCC,KAAyC,uEAA1C,EAA0C;AAC5DJ,IAAAA,UAAU,CAAVA,WAAAA,GAAyBA,UAAU,CAAVA,WAAAA,IAA0B,IAAA,UAAA,CAAnDA,EAAmD,CAAnDA;;AACAA,IAAAA,UAAU,CAAVA,WAAAA,CAAAA,QAAAA,CAAAA,KAAAA;;AACA,WAAOA,UAAU,CAAjB,WAAA;AACD;;AAGOK,EAAAA,WAAW,CAAA,KAAA,EAAyB;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EAjBtB,IAAA,GAAA,EAiBsB,CAAA;;AAC1C,SAAA,KAAA,GAAa,EAAC,GAAGV;AAAJ,KAAb;AACA,SAAA,QAAA,CAAA,KAAA;AAEA,SAAA,WAAA,GAAmB,IAAnB,GAAmB,EAAnB;AACD;;AAMDW,EAAAA,OAAO,GAAS;AACd,SAAK,MAAL,UAAA,IAAyB,KAAA,WAAA,CAAzB,MAAyB,EAAzB,EAAoD;AAClDC,MAAAA,UAAU,CAAVA,OAAAA;AACD;AACF;;AAMDC,EAAAA,QAAQ,CAAA,KAAA,EAA+B;AACrC,SAAA,KAAA,GAAa,EAAC,GAAG,KAAJ,KAAA;AAAgB,SAAGJ;AAAnB,KAAb;;AAEA,SAAK,MAAL,UAAA,IAAyB,KAAA,WAAA,CAAzB,MAAyB,EAAzB,EAAoD;AAClDG,MAAAA,UAAU,CAAVA,QAAAA,CAAoB,KAApBA,mBAAoB,EAApBA;AACD;AACF;;AAWDE,EAAAA,aAAa,CAAA,OAAA,EAAqE;AAChF,UAAM;AAAA,MAAA,IAAA;AAAA,MAAA,MAAA;AAAeC,MAAAA;AAAf,QAAN,OAAA;AACA,QAAIH,UAAU,GAAG,KAAA,WAAA,CAAA,GAAA,CAAjB,IAAiB,CAAjB;;AACA,QAAI,CAAJ,UAAA,EAAiB;AACfA,MAAAA,UAAU,GAAG,IAAA,UAAA,CAAe;AAAA,QAAA,IAAA;AAAA,QAAA,MAAA;AAG1BG,QAAAA;AAH0B,OAAf,CAAbH;AAKAA,MAAAA,UAAU,CAAVA,QAAAA,CAAoB,KAApBA,mBAAoB,EAApBA;AACA,WAAA,WAAA,CAAA,GAAA,CAAA,IAAA,EAAA,UAAA;AACD;;AACD,WAAA,UAAA;AACD;;AAEDI,EAAAA,mBAAmB,GAAG;AACpB,WAAO;AACLf,MAAAA,cAAc,EAAE,KAAA,KAAA,CADX,cAAA;AAELC,MAAAA,oBAAoB,EAAE,KAAA,KAAA,CAFjB,oBAAA;AAGLE,MAAAA,YAAY,EAAE,KAAA,KAAA,CAHT,YAAA;AAILD,MAAAA,OAAO,EAAE,KAAA,KAAA,CAAWA;AAJf,KAAP;AAMD;;AA/E6B;;gBAAXE,U","sourcesContent":["import WorkerPool from './worker-pool';\nimport WorkerThread from './worker-thread';\n\n/**\n * @param maxConcurrency {number} - max count of workers\n */\nexport type WorkerFarmProps = {\n  maxConcurrency?: number;\n  maxMobileConcurrency?: number;\n  reuseWorkers?: boolean;\n  onDebug?: () => void;\n};\n\nconst DEFAULT_PROPS: WorkerFarmProps = {\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  onDebug: () => {},\n  reuseWorkers: true\n};\n\n/**\n * Process multiple jobs with a \"farm\" of different workers in worker pools.\n */\nexport default class WorkerFarm {\n  private props: WorkerFarmProps;\n  private workerPools = new Map<string, WorkerPool>();\n  // singleton\n  private static _workerFarm?: WorkerFarm;\n\n  /** Check if Workers are supported */\n  static isSupported(): boolean {\n    return WorkerThread.isSupported();\n  }\n\n  /** Get the singleton instance of the global worker farm */\n  static getWorkerFarm(props: WorkerFarmProps = {}): WorkerFarm {\n    WorkerFarm._workerFarm = WorkerFarm._workerFarm || new WorkerFarm({});\n    WorkerFarm._workerFarm.setProps(props);\n    return WorkerFarm._workerFarm;\n  }\n\n  /** get global instance with WorkerFarm.getWorkerFarm() */\n  private constructor(props: WorkerFarmProps) {\n    this.props = {...DEFAULT_PROPS};\n    this.setProps(props);\n    /** @type Map<string, WorkerPool>} */\n    this.workerPools = new Map();\n  }\n\n  /**\n   * Terminate all workers in the farm\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.destroy();\n    }\n  }\n\n  /**\n   * Set props used when initializing worker pools\n   * @param props\n   */\n  setProps(props: WorkerFarmProps): void {\n    this.props = {...this.props, ...props};\n    // Update worker pool props\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.setProps(this._getWorkerPoolProps());\n    }\n  }\n\n  /**\n   * Returns a worker pool for the specified worker\n   * @param options - only used first time for a specific worker name\n   * @param options.name - the name of the worker - used to identify worker pool\n   * @param options.url -\n   * @param options.source -\n   * @example\n   *   const job = WorkerFarm.getWorkerFarm().getWorkerPool({name, url}).startJob(...);\n   */\n  getWorkerPool(options: {name: string; source?: string; url?: string}): WorkerPool {\n    const {name, source, url} = options;\n    let workerPool = this.workerPools.get(name);\n    if (!workerPool) {\n      workerPool = new WorkerPool({\n        name,\n        source,\n        url\n      });\n      workerPool.setProps(this._getWorkerPoolProps());\n      this.workerPools.set(name, workerPool);\n    }\n    return workerPool;\n  }\n\n  _getWorkerPoolProps() {\n    return {\n      maxConcurrency: this.props.maxConcurrency,\n      maxMobileConcurrency: this.props.maxMobileConcurrency,\n      reuseWorkers: this.props.reuseWorkers,\n      onDebug: this.props.onDebug\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}