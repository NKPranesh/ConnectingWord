{"ast":null,"code":"import { isArray } from '@math.gl/core';\nimport { getPolygonSignedArea, forEachSegmentInPolygon, modifyPolygonWindingDirection, getPolygonSignedAreaPoints, forEachSegmentInPolygonPoints, modifyPolygonWindingDirectionPoints } from './polygon-utils';\nexport default class Polygon {\n  constructor(points) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.points = points;\n    this.isFlatArray = !isArray(points[0]);\n    this.options = {\n      start: options.start || 0,\n      end: options.end || points.length,\n      size: options.size || 2,\n      isClosed: options.isClosed\n    };\n    Object.freeze(this);\n  }\n\n  getSignedArea() {\n    if (this.isFlatArray) return getPolygonSignedArea(this.points, this.options);\n    return getPolygonSignedAreaPoints(this.points, this.options);\n  }\n\n  getArea() {\n    return Math.abs(this.getSignedArea());\n  }\n\n  getWindingDirection() {\n    return Math.sign(this.getSignedArea());\n  }\n\n  forEachSegment(visitor) {\n    if (this.isFlatArray) {\n      forEachSegmentInPolygon(this.points, (x1, y1, x2, y2, i1, i2) => {\n        visitor([x1, y1], [x2, y2], i1, i2);\n      }, this.options);\n    } else {\n      forEachSegmentInPolygonPoints(this.points, visitor, this.options);\n    }\n  }\n\n  modifyWindingDirection(direction) {\n    if (this.isFlatArray) {\n      return modifyPolygonWindingDirection(this.points, direction, this.options);\n    }\n\n    return modifyPolygonWindingDirectionPoints(this.points, direction, this.options);\n  }\n\n}","map":{"version":3,"sources":["../../src/polygon.js"],"names":["constructor","options","isArray","points","start","end","size","isClosed","Object","getSignedArea","getPolygonSignedArea","getPolygonSignedAreaPoints","getArea","Math","getWindingDirection","forEachSegment","forEachSegmentInPolygon","visitor","forEachSegmentInPolygonPoints","modifyWindingDirection","modifyPolygonWindingDirection","modifyPolygonWindingDirectionPoints"],"mappings":"AAGA,SAAA,OAAA,QAAA,eAAA;AAEA,SAAA,oBAAA,EAAA,uBAAA,EAAA,6BAAA,EAAA,0BAAA,EAAA,6BAAA,EAAA,mCAAA,QAAA,iBAAA;AASA,eAAe,MAAA,OAAA,CAAc;AAC3BA,EAAAA,WAAW,CAAA,MAAA,EAAuB;AAAA,QAAdC,OAAc,uEAAvB,EAAuB;AAChC,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,WAAA,GAAmB,CAACC,OAAO,CAACC,MAAM,CAAlC,CAAkC,CAAP,CAA3B;AAEA,SAAA,OAAA,GAAe;AACbC,MAAAA,KAAK,EAAEH,OAAO,CAAPA,KAAAA,IADM,CAAA;AAEbI,MAAAA,GAAG,EAAEJ,OAAO,CAAPA,GAAAA,IAAeE,MAAM,CAFb,MAAA;AAGbG,MAAAA,IAAI,EAAEL,OAAO,CAAPA,IAAAA,IAHO,CAAA;AAIbM,MAAAA,QAAQ,EAAEN,OAAO,CAACM;AAJL,KAAf;AAOAC,IAAAA,MAAM,CAANA,MAAAA,CAAAA,IAAAA;AACD;;AAEDC,EAAAA,aAAa,GAAG;AACd,QAAI,KAAJ,WAAA,EAAsB,OAAOC,oBAAoB,CAAC,KAAD,MAAA,EAAc,KAAzC,OAA2B,CAA3B;AAEtB,WAAOC,0BAA0B,CAAC,KAAD,MAAA,EAAc,KAA/C,OAAiC,CAAjC;AACD;;AAEDC,EAAAA,OAAO,GAAG;AACR,WAAOC,IAAI,CAAJA,GAAAA,CAAS,KAAhB,aAAgB,EAATA,CAAP;AACD;;AAEDC,EAAAA,mBAAmB,GAAG;AACpB,WAAOD,IAAI,CAAJA,IAAAA,CAAU,KAAjB,aAAiB,EAAVA,CAAP;AACD;;AAEDE,EAAAA,cAAc,CAAA,OAAA,EAAU;AACtB,QAAI,KAAJ,WAAA,EAAsB;AACpBC,MAAAA,uBAAuB,CACrB,KADqB,MAAA,EAGrB,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAA4B;AAE1BC,QAAAA,OAAO,CAAC,CAAA,EAAA,EAAD,EAAC,CAAD,EAAW,CAAA,EAAA,EAAX,EAAW,CAAX,EAAA,EAAA,EAAPA,EAAO,CAAPA;AALmB,OAAA,EAOrB,KAPFD,OAAuB,CAAvBA;AADF,KAAA,MAUO;AACLE,MAAAA,6BAA6B,CAAC,KAAD,MAAA,EAAA,OAAA,EAAuB,KAApDA,OAA6B,CAA7BA;AACD;AACF;;AAEDC,EAAAA,sBAAsB,CAAA,SAAA,EAAY;AAChC,QAAI,KAAJ,WAAA,EAAsB;AACpB,aAAOC,6BAA6B,CAAC,KAAD,MAAA,EAAA,SAAA,EAAyB,KAA7D,OAAoC,CAApC;AACD;;AACD,WAAOC,mCAAmC,CAAC,KAAD,MAAA,EAAA,SAAA,EAAyB,KAAnE,OAA0C,CAA1C;AACD;;AAlD0B","sourcesContent":["/* eslint-disable no-undef */\n/* eslint-disable no-console */\n\nimport {isArray} from '@math.gl/core';\n\nimport {\n  getPolygonSignedArea,\n  forEachSegmentInPolygon,\n  modifyPolygonWindingDirection,\n  getPolygonSignedAreaPoints,\n  forEachSegmentInPolygonPoints,\n  modifyPolygonWindingDirectionPoints\n} from './polygon-utils';\n\nexport default class Polygon {\n  constructor(points, options = {}) {\n    this.points = points;\n    this.isFlatArray = !isArray(points[0]);\n\n    this.options = {\n      start: options.start || 0,\n      end: options.end || points.length,\n      size: options.size || 2,\n      isClosed: options.isClosed\n    };\n\n    Object.freeze(this);\n  }\n\n  getSignedArea() {\n    if (this.isFlatArray) return getPolygonSignedArea(this.points, this.options);\n\n    return getPolygonSignedAreaPoints(this.points, this.options);\n  }\n\n  getArea() {\n    return Math.abs(this.getSignedArea());\n  }\n\n  getWindingDirection() {\n    return Math.sign(this.getSignedArea());\n  }\n\n  forEachSegment(visitor) {\n    if (this.isFlatArray) {\n      forEachSegmentInPolygon(\n        this.points,\n        // eslint-disable-next-line max-params\n        (x1, y1, x2, y2, i1, i2) => {\n          // TODO @igorDykhta original visitor uses arrays for each point, but with flat arrays performance degrades if we allocate points for each segment\n          visitor([x1, y1], [x2, y2], i1, i2);\n        },\n        this.options\n      );\n    } else {\n      forEachSegmentInPolygonPoints(this.points, visitor, this.options);\n    }\n  }\n\n  modifyWindingDirection(direction) {\n    if (this.isFlatArray) {\n      return modifyPolygonWindingDirection(this.points, direction, this.options);\n    }\n    return modifyPolygonWindingDirectionPoints(this.points, direction, this.options);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}