{"ast":null,"code":"import { concatenateTypedArrays } from '@loaders.gl/loader-utils';\nexport function addSkirt(attributes, triangles, skirtHeight) {\n  let outsideIndices = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  const outsideEdges = outsideIndices ? getOutsideEdgesFromIndices(outsideIndices, attributes.POSITION.value) : getOutsideEdgesFromTriangles(triangles);\n  const newPosition = new attributes.POSITION.value.constructor(outsideEdges.length * 6);\n  const newTexcoord0 = new attributes.TEXCOORD_0.value.constructor(outsideEdges.length * 4);\n  const newTriangles = new triangles.constructor(outsideEdges.length * 6);\n\n  for (let i = 0; i < outsideEdges.length; i++) {\n    const edge = outsideEdges[i];\n    updateAttributesForNewEdge({\n      edge,\n      edgeIndex: i,\n      attributes,\n      skirtHeight,\n      newPosition,\n      newTexcoord0,\n      newTriangles\n    });\n  }\n\n  attributes.POSITION.value = concatenateTypedArrays(attributes.POSITION.value, newPosition);\n  attributes.TEXCOORD_0.value = concatenateTypedArrays(attributes.TEXCOORD_0.value, newTexcoord0);\n  const resultTriangles = triangles instanceof Array ? triangles.concat(newTriangles) : concatenateTypedArrays(triangles, newTriangles);\n  return {\n    attributes,\n    triangles: resultTriangles\n  };\n}\n\nfunction getOutsideEdgesFromTriangles(triangles) {\n  const edges = [];\n\n  for (let i = 0; i < triangles.length; i += 3) {\n    edges.push([triangles[i], triangles[i + 1]]);\n    edges.push([triangles[i + 1], triangles[i + 2]]);\n    edges.push([triangles[i + 2], triangles[i]]);\n  }\n\n  edges.sort((a, b) => Math.min(...a) - Math.min(...b) || Math.max(...a) - Math.max(...b));\n  const outsideEdges = [];\n  let index = 1;\n\n  while (index < edges.length) {\n    if (edges[index][0] === edges[index - 1][1] && edges[index][1] === edges[index - 1][0]) {\n      index += 2;\n    } else {\n      outsideEdges.push(edges[index - 1]);\n      index++;\n    }\n  }\n\n  return outsideEdges;\n}\n\nfunction getOutsideEdgesFromIndices(indices, position) {\n  indices.westIndices.sort((a, b) => position[3 * a + 1] - position[3 * b + 1]);\n  indices.eastIndices.sort((a, b) => position[3 * b + 1] - position[3 * a + 1]);\n  indices.southIndices.sort((a, b) => position[3 * b] - position[3 * a]);\n  indices.northIndices.sort((a, b) => position[3 * a] - position[3 * b]);\n  const edges = [];\n\n  for (const index in indices) {\n    const indexGroup = indices[index];\n\n    for (let i = 0; i < indexGroup.length - 1; i++) {\n      edges.push([indexGroup[i], indexGroup[i + 1]]);\n    }\n  }\n\n  return edges;\n}\n\nfunction updateAttributesForNewEdge(_ref) {\n  let {\n    edge,\n    edgeIndex,\n    attributes,\n    skirtHeight,\n    newPosition,\n    newTexcoord0,\n    newTriangles\n  } = _ref;\n  const positionsLength = attributes.POSITION.value.length;\n  const vertex1Offset = edgeIndex * 2;\n  const vertex2Offset = edgeIndex * 2 + 1;\n  newPosition.set(attributes.POSITION.value.subarray(edge[0] * 3, edge[0] * 3 + 3), vertex1Offset * 3);\n  newPosition[vertex1Offset * 3 + 2] = newPosition[vertex1Offset * 3 + 2] - skirtHeight;\n  newPosition.set(attributes.POSITION.value.subarray(edge[1] * 3, edge[1] * 3 + 3), vertex2Offset * 3);\n  newPosition[vertex2Offset * 3 + 2] = newPosition[vertex2Offset * 3 + 2] - skirtHeight;\n  newTexcoord0.set(attributes.TEXCOORD_0.value.subarray(edge[0] * 2, edge[0] * 2 + 2), vertex1Offset * 2);\n  newTexcoord0.set(attributes.TEXCOORD_0.value.subarray(edge[1] * 2, edge[1] * 2 + 2), vertex2Offset * 2);\n  const triangle1Offset = edgeIndex * 2 * 3;\n  newTriangles[triangle1Offset] = edge[0];\n  newTriangles[triangle1Offset + 1] = edge[1];\n  newTriangles[triangle1Offset + 2] = positionsLength / 3 + vertex2Offset;\n  newTriangles[triangle1Offset + 3] = positionsLength / 3 + vertex2Offset;\n  newTriangles[triangle1Offset + 4] = positionsLength / 3 + vertex1Offset;\n  newTriangles[triangle1Offset + 5] = edge[0];\n}","map":{"version":3,"sources":["../../../../src/lib/helpers/skirt.js"],"names":["outsideIndices","outsideEdges","getOutsideEdgesFromIndices","attributes","getOutsideEdgesFromTriangles","newPosition","newTexcoord0","newTriangles","triangles","i","edge","updateAttributesForNewEdge","edgeIndex","concatenateTypedArrays","resultTriangles","edges","Math","index","indices","position","indexGroup","positionsLength","vertex1Offset","vertex2Offset","triangle1Offset"],"mappings":"AAAA,SAAA,sBAAA,QAAA,0BAAA;AAUA,OAAO,SAAA,QAAA,CAAA,UAAA,EAAA,SAAA,EAAA,WAAA,EAA6E;AAAA,MAAvBA,cAAuB,uEAA7E,IAA6E;AAClF,QAAMC,YAAY,GAAGD,cAAc,GAC/BE,0BAA0B,CAAA,cAAA,EAAiBC,UAAU,CAAVA,QAAAA,CADZ,KACL,CADK,GAE/BC,4BAA4B,CAFhC,SAEgC,CAFhC;AAKA,QAAMC,WAAW,GAAG,IAAIF,UAAU,CAAVA,QAAAA,CAAAA,KAAAA,CAAJ,WAAA,CAA0CF,YAAY,CAAZA,MAAAA,GAA9D,CAAoB,CAApB;AACA,QAAMK,YAAY,GAAG,IAAIH,UAAU,CAAVA,UAAAA,CAAAA,KAAAA,CAAJ,WAAA,CAA4CF,YAAY,CAAZA,MAAAA,GAAjE,CAAqB,CAArB;AAGA,QAAMM,YAAY,GAAG,IAAIC,SAAS,CAAb,WAAA,CAA0BP,YAAY,CAAZA,MAAAA,GAA/C,CAAqB,CAArB;;AAEA,OAAK,IAAIQ,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGR,YAAY,CAAhC,MAAA,EAAyCQ,CAAzC,EAAA,EAA8C;AAC5C,UAAMC,IAAI,GAAGT,YAAY,CAAzB,CAAyB,CAAzB;AAEAU,IAAAA,0BAA0B,CAAC;AAAA,MAAA,IAAA;AAEzBC,MAAAA,SAAS,EAFgB,CAAA;AAAA,MAAA,UAAA;AAAA,MAAA,WAAA;AAAA,MAAA,WAAA;AAAA,MAAA,YAAA;AAOzBL,MAAAA;AAPyB,KAAD,CAA1BI;AASD;;AAEDR,EAAAA,UAAU,CAAVA,QAAAA,CAAAA,KAAAA,GAA4BU,sBAAsB,CAACV,UAAU,CAAVA,QAAAA,CAAD,KAAA,EAAlDA,WAAkD,CAAlDA;AACAA,EAAAA,UAAU,CAAVA,UAAAA,CAAAA,KAAAA,GAA8BU,sBAAsB,CAACV,UAAU,CAAVA,UAAAA,CAAD,KAAA,EAApDA,YAAoD,CAApDA;AACA,QAAMW,eAAe,GACnBN,SAAS,YAATA,KAAAA,GACIA,SAAS,CAATA,MAAAA,CADJA,YACIA,CADJA,GAEIK,sBAAsB,CAAA,SAAA,EAH5B,YAG4B,CAH5B;AAKA,SAAO;AAAA,IAAA,UAAA;AAELL,IAAAA,SAAS,EAAEM;AAFN,GAAP;AAID;;AAOD,SAAA,4BAAA,CAAA,SAAA,EAAiD;AAC/C,QAAMC,KAAK,GAAX,EAAA;;AACA,OAAK,IAAIN,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGD,SAAS,CAA7B,MAAA,EAAsCC,CAAC,IAAvC,CAAA,EAA8C;AAC5CM,IAAAA,KAAK,CAALA,IAAAA,CAAW,CAACP,SAAS,CAAV,CAAU,CAAV,EAAeA,SAAS,CAACC,CAAC,GAArCM,CAAmC,CAAxB,CAAXA;AACAA,IAAAA,KAAK,CAALA,IAAAA,CAAW,CAACP,SAAS,CAACC,CAAC,GAAZ,CAAU,CAAV,EAAmBD,SAAS,CAACC,CAAC,GAAzCM,CAAuC,CAA5B,CAAXA;AACAA,IAAAA,KAAK,CAALA,IAAAA,CAAW,CAACP,SAAS,CAACC,CAAC,GAAZ,CAAU,CAAV,EAAmBD,SAAS,CAAvCO,CAAuC,CAA5B,CAAXA;AACD;;AAEDA,EAAAA,KAAK,CAALA,IAAAA,CAAW,CAAA,CAAA,EAAA,CAAA,KAAUC,IAAI,CAAJA,GAAAA,CAAS,GAATA,CAAAA,IAAiBA,IAAI,CAAJA,GAAAA,CAAS,GAA1BA,CAAiBA,CAAjBA,IAAmCA,IAAI,CAAJA,GAAAA,CAAS,GAATA,CAAAA,IAAiBA,IAAI,CAAJA,GAAAA,CAAS,GAAlFD,CAAyEC,CAAzED;AAEA,QAAMd,YAAY,GAAlB,EAAA;AACA,MAAIgB,KAAK,GAAT,CAAA;;AACA,SAAOA,KAAK,GAAGF,KAAK,CAApB,MAAA,EAA6B;AAC3B,QAAIA,KAAK,CAALA,KAAK,CAALA,CAAAA,CAAAA,MAAoBA,KAAK,CAACE,KAAK,GAAXF,CAAK,CAALA,CAApBA,CAAoBA,CAApBA,IAA2CA,KAAK,CAALA,KAAK,CAALA,CAAAA,CAAAA,MAAoBA,KAAK,CAACE,KAAK,GAAXF,CAAK,CAALA,CAAnE,CAAmEA,CAAnE,EAAwF;AACtFE,MAAAA,KAAK,IAALA,CAAAA;AADF,KAAA,MAEO;AACLhB,MAAAA,YAAY,CAAZA,IAAAA,CAAkBc,KAAK,CAACE,KAAK,GAA7BhB,CAAuB,CAAvBA;AACAgB,MAAAA,KAAK;AACN;AACF;;AACD,SAAA,YAAA;AACD;;AAQD,SAAA,0BAAA,CAAA,OAAA,EAAA,QAAA,EAAuD;AAErDC,EAAAA,OAAO,CAAPA,WAAAA,CAAAA,IAAAA,CAAyB,CAAA,CAAA,EAAA,CAAA,KAAUC,QAAQ,CAAC,IAAA,CAAA,GAATA,CAAQ,CAARA,GAAsBA,QAAQ,CAAC,IAAA,CAAA,GAAlED,CAAiE,CAAjEA;AAEAA,EAAAA,OAAO,CAAPA,WAAAA,CAAAA,IAAAA,CAAyB,CAAA,CAAA,EAAA,CAAA,KAAUC,QAAQ,CAAC,IAAA,CAAA,GAATA,CAAQ,CAARA,GAAsBA,QAAQ,CAAC,IAAA,CAAA,GAAlED,CAAiE,CAAjEA;AACAA,EAAAA,OAAO,CAAPA,YAAAA,CAAAA,IAAAA,CAA0B,CAAA,CAAA,EAAA,CAAA,KAAUC,QAAQ,CAAC,IAATA,CAAQ,CAARA,GAAkBA,QAAQ,CAAC,IAA/DD,CAA8D,CAA9DA;AAEAA,EAAAA,OAAO,CAAPA,YAAAA,CAAAA,IAAAA,CAA0B,CAAA,CAAA,EAAA,CAAA,KAAUC,QAAQ,CAAC,IAATA,CAAQ,CAARA,GAAkBA,QAAQ,CAAC,IAA/DD,CAA8D,CAA9DA;AAEA,QAAMH,KAAK,GAAX,EAAA;;AACA,OAAK,MAAL,KAAA,IAAA,OAAA,EAA6B;AAC3B,UAAMK,UAAU,GAAGF,OAAO,CAA1B,KAA0B,CAA1B;;AACA,SAAK,IAAIT,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGW,UAAU,CAAVA,MAAAA,GAApB,CAAA,EAA2CX,CAA3C,EAAA,EAAgD;AAC9CM,MAAAA,KAAK,CAALA,IAAAA,CAAW,CAACK,UAAU,CAAX,CAAW,CAAX,EAAgBA,UAAU,CAACX,CAAC,GAAvCM,CAAqC,CAA1B,CAAXA;AACD;AACF;;AACD,SAAA,KAAA;AACD;;AAcD,SAAA,0BAAA,OAQG;AAAA,MARiC;AAAA,IAAA,IAAA;AAAA,IAAA,SAAA;AAAA,IAAA,UAAA;AAAA,IAAA,WAAA;AAAA,IAAA,WAAA;AAAA,IAAA,YAAA;AAOlCR,IAAAA;AAPkC,GAQjC;AACD,QAAMc,eAAe,GAAGlB,UAAU,CAAVA,QAAAA,CAAAA,KAAAA,CAAxB,MAAA;AACA,QAAMmB,aAAa,GAAGV,SAAS,GAA/B,CAAA;AACA,QAAMW,aAAa,GAAGX,SAAS,GAATA,CAAAA,GAAtB,CAAA;AAGAP,EAAAA,WAAW,CAAXA,GAAAA,CACEF,UAAU,CAAVA,QAAAA,CAAAA,KAAAA,CAAAA,QAAAA,CAAmCO,IAAI,CAAJA,CAAI,CAAJA,GAAnCP,CAAAA,EAAgDO,IAAI,CAAJA,CAAI,CAAJA,GAAAA,CAAAA,GADlDL,CACEF,CADFE,EAEEiB,aAAa,GAFfjB,CAAAA;AAIAA,EAAAA,WAAW,CAACiB,aAAa,GAAbA,CAAAA,GAAZjB,CAAW,CAAXA,GAAqCA,WAAW,CAACiB,aAAa,GAAbA,CAAAA,GAAZjB,CAAW,CAAXA,GAArCA,WAAAA;AAGAA,EAAAA,WAAW,CAAXA,GAAAA,CACEF,UAAU,CAAVA,QAAAA,CAAAA,KAAAA,CAAAA,QAAAA,CAAmCO,IAAI,CAAJA,CAAI,CAAJA,GAAnCP,CAAAA,EAAgDO,IAAI,CAAJA,CAAI,CAAJA,GAAAA,CAAAA,GADlDL,CACEF,CADFE,EAEEkB,aAAa,GAFflB,CAAAA;AAIAA,EAAAA,WAAW,CAACkB,aAAa,GAAbA,CAAAA,GAAZlB,CAAW,CAAXA,GAAqCA,WAAW,CAACkB,aAAa,GAAbA,CAAAA,GAAZlB,CAAW,CAAXA,GAArCA,WAAAA;AAGAC,EAAAA,YAAY,CAAZA,GAAAA,CACEH,UAAU,CAAVA,UAAAA,CAAAA,KAAAA,CAAAA,QAAAA,CAAqCO,IAAI,CAAJA,CAAI,CAAJA,GAArCP,CAAAA,EAAkDO,IAAI,CAAJA,CAAI,CAAJA,GAAAA,CAAAA,GADpDJ,CACEH,CADFG,EAEEgB,aAAa,GAFfhB,CAAAA;AAIAA,EAAAA,YAAY,CAAZA,GAAAA,CACEH,UAAU,CAAVA,UAAAA,CAAAA,KAAAA,CAAAA,QAAAA,CAAqCO,IAAI,CAAJA,CAAI,CAAJA,GAArCP,CAAAA,EAAkDO,IAAI,CAAJA,CAAI,CAAJA,GAAAA,CAAAA,GADpDJ,CACEH,CADFG,EAEEiB,aAAa,GAFfjB,CAAAA;AAMA,QAAMkB,eAAe,GAAGZ,SAAS,GAATA,CAAAA,GAAxB,CAAA;AACAL,EAAAA,YAAY,CAAZA,eAAY,CAAZA,GAAgCG,IAAI,CAApCH,CAAoC,CAApCA;AACAA,EAAAA,YAAY,CAACiB,eAAe,GAA5BjB,CAAY,CAAZA,GAAoCG,IAAI,CAAxCH,CAAwC,CAAxCA;AACAA,EAAAA,YAAY,CAACiB,eAAe,GAA5BjB,CAAY,CAAZA,GAAoCc,eAAe,GAAfA,CAAAA,GAApCd,aAAAA;AAEAA,EAAAA,YAAY,CAACiB,eAAe,GAA5BjB,CAAY,CAAZA,GAAoCc,eAAe,GAAfA,CAAAA,GAApCd,aAAAA;AACAA,EAAAA,YAAY,CAACiB,eAAe,GAA5BjB,CAAY,CAAZA,GAAoCc,eAAe,GAAfA,CAAAA,GAApCd,aAAAA;AACAA,EAAAA,YAAY,CAACiB,eAAe,GAA5BjB,CAAY,CAAZA,GAAoCG,IAAI,CAAxCH,CAAwC,CAAxCA;AACD","sourcesContent":["import {concatenateTypedArrays} from '@loaders.gl/loader-utils';\n\n/**\n * Add skirt to existing mesh\n * @param {object} attributes - POSITION and TEXCOOD_0 attributes data\n * @param {any} triangles - indices array of the mesh geometry\n * @param {number} skirtHeight - height of the skirt geometry\n * @param {object} outsideIndices - edge indices from quantized mesh data\n * @returns - geometry data with added skirt\n */\nexport function addSkirt(attributes, triangles, skirtHeight, outsideIndices = null) {\n  const outsideEdges = outsideIndices\n    ? getOutsideEdgesFromIndices(outsideIndices, attributes.POSITION.value)\n    : getOutsideEdgesFromTriangles(triangles);\n\n  // 2 new vertices for each outside edge\n  const newPosition = new attributes.POSITION.value.constructor(outsideEdges.length * 6);\n  const newTexcoord0 = new attributes.TEXCOORD_0.value.constructor(outsideEdges.length * 4);\n\n  // 2 new triangles for each outside edge\n  const newTriangles = new triangles.constructor(outsideEdges.length * 6);\n\n  for (let i = 0; i < outsideEdges.length; i++) {\n    const edge = outsideEdges[i];\n\n    updateAttributesForNewEdge({\n      edge,\n      edgeIndex: i,\n      attributes,\n      skirtHeight,\n      newPosition,\n      newTexcoord0,\n      newTriangles\n    });\n  }\n\n  attributes.POSITION.value = concatenateTypedArrays(attributes.POSITION.value, newPosition);\n  attributes.TEXCOORD_0.value = concatenateTypedArrays(attributes.TEXCOORD_0.value, newTexcoord0);\n  const resultTriangles =\n    triangles instanceof Array\n      ? triangles.concat(newTriangles)\n      : concatenateTypedArrays(triangles, newTriangles);\n\n  return {\n    attributes,\n    triangles: resultTriangles\n  };\n}\n\n/**\n * Get geometry edges that located on a border of the mesh\n * @param {any} triangles - indices array of the mesh geometry\n * @returns {number[][]} - outside edges data\n */\nfunction getOutsideEdgesFromTriangles(triangles) {\n  const edges = [];\n  for (let i = 0; i < triangles.length; i += 3) {\n    edges.push([triangles[i], triangles[i + 1]]);\n    edges.push([triangles[i + 1], triangles[i + 2]]);\n    edges.push([triangles[i + 2], triangles[i]]);\n  }\n\n  edges.sort((a, b) => Math.min(...a) - Math.min(...b) || Math.max(...a) - Math.max(...b));\n\n  const outsideEdges = [];\n  let index = 1;\n  while (index < edges.length) {\n    if (edges[index][0] === edges[index - 1][1] && edges[index][1] === edges[index - 1][0]) {\n      index += 2;\n    } else {\n      outsideEdges.push(edges[index - 1]);\n      index++;\n    }\n  }\n  return outsideEdges;\n}\n\n/**\n * Get geometry edges that located on a border of the mesh\n * @param {object} indices - edge indices from quantized mesh data\n * @param {TypedArray} position - position attribute geometry data\n * @returns {number[][]} - outside edges data\n */\nfunction getOutsideEdgesFromIndices(indices, position) {\n  // Sort skirt indices to create adjacent triangles\n  indices.westIndices.sort((a, b) => position[3 * a + 1] - position[3 * b + 1]);\n  // Reverse (b - a) to match triangle winding\n  indices.eastIndices.sort((a, b) => position[3 * b + 1] - position[3 * a + 1]);\n  indices.southIndices.sort((a, b) => position[3 * b] - position[3 * a]);\n  // Reverse (b - a) to match triangle winding\n  indices.northIndices.sort((a, b) => position[3 * a] - position[3 * b]);\n\n  const edges = [];\n  for (const index in indices) {\n    const indexGroup = indices[index];\n    for (let i = 0; i < indexGroup.length - 1; i++) {\n      edges.push([indexGroup[i], indexGroup[i + 1]]);\n    }\n  }\n  return edges;\n}\n\n/**\n * Get geometry edges that located on a border of the mesh\n * @param {object} args\n * @param {number[]} args.edge - edge indices in geometry\n * @param {number} args.edgeIndex - edge index in outsideEdges array\n * @param {object} args.attributes - POSITION and TEXCOORD_0 attributes\n * @param {number} args.skirtHeight - height of the skirt geometry\n * @param {TypedArray} args.newPosition - POSITION array for skirt data\n * @param {TypedArray} args.newTexcoord0 - TEXCOORD_0 array for skirt data\n * @param {TypedArray | Array} args.newTriangles - trinagle indices array for skirt data\n * @returns {void}\n */\nfunction updateAttributesForNewEdge({\n  edge,\n  edgeIndex,\n  attributes,\n  skirtHeight,\n  newPosition,\n  newTexcoord0,\n  newTriangles\n}) {\n  const positionsLength = attributes.POSITION.value.length;\n  const vertex1Offset = edgeIndex * 2;\n  const vertex2Offset = edgeIndex * 2 + 1;\n\n  // Define POSITION for new 1st vertex\n  newPosition.set(\n    attributes.POSITION.value.subarray(edge[0] * 3, edge[0] * 3 + 3),\n    vertex1Offset * 3\n  );\n  newPosition[vertex1Offset * 3 + 2] = newPosition[vertex1Offset * 3 + 2] - skirtHeight; // put down elevation on the skirt height\n\n  // Define POSITION for new 2nd vertex\n  newPosition.set(\n    attributes.POSITION.value.subarray(edge[1] * 3, edge[1] * 3 + 3),\n    vertex2Offset * 3\n  );\n  newPosition[vertex2Offset * 3 + 2] = newPosition[vertex2Offset * 3 + 2] - skirtHeight; // put down elevation on the skirt height\n\n  // Use same TEXCOORDS for skirt vertices\n  newTexcoord0.set(\n    attributes.TEXCOORD_0.value.subarray(edge[0] * 2, edge[0] * 2 + 2),\n    vertex1Offset * 2\n  );\n  newTexcoord0.set(\n    attributes.TEXCOORD_0.value.subarray(edge[1] * 2, edge[1] * 2 + 2),\n    vertex2Offset * 2\n  );\n\n  // Define new triangles\n  const triangle1Offset = edgeIndex * 2 * 3;\n  newTriangles[triangle1Offset] = edge[0];\n  newTriangles[triangle1Offset + 1] = edge[1];\n  newTriangles[triangle1Offset + 2] = positionsLength / 3 + vertex2Offset;\n\n  newTriangles[triangle1Offset + 3] = positionsLength / 3 + vertex2Offset;\n  newTriangles[triangle1Offset + 4] = positionsLength / 3 + vertex1Offset;\n  newTriangles[triangle1Offset + 5] = edge[0];\n}\n"]},"metadata":{},"sourceType":"module"}