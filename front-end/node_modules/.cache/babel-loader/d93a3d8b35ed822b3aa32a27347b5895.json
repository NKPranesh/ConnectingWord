{"ast":null,"code":"import { Vector3 } from '@math.gl/core';\nimport { GL } from '@loaders.gl/math';\nexport function normalize3DTilePositionAttribute(tile, positions, options) {\n  if (!tile.isQuantized) {\n    return positions;\n  }\n\n  if (options['3d-tiles'] && options['3d-tiles'].decodeQuantizedPositions) {\n    tile.isQuantized = false;\n    return decodeQuantizedPositions(tile, positions);\n  }\n\n  return {\n    type: GL.UNSIGNED_SHORT,\n    value: positions,\n    size: 3,\n    normalized: true\n  };\n}\n\nfunction decodeQuantizedPositions(tile, positions) {\n  const scratchPosition = new Vector3();\n  const decodedArray = new Float32Array(tile.pointCount * 3);\n\n  for (let i = 0; i < tile.pointCount; i++) {\n    scratchPosition.set(positions[i * 3], positions[i * 3 + 1], positions[i * 3 + 2]).scale(1 / tile.quantizedRange).multiply(tile.quantizedVolumeScale).add(tile.quantizedVolumeOffset).toArray(decodedArray, i * 3);\n  }\n\n  return decodedArray;\n}","map":{"version":3,"sources":["../../../../../src/lib/parsers/helpers/normalize-3d-tile-positions.js"],"names":["tile","options","decodeQuantizedPositions","type","GL","value","size","normalized","scratchPosition","decodedArray","i","positions"],"mappings":"AAAA,SAAA,OAAA,QAAA,eAAA;AACA,SAAA,EAAA,QAAA,kBAAA;AAGA,OAAO,SAAA,gCAAA,CAAA,IAAA,EAAA,SAAA,EAAA,OAAA,EAAoE;AACzE,MAAI,CAACA,IAAI,CAAT,WAAA,EAAuB;AACrB,WAAA,SAAA;AACD;;AAMD,MAAIC,OAAO,CAAPA,UAAO,CAAPA,IAAuBA,OAAO,CAAPA,UAAO,CAAPA,CAA3B,wBAAA,EAAyE;AACvED,IAAAA,IAAI,CAAJA,WAAAA,GAAAA,KAAAA;AACA,WAAOE,wBAAwB,CAAA,IAAA,EAA/B,SAA+B,CAA/B;AACD;;AAID,SAAO;AACLC,IAAAA,IAAI,EAAEC,EAAE,CADH,cAAA;AAELC,IAAAA,KAAK,EAFA,SAAA;AAGLC,IAAAA,IAAI,EAHC,CAAA;AAILC,IAAAA,UAAU,EAAE;AAJP,GAAP;AAMD;;AAGD,SAAA,wBAAA,CAAA,IAAA,EAAA,SAAA,EAAmD;AACjD,QAAMC,eAAe,GAAG,IAAxB,OAAwB,EAAxB;AACA,QAAMC,YAAY,GAAG,IAAA,YAAA,CAAiBT,IAAI,CAAJA,UAAAA,GAAtC,CAAqB,CAArB;;AAEA,OAAK,IAAIU,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGV,IAAI,CAAxB,UAAA,EAAqCU,CAArC,EAAA,EAA0C;AAExCF,IAAAA,eAAe,CAAfA,GAAAA,CACOG,SAAS,CAACD,CAAC,GADlBF,CACgB,CADhBA,EACyBG,SAAS,CAACD,CAAC,GAADA,CAAAA,GADnCF,CACkC,CADlCA,EAC+CG,SAAS,CAACD,CAAC,GAADA,CAAAA,GADzDF,CACwD,CADxDA,EAAAA,KAAAA,CAES,IAAIR,IAAI,CAFjBQ,cAAAA,EAAAA,QAAAA,CAGYR,IAAI,CAHhBQ,oBAAAA,EAAAA,GAAAA,CAIOR,IAAI,CAJXQ,qBAAAA,EAAAA,OAAAA,CAAAA,YAAAA,EAKyBE,CAAC,GAL1BF,CAAAA;AAMD;;AAED,SAAA,YAAA;AACD","sourcesContent":["import {Vector3} from '@math.gl/core';\nimport {GL} from '@loaders.gl/math';\n\n// Prepare attribute for positions\nexport function normalize3DTilePositionAttribute(tile, positions, options) {\n  if (!tile.isQuantized) {\n    return positions;\n  }\n\n  // For quantized posititions, either expand to Float32Array or return custom accessor\n  // https://github.com/AnalyticalGraphicsInc/3d-tiles/blob/master/specification/TileFormats/Instanced3DModel/README.md#quantized-positions\n\n  // Optionally decodes quantized positions on GPU, for simpler renderers that don't accept normalized attributes\n  if (options['3d-tiles'] && options['3d-tiles'].decodeQuantizedPositions) {\n    tile.isQuantized = false;\n    return decodeQuantizedPositions(tile, positions);\n  }\n\n  // Default: Use normalized shorts directly, no copying/processing.\n  // NOTE: The \"missing\" offset/scaling operations are automatically added to modelMatrix if `tile.isQuantized === true`\n  return {\n    type: GL.UNSIGNED_SHORT,\n    value: positions,\n    size: 3,\n    normalized: true\n  };\n}\n\n// Pre-scale quantized positions on CPU\nfunction decodeQuantizedPositions(tile, positions) {\n  const scratchPosition = new Vector3();\n  const decodedArray = new Float32Array(tile.pointCount * 3);\n\n  for (let i = 0; i < tile.pointCount; i++) {\n    // POSITION = POSITION_QUANTIZED / 65535.0 * QUANTIZED_VOLUME_SCALE + QUANTIZED_VOLUME_OFFSET\n    scratchPosition\n      .set(positions[i * 3], positions[i * 3 + 1], positions[i * 3 + 2])\n      .scale(1 / tile.quantizedRange)\n      .multiply(tile.quantizedVolumeScale)\n      .add(tile.quantizedVolumeOffset)\n      .toArray(decodedArray, i * 3);\n  }\n\n  return decodedArray;\n}\n"]},"metadata":{},"sourceType":"module"}