{"ast":null,"code":"import { checkVector, deprecated } from '../lib/validators';\nimport Matrix from './base/matrix';\nimport { vec2_transformMat4AsVector, vec3_transformMat4AsVector } from '../lib/gl-matrix-extras';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport * as vec4 from 'gl-matrix/vec4';\nconst IDENTITY = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\nconst ZERO = Object.freeze([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nconst INDICES = Object.freeze({\n  COL0ROW0: 0,\n  COL0ROW1: 1,\n  COL0ROW2: 2,\n  COL0ROW3: 3,\n  COL1ROW0: 4,\n  COL1ROW1: 5,\n  COL1ROW2: 6,\n  COL1ROW3: 7,\n  COL2ROW0: 8,\n  COL2ROW1: 9,\n  COL2ROW2: 10,\n  COL2ROW3: 11,\n  COL3ROW0: 12,\n  COL3ROW1: 13,\n  COL3ROW2: 14,\n  COL3ROW3: 15\n});\nconst constants = {};\nexport default class Matrix4 extends Matrix {\n  static get IDENTITY() {\n    constants.IDENTITY = constants.IDENTITY || Object.freeze(new Matrix4(IDENTITY));\n    return constants.IDENTITY;\n  }\n\n  static get ZERO() {\n    constants.ZERO = constants.ZERO || Object.freeze(new Matrix4(ZERO));\n    return constants.ZERO;\n  }\n\n  get INDICES() {\n    return INDICES;\n  }\n\n  get ELEMENTS() {\n    return 16;\n  }\n\n  get RANK() {\n    return 4;\n  }\n\n  constructor(array) {\n    super(-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0);\n\n    if (arguments.length === 1 && Array.isArray(array)) {\n      this.copy(array);\n    } else {\n      this.identity();\n    }\n  }\n\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    this[4] = array[4];\n    this[5] = array[5];\n    this[6] = array[6];\n    this[7] = array[7];\n    this[8] = array[8];\n    this[9] = array[9];\n    this[10] = array[10];\n    this[11] = array[11];\n    this[12] = array[12];\n    this[13] = array[13];\n    this[14] = array[14];\n    this[15] = array[15];\n    return this.check();\n  }\n\n  set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n\n  setRowMajor(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n\n  toRowMajor(result) {\n    result[0] = this[0];\n    result[1] = this[4];\n    result[2] = this[8];\n    result[3] = this[12];\n    result[4] = this[1];\n    result[5] = this[5];\n    result[6] = this[9];\n    result[7] = this[13];\n    result[8] = this[2];\n    result[9] = this[6];\n    result[10] = this[10];\n    result[11] = this[14];\n    result[12] = this[3];\n    result[13] = this[7];\n    result[14] = this[11];\n    result[15] = this[15];\n    return result;\n  }\n\n  identity() {\n    return this.copy(IDENTITY);\n  }\n\n  fromQuaternion(q) {\n    mat4.fromQuat(this, q);\n    return this.check();\n  }\n\n  frustum(_ref) {\n    let {\n      left,\n      right,\n      bottom,\n      top,\n      near,\n      far\n    } = _ref;\n\n    if (far === Infinity) {\n      Matrix4._computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);\n    } else {\n      mat4.frustum(this, left, right, bottom, top, near, far);\n    }\n\n    return this.check();\n  }\n\n  static _computeInfinitePerspectiveOffCenter(result, left, right, bottom, top, near) {\n    const column0Row0 = 2.0 * near / (right - left);\n    const column1Row1 = 2.0 * near / (top - bottom);\n    const column2Row0 = (right + left) / (right - left);\n    const column2Row1 = (top + bottom) / (top - bottom);\n    const column2Row2 = -1.0;\n    const column2Row3 = -1.0;\n    const column3Row2 = -2.0 * near;\n    result[0] = column0Row0;\n    result[1] = 0.0;\n    result[2] = 0.0;\n    result[3] = 0.0;\n    result[4] = 0.0;\n    result[5] = column1Row1;\n    result[6] = 0.0;\n    result[7] = 0.0;\n    result[8] = column2Row0;\n    result[9] = column2Row1;\n    result[10] = column2Row2;\n    result[11] = column2Row3;\n    result[12] = 0.0;\n    result[13] = 0.0;\n    result[14] = column3Row2;\n    result[15] = 0.0;\n    return result;\n  }\n\n  lookAt(eye, center, up) {\n    if (arguments.length === 1) {\n      ({\n        eye,\n        center,\n        up\n      } = eye);\n    }\n\n    center = center || [0, 0, 0];\n    up = up || [0, 1, 0];\n    mat4.lookAt(this, eye, center, up);\n    return this.check();\n  }\n\n  ortho(_ref2) {\n    let {\n      left,\n      right,\n      bottom,\n      top,\n      near = 0.1,\n      far = 500\n    } = _ref2;\n    mat4.ortho(this, left, right, bottom, top, near, far);\n    return this.check();\n  }\n\n  orthographic(_ref3) {\n    let {\n      fovy = 45 * Math.PI / 180,\n      aspect = 1,\n      focalDistance = 1,\n      near = 0.1,\n      far = 500\n    } = _ref3;\n\n    if (fovy > Math.PI * 2) {\n      throw Error('radians');\n    }\n\n    const halfY = fovy / 2;\n    const top = focalDistance * Math.tan(halfY);\n    const right = top * aspect;\n    return new Matrix4().ortho({\n      left: -right,\n      right,\n      bottom: -top,\n      top,\n      near,\n      far\n    });\n  }\n\n  perspective() {\n    let {\n      fovy = undefined,\n      fov = 45 * Math.PI / 180,\n      aspect = 1,\n      near = 0.1,\n      far = 500\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    fovy = fovy || fov;\n\n    if (fovy > Math.PI * 2) {\n      throw Error('radians');\n    }\n\n    mat4.perspective(this, fovy, aspect, near, far);\n    return this.check();\n  }\n\n  determinant() {\n    return mat4.determinant(this);\n  }\n\n  getScale() {\n    let result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n    result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);\n    result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);\n    result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);\n    return result;\n  }\n\n  getTranslation() {\n    let result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n    result[0] = this[12];\n    result[1] = this[13];\n    result[2] = this[14];\n    return result;\n  }\n\n  getRotation() {\n    let result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n    let scaleResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const scale = this.getScale(scaleResult || [-0, -0, -0]);\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = 0;\n    result[4] = this[4] * inverseScale0;\n    result[5] = this[5] * inverseScale1;\n    result[6] = this[6] * inverseScale2;\n    result[7] = 0;\n    result[8] = this[8] * inverseScale0;\n    result[9] = this[9] * inverseScale1;\n    result[10] = this[10] * inverseScale2;\n    result[11] = 0;\n    result[12] = 0;\n    result[13] = 0;\n    result[14] = 0;\n    result[15] = 1;\n    return result;\n  }\n\n  getRotationMatrix3() {\n    let result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0, -0, -0, -0, -0, -0, -0];\n    let scaleResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const scale = this.getScale(scaleResult || [-0, -0, -0]);\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = this[4] * inverseScale0;\n    result[4] = this[5] * inverseScale1;\n    result[5] = this[6] * inverseScale2;\n    result[6] = this[8] * inverseScale0;\n    result[7] = this[9] * inverseScale1;\n    result[8] = this[10] * inverseScale2;\n    return result;\n  }\n\n  transpose() {\n    mat4.transpose(this, this);\n    return this.check();\n  }\n\n  invert() {\n    mat4.invert(this, this);\n    return this.check();\n  }\n\n  multiplyLeft(a) {\n    mat4.multiply(this, a, this);\n    return this.check();\n  }\n\n  multiplyRight(a) {\n    mat4.multiply(this, this, a);\n    return this.check();\n  }\n\n  rotateX(radians) {\n    mat4.rotateX(this, this, radians);\n    return this.check();\n  }\n\n  rotateY(radians) {\n    mat4.rotateY(this, this, radians);\n    return this.check();\n  }\n\n  rotateZ(radians) {\n    mat4.rotateZ(this, this, radians);\n    return this.check();\n  }\n\n  rotateXYZ(_ref4) {\n    let [rx, ry, rz] = _ref4;\n    return this.rotateX(rx).rotateY(ry).rotateZ(rz);\n  }\n\n  rotateAxis(radians, axis) {\n    mat4.rotate(this, this, radians, axis);\n    return this.check();\n  }\n\n  scale(factor) {\n    if (Array.isArray(factor)) {\n      mat4.scale(this, this, factor);\n    } else {\n      mat4.scale(this, this, [factor, factor, factor]);\n    }\n\n    return this.check();\n  }\n\n  translate(vec) {\n    mat4.translate(this, this, vec);\n    return this.check();\n  }\n\n  transform(vector, result) {\n    if (vector.length === 4) {\n      result = vec4.transformMat4(result || [-0, -0, -0, -0], vector, this);\n      checkVector(result, 4);\n      return result;\n    }\n\n    return this.transformAsPoint(vector, result);\n  }\n\n  transformAsPoint(vector, result) {\n    const {\n      length\n    } = vector;\n\n    switch (length) {\n      case 2:\n        result = vec2.transformMat4(result || [-0, -0], vector, this);\n        break;\n\n      case 3:\n        result = vec3.transformMat4(result || [-0, -0, -0], vector, this);\n        break;\n\n      default:\n        throw new Error('Illegal vector');\n    }\n\n    checkVector(result, vector.length);\n    return result;\n  }\n\n  transformAsVector(vector, result) {\n    switch (vector.length) {\n      case 2:\n        result = vec2_transformMat4AsVector(result || [-0, -0], vector, this);\n        break;\n\n      case 3:\n        result = vec3_transformMat4AsVector(result || [-0, -0, -0], vector, this);\n        break;\n\n      default:\n        throw new Error('Illegal vector');\n    }\n\n    checkVector(result, vector.length);\n    return result;\n  }\n\n  makeRotationX(radians) {\n    return this.identity().rotateX(radians);\n  }\n\n  makeTranslation(x, y, z) {\n    return this.identity().translate([x, y, z]);\n  }\n\n  transformPoint(vector, result) {\n    deprecated('Matrix4.transformPoint', '3.0');\n    return this.transformAsPoint(vector, result);\n  }\n\n  transformVector(vector, result) {\n    deprecated('Matrix4.transformVector', '3.0');\n    return this.transformAsPoint(vector, result);\n  }\n\n  transformDirection(vector, result) {\n    deprecated('Matrix4.transformDirection', '3.0');\n    return this.transformAsVector(vector, result);\n  }\n\n}","map":{"version":3,"sources":["../../../src/classes/matrix4.js"],"names":["IDENTITY","Object","ZERO","INDICES","COL0ROW0","COL0ROW1","COL0ROW2","COL0ROW3","COL1ROW0","COL1ROW1","COL1ROW2","COL1ROW3","COL2ROW0","COL2ROW1","COL2ROW2","COL2ROW3","COL3ROW0","COL3ROW1","COL3ROW2","COL3ROW3","constants","ELEMENTS","RANK","constructor","arguments","Array","copy","array","set","setRowMajor","toRowMajor","result","identity","fromQuaternion","mat4","frustum","far","Matrix4","_computeInfinitePerspectiveOffCenter","column0Row0","right","column1Row1","top","column2Row0","column2Row1","column2Row2","column2Row3","column3Row2","lookAt","up","center","ortho","near","orthographic","fovy","Math","aspect","focalDistance","Error","halfY","left","bottom","perspective","fov","determinant","getScale","getTranslation","getRotation","scaleResult","scale","inverseScale0","inverseScale1","inverseScale2","getRotationMatrix3","transpose","invert","multiplyLeft","multiplyRight","rotateX","rotateY","rotateZ","rotateXYZ","rotateAxis","translate","transform","vector","vec4","checkVector","transformAsPoint","length","vec2","vec3","transformAsVector","vec2_transformMat4AsVector","vec3_transformMat4AsVector","makeRotationX","makeTranslation","transformPoint","deprecated","transformVector","transformDirection"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {checkVector, deprecated} from '../lib/validators';\nimport Matrix from './base/matrix';\n// eslint-disable-next-line camelcase\nimport {vec2_transformMat4AsVector, vec3_transformMat4AsVector} from '../lib/gl-matrix-extras';\n\n// @ts-ignore: error TS2307: Cannot find module 'gl-matrix/...'.\nimport * as mat4 from 'gl-matrix/mat4';\n// @ts-ignore: error TS2307: Cannot find module 'gl-matrix/...'.\nimport * as vec2 from 'gl-matrix/vec2';\n// @ts-ignore: error TS2307: Cannot find module 'gl-matrix/...'.\nimport * as vec3 from 'gl-matrix/vec3';\n// @ts-ignore: error TS2307: Cannot find module 'gl-matrix/...'.\nimport * as vec4 from 'gl-matrix/vec4';\n\nconst IDENTITY = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\nconst ZERO = Object.freeze([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n\nconst INDICES = Object.freeze({\n  COL0ROW0: 0,\n  COL0ROW1: 1,\n  COL0ROW2: 2,\n  COL0ROW3: 3,\n  COL1ROW0: 4,\n  COL1ROW1: 5,\n  COL1ROW2: 6,\n  COL1ROW3: 7,\n  COL2ROW0: 8,\n  COL2ROW1: 9,\n  COL2ROW2: 10,\n  COL2ROW3: 11,\n  COL3ROW0: 12,\n  COL3ROW1: 13,\n  COL3ROW2: 14,\n  COL3ROW3: 15\n});\n\nconst constants = {};\n\nexport default class Matrix4 extends Matrix {\n  static get IDENTITY() {\n    constants.IDENTITY = constants.IDENTITY || Object.freeze(new Matrix4(IDENTITY));\n    return constants.IDENTITY;\n  }\n\n  static get ZERO() {\n    constants.ZERO = constants.ZERO || Object.freeze(new Matrix4(ZERO));\n    return constants.ZERO;\n  }\n\n  get INDICES() {\n    return INDICES;\n  }\n\n  get ELEMENTS() {\n    return 16;\n  }\n\n  get RANK() {\n    return 4;\n  }\n\n  constructor(array) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0);\n    if (arguments.length === 1 && Array.isArray(array)) {\n      this.copy(array);\n    } else {\n      this.identity();\n    }\n  }\n\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    this[4] = array[4];\n    this[5] = array[5];\n    this[6] = array[6];\n    this[7] = array[7];\n    this[8] = array[8];\n    this[9] = array[9];\n    this[10] = array[10];\n    this[11] = array[11];\n    this[12] = array[12];\n    this[13] = array[13];\n    this[14] = array[14];\n    this[15] = array[15];\n    return this.check();\n  }\n\n  // eslint-disable-next-line max-params\n  set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n\n  // accepts row major order, stores as column major\n  // eslint-disable-next-line max-params\n  setRowMajor(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n\n  toRowMajor(result) {\n    result[0] = this[0];\n    result[1] = this[4];\n    result[2] = this[8];\n    result[3] = this[12];\n    result[4] = this[1];\n    result[5] = this[5];\n    result[6] = this[9];\n    result[7] = this[13];\n    result[8] = this[2];\n    result[9] = this[6];\n    result[10] = this[10];\n    result[11] = this[14];\n    result[12] = this[3];\n    result[13] = this[7];\n    result[14] = this[11];\n    result[15] = this[15];\n    return result;\n  }\n\n  // Constructors\n\n  identity() {\n    return this.copy(IDENTITY);\n  }\n\n  // Calculates a 4x4 matrix from the given quaternion\n  // q quat  Quaternion to create matrix from\n  fromQuaternion(q) {\n    mat4.fromQuat(this, q);\n    return this.check();\n  }\n\n  // Generates a frustum matrix with the given bounds\n  // left  Number  Left bound of the frustum\n  // right Number  Right bound of the frustum\n  // bottom  Number  Bottom bound of the frustum\n  // top Number  Top bound of the frustum\n  // near  Number  Near bound of the frustum\n  // far Number  Far bound of the frustum\n  frustum({left, right, bottom, top, near, far}) {\n    if (far === Infinity) {\n      Matrix4._computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);\n    } else {\n      mat4.frustum(this, left, right, bottom, top, near, far);\n    }\n    return this.check();\n  }\n\n  // eslint-disable-next-line max-params\n  static _computeInfinitePerspectiveOffCenter(result, left, right, bottom, top, near) {\n    const column0Row0 = (2.0 * near) / (right - left);\n    const column1Row1 = (2.0 * near) / (top - bottom);\n    const column2Row0 = (right + left) / (right - left);\n    const column2Row1 = (top + bottom) / (top - bottom);\n    const column2Row2 = -1.0;\n    const column2Row3 = -1.0;\n    const column3Row2 = -2.0 * near;\n\n    result[0] = column0Row0;\n    result[1] = 0.0;\n    result[2] = 0.0;\n    result[3] = 0.0;\n    result[4] = 0.0;\n    result[5] = column1Row1;\n    result[6] = 0.0;\n    result[7] = 0.0;\n    result[8] = column2Row0;\n    result[9] = column2Row1;\n    result[10] = column2Row2;\n    result[11] = column2Row3;\n    result[12] = 0.0;\n    result[13] = 0.0;\n    result[14] = column3Row2;\n    result[15] = 0.0;\n    return result;\n  }\n\n  // Generates a look-at matrix with the given eye position, focal point,\n  // and up axis\n  // eye vec3  Position of the viewer\n  // center  vec3  Point the viewer is looking at\n  // up  vec3  vec3 pointing up\n  lookAt(eye, center, up) {\n    // Signature: lookAt({eye, center = [0, 0, 0], up = [0, 1, 0]}))\n    if (arguments.length === 1) {\n      ({eye, center, up} = eye);\n    }\n\n    center = center || [0, 0, 0];\n    up = up || [0, 1, 0];\n\n    mat4.lookAt(this, eye, center, up);\n    return this.check();\n  }\n\n  // Generates a orthogonal projection matrix with the given bounds\n  // from \"traditional\" view space parameters\n  // left  number  Left bound of the frustum\n  // right number  Right bound of the frustum\n  // bottom  number  Bottom bound of the frustum\n  // top number  Top bound of the frustum\n  // near  number  Near bound of the frustum\n  // far number  Far bound of the frustum\n  ortho({left, right, bottom, top, near = 0.1, far = 500}) {\n    mat4.ortho(this, left, right, bottom, top, near, far);\n    return this.check();\n  }\n\n  // Generates an orthogonal projection matrix with the same parameters\n  // as a perspective matrix (plus focalDistance)\n  // fovy  number  Vertical field of view in radians\n  // aspect  number  Aspect ratio. typically viewport width/height\n  // focalDistance distance in the view frustum used for extent calculations\n  // near  number  Near bound of the frustum\n  // far number  Far bound of the frustum\n  orthographic({\n    fovy = (45 * Math.PI) / 180,\n    aspect = 1,\n    focalDistance = 1,\n    near = 0.1,\n    far = 500\n  }) {\n    if (fovy > Math.PI * 2) {\n      throw Error('radians');\n    }\n    const halfY = fovy / 2;\n    const top = focalDistance * Math.tan(halfY); // focus_plane is the distance from the camera\n    const right = top * aspect;\n\n    return new Matrix4().ortho({\n      left: -right,\n      right,\n      bottom: -top,\n      top,\n      near,\n      far\n    });\n  }\n\n  // Generates a perspective projection matrix with the given bounds\n  // fovy  number  Vertical field of view in radians\n  // aspect  number  Aspect ratio. typically viewport width/height\n  // near  number  Near bound of the frustum\n  // far number  Far bound of the frustum\n  perspective({\n    fovy = undefined,\n    fov = (45 * Math.PI) / 180, // DEPRECATED\n    aspect = 1,\n    near = 0.1,\n    far = 500\n  } = {}) {\n    fovy = fovy || fov;\n    if (fovy > Math.PI * 2) {\n      throw Error('radians');\n    }\n    mat4.perspective(this, fovy, aspect, near, far);\n    return this.check();\n  }\n\n  // Accessors\n\n  determinant() {\n    return mat4.determinant(this);\n  }\n\n  // Extracts the non-uniform scale assuming the matrix is an affine transformation.\n  // The scales are the \"lengths\" of the column vectors in the upper-left 3x3 matrix.\n  getScale(result = [-0, -0, -0]) {\n    // explicit is faster than hypot...\n    result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);\n    result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);\n    result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);\n    // result[0] = Math.hypot(this[0], this[1], this[2]);\n    // result[1] = Math.hypot(this[4], this[5], this[6]);\n    // result[2] = Math.hypot(this[8], this[9], this[10]);\n    return result;\n  }\n\n  // Gets the translation portion, assuming the matrix is a affine transformation matrix.\n  getTranslation(result = [-0, -0, -0]) {\n    result[0] = this[12];\n    result[1] = this[13];\n    result[2] = this[14];\n    return result;\n  }\n\n  // Gets upper left 3x3 pure rotation matrix (non-scaling), assume affine transformation matrix\n  getRotation(\n    result = [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0],\n    scaleResult = null\n  ) {\n    const scale = this.getScale(scaleResult || [-0, -0, -0]);\n\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = 0;\n    result[4] = this[4] * inverseScale0;\n    result[5] = this[5] * inverseScale1;\n    result[6] = this[6] * inverseScale2;\n    result[7] = 0;\n    result[8] = this[8] * inverseScale0;\n    result[9] = this[9] * inverseScale1;\n    result[10] = this[10] * inverseScale2;\n    result[11] = 0;\n    result[12] = 0;\n    result[13] = 0;\n    result[14] = 0;\n    result[15] = 1;\n    return result;\n  }\n\n  getRotationMatrix3(result = [-0, -0, -0, -0, -0, -0, -0, -0, -0], scaleResult = null) {\n    const scale = this.getScale(scaleResult || [-0, -0, -0]);\n\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = this[4] * inverseScale0;\n    result[4] = this[5] * inverseScale1;\n    result[5] = this[6] * inverseScale2;\n    result[6] = this[8] * inverseScale0;\n    result[7] = this[9] * inverseScale1;\n    result[8] = this[10] * inverseScale2;\n    return result;\n  }\n\n  // Modifiers\n\n  transpose() {\n    mat4.transpose(this, this);\n    return this.check();\n  }\n\n  invert() {\n    mat4.invert(this, this);\n    return this.check();\n  }\n\n  // Operations\n\n  multiplyLeft(a) {\n    mat4.multiply(this, a, this);\n    return this.check();\n  }\n\n  multiplyRight(a) {\n    mat4.multiply(this, this, a);\n    return this.check();\n  }\n\n  // Rotates a matrix by the given angle around the X axis\n  rotateX(radians) {\n    mat4.rotateX(this, this, radians);\n    // mat4.rotate(this, this, radians, [1, 0, 0]);\n    return this.check();\n  }\n\n  // Rotates a matrix by the given angle around the Y axis.\n  rotateY(radians) {\n    mat4.rotateY(this, this, radians);\n    // mat4.rotate(this, this, radians, [0, 1, 0]);\n    return this.check();\n  }\n\n  // Rotates a matrix by the given angle around the Z axis.\n  rotateZ(radians) {\n    mat4.rotateZ(this, this, radians);\n    // mat4.rotate(this, this, radians, [0, 0, 1]);\n    return this.check();\n  }\n\n  rotateXYZ([rx, ry, rz]) {\n    return this.rotateX(rx).rotateY(ry).rotateZ(rz);\n  }\n\n  rotateAxis(radians, axis) {\n    mat4.rotate(this, this, radians, axis);\n    return this.check();\n  }\n\n  scale(factor) {\n    if (Array.isArray(factor)) {\n      mat4.scale(this, this, factor);\n    } else {\n      mat4.scale(this, this, [factor, factor, factor]);\n    }\n\n    return this.check();\n  }\n\n  translate(vec) {\n    mat4.translate(this, this, vec);\n    return this.check();\n  }\n\n  // Transforms\n\n  // Transforms any 2, 3 or 4 element vector. 2 and 3 elements are treated as points\n  transform(vector, result) {\n    if (vector.length === 4) {\n      result = vec4.transformMat4(result || [-0, -0, -0, -0], vector, this);\n      checkVector(result, 4);\n      return result;\n    }\n    return this.transformAsPoint(vector, result);\n  }\n\n  // Transforms any 2 or 3 element array as point (w implicitly 1)\n  transformAsPoint(vector, result) {\n    const {length} = vector;\n    switch (length) {\n      case 2:\n        result = vec2.transformMat4(result || [-0, -0], vector, this);\n        break;\n      case 3:\n        result = vec3.transformMat4(result || [-0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(result, vector.length);\n    return result;\n  }\n\n  // Transforms any 2 or 3 element array as vector (w implicitly 0)\n  transformAsVector(vector, result) {\n    switch (vector.length) {\n      case 2:\n        result = vec2_transformMat4AsVector(result || [-0, -0], vector, this);\n        break;\n      case 3:\n        result = vec3_transformMat4AsVector(result || [-0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(result, vector.length);\n    return result;\n  }\n\n  // three.js math API compatibility\n  makeRotationX(radians) {\n    return this.identity().rotateX(radians);\n  }\n\n  makeTranslation(x, y, z) {\n    return this.identity().translate([x, y, z]);\n  }\n\n  // DEPRECATED in 3.0\n\n  transformPoint(vector, result) {\n    deprecated('Matrix4.transformPoint', '3.0');\n    return this.transformAsPoint(vector, result);\n  }\n\n  transformVector(vector, result) {\n    deprecated('Matrix4.transformVector', '3.0');\n    return this.transformAsPoint(vector, result);\n  }\n\n  transformDirection(vector, result) {\n    deprecated('Matrix4.transformDirection', '3.0');\n    return this.transformAsVector(vector, result);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}