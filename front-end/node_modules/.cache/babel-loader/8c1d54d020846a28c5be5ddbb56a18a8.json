{"ast":null,"code":"import { assert } from '../utils/assert';\nexport function getKeyValue(gl, name) {\n  if (typeof name !== 'string') {\n    return name;\n  }\n\n  const number = Number(name);\n\n  if (!isNaN(number)) {\n    return number;\n  }\n\n  name = name.replace(/^.*\\./, '');\n  const value = gl[name];\n  assert(value !== undefined, `Accessing undefined constant GL.${name}`);\n  return value;\n}\nexport function getKey(gl, value) {\n  value = Number(value);\n\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return `GL.${key}`;\n    }\n  }\n\n  return String(value);\n}\nexport function getKeyType(gl, value) {\n  assert(value !== undefined, 'undefined key');\n  value = Number(value);\n\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return `GL.${key}`;\n    }\n  }\n\n  return String(value);\n}","map":{"version":3,"sources":["../../../src/webgl-utils/constants-to-keys.js"],"names":["number","Number","isNaN","name","value","gl","assert","key","String"],"mappings":"AAAA,SAAA,MAAA,QAAA,iBAAA;AAGA,OAAO,SAAA,WAAA,CAAA,EAAA,EAAA,IAAA,EAA+B;AAEpC,MAAI,OAAA,IAAA,KAAJ,QAAA,EAA8B;AAC5B,WAAA,IAAA;AACD;;AAGD,QAAMA,MAAM,GAAGC,MAAM,CAArB,IAAqB,CAArB;;AACA,MAAI,CAACC,KAAK,CAAV,MAAU,CAAV,EAAoB;AAClB,WAAA,MAAA;AACD;;AAGDC,EAAAA,IAAI,GAAGA,IAAI,CAAJA,OAAAA,CAAAA,OAAAA,EAAPA,EAAOA,CAAPA;AACA,QAAMC,KAAK,GAAGC,EAAE,CAAhB,IAAgB,CAAhB;AACAC,EAAAA,MAAM,CAACF,KAAK,KAAN,SAAA,EAAuB,mCAAkCD,IAA/DG,EAAM,CAANA;AACA,SAAA,KAAA;AACD;AAED,OAAO,SAAA,MAAA,CAAA,EAAA,EAAA,KAAA,EAA2B;AAChCF,EAAAA,KAAK,GAAGH,MAAM,CAAdG,KAAc,CAAdA;;AACA,OAAK,MAAL,GAAA,IAAA,EAAA,EAAsB;AACpB,QAAIC,EAAE,CAAFA,GAAE,CAAFA,KAAJ,KAAA,EAAuB;AACrB,aAAQ,MAAKE,GAAb,EAAA;AACD;AACF;;AACD,SAAOC,MAAM,CAAb,KAAa,CAAb;AACD;AAED,OAAO,SAAA,UAAA,CAAA,EAAA,EAAA,KAAA,EAA+B;AACpCF,EAAAA,MAAM,CAACF,KAAK,KAAN,SAAA,EAANE,eAAM,CAANA;AACAF,EAAAA,KAAK,GAAGH,MAAM,CAAdG,KAAc,CAAdA;;AACA,OAAK,MAAL,GAAA,IAAA,EAAA,EAAsB;AACpB,QAAIC,EAAE,CAAFA,GAAE,CAAFA,KAAJ,KAAA,EAAuB;AACrB,aAAQ,MAAKE,GAAb,EAAA;AACD;AACF;;AACD,SAAOC,MAAM,CAAb,KAAa,CAAb;AACD","sourcesContent":["import {assert} from '../utils/assert';\n\n// Resolve a WebGL enumeration name (returns itself if already a number)\nexport function getKeyValue(gl, name) {\n  // If not a string, return (assume number)\n  if (typeof name !== 'string') {\n    return name;\n  }\n\n  // If string converts to number, return number\n  const number = Number(name);\n  if (!isNaN(number)) {\n    return number;\n  }\n\n  // Look up string, after removing any 'GL.' or 'gl.' prefix\n  name = name.replace(/^.*\\./, '');\n  const value = gl[name];\n  assert(value !== undefined, `Accessing undefined constant GL.${name}`);\n  return value;\n}\n\nexport function getKey(gl, value) {\n  value = Number(value);\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return `GL.${key}`;\n    }\n  }\n  return String(value);\n}\n\nexport function getKeyType(gl, value) {\n  assert(value !== undefined, 'undefined key');\n  value = Number(value);\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return `GL.${key}`;\n    }\n  }\n  return String(value);\n}\n"]},"metadata":{},"sourceType":"module"}