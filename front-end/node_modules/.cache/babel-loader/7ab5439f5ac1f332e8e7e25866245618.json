{"ast":null,"code":"import Controller from './controller';\nimport ViewState from './view-state';\nimport { mod } from '../utils/math-utils';\nimport { Vector3, _SphericalCoordinates as SphericalCoordinates, clamp } from 'math.gl';\nconst MOVEMENT_SPEED = 20;\nconst DEFAULT_STATE = {\n  position: [0, 0, 0],\n  pitch: 0,\n  bearing: 0,\n  maxPitch: 90,\n  minPitch: -90\n};\n\nclass FirstPersonState extends ViewState {\n  constructor(_ref) {\n    let {\n      width,\n      height,\n      position = DEFAULT_STATE.position,\n      bearing = DEFAULT_STATE.bearing,\n      pitch = DEFAULT_STATE.pitch,\n      longitude,\n      latitude,\n      maxPitch = DEFAULT_STATE.maxPitch,\n      minPitch = DEFAULT_STATE.minPitch,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoomPosition,\n      startZoom\n    } = _ref;\n    super({\n      width,\n      height,\n      position,\n      bearing,\n      pitch,\n      longitude,\n      latitude,\n      maxPitch,\n      minPitch\n    });\n    this._state = {\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoomPosition,\n      startZoom\n    };\n  }\n\n  getDirection() {\n    let use2D = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const spherical = new SphericalCoordinates({\n      bearing: this._viewportProps.bearing,\n      pitch: use2D ? 90 : 90 + this._viewportProps.pitch\n    });\n    const direction = spherical.toVector3().normalize();\n    return direction;\n  }\n\n  panStart() {\n    return this;\n  }\n\n  pan() {\n    return this;\n  }\n\n  panEnd() {\n    return this;\n  }\n\n  rotateStart(_ref2) {\n    let {\n      pos\n    } = _ref2;\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  rotate(_ref3) {\n    let {\n      pos,\n      deltaAngleX = 0,\n      deltaAngleY = 0\n    } = _ref3;\n    const {\n      startRotatePos,\n      startBearing,\n      startPitch\n    } = this._state;\n    const {\n      width,\n      height\n    } = this._viewportProps;\n\n    if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    let newRotation;\n\n    if (pos) {\n      const deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n      newRotation = {\n        bearing: startBearing - deltaScaleX * 180,\n        pitch: startPitch - deltaScaleY * 90\n      };\n    } else {\n      newRotation = {\n        bearing: startBearing - deltaAngleX,\n        pitch: startPitch - deltaAngleY\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotatePos: null,\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  zoomStart() {\n    return this._getUpdatedState({\n      startZoomPosition: this._viewportProps.position,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  zoom(_ref4) {\n    let {\n      scale\n    } = _ref4;\n    let {\n      startZoomPosition\n    } = this._state;\n\n    if (!startZoomPosition) {\n      startZoomPosition = this._viewportProps.position;\n    }\n\n    const direction = this.getDirection();\n    return this._move(direction, Math.log2(scale) * MOVEMENT_SPEED, startZoomPosition);\n  }\n\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  moveLeft() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MOVEMENT_SPEED;\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({\n      radians: Math.PI / 2\n    }), speed);\n  }\n\n  moveRight() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MOVEMENT_SPEED;\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({\n      radians: -Math.PI / 2\n    }), speed);\n  }\n\n  moveUp() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MOVEMENT_SPEED;\n    const direction = this.getDirection(true);\n    return this._move(direction, speed);\n  }\n\n  moveDown() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MOVEMENT_SPEED;\n    const direction = this.getDirection(true);\n    return this._move(direction.negate(), speed);\n  }\n\n  rotateLeft() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - speed\n    });\n  }\n\n  rotateRight() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + speed\n    });\n  }\n\n  rotateUp() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + speed\n    });\n  }\n\n  rotateDown() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - speed\n    });\n  }\n\n  zoomIn() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n    return this.zoom({\n      scale: speed\n    });\n  }\n\n  zoomOut() {\n    let speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n    return this.zoom({\n      scale: 1 / speed\n    });\n  }\n\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = { ...this._viewportProps\n    };\n    const {\n      bearing,\n      longitude\n    } = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n\n    return props;\n  }\n\n  _move(direction, speed) {\n    let fromPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._viewportProps.position;\n    const delta = direction.scale(speed);\n    return this._getUpdatedState({\n      position: new Vector3(fromPosition).add(delta)\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    return new FirstPersonState({ ...this._viewportProps,\n      ...this._state,\n      ...newProps\n    });\n  }\n\n  _applyConstraints(props) {\n    const {\n      pitch,\n      maxPitch,\n      minPitch,\n      longitude,\n      bearing\n    } = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n\n    if (bearing < -180 || bearing > 180) {\n      props.bearing = mod(bearing + 180, 360) - 180;\n    }\n\n    return props;\n  }\n\n}\n\nexport default class FirstPersonController extends Controller {\n  constructor(props) {\n    super(FirstPersonState, props);\n  }\n\n  get linearTransitionProps() {\n    return ['position', 'pitch', 'bearing'];\n  }\n\n}","map":{"version":3,"sources":["../../../src/controllers/first-person-controller.js"],"names":["_SphericalCoordinates","MOVEMENT_SPEED","DEFAULT_STATE","position","pitch","bearing","maxPitch","minPitch","constructor","startZoom","getDirection","use2D","spherical","direction","panStart","pan","panEnd","rotateStart","pos","startRotatePos","startBearing","startPitch","rotate","deltaAngleX","deltaAngleY","height","Number","deltaScaleX","deltaScaleY","newRotation","rotateEnd","zoomStart","startZoomPosition","zoom","scale","Math","zoomEnd","moveLeft","speed","radians","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","zoomIn","zoomOut","shortestPathFrom","fromProps","viewState","props","_viewportProps","longitude","_move","fromPosition","delta","_getUpdatedState","newProps","_applyConstraints","clamp","mod","linearTransitionProps"],"mappings":"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","sourcesContent":["import Controller from './controller';\nimport ViewState from './view-state';\nimport {mod} from '../utils/math-utils';\n\nimport {Vector3, _SphericalCoordinates as SphericalCoordinates, clamp} from 'math.gl';\n\nconst MOVEMENT_SPEED = 20;\nconst DEFAULT_STATE = {\n  position: [0, 0, 0],\n  pitch: 0,\n  bearing: 0,\n  maxPitch: 90,\n  minPitch: -90\n};\n\nclass FirstPersonState extends ViewState {\n  constructor({\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n\n    // Position and orientation\n    position = DEFAULT_STATE.position, // typically in meters from anchor point\n\n    bearing = DEFAULT_STATE.bearing, // Rotation around y axis\n    pitch = DEFAULT_STATE.pitch, // Rotation around x axis\n\n    // Geospatial anchor\n    longitude,\n    latitude,\n\n    maxPitch = DEFAULT_STATE.maxPitch,\n    minPitch = DEFAULT_STATE.minPitch,\n\n    // Model state when the rotate operation first started\n    startRotatePos,\n    startBearing,\n    startPitch,\n    startZoomPosition,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      position,\n      bearing,\n      pitch,\n      longitude,\n      latitude,\n      maxPitch,\n      minPitch\n    });\n\n    this._state = {\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoomPosition,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getDirection(use2D = false) {\n    const spherical = new SphericalCoordinates({\n      bearing: this._viewportProps.bearing,\n      pitch: use2D ? 90 : 90 + this._viewportProps.pitch\n    });\n    const direction = spherical.toVector3().normalize();\n    return direction;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart() {\n    return this;\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan() {\n    return this;\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this;\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startBearing, startPitch} = this._state;\n    const {width, height} = this._viewportProps;\n\n    if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      const deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n      newRotation = {\n        bearing: startBearing - deltaScaleX * 180,\n        pitch: startPitch - deltaScaleY * 90\n      };\n    } else {\n      newRotation = {\n        bearing: startBearing - deltaAngleX,\n        pitch: startPitch - deltaAngleY\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotatePos: null,\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart() {\n    return this._getUpdatedState({\n      startZoomPosition: this._viewportProps.position,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({scale}) {\n    let {startZoomPosition} = this._state;\n    if (!startZoomPosition) {\n      startZoomPosition = this._viewportProps.position;\n    }\n\n    const direction = this.getDirection();\n    return this._move(direction, Math.log2(scale) * MOVEMENT_SPEED, startZoomPosition);\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  moveLeft(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: Math.PI / 2}), speed);\n  }\n\n  moveRight(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: -Math.PI / 2}), speed);\n  }\n\n  // forward\n  moveUp(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction, speed);\n  }\n\n  // backward\n  moveDown(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.negate(), speed);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - speed\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this.zoom({scale: speed});\n  }\n\n  zoomOut(speed = 2) {\n    return this.zoom({scale: 1 / speed});\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = {...this._viewportProps};\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n  _move(direction, speed, fromPosition = this._viewportProps.position) {\n    const delta = direction.scale(speed);\n    return this._getUpdatedState({\n      position: new Vector3(fromPosition).add(delta)\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new FirstPersonState({...this._viewportProps, ...this._state, ...newProps});\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure pitch and zoom are within specified range\n    const {pitch, maxPitch, minPitch, longitude, bearing} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize degrees\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n    if (bearing < -180 || bearing > 180) {\n      props.bearing = mod(bearing + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class FirstPersonController extends Controller {\n  constructor(props) {\n    super(FirstPersonState, props);\n  }\n\n  get linearTransitionProps() {\n    return ['position', 'pitch', 'bearing'];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}