{"ast":null,"code":"import { COORDINATE_SYSTEM, createIterable } from '@deck.gl/core';\nconst RADIAN_PER_DEGREE = Math.PI / 180;\nconst modelMatrix = new Float32Array(16);\nconst valueArray = new Float32Array(12);\n\nfunction calculateTransformMatrix(targetMatrix, orientation, scale) {\n  const pitch = orientation[0] * RADIAN_PER_DEGREE;\n  const yaw = orientation[1] * RADIAN_PER_DEGREE;\n  const roll = orientation[2] * RADIAN_PER_DEGREE;\n  const sr = Math.sin(roll);\n  const sp = Math.sin(pitch);\n  const sw = Math.sin(yaw);\n  const cr = Math.cos(roll);\n  const cp = Math.cos(pitch);\n  const cw = Math.cos(yaw);\n  const scx = scale[0];\n  const scy = scale[1];\n  const scz = scale[2];\n  targetMatrix[0] = scx * cw * cp;\n  targetMatrix[1] = scx * sw * cp;\n  targetMatrix[2] = scx * -sp;\n  targetMatrix[3] = scy * (-sw * cr + cw * sp * sr);\n  targetMatrix[4] = scy * (cw * cr + sw * sp * sr);\n  targetMatrix[5] = scy * cp * sr;\n  targetMatrix[6] = scz * (sw * sr + cw * sp * cr);\n  targetMatrix[7] = scz * (-cw * sr + sw * sp * cr);\n  targetMatrix[8] = scz * cp * cr;\n}\n\nfunction getExtendedMat3FromMat4(mat4) {\n  mat4[0] = mat4[0];\n  mat4[1] = mat4[1];\n  mat4[2] = mat4[2];\n  mat4[3] = mat4[4];\n  mat4[4] = mat4[5];\n  mat4[5] = mat4[6];\n  mat4[6] = mat4[8];\n  mat4[7] = mat4[9];\n  mat4[8] = mat4[10];\n  mat4[9] = mat4[12];\n  mat4[10] = mat4[13];\n  mat4[11] = mat4[14];\n  return mat4.subarray(0, 12);\n}\n\nexport const MATRIX_ATTRIBUTES = {\n  size: 12,\n  accessor: ['getOrientation', 'getScale', 'getTranslation', 'getTransformMatrix'],\n  shaderAttributes: {\n    instanceModelMatrix__LOCATION_0: {\n      size: 3,\n      elementOffset: 0\n    },\n    instanceModelMatrix__LOCATION_1: {\n      size: 3,\n      elementOffset: 3\n    },\n    instanceModelMatrix__LOCATION_2: {\n      size: 3,\n      elementOffset: 6\n    },\n    instanceTranslation: {\n      size: 3,\n      elementOffset: 9\n    }\n  },\n\n  update(attribute, _ref) {\n    let {\n      startRow,\n      endRow\n    } = _ref;\n    const {\n      data,\n      getOrientation,\n      getScale,\n      getTranslation,\n      getTransformMatrix\n    } = this.props;\n    const arrayMatrix = Array.isArray(getTransformMatrix);\n    const constantMatrix = arrayMatrix && getTransformMatrix.length === 16;\n    const constantScale = Array.isArray(getScale);\n    const constantOrientation = Array.isArray(getOrientation);\n    const constantTranslation = Array.isArray(getTranslation);\n    const hasMatrix = constantMatrix || !arrayMatrix && Boolean(getTransformMatrix(data[0]));\n\n    if (hasMatrix) {\n      attribute.constant = constantMatrix;\n    } else {\n      attribute.constant = constantOrientation && constantScale && constantTranslation;\n    }\n\n    const instanceModelMatrixData = attribute.value;\n\n    if (attribute.constant) {\n      let matrix;\n\n      if (hasMatrix) {\n        modelMatrix.set(getTransformMatrix);\n        matrix = getExtendedMat3FromMat4(modelMatrix);\n      } else {\n        matrix = valueArray;\n        const orientation = getOrientation;\n        const scale = getScale;\n        calculateTransformMatrix(matrix, orientation, scale);\n        matrix.set(getTranslation, 9);\n      }\n\n      attribute.value = new Float32Array(matrix);\n    } else {\n      let i = startRow * attribute.size;\n      const {\n        iterable,\n        objectInfo\n      } = createIterable(data, startRow, endRow);\n\n      for (const object of iterable) {\n        objectInfo.index++;\n        let matrix;\n\n        if (hasMatrix) {\n          modelMatrix.set(constantMatrix ? getTransformMatrix : getTransformMatrix(object, objectInfo));\n          matrix = getExtendedMat3FromMat4(modelMatrix);\n        } else {\n          matrix = valueArray;\n          const orientation = constantOrientation ? getOrientation : getOrientation(object, objectInfo);\n          const scale = constantScale ? getScale : getScale(object, objectInfo);\n          calculateTransformMatrix(matrix, orientation, scale);\n          matrix.set(constantTranslation ? getTranslation : getTranslation(object, objectInfo), 9);\n        }\n\n        instanceModelMatrixData[i++] = matrix[0];\n        instanceModelMatrixData[i++] = matrix[1];\n        instanceModelMatrixData[i++] = matrix[2];\n        instanceModelMatrixData[i++] = matrix[3];\n        instanceModelMatrixData[i++] = matrix[4];\n        instanceModelMatrixData[i++] = matrix[5];\n        instanceModelMatrixData[i++] = matrix[6];\n        instanceModelMatrixData[i++] = matrix[7];\n        instanceModelMatrixData[i++] = matrix[8];\n        instanceModelMatrixData[i++] = matrix[9];\n        instanceModelMatrixData[i++] = matrix[10];\n        instanceModelMatrixData[i++] = matrix[11];\n      }\n    }\n  }\n\n};\nexport function shouldComposeModelMatrix(viewport, coordinateSystem) {\n  return coordinateSystem === COORDINATE_SYSTEM.CARTESIAN || coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS || coordinateSystem === COORDINATE_SYSTEM.DEFAULT && !viewport.isGeospatial;\n}","map":{"version":3,"sources":["../../../src/utils/matrix.js"],"names":["RADIAN_PER_DEGREE","Math","modelMatrix","valueArray","pitch","orientation","yaw","roll","sr","sp","sw","cr","cp","cw","scx","scale","scy","scz","targetMatrix","mat4","MATRIX_ATTRIBUTES","size","accessor","shaderAttributes","instanceModelMatrix__LOCATION_0","elementOffset","instanceModelMatrix__LOCATION_1","instanceModelMatrix__LOCATION_2","instanceTranslation","update","endRow","getTransformMatrix","arrayMatrix","Array","constantMatrix","constantScale","constantOrientation","constantTranslation","hasMatrix","Boolean","data","attribute","instanceModelMatrixData","matrix","getExtendedMat3FromMat4","calculateTransformMatrix","i","startRow","objectInfo","createIterable","getOrientation","getScale","getTranslation","coordinateSystem","COORDINATE_SYSTEM","viewport"],"mappings":"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","sourcesContent":["import {COORDINATE_SYSTEM, createIterable} from '@deck.gl/core';\n\n/* eslint-disable max-statements, complexity */\nconst RADIAN_PER_DEGREE = Math.PI / 180;\nconst modelMatrix = new Float32Array(16);\nconst valueArray = new Float32Array(12);\n\nfunction calculateTransformMatrix(targetMatrix, orientation, scale) {\n  const pitch = orientation[0] * RADIAN_PER_DEGREE;\n  const yaw = orientation[1] * RADIAN_PER_DEGREE;\n  const roll = orientation[2] * RADIAN_PER_DEGREE;\n\n  const sr = Math.sin(roll);\n  const sp = Math.sin(pitch);\n  const sw = Math.sin(yaw);\n\n  const cr = Math.cos(roll);\n  const cp = Math.cos(pitch);\n  const cw = Math.cos(yaw);\n\n  const scx = scale[0];\n  const scy = scale[1];\n  const scz = scale[2];\n\n  targetMatrix[0] = scx * cw * cp; // 0,0\n  targetMatrix[1] = scx * sw * cp; // 1,0\n  targetMatrix[2] = scx * -sp; // 2,0\n  targetMatrix[3] = scy * (-sw * cr + cw * sp * sr); // 0,1\n  targetMatrix[4] = scy * (cw * cr + sw * sp * sr); // 1,1\n  targetMatrix[5] = scy * cp * sr; // 2,1\n  targetMatrix[6] = scz * (sw * sr + cw * sp * cr); // 0,2\n  targetMatrix[7] = scz * (-cw * sr + sw * sp * cr); // 1,2\n  targetMatrix[8] = scz * cp * cr; // 2,2\n}\n\nfunction getExtendedMat3FromMat4(mat4) {\n  mat4[0] = mat4[0];\n  mat4[1] = mat4[1];\n  mat4[2] = mat4[2];\n  mat4[3] = mat4[4];\n  mat4[4] = mat4[5];\n  mat4[5] = mat4[6];\n  mat4[6] = mat4[8];\n  mat4[7] = mat4[9];\n  mat4[8] = mat4[10];\n  mat4[9] = mat4[12];\n  mat4[10] = mat4[13];\n  mat4[11] = mat4[14];\n\n  return mat4.subarray(0, 12);\n}\n\nexport const MATRIX_ATTRIBUTES = {\n  size: 12,\n  accessor: ['getOrientation', 'getScale', 'getTranslation', 'getTransformMatrix'],\n  shaderAttributes: {\n    instanceModelMatrix__LOCATION_0: {\n      size: 3,\n      elementOffset: 0\n    },\n    instanceModelMatrix__LOCATION_1: {\n      size: 3,\n      elementOffset: 3\n    },\n    instanceModelMatrix__LOCATION_2: {\n      size: 3,\n      elementOffset: 6\n    },\n    instanceTranslation: {\n      size: 3,\n      elementOffset: 9\n    }\n  },\n\n  update(attribute, {startRow, endRow}) {\n    // NOTE(Tarek): \"this\" will be bound to a layer!\n    const {data, getOrientation, getScale, getTranslation, getTransformMatrix} = this.props;\n\n    const arrayMatrix = Array.isArray(getTransformMatrix);\n    const constantMatrix = arrayMatrix && getTransformMatrix.length === 16;\n    const constantScale = Array.isArray(getScale);\n    const constantOrientation = Array.isArray(getOrientation);\n    const constantTranslation = Array.isArray(getTranslation);\n\n    const hasMatrix = constantMatrix || (!arrayMatrix && Boolean(getTransformMatrix(data[0])));\n\n    if (hasMatrix) {\n      attribute.constant = constantMatrix;\n    } else {\n      attribute.constant = constantOrientation && constantScale && constantTranslation;\n    }\n\n    const instanceModelMatrixData = attribute.value;\n\n    if (attribute.constant) {\n      let matrix;\n\n      if (hasMatrix) {\n        modelMatrix.set(getTransformMatrix);\n        matrix = getExtendedMat3FromMat4(modelMatrix);\n      } else {\n        matrix = valueArray;\n\n        const orientation = getOrientation;\n        const scale = getScale;\n\n        calculateTransformMatrix(matrix, orientation, scale);\n        matrix.set(getTranslation, 9);\n      }\n\n      attribute.value = new Float32Array(matrix);\n    } else {\n      let i = startRow * attribute.size;\n      const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n      for (const object of iterable) {\n        objectInfo.index++;\n        let matrix;\n\n        if (hasMatrix) {\n          modelMatrix.set(\n            constantMatrix ? getTransformMatrix : getTransformMatrix(object, objectInfo)\n          );\n          matrix = getExtendedMat3FromMat4(modelMatrix);\n        } else {\n          matrix = valueArray;\n\n          const orientation = constantOrientation\n            ? getOrientation\n            : getOrientation(object, objectInfo);\n          const scale = constantScale ? getScale : getScale(object, objectInfo);\n\n          calculateTransformMatrix(matrix, orientation, scale);\n          matrix.set(constantTranslation ? getTranslation : getTranslation(object, objectInfo), 9);\n        }\n\n        instanceModelMatrixData[i++] = matrix[0];\n        instanceModelMatrixData[i++] = matrix[1];\n        instanceModelMatrixData[i++] = matrix[2];\n        instanceModelMatrixData[i++] = matrix[3];\n        instanceModelMatrixData[i++] = matrix[4];\n        instanceModelMatrixData[i++] = matrix[5];\n        instanceModelMatrixData[i++] = matrix[6];\n        instanceModelMatrixData[i++] = matrix[7];\n        instanceModelMatrixData[i++] = matrix[8];\n        instanceModelMatrixData[i++] = matrix[9];\n        instanceModelMatrixData[i++] = matrix[10];\n        instanceModelMatrixData[i++] = matrix[11];\n      }\n    }\n  }\n};\n\n// only apply composeModelMatrix when in cartesian or meter_offsets coordinate system\n// with `composeModelMatrix` enabled, the rotation part of the layer's modelMatrix will be composed to instance's transformations\n// since rotating latitude and longitude can not provide meaningful results, hence `composeModelMatrix` is disabled\n// when in LNGLAT and LNGLAT_OFFSET coordinates.\nexport function shouldComposeModelMatrix(viewport, coordinateSystem) {\n  return (\n    coordinateSystem === COORDINATE_SYSTEM.CARTESIAN ||\n    coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS ||\n    (coordinateSystem === COORDINATE_SYSTEM.DEFAULT && !viewport.isGeospatial)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}