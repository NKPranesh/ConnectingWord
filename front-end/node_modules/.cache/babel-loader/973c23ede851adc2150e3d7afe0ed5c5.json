{"ast":null,"code":"import View from './view';\nimport Viewport from '../viewports/viewport';\nimport { getMeterZoom } from '@math.gl/web-mercator';\nimport { Matrix4, _SphericalCoordinates as SphericalCoordinates } from 'math.gl';\nimport FirstPersonController from '../controllers/first-person-controller';\n\nfunction getDirectionFromBearingAndPitch(_ref) {\n  let {\n    bearing,\n    pitch\n  } = _ref;\n  const spherical = new SphericalCoordinates({\n    bearing,\n    pitch\n  });\n  const direction = spherical.toVector3().normalize();\n  return direction;\n}\n\nclass FirstPersonViewport extends Viewport {\n  constructor(props) {\n    const {\n      modelMatrix = null,\n      bearing = 0,\n      pitch = 0,\n      up = [0, 0, 1]\n    } = props;\n    const dir = getDirectionFromBearingAndPitch({\n      bearing,\n      pitch: pitch === -90 ? 0.0001 : 90 + pitch\n    });\n    const center = modelMatrix ? modelMatrix.transformDirection(dir) : dir;\n    const zoom = getMeterZoom(props);\n    const scale = Math.pow(2, zoom);\n    const viewMatrix = new Matrix4().lookAt({\n      eye: [0, 0, 0],\n      center,\n      up\n    }).scale(scale);\n    super({ ...props,\n      zoom,\n      viewMatrix\n    });\n  }\n\n}\n\nexport default class FirstPersonView extends View {\n  constructor(props) {\n    super({ ...props,\n      type: FirstPersonViewport\n    });\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: FirstPersonController\n    });\n  }\n\n}\nFirstPersonView.displayName = 'FirstPersonView';","map":{"version":3,"sources":["../../../src/views/first-person-view.js"],"names":["_SphericalCoordinates","pitch","spherical","direction","constructor","modelMatrix","bearing","up","dir","getDirectionFromBearingAndPitch","center","zoom","getMeterZoom","scale","Math","viewMatrix","eye","type","FirstPersonViewport","controller","FirstPersonController","FirstPersonView"],"mappings":"AAAA,OAAA,IAAA,MAAA,QAAA;AACA,OAAA,QAAA,MAAA,uBAAA;AACA,SAAA,YAAA,QAAA,uBAAA;AACA,SAAA,OAAA,EAAiBA,qBAAqB,IAAtC,oBAAA,QAAA,SAAA;AACA,OAAA,qBAAA,MAAA,wCAAA;;AAEA,SAAA,+BAAA,OAA2D;AAAA,MAAlB;AAAA,IAAA,OAAA;AAAUC,IAAAA;AAAV,GAAkB;AACzD,QAAMC,SAAS,GAAG,IAAA,oBAAA,CAAyB;AAAA,IAAA,OAAA;AAAUD,IAAAA;AAAV,GAAzB,CAAlB;AACA,QAAME,SAAS,GAAGD,SAAS,CAATA,SAAAA,GAAlB,SAAkBA,EAAlB;AACA,SAAA,SAAA;AACD;;AAED,MAAA,mBAAA,SAAA,QAAA,CAA2C;AACzCE,EAAAA,WAAW,CAAA,KAAA,EAAQ;AAEjB,UAAM;AAEJC,MAAAA,WAAW,GAFP,IAAA;AAGJC,MAAAA,OAAO,GAHH,CAAA;AAIJL,MAAAA,KAAK,GAJD,CAAA;AAKJM,MAAAA,EAAE,GAAG,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AALD,QAAN,KAAA;AASA,UAAMC,GAAG,GAAGC,+BAA+B,CAAC;AAAA,MAAA,OAAA;AAG1CR,MAAAA,KAAK,EAAEA,KAAK,KAAK,CAAVA,EAAAA,GAAAA,MAAAA,GAAyB,KAAKA;AAHK,KAAD,CAA3C;AAOA,UAAMS,MAAM,GAAGL,WAAW,GAAGA,WAAW,CAAXA,kBAAAA,CAAH,GAAGA,CAAH,GAA1B,GAAA;AAGA,UAAMM,IAAI,GAAGC,YAAY,CAAzB,KAAyB,CAAzB;AACA,UAAMC,KAAK,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAd,IAAcA,CAAd;AACA,UAAMC,UAAU,GAAG,IAAA,OAAA,GAAA,MAAA,CAAqB;AAACC,MAAAA,GAAG,EAAE,CAAA,CAAA,EAAA,CAAA,EAAN,CAAM,CAAN;AAAA,MAAA,MAAA;AAAyBT,MAAAA;AAAzB,KAArB,EAAA,KAAA,CAAnB,KAAmB,CAAnB;AAEA,UAAM,EACJ,GADI,KAAA;AAAA,MAAA,IAAA;AAGJQ,MAAAA;AAHI,KAAN;AAKD;;AA/BwC;;AAkC3C,eAAe,MAAA,eAAA,SAAA,IAAA,CAAmC;AAChDX,EAAAA,WAAW,CAAA,KAAA,EAAQ;AACjB,UAAM,EACJ,GADI,KAAA;AAEJa,MAAAA,IAAI,EAAEC;AAFF,KAAN;AAID;;AAED,MAAIC,UAAJ,GAAiB;AACf,WAAO,KAAA,mBAAA,CAAyB;AAC9BF,MAAAA,IAAI,EAAEG;AADwB,KAAzB,CAAP;AAGD;;AAZ+C;AAelDC,eAAe,CAAfA,WAAAA,GAAAA,iBAAAA","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\nimport {getMeterZoom} from '@math.gl/web-mercator';\nimport {Matrix4, _SphericalCoordinates as SphericalCoordinates} from 'math.gl';\nimport FirstPersonController from '../controllers/first-person-controller';\n\nfunction getDirectionFromBearingAndPitch({bearing, pitch}) {\n  const spherical = new SphericalCoordinates({bearing, pitch});\n  const direction = spherical.toVector3().normalize();\n  return direction;\n}\n\nclass FirstPersonViewport extends Viewport {\n  constructor(props) {\n    // TODO - push direction handling into Matrix4.lookAt\n    const {\n      // view matrix arguments\n      modelMatrix = null,\n      bearing = 0,\n      pitch = 0,\n      up = [0, 0, 1] // Defines up direction, default positive z axis,\n    } = props;\n\n    // Always calculate direction from bearing and pitch\n    const dir = getDirectionFromBearingAndPitch({\n      bearing,\n      // Avoid \"pixel project matrix not invertible\" error\n      pitch: pitch === -90 ? 0.0001 : 90 + pitch\n    });\n\n    // Direction is relative to model coordinates, of course\n    const center = modelMatrix ? modelMatrix.transformDirection(dir) : dir;\n\n    // Just the direction. All the positioning is done in viewport.js\n    const zoom = getMeterZoom(props);\n    const scale = Math.pow(2, zoom);\n    const viewMatrix = new Matrix4().lookAt({eye: [0, 0, 0], center, up}).scale(scale);\n\n    super({\n      ...props,\n      zoom,\n      viewMatrix\n    });\n  }\n}\n\nexport default class FirstPersonView extends View {\n  constructor(props) {\n    super({\n      ...props,\n      type: FirstPersonViewport\n    });\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: FirstPersonController\n    });\n  }\n}\n\nFirstPersonView.displayName = 'FirstPersonView';\n"]},"metadata":{},"sourceType":"module"}