{"ast":null,"code":"import { scaleThreshold } from 'd3-scale';\nimport getPalette, { DEFAULT_PALETTE, NULL_COLOR } from './palette';\nimport { assert, getAttrValue } from './utils';\nexport default function colorBins(_ref) {\n  let {\n    attr,\n    domain,\n    colors = DEFAULT_PALETTE,\n    nullColor = NULL_COLOR\n  } = _ref;\n  assert(Array.isArray(domain), 'Expected \"domain\" to be an array of numbers');\n  const palette = typeof colors === 'string' ? getPalette(colors, domain.length) : colors;\n  const color = scaleThreshold().domain(domain).range(palette);\n  return d => {\n    const value = getAttrValue(attr, d);\n    return Number.isFinite(value) ? color(value) : nullColor;\n  };\n}","map":{"version":3,"sources":["../../../src/style/color-bins-style.js"],"names":["colors","nullColor","NULL_COLOR","assert","Array","palette","getPalette","domain","color","scaleThreshold","d","value","getAttrValue","Number"],"mappings":"AAAA,SAAA,cAAA,QAAA,UAAA;AACA,OAAA,UAAA,IAAA,eAAA,EAAA,UAAA,QAAA,WAAA;AACA,SAAA,MAAA,EAAA,YAAA,QAAA,SAAA;AAEA,eAAe,SAAA,SAAA,OAKZ;AAAA,MAL+B;AAAA,IAAA,IAAA;AAAA,IAAA,MAAA;AAGhCA,IAAAA,MAAM,GAH0B,eAAA;AAIhCC,IAAAA,SAAS,GAAGC;AAJoB,GAK/B;AACDC,EAAAA,MAAM,CAACC,KAAK,CAALA,OAAAA,CAAD,MAACA,CAAD,EAAND,6CAAM,CAANA;AAEA,QAAME,OAAO,GAAG,OAAA,MAAA,KAAA,QAAA,GAA6BC,UAAU,CAAA,MAAA,EAASC,MAAM,CAAtD,MAAuC,CAAvC,GAAhB,MAAA;AAEA,QAAMC,KAAK,GAAGC,cAAc,GAAdA,MAAAA,CAAAA,MAAAA,EAAAA,KAAAA,CAAd,OAAcA,CAAd;AAIA,SAAOC,CAAC,IAAI;AACV,UAAMC,KAAK,GAAGC,YAAY,CAAA,IAAA,EAA1B,CAA0B,CAA1B;AACA,WAAOC,MAAM,CAANA,QAAAA,CAAAA,KAAAA,IAAyBL,KAAK,CAA9BK,KAA8B,CAA9BA,GAAP,SAAA;AAFF,GAAA;AAID","sourcesContent":["import {scaleThreshold} from 'd3-scale';\nimport getPalette, {DEFAULT_PALETTE, NULL_COLOR} from './palette';\nimport {assert, getAttrValue} from './utils';\n\nexport default function colorBins({\n  attr,\n  domain,\n  colors = DEFAULT_PALETTE,\n  nullColor = NULL_COLOR\n}) {\n  assert(Array.isArray(domain), 'Expected \"domain\" to be an array of numbers');\n\n  const palette = typeof colors === 'string' ? getPalette(colors, domain.length) : colors;\n\n  const color = scaleThreshold()\n    .domain(domain)\n    .range(palette);\n\n  return d => {\n    const value = getAttrValue(attr, d);\n    return Number.isFinite(value) ? color(value) : nullColor;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}