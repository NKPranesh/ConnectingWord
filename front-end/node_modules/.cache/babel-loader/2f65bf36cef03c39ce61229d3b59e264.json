{"ast":null,"code":"const DATA_URL_PATTERN = /^data:([-\\w.]+\\/[-\\w.+]+)(;|,)/;\nconst MIME_TYPE_PATTERN = /^([-\\w.]+\\/[-\\w.+]+)/;\nexport function parseMIMEType(mimeString) {\n  const matches = MIME_TYPE_PATTERN.exec(mimeString);\n\n  if (matches) {\n    return matches[1];\n  }\n\n  return mimeString;\n}\nexport function parseMIMETypeFromURL(url) {\n  const matches = DATA_URL_PATTERN.exec(url);\n\n  if (matches) {\n    return matches[1];\n  }\n\n  return '';\n}","map":{"version":3,"sources":["../../../../src/lib/utils/mime-type-utils.ts"],"names":["DATA_URL_PATTERN","MIME_TYPE_PATTERN","matches"],"mappings":"AAGA,MAAMA,gBAAgB,GAAtB,gCAAA;AACA,MAAMC,iBAAiB,GAAvB,sBAAA;AAUA,OAAO,SAAA,aAAA,CAAA,UAAA,EAAmD;AAExD,QAAMC,OAAO,GAAGD,iBAAiB,CAAjBA,IAAAA,CAAhB,UAAgBA,CAAhB;;AACA,MAAA,OAAA,EAAa;AACX,WAAOC,OAAO,CAAd,CAAc,CAAd;AACD;;AACD,SAAA,UAAA;AACD;AAWD,OAAO,SAAA,oBAAA,CAAA,GAAA,EAAmD;AAExD,QAAMA,OAAO,GAAGF,gBAAgB,CAAhBA,IAAAA,CAAhB,GAAgBA,CAAhB;;AACA,MAAA,OAAA,EAAa;AACX,WAAOE,OAAO,CAAd,CAAc,CAAd;AACD;;AACD,SAAA,EAAA;AACD","sourcesContent":["// TODO - build/integrate proper MIME type parsing\n// https://mimesniff.spec.whatwg.org/\n\nconst DATA_URL_PATTERN = /^data:([-\\w.]+\\/[-\\w.+]+)(;|,)/;\nconst MIME_TYPE_PATTERN = /^([-\\w.]+\\/[-\\w.+]+)/;\n\n/**\n * Remove extra data like `charset` from MIME types\n * @param mimeString\n * @returns A clean MIME type, or an empty string\n *\n * @todo - handle more advanced MIMETYpes, multiple types\n * @todo - extract charset etc\n */\nexport function parseMIMEType(mimeString: string): string {\n  // If resource is a data url, extract any embedded mime type\n  const matches = MIME_TYPE_PATTERN.exec(mimeString);\n  if (matches) {\n    return matches[1];\n  }\n  return mimeString;\n}\n\n/**\n * Extract MIME type from data URL\n *\n * @param mimeString\n * @returns A clean MIME type, or an empty string\n *\n * @todo - handle more advanced MIMETYpes, multiple types\n * @todo - extract charset etc\n */\nexport function parseMIMETypeFromURL(url: string): string {\n  // If resource is a data URL, extract any embedded mime type\n  const matches = DATA_URL_PATTERN.exec(url);\n  if (matches) {\n    return matches[1];\n  }\n  return '';\n}\n"]},"metadata":{},"sourceType":"module"}