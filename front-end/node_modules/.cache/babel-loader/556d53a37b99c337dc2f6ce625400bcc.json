{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Stats } from '@probe.gl/stats';\nconst STAT_QUEUED_REQUESTS = 'Queued Requests';\nconst STAT_ACTIVE_REQUESTS = 'Active Requests';\nconst STAT_CANCELLED_REQUESTS = 'Cancelled Requests';\nconst STAT_QUEUED_REQUESTS_EVER = 'Queued Requests Ever';\nconst STAT_ACTIVE_REQUESTS_EVER = 'Active Requests Ever';\nconst DEFAULT_PROPS = {\n  id: 'request-scheduler',\n  throttleRequests: true,\n  maxRequests: 6\n};\nexport default class RequestScheduler {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _defineProperty(this, \"props\", void 0);\n\n    _defineProperty(this, \"stats\", void 0);\n\n    _defineProperty(this, \"activeRequestCount\", 0);\n\n    _defineProperty(this, \"requestQueue\", []);\n\n    _defineProperty(this, \"requestMap\", new Map());\n\n    _defineProperty(this, \"deferredUpdate\", null);\n\n    this.props = { ...DEFAULT_PROPS,\n      ...props\n    };\n    this.stats = new Stats({\n      id: this.props.id\n    });\n    this.stats.get(STAT_QUEUED_REQUESTS);\n    this.stats.get(STAT_ACTIVE_REQUESTS);\n    this.stats.get(STAT_CANCELLED_REQUESTS);\n    this.stats.get(STAT_QUEUED_REQUESTS_EVER);\n    this.stats.get(STAT_ACTIVE_REQUESTS_EVER);\n  }\n\n  scheduleRequest(handle) {\n    let getPriority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => 0;\n\n    if (!this.props.throttleRequests) {\n      return Promise.resolve({\n        done: () => {}\n      });\n    }\n\n    if (this.requestMap.has(handle)) {\n      return this.requestMap.get(handle);\n    }\n\n    const request = {\n      handle,\n      priority: 0,\n      getPriority\n    };\n    const promise = new Promise(resolve => {\n      request.resolve = resolve;\n      return request;\n    });\n    this.requestQueue.push(request);\n    this.requestMap.set(handle, promise);\n\n    this._issueNewRequests();\n\n    return promise;\n  }\n\n  _issueRequest(request) {\n    const {\n      handle,\n      resolve\n    } = request;\n    let isDone = false;\n\n    const done = () => {\n      if (!isDone) {\n        isDone = true;\n        this.requestMap.delete(handle);\n        this.activeRequestCount--;\n\n        this._issueNewRequests();\n      }\n    };\n\n    this.activeRequestCount++;\n    return resolve ? resolve({\n      done\n    }) : Promise.resolve({\n      done\n    });\n  }\n\n  _issueNewRequests() {\n    if (!this.deferredUpdate) {\n      this.deferredUpdate = setTimeout(() => this._issueNewRequestsAsync(), 0);\n    }\n  }\n\n  _issueNewRequestsAsync() {\n    this.deferredUpdate = null;\n    const freeSlots = Math.max(this.props.maxRequests - this.activeRequestCount, 0);\n\n    if (freeSlots === 0) {\n      return;\n    }\n\n    this._updateAllRequests();\n\n    for (let i = 0; i < freeSlots; ++i) {\n      const request = this.requestQueue.shift();\n\n      if (request) {\n        this._issueRequest(request);\n      }\n    }\n  }\n\n  _updateAllRequests() {\n    const requestQueue = this.requestQueue;\n\n    for (let i = 0; i < requestQueue.length; ++i) {\n      const request = requestQueue[i];\n\n      if (!this._updateRequest(request)) {\n        requestQueue.splice(i, 1);\n        this.requestMap.delete(request.handle);\n        i--;\n      }\n    }\n\n    requestQueue.sort((a, b) => a.priority - b.priority);\n  }\n\n  _updateRequest(request) {\n    request.priority = request.getPriority(request.handle);\n\n    if (request.priority < 0) {\n      request.resolve(null);\n      return false;\n    }\n\n    return true;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/lib/request-utils/request-scheduler.ts"],"names":["STAT_QUEUED_REQUESTS","STAT_ACTIVE_REQUESTS","STAT_CANCELLED_REQUESTS","STAT_QUEUED_REQUESTS_EVER","STAT_ACTIVE_REQUESTS_EVER","DEFAULT_PROPS","id","throttleRequests","maxRequests","constructor","props","scheduleRequest","getPriority","done","request","priority","promise","resolve","_issueRequest","isDone","_issueNewRequests","setTimeout","_issueNewRequestsAsync","freeSlots","Math","i","_updateAllRequests","requestQueue","a","b","_updateRequest"],"mappings":"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","sourcesContent":["import {Stats} from '@probe.gl/stats';\n\ntype Handle = any;\ntype DoneFunction = () => any;\ntype GetPriorityFunction = () => number;\ntype RequestResult = {\n  done: DoneFunction;\n} | null;\n\n/** RequestScheduler Options */\nexport type RequestSchedulerProps = {\n  id?: string;\n  throttleRequests?: boolean;\n  maxRequests?: number;\n};\n\nconst STAT_QUEUED_REQUESTS = 'Queued Requests';\nconst STAT_ACTIVE_REQUESTS = 'Active Requests';\nconst STAT_CANCELLED_REQUESTS = 'Cancelled Requests';\nconst STAT_QUEUED_REQUESTS_EVER = 'Queued Requests Ever';\nconst STAT_ACTIVE_REQUESTS_EVER = 'Active Requests Ever';\n\nconst DEFAULT_PROPS: Required<RequestSchedulerProps> = {\n  id: 'request-scheduler',\n  // Specifies if the request scheduler should throttle incoming requests, mainly for comparative testing\n  throttleRequests: true,\n  // The maximum number of simultaneous active requests. Un-throttled requests do not observe this limit.\n  maxRequests: 6\n};\n\n/** Tracks one request */\ntype Request = {\n  handle: Handle;\n  priority: number;\n  getPriority: GetPriorityFunction;\n  resolve?: (value: any) => any;\n};\n\n/**\n * Used to issue a request, without having them \"deeply queued\" by the browser.\n * @todo - Track requests globally, across multiple servers\n */\nexport default class RequestScheduler {\n  readonly props: Required<RequestSchedulerProps>;\n  readonly stats: Stats;\n  activeRequestCount: number = 0;\n\n  /** Tracks the number of active requests and prioritizes/cancels queued requests. */\n  private requestQueue: Request[] = [];\n  private requestMap: Map<Handle, Promise<RequestResult>> = new Map();\n  private deferredUpdate: any = null;\n\n  constructor(props: RequestSchedulerProps = {}) {\n    this.props = {...DEFAULT_PROPS, ...props};\n\n    // Returns the statistics used by the request scheduler.\n    this.stats = new Stats({id: this.props.id});\n    this.stats.get(STAT_QUEUED_REQUESTS);\n    this.stats.get(STAT_ACTIVE_REQUESTS);\n    this.stats.get(STAT_CANCELLED_REQUESTS);\n    this.stats.get(STAT_QUEUED_REQUESTS_EVER);\n    this.stats.get(STAT_ACTIVE_REQUESTS_EVER);\n  }\n\n  /**\n   * Called by an application that wants to issue a request, without having it deeply queued by the browser\n   *\n   * When the returned promise resolved, it is OK for the application to issue a request.\n   * The promise resolves to an object that contains a `done` method.\n   * When the application's request has completed (or failed), the application must call the `done` function\n   *\n   * @param handle\n   * @param getPriority will be called when request \"slots\" open up,\n   *    allowing the caller to update priority or cancel the request\n   *    Highest priority executes first, priority < 0 cancels the request\n   * @returns a promise\n   *   - resolves to a object (with a `done` field) when the request can be issued without queueing,\n   *   - resolves to `null` if the request has been cancelled (by the callback return < 0).\n   *     In this case the application should not issue the request\n   */\n  scheduleRequest(\n    handle: Handle,\n    getPriority: GetPriorityFunction = () => 0\n  ): Promise<RequestResult> {\n    // Allows throttling to be disabled\n    if (!this.props.throttleRequests) {\n      return Promise.resolve({done: () => {}});\n    }\n\n    // dedupe\n    if (this.requestMap.has(handle)) {\n      return this.requestMap.get(handle) as Promise<any>;\n    }\n\n    const request: Request = {handle, priority: 0, getPriority};\n    const promise = new Promise<RequestResult>((resolve) => {\n      // @ts-ignore\n      request.resolve = resolve;\n      return request;\n    });\n\n    this.requestQueue.push(request);\n    this.requestMap.set(handle, promise);\n    this._issueNewRequests();\n    return promise;\n  }\n\n  // PRIVATE\n\n  _issueRequest(request: Request): Promise<any> {\n    const {handle, resolve} = request;\n    let isDone = false;\n\n    const done = () => {\n      // can only be called once\n      if (!isDone) {\n        isDone = true;\n\n        // Stop tracking a request - it has completed, failed, cancelled etc\n        this.requestMap.delete(handle);\n        this.activeRequestCount--;\n        // A slot just freed up, see if any queued requests are waiting\n        this._issueNewRequests();\n      }\n    };\n\n    // Track this request\n    this.activeRequestCount++;\n\n    return resolve ? resolve({done}) : Promise.resolve({done});\n  }\n\n  /** We check requests asynchronously, to prevent multiple updates */\n  _issueNewRequests(): void {\n    if (!this.deferredUpdate) {\n      this.deferredUpdate = setTimeout(() => this._issueNewRequestsAsync(), 0);\n    }\n  }\n\n  /** Refresh all requests  */\n  _issueNewRequestsAsync() {\n    // TODO - shouldn't we clear the timeout?\n    this.deferredUpdate = null;\n\n    const freeSlots = Math.max(this.props.maxRequests - this.activeRequestCount, 0);\n\n    if (freeSlots === 0) {\n      return;\n    }\n\n    this._updateAllRequests();\n\n    // Resolve pending promises for the top-priority requests\n    for (let i = 0; i < freeSlots; ++i) {\n      const request = this.requestQueue.shift();\n      if (request) {\n        this._issueRequest(request); // eslint-disable-line @typescript-eslint/no-floating-promises\n      }\n    }\n\n    // Uncomment to debug\n    // console.log(`${freeSlots} free slots, ${this.requestQueue.length} queued requests`);\n  }\n\n  /** Ensure all requests have updated priorities, and that no longer valid requests are cancelled */\n  _updateAllRequests() {\n    const requestQueue = this.requestQueue;\n    for (let i = 0; i < requestQueue.length; ++i) {\n      const request = requestQueue[i];\n      if (!this._updateRequest(request)) {\n        // Remove the element and make sure to adjust the counter to account for shortened array\n        requestQueue.splice(i, 1);\n        this.requestMap.delete(request.handle);\n        i--;\n      }\n    }\n\n    // Sort the remaining requests based on priority\n    requestQueue.sort((a, b) => a.priority - b.priority);\n  }\n\n  /** Update a single request by calling the callback */\n  _updateRequest(request) {\n    request.priority = request.getPriority(request.handle); // eslint-disable-line callback-return\n\n    // by returning a negative priority, the callback cancels the request\n    if (request.priority < 0) {\n      request.resolve(null);\n      return false;\n    }\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}