{"ast":null,"code":"import { deepEqual } from '../utils/deep-equal';\nimport { default as LightingEffect } from '../effects/lighting/lighting-effect';\nconst DEFAULT_LIGHTING_EFFECT = new LightingEffect();\nexport default class EffectManager {\n  constructor() {\n    this.effects = [];\n    this._internalEffects = [];\n    this._needsRedraw = 'Initial render';\n    this.setEffects();\n  }\n\n  setProps(props) {\n    if ('effects' in props) {\n      if (props.effects.length !== this.effects.length || !deepEqual(props.effects, this.effects)) {\n        this.setEffects(props.effects);\n        this._needsRedraw = 'effects changed';\n      }\n    }\n  }\n\n  needsRedraw() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      clearRedrawFlags: false\n    };\n    const redraw = this._needsRedraw;\n\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    return redraw;\n  }\n\n  getEffects() {\n    return this._internalEffects;\n  }\n\n  finalize() {\n    this.cleanup();\n  }\n\n  setEffects() {\n    let effects = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    this.cleanup();\n    this.effects = effects;\n\n    this._createInternalEffects();\n  }\n\n  cleanup() {\n    for (const effect of this.effects) {\n      effect.cleanup();\n    }\n\n    for (const effect of this._internalEffects) {\n      effect.cleanup();\n    }\n\n    this.effects.length = 0;\n    this._internalEffects.length = 0;\n  }\n\n  _createInternalEffects() {\n    this._internalEffects = this.effects.slice();\n\n    if (!this.effects.some(effect => effect instanceof LightingEffect)) {\n      this._internalEffects.push(DEFAULT_LIGHTING_EFFECT);\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/lib/effect-manager.js"],"names":["default","DEFAULT_LIGHTING_EFFECT","constructor","setProps","props","deepEqual","needsRedraw","opts","clearRedrawFlags","redraw","getEffects","finalize","setEffects","effects","cleanup","effect","_createInternalEffects"],"mappings":"AAAA,SAAA,SAAA,QAAA,qBAAA;AACA,SAAQA,OAAO,IAAf,cAAA,QAAA,qCAAA;AAEA,MAAMC,uBAAuB,GAAG,IAAhC,cAAgC,EAAhC;AAEA,eAAe,MAAA,aAAA,CAAoB;AACjCC,EAAAA,WAAW,GAAG;AACZ,SAAA,OAAA,GAAA,EAAA;AACA,SAAA,gBAAA,GAAA,EAAA;AACA,SAAA,YAAA,GAAA,gBAAA;AACA,SAAA,UAAA;AACD;;AAEDC,EAAAA,QAAQ,CAAA,KAAA,EAAQ;AACd,QAAI,aAAJ,KAAA,EAAwB;AACtB,UAAIC,KAAK,CAALA,OAAAA,CAAAA,MAAAA,KAAyB,KAAA,OAAA,CAAzBA,MAAAA,IAAgD,CAACC,SAAS,CAACD,KAAK,CAAN,OAAA,EAAgB,KAA9E,OAA8D,CAA9D,EAA6F;AAC3F,aAAA,UAAA,CAAgBA,KAAK,CAArB,OAAA;AACA,aAAA,YAAA,GAAA,iBAAA;AACD;AACF;AACF;;AAEDE,EAAAA,WAAW,GAAmC;AAAA,QAAlCC,IAAkC,uEAA3B;AAACC,MAAAA,gBAAgB,EAAE;AAAnB,KAA2B;AAC5C,UAAMC,MAAM,GAAG,KAAf,YAAA;;AACA,QAAIF,IAAI,CAAR,gBAAA,EAA2B;AACzB,WAAA,YAAA,GAAA,KAAA;AACD;;AACD,WAAA,MAAA;AACD;;AAEDG,EAAAA,UAAU,GAAG;AACX,WAAO,KAAP,gBAAA;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,SAAA,OAAA;AACD;;AAGDC,EAAAA,UAAU,GAAe;AAAA,QAAdC,OAAc,uEAAf,EAAe;AACvB,SAAA,OAAA;AACA,SAAA,OAAA,GAAA,OAAA;;AACA,SAAA,sBAAA;AACD;;AAEDC,EAAAA,OAAO,GAAG;AACR,SAAK,MAAL,MAAA,IAAqB,KAArB,OAAA,EAAmC;AACjCC,MAAAA,MAAM,CAANA,OAAAA;AACD;;AAED,SAAK,MAAL,MAAA,IAAqB,KAArB,gBAAA,EAA4C;AAC1CA,MAAAA,MAAM,CAANA,OAAAA;AACD;;AACD,SAAA,OAAA,CAAA,MAAA,GAAA,CAAA;AACA,SAAA,gBAAA,CAAA,MAAA,GAAA,CAAA;AACD;;AAEDC,EAAAA,sBAAsB,GAAG;AACvB,SAAA,gBAAA,GAAwB,KAAA,OAAA,CAAxB,KAAwB,EAAxB;;AACA,QAAI,CAAC,KAAA,OAAA,CAAA,IAAA,CAAkBD,MAAM,IAAIA,MAAM,YAAvC,cAAK,CAAL,EAAoE;AAClE,WAAA,gBAAA,CAAA,IAAA,CAAA,uBAAA;AACD;AACF;;AAzDgC","sourcesContent":["import {deepEqual} from '../utils/deep-equal';\nimport {default as LightingEffect} from '../effects/lighting/lighting-effect';\n\nconst DEFAULT_LIGHTING_EFFECT = new LightingEffect();\n\nexport default class EffectManager {\n  constructor() {\n    this.effects = [];\n    this._internalEffects = [];\n    this._needsRedraw = 'Initial render';\n    this.setEffects();\n  }\n\n  setProps(props) {\n    if ('effects' in props) {\n      if (props.effects.length !== this.effects.length || !deepEqual(props.effects, this.effects)) {\n        this.setEffects(props.effects);\n        this._needsRedraw = 'effects changed';\n      }\n    }\n  }\n\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  getEffects() {\n    return this._internalEffects;\n  }\n\n  finalize() {\n    this.cleanup();\n  }\n\n  // Private\n  setEffects(effects = []) {\n    this.cleanup();\n    this.effects = effects;\n    this._createInternalEffects();\n  }\n\n  cleanup() {\n    for (const effect of this.effects) {\n      effect.cleanup();\n    }\n\n    for (const effect of this._internalEffects) {\n      effect.cleanup();\n    }\n    this.effects.length = 0;\n    this._internalEffects.length = 0;\n  }\n\n  _createInternalEffects() {\n    this._internalEffects = this.effects.slice();\n    if (!this.effects.some(effect => effect instanceof LightingEffect)) {\n      this._internalEffects.push(DEFAULT_LIGHTING_EFFECT);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}