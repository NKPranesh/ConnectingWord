{"ast":null,"code":"import { LayerExtension } from '@deck.gl/core';\nconst defaultProps = {\n  clipBounds: [0, 0, 1, 1]\n};\nconst shaderFunction = \"\\nuniform vec4 clip_bounds;\\n\\nbool clip_isInBounds(vec2 position) {\\n  return position.x >= clip_bounds[0] && position.y >= clip_bounds[1] && position.x < clip_bounds[2] && position.y < clip_bounds[3];\\n}\\n\";\nconst shaderModuleVs = {\n  name: 'clip-vs',\n  vs: shaderFunction\n};\nconst injectionVs = {\n  'vs:#decl': \"\\nvarying float clip_isVisible;\\n\",\n  'vs:DECKGL_FILTER_GL_POSITION': \"\\n  clip_isVisible = float(clip_isInBounds(geometry.worldPosition.xy));\\n\",\n  'fs:#decl': \"\\nvarying float clip_isVisible;\\n\",\n  'fs:DECKGL_FILTER_COLOR': \"\\n  if (clip_isVisible < 0.5) discard;\\n\"\n};\nconst shaderModuleFs = {\n  name: 'clip-fs',\n  fs: shaderFunction\n};\nconst injectionFs = {\n  'vs:#decl': \"\\nvarying vec2 clip_commonPosition;\\n\",\n  'vs:DECKGL_FILTER_GL_POSITION': \"\\n  clip_commonPosition = geometry.position.xy;\\n\",\n  'fs:#decl': \"\\nvarying vec2 clip_commonPosition;\\n\",\n  'fs:DECKGL_FILTER_COLOR': \"\\n  if (!clip_isInBounds(clip_commonPosition)) discard;\\n\"\n};\nexport default class ClipExtension extends LayerExtension {\n  getShaders() {\n    let clipByInstance = ('instancePositions' in this.getAttributeManager().attributes);\n\n    if ('clipByInstance' in this.props) {\n      clipByInstance = this.props.clipByInstance;\n    }\n\n    this.state.clipByInstance = clipByInstance;\n    return clipByInstance ? {\n      modules: [shaderModuleVs],\n      inject: injectionVs\n    } : {\n      modules: [shaderModuleFs],\n      inject: injectionFs\n    };\n  }\n\n  draw(_ref) {\n    let {\n      uniforms\n    } = _ref;\n    const {\n      clipBounds = defaultProps.clipBounds\n    } = this.props;\n\n    if (this.state.clipByInstance) {\n      uniforms.clip_bounds = clipBounds;\n    } else {\n      const corner0 = this.projectPosition([clipBounds[0], clipBounds[1], 0]);\n      const corner1 = this.projectPosition([clipBounds[2], clipBounds[3], 0]);\n      uniforms.clip_bounds = [Math.min(corner0[0], corner1[0]), Math.min(corner0[1], corner1[1]), Math.max(corner0[0], corner1[0]), Math.max(corner0[1], corner1[1])];\n    }\n  }\n\n}\nClipExtension.extensionName = 'ClipExtension';\nClipExtension.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/clip/clip.js"],"names":["defaultProps","clipBounds","shaderFunction","shaderModuleVs","name","vs","injectionVs","shaderModuleFs","fs","injectionFs","getShaders","clipByInstance","modules","inject","draw","uniforms","corner0","corner1","Math","ClipExtension"],"mappings":"AAoBA,SAAA,cAAA,QAAA,eAAA;AAEA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AADO,CAArB;AAIA,MAAMC,cAAc,GAApB,iNAAA;AAYA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,IAAI,EADiB,SAAA;AAErBC,EAAAA,EAAE,EAAEH;AAFiB,CAAvB;AAKA,MAAMI,WAAW,GAAG;AAClB,cADkB,mCAAA;AAIlB,kCAJkB,2EAAA;AAOlB,cAPkB,mCAAA;AAUlB,4BAAA;AAVkB,CAApB;AAmBA,MAAMC,cAAc,GAAG;AACrBH,EAAAA,IAAI,EADiB,SAAA;AAErBI,EAAAA,EAAE,EAAEN;AAFiB,CAAvB;AAKA,MAAMO,WAAW,GAAG;AAClB,cADkB,uCAAA;AAIlB,kCAJkB,mDAAA;AAOlB,cAPkB,uCAAA;AAUlB,4BAAA;AAVkB,CAApB;AAeA,eAAe,MAAA,aAAA,SAAA,cAAA,CAA2C;AACxDC,EAAAA,UAAU,GAAG;AAKX,QAAIC,cAAc,IAAG,uBAAuB,KAAA,mBAAA,GAA5C,UAAkB,CAAlB;;AAEA,QAAI,oBAAoB,KAAxB,KAAA,EAAoC;AAClCA,MAAAA,cAAc,GAAG,KAAA,KAAA,CAAjBA,cAAAA;AACD;;AACD,SAAA,KAAA,CAAA,cAAA,GAAA,cAAA;AAEA,WAAOA,cAAc,GACjB;AACEC,MAAAA,OAAO,EAAE,CADX,cACW,CADX;AAEEC,MAAAA,MAAM,EAAEP;AAFV,KADiB,GAKjB;AACEM,MAAAA,OAAO,EAAE,CADX,cACW,CADX;AAEEC,MAAAA,MAAM,EAAEJ;AAFV,KALJ;AASD;;AAEDK,EAAAA,IAAI,OAAa;AAAA,QAAZ;AAACC,MAAAA;AAAD,KAAY;AACf,UAAM;AAACd,MAAAA,UAAU,GAAGD,YAAY,CAACC;AAA3B,QAAyC,KAA/C,KAAA;;AACA,QAAI,KAAA,KAAA,CAAJ,cAAA,EAA+B;AAC7Bc,MAAAA,QAAQ,CAARA,WAAAA,GAAAA,UAAAA;AADF,KAAA,MAEO;AACL,YAAMC,OAAO,GAAG,KAAA,eAAA,CAAqB,CAACf,UAAU,CAAX,CAAW,CAAX,EAAgBA,UAAU,CAA1B,CAA0B,CAA1B,EAArC,CAAqC,CAArB,CAAhB;AACA,YAAMgB,OAAO,GAAG,KAAA,eAAA,CAAqB,CAAChB,UAAU,CAAX,CAAW,CAAX,EAAgBA,UAAU,CAA1B,CAA0B,CAA1B,EAArC,CAAqC,CAArB,CAAhB;AAEAc,MAAAA,QAAQ,CAARA,WAAAA,GAAuB,CACrBG,IAAI,CAAJA,GAAAA,CAASF,OAAO,CAAhBE,CAAgB,CAAhBA,EAAqBD,OAAO,CADP,CACO,CAA5BC,CADqB,EAErBA,IAAI,CAAJA,GAAAA,CAASF,OAAO,CAAhBE,CAAgB,CAAhBA,EAAqBD,OAAO,CAFP,CAEO,CAA5BC,CAFqB,EAGrBA,IAAI,CAAJA,GAAAA,CAASF,OAAO,CAAhBE,CAAgB,CAAhBA,EAAqBD,OAAO,CAHP,CAGO,CAA5BC,CAHqB,EAIrBA,IAAI,CAAJA,GAAAA,CAASF,OAAO,CAAhBE,CAAgB,CAAhBA,EAAqBD,OAAO,CAJ9BF,CAI8B,CAA5BG,CAJqB,CAAvBH;AAMD;AACF;;AAvCuD;AA0C1DI,aAAa,CAAbA,aAAAA,GAAAA,eAAAA;AACAA,aAAa,CAAbA,YAAAA,GAAAA,YAAAA","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension} from '@deck.gl/core';\n\nconst defaultProps = {\n  clipBounds: [0, 0, 1, 1]\n};\n\nconst shaderFunction = `\nuniform vec4 clip_bounds;\n\nbool clip_isInBounds(vec2 position) {\n  return position.x >= clip_bounds[0] && position.y >= clip_bounds[1] && position.x < clip_bounds[2] && position.y < clip_bounds[3];\n}\n`;\n\n/*\n * The vertex-shader version clips geometries by their anchor position\n * e.g. ScatterplotLayer - show if the center of a circle is within bounds\n */\nconst shaderModuleVs = {\n  name: 'clip-vs',\n  vs: shaderFunction\n};\n\nconst injectionVs = {\n  'vs:#decl': `\nvarying float clip_isVisible;\n`,\n  'vs:DECKGL_FILTER_GL_POSITION': `\n  clip_isVisible = float(clip_isInBounds(geometry.worldPosition.xy));\n`,\n  'fs:#decl': `\nvarying float clip_isVisible;\n`,\n  'fs:DECKGL_FILTER_COLOR': `\n  if (clip_isVisible < 0.5) discard;\n`\n};\n\n/*\n * The fragment-shader version clips pixels at the bounds\n * e.g. PolygonLayer - show the part of the polygon that intersect with the bounds \n */\nconst shaderModuleFs = {\n  name: 'clip-fs',\n  fs: shaderFunction\n};\n\nconst injectionFs = {\n  'vs:#decl': `\nvarying vec2 clip_commonPosition;\n`,\n  'vs:DECKGL_FILTER_GL_POSITION': `\n  clip_commonPosition = geometry.position.xy;\n`,\n  'fs:#decl': `\nvarying vec2 clip_commonPosition;\n`,\n  'fs:DECKGL_FILTER_COLOR': `\n  if (!clip_isInBounds(clip_commonPosition)) discard;\n`\n};\n\nexport default class ClipExtension extends LayerExtension {\n  getShaders() {\n    // If `clipByInstance: true`, the entire object is shown/hidden based on its anchor position (done by vertex shader)\n    // Otherwise, the object is trimmed by the clip bounds (done by fragment shader)\n\n    // Default behavior: consider a layer instanced if it has attribute `instancePositions`\n    let clipByInstance = 'instancePositions' in this.getAttributeManager().attributes;\n    // Users can override by setting the `clipByInstance` prop\n    if ('clipByInstance' in this.props) {\n      clipByInstance = this.props.clipByInstance;\n    }\n    this.state.clipByInstance = clipByInstance;\n\n    return clipByInstance\n      ? {\n          modules: [shaderModuleVs],\n          inject: injectionVs\n        }\n      : {\n          modules: [shaderModuleFs],\n          inject: injectionFs\n        };\n  }\n\n  draw({uniforms}) {\n    const {clipBounds = defaultProps.clipBounds} = this.props;\n    if (this.state.clipByInstance) {\n      uniforms.clip_bounds = clipBounds;\n    } else {\n      const corner0 = this.projectPosition([clipBounds[0], clipBounds[1], 0]);\n      const corner1 = this.projectPosition([clipBounds[2], clipBounds[3], 0]);\n\n      uniforms.clip_bounds = [\n        Math.min(corner0[0], corner1[0]),\n        Math.min(corner0[1], corner1[1]),\n        Math.max(corner0[0], corner1[0]),\n        Math.max(corner0[1], corner1[1])\n      ];\n    }\n  }\n}\n\nClipExtension.extensionName = 'ClipExtension';\nClipExtension.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}