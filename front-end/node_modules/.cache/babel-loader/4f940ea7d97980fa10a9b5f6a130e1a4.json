{"ast":null,"code":"import { assert } from '../utils/assert';\nimport { isImageTypeSupported, getDefaultImageType } from '../category-api/image-type';\nimport { getImageData } from '../category-api/parsed-image-api';\nimport parseToImage from './parse-to-image';\nimport parseToImageBitmap from './parse-to-image-bitmap';\nimport parseToNodeImage from './parse-to-node-image';\nexport default async function parseImage(arrayBuffer, options, context) {\n  options = options || {};\n  const imageOptions = options.image || {};\n  const imageType = imageOptions.type || 'auto';\n  const {\n    url\n  } = context || {};\n  const loadType = getLoadableImageType(imageType);\n  let image;\n\n  switch (loadType) {\n    case 'imagebitmap':\n      image = await parseToImageBitmap(arrayBuffer, options, url);\n      break;\n\n    case 'image':\n      image = await parseToImage(arrayBuffer, options, url);\n      break;\n\n    case 'data':\n      image = await parseToNodeImage(arrayBuffer, options);\n      break;\n\n    default:\n      assert(false);\n  }\n\n  if (imageType === 'data') {\n    image = getImageData(image);\n  }\n\n  return image;\n}\n\nfunction getLoadableImageType(type) {\n  switch (type) {\n    case 'auto':\n    case 'data':\n      return getDefaultImageType();\n\n    default:\n      isImageTypeSupported(type);\n      return type;\n  }\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-image.ts"],"names":["options","imageOptions","imageType","url","context","loadType","getLoadableImageType","image","parseToImageBitmap","parseToImage","parseToNodeImage","assert","getImageData","getDefaultImageType","isImageTypeSupported"],"mappings":"AAAA,SAAA,MAAA,QAAA,iBAAA;AACA,SAAA,oBAAA,EAAA,mBAAA,QAAA,4BAAA;AACA,SAAA,YAAA,QAAA,kCAAA;AACA,OAAA,YAAA,MAAA,kBAAA;AACA,OAAA,kBAAA,MAAA,yBAAA;AACA,OAAA,gBAAA,MAAA,uBAAA;AAIA,eAAe,eAAA,UAAA,CAAA,WAAA,EAAA,OAAA,EAAA,OAAA,EAAyD;AACtEA,EAAAA,OAAO,GAAGA,OAAO,IAAjBA,EAAAA;AACA,QAAMC,YAAY,GAAGD,OAAO,CAAPA,KAAAA,IAArB,EAAA;AAGA,QAAME,SAAS,GAAGD,YAAY,CAAZA,IAAAA,IAAlB,MAAA;AAEA,QAAM;AAACE,IAAAA;AAAD,MAAQC,OAAO,IAArB,EAAA;AAGA,QAAMC,QAAQ,GAAGC,oBAAoB,CAArC,SAAqC,CAArC;AAEA,MAAA,KAAA;;AACA,UAAA,QAAA;AACE,SAAA,aAAA;AACEC,MAAAA,KAAK,GAAG,MAAMC,kBAAkB,CAAA,WAAA,EAAA,OAAA,EAAhCD,GAAgC,CAAhCA;AACA;;AACF,SAAA,OAAA;AACEA,MAAAA,KAAK,GAAG,MAAME,YAAY,CAAA,WAAA,EAAA,OAAA,EAA1BF,GAA0B,CAA1BA;AACA;;AACF,SAAA,MAAA;AAEEA,MAAAA,KAAK,GAAG,MAAMG,gBAAgB,CAAA,WAAA,EAA9BH,OAA8B,CAA9BA;AACA;;AACF;AACEI,MAAAA,MAAM,CAANA,KAAM,CAANA;AAZJ;;AAgBA,MAAIT,SAAS,KAAb,MAAA,EAA0B;AACxBK,IAAAA,KAAK,GAAGK,YAAY,CAApBL,KAAoB,CAApBA;AACD;;AAED,SAAA,KAAA;AACD;;AAGD,SAAA,oBAAA,CAAA,IAAA,EAAoC;AAClC,UAAA,IAAA;AACE,SAAA,MAAA;AACA,SAAA,MAAA;AAGE,aAAOM,mBAAP,EAAA;;AACF;AAEEC,MAAAA,oBAAoB,CAApBA,IAAoB,CAApBA;AACA,aAAA,IAAA;AATJ;AAWD","sourcesContent":["import {assert} from '../utils/assert';\nimport {isImageTypeSupported, getDefaultImageType} from '../category-api/image-type';\nimport {getImageData} from '../category-api/parsed-image-api';\nimport parseToImage from './parse-to-image';\nimport parseToImageBitmap from './parse-to-image-bitmap';\nimport parseToNodeImage from './parse-to-node-image';\n\n// Parse to platform defined image type (data on node, ImageBitmap or HTMLImage on browser)\n// eslint-disable-next-line complexity\nexport default async function parseImage(arrayBuffer, options, context) {\n  options = options || {};\n  const imageOptions = options.image || {};\n\n  // The user can request a specific output format via `options.image.type`\n  const imageType = imageOptions.type || 'auto';\n\n  const {url} = context || {};\n\n  // Note: For options.image.type === `data`, we may still need to load as `image` or `imagebitmap`\n  const loadType = getLoadableImageType(imageType);\n\n  let image;\n  switch (loadType) {\n    case 'imagebitmap':\n      image = await parseToImageBitmap(arrayBuffer, options, url);\n      break;\n    case 'image':\n      image = await parseToImage(arrayBuffer, options, url);\n      break;\n    case 'data':\n      // Node.js loads imagedata directly\n      image = await parseToNodeImage(arrayBuffer, options);\n      break;\n    default:\n      assert(false);\n  }\n\n  // Browser: if options.image.type === 'data', we can now extract data from the loaded image\n  if (imageType === 'data') {\n    image = getImageData(image);\n  }\n\n  return image;\n}\n\n// Get a loadable image type from image type\nfunction getLoadableImageType(type) {\n  switch (type) {\n    case 'auto':\n    case 'data':\n      // Browser: For image data we need still need to load using an image format\n      // Node: the default image type is `data`.\n      return getDefaultImageType();\n    default:\n      // Throw an error if not supported\n      isImageTypeSupported(type);\n      return type;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}