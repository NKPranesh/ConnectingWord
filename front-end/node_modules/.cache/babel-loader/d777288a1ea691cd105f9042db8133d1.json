{"ast":null,"code":"import { createMat4, transformVector, log2 } from './math-utils';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport assert from './assert';\nconst PI = Math.PI;\nconst PI_4 = PI / 4;\nconst DEGREES_TO_RADIANS = PI / 180;\nconst RADIANS_TO_DEGREES = 180 / PI;\nconst TILE_SIZE = 512;\nconst EARTH_CIRCUMFERENCE = 40.03e6;\nexport const DEFAULT_ALTITUDE = 1.5;\nexport function zoomToScale(zoom) {\n  return Math.pow(2, zoom);\n}\nexport function scaleToZoom(scale) {\n  return log2(scale);\n}\nexport function lngLatToWorld(_ref) {\n  let [lng, lat] = _ref;\n  assert(Number.isFinite(lng));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n  const lambda2 = lng * DEGREES_TO_RADIANS;\n  const phi2 = lat * DEGREES_TO_RADIANS;\n  const x = TILE_SIZE * (lambda2 + PI) / (2 * PI);\n  const y = TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5))) / (2 * PI);\n  return [x, y];\n}\nexport function worldToLngLat(_ref2) {\n  let [x, y] = _ref2;\n  const lambda2 = x / TILE_SIZE * (2 * PI) - PI;\n  const phi2 = 2 * (Math.atan(Math.exp(y / TILE_SIZE * (2 * PI) - PI)) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\nexport function getMeterZoom(_ref3) {\n  let {\n    latitude\n  } = _ref3;\n  assert(Number.isFinite(latitude));\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\nexport function getDistanceScales(_ref4) {\n  let {\n    latitude,\n    longitude,\n    highPrecision = false\n  } = _ref4;\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude));\n  const result = {};\n  const worldSize = TILE_SIZE;\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  const unitsPerDegreeX = worldSize / 360;\n  const unitsPerDegreeY = unitsPerDegreeX / latCosine;\n  const altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n  result.unitsPerMeter = [altUnitsPerMeter, altUnitsPerMeter, altUnitsPerMeter];\n  result.metersPerUnit = [1 / altUnitsPerMeter, 1 / altUnitsPerMeter, 1 / altUnitsPerMeter];\n  result.unitsPerDegree = [unitsPerDegreeX, unitsPerDegreeY, altUnitsPerMeter];\n  result.degreesPerUnit = [1 / unitsPerDegreeX, 1 / unitsPerDegreeY, 1 / altUnitsPerMeter];\n\n  if (highPrecision) {\n    const latCosine2 = DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS) / latCosine;\n    const unitsPerDegreeY2 = unitsPerDegreeX * latCosine2 / 2;\n    const altUnitsPerDegree2 = worldSize / EARTH_CIRCUMFERENCE * latCosine2;\n    const altUnitsPerMeter2 = altUnitsPerDegree2 / unitsPerDegreeY * altUnitsPerMeter;\n    result.unitsPerDegree2 = [0, unitsPerDegreeY2, altUnitsPerDegree2];\n    result.unitsPerMeter2 = [altUnitsPerMeter2, 0, altUnitsPerMeter2];\n  }\n\n  return result;\n}\nexport function addMetersToLngLat(lngLatZ, xyz) {\n  const [longitude, latitude, z0] = lngLatZ;\n  const [x, y, z] = xyz;\n  const {\n    unitsPerMeter,\n    unitsPerMeter2\n  } = getDistanceScales({\n    longitude,\n    latitude,\n    highPrecision: true\n  });\n  const worldspace = lngLatToWorld(lngLatZ);\n  worldspace[0] += x * (unitsPerMeter[0] + unitsPerMeter2[0] * y);\n  worldspace[1] += y * (unitsPerMeter[1] + unitsPerMeter2[1] * y);\n  const newLngLat = worldToLngLat(worldspace);\n  const newZ = (z0 || 0) + (z || 0);\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\nexport function getViewMatrix(_ref5) {\n  let {\n    height,\n    pitch,\n    bearing,\n    altitude,\n    scale,\n    center = null\n  } = _ref5;\n  const vm = createMat4();\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n  scale /= height;\n  mat4.scale(vm, vm, [scale, scale, scale]);\n\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n\n  return vm;\n}\nexport function getProjectionParameters(_ref6) {\n  let {\n    width,\n    height,\n    fovy = altitudeToFovy(DEFAULT_ALTITUDE),\n    altitude,\n    pitch = 0,\n    nearZMultiplier = 1,\n    farZMultiplier = 1\n  } = _ref6;\n\n  if (altitude !== undefined) {\n    fovy = altitudeToFovy(altitude);\n  }\n\n  const halfFov = 0.5 * fovy * DEGREES_TO_RADIANS;\n  const focalDistance = fovyToAltitude(fovy);\n  const pitchRadians = pitch * DEGREES_TO_RADIANS;\n  const topHalfSurfaceDistance = Math.sin(halfFov) * focalDistance / Math.sin(Math.min(Math.max(Math.PI / 2 - pitchRadians - halfFov, 0.01), Math.PI - 0.01));\n  const farZ = Math.sin(pitchRadians) * topHalfSurfaceDistance + focalDistance;\n  return {\n    fov: 2 * halfFov,\n    aspect: width / height,\n    focalDistance,\n    near: nearZMultiplier,\n    far: farZ * farZMultiplier\n  };\n}\nexport function getProjectionMatrix(_ref7) {\n  let {\n    width,\n    height,\n    pitch,\n    altitude,\n    fovy,\n    nearZMultiplier,\n    farZMultiplier\n  } = _ref7;\n  const {\n    fov,\n    aspect,\n    near,\n    far\n  } = getProjectionParameters({\n    width,\n    height,\n    altitude,\n    fovy,\n    pitch,\n    nearZMultiplier,\n    farZMultiplier\n  });\n  const projectionMatrix = mat4.perspective([], fov, aspect, near, far);\n  return projectionMatrix;\n}\nexport function altitudeToFovy(altitude) {\n  return 2 * Math.atan(0.5 / altitude) * RADIANS_TO_DEGREES;\n}\nexport function fovyToAltitude(fovy) {\n  return 0.5 / Math.tan(0.5 * fovy * DEGREES_TO_RADIANS);\n}\nexport function worldToPixels(xyz, pixelProjectionMatrix) {\n  const [x, y, z = 0] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\nexport function pixelsToWorld(xyz, pixelUnprojectionMatrix) {\n  let targetZ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  const [x, y, z] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n\n  if (Number.isFinite(z)) {\n    const coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n  const z0 = coord0[2];\n  const z1 = coord1[2];\n  const t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([], coord0, coord1, t);\n}","map":{"version":3,"sources":["../../src/web-mercator-utils.js"],"names":["PI","Math","PI_4","DEGREES_TO_RADIANS","RADIANS_TO_DEGREES","TILE_SIZE","EARTH_CIRCUMFERENCE","DEFAULT_ALTITUDE","log2","assert","Number","lat","lambda2","lng","phi2","x","y","latitude","latCosine","scaleToZoom","highPrecision","result","worldSize","unitsPerDegreeX","unitsPerDegreeY","altUnitsPerMeter","latCosine2","unitsPerDegreeY2","altUnitsPerDegree2","altUnitsPerMeter2","unitsPerMeter2","getDistanceScales","worldspace","lngLatToWorld","unitsPerMeter","newLngLat","worldToLngLat","newZ","z0","z","center","vm","createMat4","mat4","bearing","scale","vec3","fovy","altitudeToFovy","pitch","nearZMultiplier","farZMultiplier","altitude","halfFov","focalDistance","fovyToAltitude","pitchRadians","topHalfSurfaceDistance","farZ","fov","aspect","width","near","far","getProjectionParameters","projectionMatrix","transformVector","targetZ","coord","coord0","coord1","z1","t","vec2"],"mappings":"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","sourcesContent":["// TODO - THE UTILITIES IN THIS FILE SHOULD BE IMPORTED FROM WEB-MERCATOR-VIEWPORT MODULE\n\nimport {createMat4, transformVector, log2} from './math-utils';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport assert from './assert';\n\n// CONSTANTS\nconst PI = Math.PI;\nconst PI_4 = PI / 4;\nconst DEGREES_TO_RADIANS = PI / 180;\nconst RADIANS_TO_DEGREES = 180 / PI;\nconst TILE_SIZE = 512;\n// Average circumference (40075 km equatorial, 40007 km meridional)\nconst EARTH_CIRCUMFERENCE = 40.03e6;\n\n// Mapbox default altitude\nexport const DEFAULT_ALTITUDE = 1.5;\n\n/** Util functions **/\nexport function zoomToScale(zoom) {\n  return Math.pow(2, zoom);\n}\n\nexport function scaleToZoom(scale) {\n  return log2(scale);\n}\n\n/**\n * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n * Performs the nonlinear part of the web mercator projection.\n * Remaining projection is done with 4x4 matrices which also handles\n * perspective.\n *\n * @param lngLat - [lng, lat] coordinates\n *   Specifies a point on the sphere to project onto the map.\n * @return [x,y] coordinates.\n */\nexport function lngLatToWorld([lng, lat]) {\n  assert(Number.isFinite(lng));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n\n  const lambda2 = lng * DEGREES_TO_RADIANS;\n  const phi2 = lat * DEGREES_TO_RADIANS;\n  const x = (TILE_SIZE * (lambda2 + PI)) / (2 * PI);\n  const y = (TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5)))) / (2 * PI);\n  return [x, y];\n}\n\n// Unproject world point [x,y] on map onto {lat, lon} on sphere\nexport function worldToLngLat([x, y]) {\n  const lambda2 = (x / TILE_SIZE) * (2 * PI) - PI;\n  const phi2 = 2 * (Math.atan(Math.exp((y / TILE_SIZE) * (2 * PI) - PI)) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\n\n// Returns the zoom level that gives a 1 meter pixel at a certain latitude\n// 1 = C*cos(y)/2^z/TILE_SIZE = C*cos(y)/2^(z+9)\nexport function getMeterZoom({latitude}) {\n  assert(Number.isFinite(latitude));\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\n\n/**\n * Calculate distance scales in meters around current lat/lon, both for\n * degrees and pixels.\n * In mercator projection mode, the distance scales vary significantly\n * with latitude.\n */\n\nexport function getDistanceScales({latitude, longitude, highPrecision = false}) {\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude));\n\n  const result = {};\n  const worldSize = TILE_SIZE;\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n\n  /**\n   * Number of pixels occupied by one degree longitude around current lat/lon:\n     unitsPerDegreeX = d(lngLatToWorld([lng, lat])[0])/d(lng)\n       = scale * TILE_SIZE * DEGREES_TO_RADIANS / (2 * PI)\n     unitsPerDegreeY = d(lngLatToWorld([lng, lat])[1])/d(lat)\n       = -scale * TILE_SIZE * DEGREES_TO_RADIANS / cos(lat * DEGREES_TO_RADIANS)  / (2 * PI)\n   */\n  const unitsPerDegreeX = worldSize / 360;\n  const unitsPerDegreeY = unitsPerDegreeX / latCosine;\n\n  /**\n   * Number of pixels occupied by one meter around current lat/lon:\n   */\n  const altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n\n  /**\n   * LngLat: longitude -> east and latitude -> north (bottom left)\n   * UTM meter offset: x -> east and y -> north (bottom left)\n   * World space: x -> east and y -> south (top left)\n   *\n   * Y needs to be flipped when converting delta degree/meter to delta pixels\n   */\n  result.unitsPerMeter = [altUnitsPerMeter, altUnitsPerMeter, altUnitsPerMeter];\n  result.metersPerUnit = [1 / altUnitsPerMeter, 1 / altUnitsPerMeter, 1 / altUnitsPerMeter];\n\n  result.unitsPerDegree = [unitsPerDegreeX, unitsPerDegreeY, altUnitsPerMeter];\n  result.degreesPerUnit = [1 / unitsPerDegreeX, 1 / unitsPerDegreeY, 1 / altUnitsPerMeter];\n\n  /**\n   * Taylor series 2nd order for 1/latCosine\n     f'(a) * (x - a)\n       = d(1/cos(lat * DEGREES_TO_RADIANS))/d(lat) * dLat\n       = DEGREES_TO_RADIANS * tan(lat * DEGREES_TO_RADIANS) / cos(lat * DEGREES_TO_RADIANS) * dLat\n   */\n  if (highPrecision) {\n    const latCosine2 = (DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS)) / latCosine;\n    const unitsPerDegreeY2 = (unitsPerDegreeX * latCosine2) / 2;\n    const altUnitsPerDegree2 = (worldSize / EARTH_CIRCUMFERENCE) * latCosine2;\n    const altUnitsPerMeter2 = (altUnitsPerDegree2 / unitsPerDegreeY) * altUnitsPerMeter;\n\n    result.unitsPerDegree2 = [0, unitsPerDegreeY2, altUnitsPerDegree2];\n    result.unitsPerMeter2 = [altUnitsPerMeter2, 0, altUnitsPerMeter2];\n  }\n\n  // Main results, used for converting meters to latlng deltas and scaling offsets\n  return result;\n}\n\n/**\n * Offset a lng/lat position by meterOffset (northing, easting)\n */\nexport function addMetersToLngLat(lngLatZ, xyz) {\n  const [longitude, latitude, z0] = lngLatZ;\n  const [x, y, z] = xyz;\n\n  const {unitsPerMeter, unitsPerMeter2} = getDistanceScales({\n    longitude,\n    latitude,\n    highPrecision: true\n  });\n\n  const worldspace = lngLatToWorld(lngLatZ);\n  worldspace[0] += x * (unitsPerMeter[0] + unitsPerMeter2[0] * y);\n  worldspace[1] += y * (unitsPerMeter[1] + unitsPerMeter2[1] * y);\n\n  // @ts-ignore\n  const newLngLat = worldToLngLat(worldspace);\n  const newZ = (z0 || 0) + (z || 0);\n\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\n\n// ATTRIBUTION:\n// view and projection matrix creation is intentionally kept compatible with\n// mapbox-gl's implementation to ensure that seamless interoperation\n// with mapbox and react-map-gl. See: https://github.com/mapbox/mapbox-gl-js\n\nexport function getViewMatrix({\n  // Viewport props\n  height,\n  pitch,\n  bearing,\n  altitude,\n  // Pre-calculated parameters\n  scale,\n  center = null\n}) {\n  // VIEW MATRIX: PROJECTS MERCATOR WORLD COORDINATES\n  // Note that mercator world coordinates typically need to be flipped\n  //\n  // Note: As usual, matrix operation orders should be read in reverse\n  // since vectors will be multiplied from the right during transformation\n  const vm = createMat4();\n\n  // Move camera to altitude (along the pitch & bearing direction)\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n\n  // Rotate by bearing, and then by pitch (which tilts the view)\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n\n  scale /= height;\n  mat4.scale(vm, vm, [scale, scale, scale]);\n\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n\n  return vm;\n}\n\n// PROJECTION MATRIX PARAMETERS\n// Variable fov (in radians)\nexport function getProjectionParameters({\n  width,\n  height,\n  fovy = altitudeToFovy(DEFAULT_ALTITUDE),\n  altitude,\n  pitch = 0,\n  nearZMultiplier = 1,\n  farZMultiplier = 1\n}) {\n  // For back-compatibility allow field of view to be\n  // derived from altitude\n  if (altitude !== undefined) {\n    fovy = altitudeToFovy(altitude);\n  }\n  const halfFov = 0.5 * fovy * DEGREES_TO_RADIANS;\n  const focalDistance = fovyToAltitude(fovy);\n\n  // Find the distance from the center point to the center top\n  // in focal distance units using law of sines.\n  const pitchRadians = pitch * DEGREES_TO_RADIANS;\n  const topHalfSurfaceDistance =\n    (Math.sin(halfFov) * focalDistance) /\n    Math.sin(Math.min(Math.max(Math.PI / 2 - pitchRadians - halfFov, 0.01), Math.PI - 0.01));\n\n  // Calculate z value of the farthest fragment that should be rendered.\n  const farZ = Math.sin(pitchRadians) * topHalfSurfaceDistance + focalDistance;\n\n  return {\n    fov: 2 * halfFov,\n    aspect: width / height,\n    focalDistance,\n    near: nearZMultiplier,\n    far: farZ * farZMultiplier\n  };\n}\n\n// PROJECTION MATRIX: PROJECTS FROM CAMERA (VIEW) SPACE TO CLIPSPACE\n// To match mapbox's z buffer:\n// <= 0.28 - nearZMultiplier: 0.1, farZmultiplier: 1\n// >= 0.29 - nearZMultiplier: 1 / height, farZMultiplier: 1.01\nexport function getProjectionMatrix({\n  width,\n  height,\n  pitch,\n  altitude,\n  fovy,\n  nearZMultiplier,\n  farZMultiplier\n}) {\n  const {fov, aspect, near, far} = getProjectionParameters({\n    width,\n    height,\n    altitude,\n    fovy,\n    pitch,\n    nearZMultiplier,\n    farZMultiplier\n  });\n\n  const projectionMatrix = mat4.perspective(\n    [],\n    fov, // fov in radians\n    aspect, // aspect ratio\n    near, // near plane\n    far // far plane\n  );\n\n  return projectionMatrix;\n}\n\n// Utility function to calculate the field of view such that\n// the focal distance is equal to the ground distance. This\n// is how mapbox's z fov is calculated\nexport function altitudeToFovy(altitude) {\n  return 2 * Math.atan(0.5 / altitude) * RADIANS_TO_DEGREES;\n}\n\nexport function fovyToAltitude(fovy) {\n  return 0.5 / Math.tan(0.5 * fovy * DEGREES_TO_RADIANS);\n}\n\n// Project flat coordinates to pixels on screen.\nexport function worldToPixels(xyz, pixelProjectionMatrix) {\n  const [x, y, z = 0] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\n\n// Unproject pixels on screen to flat coordinates.\nexport function pixelsToWorld(xyz, pixelUnprojectionMatrix, targetZ = 0) {\n  const [x, y, z] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n\n  if (Number.isFinite(z)) {\n    // Has depth component\n    const coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  // since we don't know the correct projected z value for the point,\n  // unproject two points to get a line and then find the point on that line with z=0\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n\n  const z0 = coord0[2];\n  const z1 = coord1[2];\n\n  const t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([], coord0, coord1, t);\n}\n"]},"metadata":{},"sourceType":"module"}