{"ast":null,"code":"import { assert } from '../utils/assert';\nimport { formatValue } from '../utils/format-value';\nexport function getDebugTableForUniforms(_ref) {\n  let {\n    header = 'Uniforms',\n    program,\n    uniforms,\n    undefinedOnly = false\n  } = _ref;\n  assert(program);\n  const SHADER_MODULE_UNIFORM_REGEXP = '.*_.*';\n  const PROJECT_MODULE_UNIFORM_REGEXP = '.*Matrix';\n  const uniformLocations = program._uniformSetters;\n  const table = {};\n  const uniformNames = Object.keys(uniformLocations).sort();\n  let count = 0;\n\n  for (const uniformName of uniformNames) {\n    if (!uniformName.match(SHADER_MODULE_UNIFORM_REGEXP) && !uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)) {\n      if (addUniformToTable({\n        table,\n        header,\n        uniforms,\n        uniformName,\n        undefinedOnly\n      })) {\n        count++;\n      }\n    }\n  }\n\n  for (const uniformName of uniformNames) {\n    if (uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)) {\n      if (addUniformToTable({\n        table,\n        header,\n        uniforms,\n        uniformName,\n        undefinedOnly\n      })) {\n        count++;\n      }\n    }\n  }\n\n  for (const uniformName of uniformNames) {\n    if (!table[uniformName]) {\n      if (addUniformToTable({\n        table,\n        header,\n        uniforms,\n        uniformName,\n        undefinedOnly\n      })) {\n        count++;\n      }\n    }\n  }\n\n  let unusedCount = 0;\n  const unusedTable = {};\n\n  if (!undefinedOnly) {\n    for (const uniformName in uniforms) {\n      const uniform = uniforms[uniformName];\n\n      if (!table[uniformName]) {\n        unusedCount++;\n        unusedTable[uniformName] = {\n          Type: `NOT USED: ${uniform}`,\n          [header]: formatValue(uniform)\n        };\n      }\n    }\n  }\n\n  return {\n    table,\n    count,\n    unusedTable,\n    unusedCount\n  };\n}\n\nfunction addUniformToTable(_ref2) {\n  let {\n    table,\n    header,\n    uniforms,\n    uniformName,\n    undefinedOnly\n  } = _ref2;\n  const value = uniforms[uniformName];\n  const isDefined = isUniformDefined(value);\n\n  if (!undefinedOnly || !isDefined) {\n    table[uniformName] = {\n      [header]: isDefined ? formatValue(value) : 'N/A',\n      'Uniform Type': isDefined ? value : 'NOT PROVIDED'\n    };\n    return true;\n  }\n\n  return false;\n}\n\nfunction isUniformDefined(value) {\n  return value !== undefined && value !== null;\n}","map":{"version":3,"sources":["../../../src/debug/debug-uniforms.js"],"names":["header","undefinedOnly","assert","SHADER_MODULE_UNIFORM_REGEXP","PROJECT_MODULE_UNIFORM_REGEXP","uniformLocations","program","table","uniformNames","Object","count","uniformName","addUniformToTable","unusedCount","unusedTable","uniform","uniforms","Type","formatValue","value","isDefined","isUniformDefined"],"mappings":"AAAA,SAAA,MAAA,QAAA,iBAAA;AACA,SAAA,WAAA,QAAA,uBAAA;AAIA,OAAO,SAAA,wBAAA,OAKJ;AAAA,MALsC;AACvCA,IAAAA,MAAM,GADiC,UAAA;AAAA,IAAA,OAAA;AAAA,IAAA,QAAA;AAIvCC,IAAAA,aAAa,GAAG;AAJuB,GAKtC;AACDC,EAAAA,MAAM,CAANA,OAAM,CAANA;AAEA,QAAMC,4BAA4B,GAAlC,OAAA;AACA,QAAMC,6BAA6B,GAAnC,UAAA;AAEA,QAAMC,gBAAgB,GAAGC,OAAO,CAAhC,eAAA;AACA,QAAMC,KAAK,GAAX,EAAA;AAGA,QAAMC,YAAY,GAAGC,MAAM,CAANA,IAAAA,CAAAA,gBAAAA,EAArB,IAAqBA,EAArB;AAEA,MAAIC,KAAK,GAAT,CAAA;;AAGA,OAAK,MAAL,WAAA,IAAA,YAAA,EAAwC;AACtC,QACE,CAACC,WAAW,CAAXA,KAAAA,CAAD,4BAACA,CAAD,IACA,CAACA,WAAW,CAAXA,KAAAA,CAFH,6BAEGA,CAFH,EAGE;AACA,UAAIC,iBAAiB,CAAC;AAAA,QAAA,KAAA;AAAA,QAAA,MAAA;AAAA,QAAA,QAAA;AAAA,QAAA,WAAA;AAAuCX,QAAAA;AAAvC,OAAD,CAArB,EAA8E;AAC5ES,QAAAA,KAAK;AACN;AACF;AACF;;AAGD,OAAK,MAAL,WAAA,IAAA,YAAA,EAAwC;AACtC,QAAIC,WAAW,CAAXA,KAAAA,CAAJ,6BAAIA,CAAJ,EAAsD;AACpD,UAAIC,iBAAiB,CAAC;AAAA,QAAA,KAAA;AAAA,QAAA,MAAA;AAAA,QAAA,QAAA;AAAA,QAAA,WAAA;AAAuCX,QAAAA;AAAvC,OAAD,CAArB,EAA8E;AAC5ES,QAAAA,KAAK;AACN;AACF;AACF;;AAED,OAAK,MAAL,WAAA,IAAA,YAAA,EAAwC;AACtC,QAAI,CAACH,KAAK,CAAV,WAAU,CAAV,EAAyB;AACvB,UAAIK,iBAAiB,CAAC;AAAA,QAAA,KAAA;AAAA,QAAA,MAAA;AAAA,QAAA,QAAA;AAAA,QAAA,WAAA;AAAuCX,QAAAA;AAAvC,OAAD,CAArB,EAA8E;AAC5ES,QAAAA,KAAK;AACN;AACF;AACF;;AAGD,MAAIG,WAAW,GAAf,CAAA;AACA,QAAMC,WAAW,GAAjB,EAAA;;AACA,MAAI,CAAJ,aAAA,EAAoB;AAClB,SAAK,MAAL,WAAA,IAAA,QAAA,EAAoC;AAClC,YAAMC,OAAO,GAAGC,QAAQ,CAAxB,WAAwB,CAAxB;;AACA,UAAI,CAACT,KAAK,CAAV,WAAU,CAAV,EAAyB;AACvBM,QAAAA,WAAW;AACXC,QAAAA,WAAW,CAAXA,WAAW,CAAXA,GAA2B;AACzBG,UAAAA,IAAI,EAAG,aAAYF,OADM,EAAA;AAEzB,WAAA,MAAA,GAAUG,WAAW,CAAA,OAAA;AAFI,SAA3BJ;AAID;AACF;AACF;;AAED,SAAO;AAAA,IAAA,KAAA;AAAA,IAAA,KAAA;AAAA,IAAA,WAAA;AAA4BD,IAAAA;AAA5B,GAAP;AACD;;AAGD,SAAA,iBAAA,QAAkF;AAAA,MAAvD;AAAA,IAAA,KAAA;AAAA,IAAA,MAAA;AAAA,IAAA,QAAA;AAAA,IAAA,WAAA;AAAuCZ,IAAAA;AAAvC,GAAuD;AAChF,QAAMkB,KAAK,GAAGH,QAAQ,CAAtB,WAAsB,CAAtB;AACA,QAAMI,SAAS,GAAGC,gBAAgB,CAAlC,KAAkC,CAAlC;;AACA,MAAI,CAAA,aAAA,IAAkB,CAAtB,SAAA,EAAkC;AAChCd,IAAAA,KAAK,CAALA,WAAK,CAALA,GAAqB;AAEnB,OAAA,MAAA,GAAUa,SAAS,GAAGF,WAAW,CAAd,KAAc,CAAd,GAFA,KAAA;AAGnB,sBAAgBE,SAAS,GAAA,KAAA,GAAW;AAHjB,KAArBb;AAKA,WAAA,IAAA;AACD;;AACD,SAAA,KAAA;AACD;;AAED,SAAA,gBAAA,CAAA,KAAA,EAAiC;AAC/B,SAAOY,KAAK,KAALA,SAAAA,IAAuBA,KAAK,KAAnC,IAAA;AACD","sourcesContent":["import {assert} from '../utils/assert';\nimport {formatValue} from '../utils/format-value';\n\n// Prepares a table suitable for console.table\n/* eslint-disable max-statements, complexity */\nexport function getDebugTableForUniforms({\n  header = 'Uniforms',\n  program,\n  uniforms,\n  undefinedOnly = false\n}) {\n  assert(program);\n\n  const SHADER_MODULE_UNIFORM_REGEXP = '.*_.*';\n  const PROJECT_MODULE_UNIFORM_REGEXP = '.*Matrix'; // TODO - Use explicit list\n\n  const uniformLocations = program._uniformSetters;\n  const table = {}; // {[header]: {}};\n\n  // Add program's provided uniforms (in alphabetical order)\n  const uniformNames = Object.keys(uniformLocations).sort();\n\n  let count = 0;\n\n  // First add non-underscored uniforms (assumed not coming from shader modules)\n  for (const uniformName of uniformNames) {\n    if (\n      !uniformName.match(SHADER_MODULE_UNIFORM_REGEXP) &&\n      !uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)\n    ) {\n      if (addUniformToTable({table, header, uniforms, uniformName, undefinedOnly})) {\n        count++;\n      }\n    }\n  }\n\n  // add underscored uniforms (assumed from shader modules)\n  for (const uniformName of uniformNames) {\n    if (uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)) {\n      if (addUniformToTable({table, header, uniforms, uniformName, undefinedOnly})) {\n        count++;\n      }\n    }\n  }\n\n  for (const uniformName of uniformNames) {\n    if (!table[uniformName]) {\n      if (addUniformToTable({table, header, uniforms, uniformName, undefinedOnly})) {\n        count++;\n      }\n    }\n  }\n\n  // Create a table of unused uniforms\n  let unusedCount = 0;\n  const unusedTable = {};\n  if (!undefinedOnly) {\n    for (const uniformName in uniforms) {\n      const uniform = uniforms[uniformName];\n      if (!table[uniformName]) {\n        unusedCount++;\n        unusedTable[uniformName] = {\n          Type: `NOT USED: ${uniform}`,\n          [header]: formatValue(uniform)\n        };\n      }\n    }\n  }\n\n  return {table, count, unusedTable, unusedCount};\n}\n\n// Helper\nfunction addUniformToTable({table, header, uniforms, uniformName, undefinedOnly}) {\n  const value = uniforms[uniformName];\n  const isDefined = isUniformDefined(value);\n  if (!undefinedOnly || !isDefined) {\n    table[uniformName] = {\n      // Add program's unprovided uniforms\n      [header]: isDefined ? formatValue(value) : 'N/A',\n      'Uniform Type': isDefined ? value : 'NOT PROVIDED'\n    };\n    return true;\n  }\n  return false;\n}\n\nfunction isUniformDefined(value) {\n  return value !== undefined && value !== null;\n}\n"]},"metadata":{},"sourceType":"module"}