{"ast":null,"code":"import { compareArrayBuffers } from '@loaders.gl/loader-utils';\nimport { normalizeLoader } from '../loader-utils/normalize-loader';\nimport { getResourceUrlAndType } from '../utils/resource-utils';\nimport { getRegisteredLoaders } from './register-loaders';\nimport { isBlob } from '../../javascript-utils/is-type';\nconst EXT_PATTERN = /\\.([^.]+)$/;\nexport async function selectLoader(data) {\n  let loaders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let options = arguments.length > 2 ? arguments[2] : undefined;\n  let context = arguments.length > 3 ? arguments[3] : undefined;\n\n  if (!validHTTPResponse(data)) {\n    return null;\n  }\n\n  let loader = selectLoaderSync(data, loaders, { ...options,\n    nothrow: true\n  }, context);\n\n  if (loader) {\n    return loader;\n  }\n\n  if (isBlob(data)) {\n    data = await data.slice(0, 10).arrayBuffer();\n    loader = selectLoaderSync(data, loaders, options, context);\n  }\n\n  if (!loader && !(options !== null && options !== void 0 && options.nothrow)) {\n    throw new Error(getNoValidLoaderMessage(data));\n  }\n\n  return loader;\n}\nexport function selectLoaderSync(data) {\n  let loaders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let options = arguments.length > 2 ? arguments[2] : undefined;\n  let context = arguments.length > 3 ? arguments[3] : undefined;\n\n  if (!validHTTPResponse(data)) {\n    return null;\n  }\n\n  if (loaders && !Array.isArray(loaders)) {\n    return normalizeLoader(loaders);\n  }\n\n  let candidateLoaders = [];\n\n  if (loaders) {\n    candidateLoaders = candidateLoaders.concat(loaders);\n  }\n\n  if (!(options !== null && options !== void 0 && options.ignoreRegisteredLoaders)) {\n    candidateLoaders.push(...getRegisteredLoaders());\n  }\n\n  normalizeLoaders(candidateLoaders);\n  const loader = selectLoaderInternal(data, candidateLoaders, options, context);\n\n  if (!loader && !(options !== null && options !== void 0 && options.nothrow)) {\n    throw new Error(getNoValidLoaderMessage(data));\n  }\n\n  return loader;\n}\n\nfunction selectLoaderInternal(data, loaders, options, context) {\n  const {\n    url,\n    type\n  } = getResourceUrlAndType(data);\n  const testUrl = url || (context === null || context === void 0 ? void 0 : context.url);\n  let loader = null;\n\n  if (options !== null && options !== void 0 && options.mimeType) {\n    loader = findLoaderByMIMEType(loaders, options === null || options === void 0 ? void 0 : options.mimeType);\n  }\n\n  loader = loader || findLoaderByUrl(loaders, testUrl);\n  loader = loader || findLoaderByMIMEType(loaders, type);\n  loader = loader || findLoaderByInitialBytes(loaders, data);\n  loader = loader || findLoaderByMIMEType(loaders, options === null || options === void 0 ? void 0 : options.fallbackMimeType);\n  return loader;\n}\n\nfunction validHTTPResponse(data) {\n  if (data instanceof Response) {\n    if (data.status === 204) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getNoValidLoaderMessage(data) {\n  const {\n    url,\n    type\n  } = getResourceUrlAndType(data);\n  let message = 'No valid loader found';\n\n  if (data) {\n    message += \" data: \\\"\".concat(getFirstCharacters(data), \"\\\", contentType: \\\"\").concat(type, \"\\\"\");\n  }\n\n  if (url) {\n    message += \" url: \".concat(url);\n  }\n\n  return message;\n}\n\nfunction normalizeLoaders(loaders) {\n  for (const loader of loaders) {\n    normalizeLoader(loader);\n  }\n}\n\nfunction findLoaderByUrl(loaders, url) {\n  const match = url && EXT_PATTERN.exec(url);\n  const extension = match && match[1];\n  return extension ? findLoaderByExtension(loaders, extension) : null;\n}\n\nfunction findLoaderByExtension(loaders, extension) {\n  extension = extension.toLowerCase();\n\n  for (const loader of loaders) {\n    for (const loaderExtension of loader.extensions) {\n      if (loaderExtension.toLowerCase() === extension) {\n        return loader;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction findLoaderByMIMEType(loaders, mimeType) {\n  for (const loader of loaders) {\n    if (loader.mimeTypes && loader.mimeTypes.includes(mimeType)) {\n      return loader;\n    }\n\n    if (mimeType === \"application/x.\".concat(loader.id)) {\n      return loader;\n    }\n  }\n\n  return null;\n}\n\nfunction findLoaderByInitialBytes(loaders, data) {\n  if (!data) {\n    return null;\n  }\n\n  for (const loader of loaders) {\n    if (typeof data === 'string') {\n      if (testDataAgainstText(data, loader)) {\n        return loader;\n      }\n    } else if (ArrayBuffer.isView(data)) {\n      if (testDataAgainstBinary(data.buffer, data.byteOffset, loader)) {\n        return loader;\n      }\n    } else if (data instanceof ArrayBuffer) {\n      const byteOffset = 0;\n\n      if (testDataAgainstBinary(data, byteOffset, loader)) {\n        return loader;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction testDataAgainstText(data, loader) {\n  if (loader.testText) {\n    return loader.testText(data);\n  }\n\n  const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];\n  return tests.some(test => data.startsWith(test));\n}\n\nfunction testDataAgainstBinary(data, byteOffset, loader) {\n  const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];\n  return tests.some(test => testBinary(data, byteOffset, loader, test));\n}\n\nfunction testBinary(data, byteOffset, loader, test) {\n  if (test instanceof ArrayBuffer) {\n    return compareArrayBuffers(test, data, test.byteLength);\n  }\n\n  switch (typeof test) {\n    case 'function':\n      return test(data, loader);\n\n    case 'string':\n      const magic = getMagicString(data, byteOffset, test.length);\n      return test === magic;\n\n    default:\n      return false;\n  }\n}\n\nfunction getFirstCharacters(data) {\n  let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n\n  if (typeof data === 'string') {\n    return data.slice(0, length);\n  } else if (ArrayBuffer.isView(data)) {\n    return getMagicString(data.buffer, data.byteOffset, length);\n  } else if (data instanceof ArrayBuffer) {\n    const byteOffset = 0;\n    return getMagicString(data, byteOffset, length);\n  }\n\n  return '';\n}\n\nfunction getMagicString(arrayBuffer, byteOffset, length) {\n  if (arrayBuffer.byteLength < byteOffset + length) {\n    return '';\n  }\n\n  const dataView = new DataView(arrayBuffer);\n  let magic = '';\n\n  for (let i = 0; i < length; i++) {\n    magic += String.fromCharCode(dataView.getUint8(byteOffset + i));\n  }\n\n  return magic;\n}","map":{"version":3,"sources":["../../../../src/lib/api/select-loader.ts"],"names":["EXT_PATTERN","loaders","validHTTPResponse","loader","selectLoaderSync","nothrow","isBlob","data","options","getNoValidLoaderMessage","Array","normalizeLoader","candidateLoaders","getRegisteredLoaders","normalizeLoaders","selectLoaderInternal","type","getResourceUrlAndType","testUrl","url","context","findLoaderByMIMEType","findLoaderByUrl","findLoaderByInitialBytes","message","getFirstCharacters","match","extension","findLoaderByExtension","loaderExtension","mimeType","testDataAgainstText","ArrayBuffer","testDataAgainstBinary","byteOffset","tests","test","testBinary","compareArrayBuffers","magic","getMagicString","length","arrayBuffer","dataView","i","String"],"mappings":"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","sourcesContent":["import type {LoaderContext, LoaderOptions, Loader} from '@loaders.gl/loader-utils';\nimport {compareArrayBuffers} from '@loaders.gl/loader-utils';\nimport {normalizeLoader} from '../loader-utils/normalize-loader';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\nimport {getRegisteredLoaders} from './register-loaders';\nimport {isBlob} from '../../javascript-utils/is-type';\n\nconst EXT_PATTERN = /\\.([^.]+)$/;\n\n// TODO - Need a variant that peeks at streams for parseInBatches\n// TODO - Detect multiple matching loaders? Use heuristics to grade matches?\n// TODO - Allow apps to pass context to disambiguate between multiple matches (e.g. multiple .json formats)?\n\n/**\n * Find a loader that matches file extension and/or initial file content\n * Search the loaders array argument for a loader that matches url extension or initial data\n * Returns: a normalized loader\n * @param data data to assist\n * @param loaders\n * @param options\n * @param context used internally, applications should not provide this parameter\n */\nexport async function selectLoader(\n  data: Response | Blob | ArrayBuffer | string,\n  loaders: Loader[] | Loader = [],\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<Loader | null> {\n  if (!validHTTPResponse(data)) {\n    return null;\n  }\n\n  // First make a sync attempt, disabling exceptions\n  let loader = selectLoaderSync(data, loaders, {...options, nothrow: true}, context);\n  if (loader) {\n    return loader;\n  }\n\n  // For Blobs and Files, try to asynchronously read a small initial slice and test again with that\n  // to see if we can detect by initial content\n  if (isBlob(data)) {\n    data = await (data as Blob).slice(0, 10).arrayBuffer();\n    loader = selectLoaderSync(data, loaders, options, context);\n  }\n\n  // no loader available\n  if (!loader && !options?.nothrow) {\n    throw new Error(getNoValidLoaderMessage(data));\n  }\n\n  return loader;\n}\n\n/**\n * Find a loader that matches file extension and/or initial file content\n * Search the loaders array argument for a loader that matches url extension or initial data\n * Returns: a normalized loader\n * @param data data to assist\n * @param loaders\n * @param options\n * @param context used internally, applications should not provide this parameter\n */\nexport function selectLoaderSync(\n  data: Response | Blob | ArrayBuffer | string,\n  loaders: Loader[] | Loader = [],\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Loader | null {\n  if (!validHTTPResponse(data)) {\n    return null;\n  }\n\n  // eslint-disable-next-line complexity\n  // if only a single loader was provided (not as array), force its use\n  // TODO - Should this behavior be kept and documented?\n  if (loaders && !Array.isArray(loaders)) {\n    // TODO - remove support for legacy loaders\n    return normalizeLoader(loaders);\n  }\n\n  // Build list of candidate loaders that will be searched in order for a match\n  let candidateLoaders: Loader[] = [];\n  // First search supplied loaders\n  if (loaders) {\n    candidateLoaders = candidateLoaders.concat(loaders);\n  }\n  // Then fall back to registered loaders\n  if (!options?.ignoreRegisteredLoaders) {\n    candidateLoaders.push(...getRegisteredLoaders());\n  }\n\n  // TODO - remove support for legacy loaders\n  normalizeLoaders(candidateLoaders);\n\n  const loader = selectLoaderInternal(data, candidateLoaders, options, context);\n\n  // no loader available\n  if (!loader && !options?.nothrow) {\n    throw new Error(getNoValidLoaderMessage(data));\n  }\n\n  return loader;\n}\n\n/** Implements loaders selection logic */\nfunction selectLoaderInternal(\n  data: Response | Blob | ArrayBuffer | string,\n  loaders: Loader[],\n  options?: LoaderOptions,\n  context?: LoaderContext\n) {\n  const {url, type} = getResourceUrlAndType(data);\n\n  const testUrl = url || context?.url;\n\n  let loader: Loader | null = null;\n\n  // if options.mimeType is supplied, it takes precedence\n  if (options?.mimeType) {\n    loader = findLoaderByMIMEType(loaders, options?.mimeType);\n  }\n  // Look up loader by url\n  loader = loader || findLoaderByUrl(loaders, testUrl);\n  // Look up loader by mime type\n  loader = loader || findLoaderByMIMEType(loaders, type);\n  // Look for loader via initial bytes (Note: not always accessible (e.g. Response, stream, async iterator)\n  loader = loader || findLoaderByInitialBytes(loaders, data);\n  // Look up loader by fallback mime type\n  loader = loader || findLoaderByMIMEType(loaders, options?.fallbackMimeType);\n\n  return loader;\n}\n\n/** Check HTTP Response */\nfunction validHTTPResponse(data: any): boolean {\n  // HANDLE HTTP status\n  if (data instanceof Response) {\n    // 204 - NO CONTENT. This handles cases where e.g. a tile server responds with 204 for a missing tile\n    if (data.status === 204) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getNoValidLoaderMessage(data): string {\n  const {url, type} = getResourceUrlAndType(data);\n\n  let message = 'No valid loader found';\n  if (data) {\n    message += ` data: \"${getFirstCharacters(data)}\", contentType: \"${type}\"`;\n  }\n  if (url) {\n    message += ` url: ${url}`;\n  }\n  return message;\n}\n\nfunction normalizeLoaders(loaders: Loader[]): void {\n  for (const loader of loaders) {\n    normalizeLoader(loader);\n  }\n}\n\n// TODO - Would be nice to support http://example.com/file.glb?parameter=1\n// E.g: x = new URL('http://example.com/file.glb?load=1'; x.pathname\nfunction findLoaderByUrl(loaders: Loader[], url?: string): Loader | null {\n  // Get extension\n  const match = url && EXT_PATTERN.exec(url);\n  const extension = match && match[1];\n  return extension ? findLoaderByExtension(loaders, extension) : null;\n}\n\nfunction findLoaderByExtension(loaders: Loader[], extension: string): Loader | null {\n  extension = extension.toLowerCase();\n\n  for (const loader of loaders) {\n    for (const loaderExtension of loader.extensions) {\n      if (loaderExtension.toLowerCase() === extension) {\n        return loader;\n      }\n    }\n  }\n  return null;\n}\n\nfunction findLoaderByMIMEType(loaders, mimeType) {\n  for (const loader of loaders) {\n    if (loader.mimeTypes && loader.mimeTypes.includes(mimeType)) {\n      return loader;\n    }\n\n    // Support referring to loaders using the \"unregistered tree\"\n    // https://en.wikipedia.org/wiki/Media_type#Unregistered_tree\n    if (mimeType === `application/x.${loader.id}`) {\n      return loader;\n    }\n  }\n  return null;\n}\n\nfunction findLoaderByInitialBytes(loaders, data) {\n  if (!data) {\n    return null;\n  }\n\n  for (const loader of loaders) {\n    if (typeof data === 'string') {\n      if (testDataAgainstText(data, loader)) {\n        return loader;\n      }\n    } else if (ArrayBuffer.isView(data)) {\n      // Typed Arrays can have offsets into underlying buffer\n      if (testDataAgainstBinary(data.buffer, data.byteOffset, loader)) {\n        return loader;\n      }\n    } else if (data instanceof ArrayBuffer) {\n      const byteOffset = 0;\n      if (testDataAgainstBinary(data, byteOffset, loader)) {\n        return loader;\n      }\n    }\n    // TODO Handle streaming case (requires creating a new AsyncIterator)\n  }\n  return null;\n}\n\nfunction testDataAgainstText(data, loader) {\n  if (loader.testText) {\n    return loader.testText(data);\n  }\n\n  const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];\n  return tests.some((test) => data.startsWith(test));\n}\n\nfunction testDataAgainstBinary(data, byteOffset, loader) {\n  const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];\n  return tests.some((test) => testBinary(data, byteOffset, loader, test));\n}\n\nfunction testBinary(data, byteOffset, loader, test) {\n  if (test instanceof ArrayBuffer) {\n    return compareArrayBuffers(test, data, test.byteLength);\n  }\n  switch (typeof test) {\n    case 'function':\n      return test(data, loader);\n\n    case 'string':\n      // Magic bytes check: If `test` is a string, check if binary data starts with that strings\n      const magic = getMagicString(data, byteOffset, test.length);\n      return test === magic;\n\n    default:\n      return false;\n  }\n}\n\nfunction getFirstCharacters(data, length = 5) {\n  if (typeof data === 'string') {\n    return data.slice(0, length);\n  } else if (ArrayBuffer.isView(data)) {\n    // Typed Arrays can have offsets into underlying buffer\n    return getMagicString(data.buffer, data.byteOffset, length);\n  } else if (data instanceof ArrayBuffer) {\n    const byteOffset = 0;\n    return getMagicString(data, byteOffset, length);\n  }\n  return '';\n}\n\nfunction getMagicString(arrayBuffer, byteOffset, length) {\n  if (arrayBuffer.byteLength < byteOffset + length) {\n    return '';\n  }\n  const dataView = new DataView(arrayBuffer);\n  let magic = '';\n  for (let i = 0; i < length; i++) {\n    magic += String.fromCharCode(dataView.getUint8(byteOffset + i));\n  }\n  return magic;\n}\n"]},"metadata":{},"sourceType":"module"}